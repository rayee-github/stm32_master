
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007898  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b5c  08007b5c  00024b0c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b64  08007b64  00024b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b64  08007b64  00017b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b68  08007b68  00017b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004b0c  20000000  08007b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20004b0c  0800c678  00024b0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004efc  0800c678  00024efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024b0c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024b3c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018744  00000000  00000000  00024b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a08  00000000  00000000  0003d2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0003fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f63  00000000  00000000  00041070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000317e9  00000000  00000000  00041fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001986f  00000000  00000000  000737bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012aaaa  00000000  00000000  0008d02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005478  00000000  00000000  001b7ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001bcf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20004b0c 	.word	0x20004b0c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08007a3c 	.word	0x08007a3c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20004b10 	.word	0x20004b10
 80001f8:	08007a3c 	.word	0x08007a3c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 fca6 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f83a 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 fc1c 	bl	8000d40 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f970 	bl	80007ec <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f9ae 	bl	800086c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 fa6c 	bl	80009ec <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000514:	f000 fac0 	bl	8000a98 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8000518:	f000 fb14 	bl	8000b44 <MX_SPI1_Init>
  MX_SPI2_Init();
 800051c:	f000 fb50 	bl	8000bc0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000520:	f000 fb88 	bl	8000c34 <MX_SPI3_Init>
  MX_UART4_Init();
 8000524:	f000 fbc0 	bl	8000ca8 <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 8000528:	f000 f874 	bl	8000614 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 800052c:	f000 f9de 	bl	80008ec <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 8000530:	f000 fd2c 	bl	8000f8c <mipi_config>
  HAL_UART_Transmit(&huart4, "master start", 12, 1000);
 8000534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000538:	220c      	movs	r2, #12
 800053a:	490b      	ldr	r1, [pc, #44]	; (8000568 <main+0x70>)
 800053c:	480b      	ldr	r0, [pc, #44]	; (800056c <main+0x74>)
 800053e:	f006 fba9 	bl	8006c94 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	__HAL_SPI_ENABLE(&hspi1);
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <main+0x78>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0x78>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000550:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi3);
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <main+0x7c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <main+0x7c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000560:	601a      	str	r2, [r3, #0]
			delay_us(10);
			//HAL_Delay(1);
		}
		HAL_UART_Transmit(&huart4, "off ", 4, 1000);
		HAL_Delay(1000);*/
		SPI2PC();
 8000562:	f000 ff1f 	bl	80013a4 <SPI2PC>
 8000566:	e7fc      	b.n	8000562 <main+0x6a>
 8000568:	08007a54 	.word	0x08007a54
 800056c:	20004e60 	.word	0x20004e60
 8000570:	20004d34 	.word	0x20004d34
 8000574:	20004dfc 	.word	0x20004dfc

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	; 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	; 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f007 fa2c 	bl	80079e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800059a:	2000      	movs	r0, #0
 800059c:	f003 fef8 	bl	8004390 <HAL_PWREx_ControlVoltageScaling>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005a6:	f000 fffb 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b8:	2303      	movs	r3, #3
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005c0:	231e      	movs	r3, #30
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 ff8f 	bl	80044f8 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005e0:	f000 ffde 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2303      	movs	r3, #3
 80005ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fb95 	bl	8004d2c <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 ffca 	bl	80015a0 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3758      	adds	r7, #88	; 0x58
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0ae      	sub	sp, #184	; 0xb8
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800061a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000626:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800062a:	2224      	movs	r2, #36	; 0x24
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 f9d8 	bl	80079e4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000634:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	226c      	movs	r2, #108	; 0x6c
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f007 f9c9 	bl	80079e4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000652:	4b64      	ldr	r3, [pc, #400]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000654:	4a64      	ldr	r2, [pc, #400]	; (80007e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8000656:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000658:	4b62      	ldr	r3, [pc, #392]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 800065e:	4b61      	ldr	r3, [pc, #388]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000660:	2202      	movs	r2, #2
 8000662:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000664:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 800066a:	2332      	movs	r3, #50	; 0x32
 800066c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000670:	2301      	movs	r3, #1
 8000672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000676:	2301      	movs	r3, #1
 8000678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800067c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000680:	4619      	mov	r1, r3
 8000682:	4858      	ldr	r0, [pc, #352]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000684:	f001 fdb0 	bl	80021e8 <HAL_DSI_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800068e:	f000 ff87 	bl	80015a0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80006c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006cc:	4619      	mov	r1, r3
 80006ce:	4845      	ldr	r0, [pc, #276]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 80006d0:	f002 f9fd 	bl	8002ace <HAL_DSI_ConfigHostTimeouts>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80006da:	f000 ff61 	bl	80015a0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 80006de:	2313      	movs	r3, #19
 80006e0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 80006e2:	230f      	movs	r3, #15
 80006e4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 80006e6:	2309      	movs	r3, #9
 80006e8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 80006ea:	230a      	movs	r3, #10
 80006ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80006fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006fe:	4619      	mov	r1, r3
 8000700:	4838      	ldr	r0, [pc, #224]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000702:	f002 f97a 	bl	80029fa <HAL_DSI_ConfigPhyTimer>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 800070c:	f000 ff48 	bl	80015a0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000710:	f242 7110 	movw	r1, #10000	; 0x2710
 8000714:	4833      	ldr	r0, [pc, #204]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000716:	f002 fb96 	bl	8002e46 <HAL_DSI_SetLowPowerRXFilter>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000720:	f000 ff3e 	bl	80015a0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	482f      	ldr	r0, [pc, #188]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000728:	f001 fe7a 	bl	8002420 <HAL_DSI_ConfigErrorMonitor>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000732:	f000 ff35 	bl	80015a0 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 800073a:	2305      	movs	r3, #5
 800073c:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000742:	2301      	movs	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 8000746:	2350      	movs	r3, #80	; 0x50
 8000748:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 800075e:	23fc      	movs	r3, #252	; 0xfc
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 8000762:	23fc      	movs	r3, #252	; 0xfc
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 8000766:	f44f 7351 	mov.w	r3, #836	; 0x344
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 8000778:	2350      	movs	r3, #80	; 0x50
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800077c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000782:	231c      	movs	r3, #28
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000786:	2350      	movs	r3, #80	; 0x50
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800079a:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 80007a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a6:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 80007a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ac:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 80007b8:	f001 ff17 	bl	80025ea <HAL_DSI_ConfigVideoMode>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 80007c2:	f000 feed 	bl	80015a0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 80007ca:	f001 fee6 	bl	800259a <HAL_DSI_SetGenericVCID>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 80007d4:	f000 fee4 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
	LCD_PowerOn();
 80007d8:	f000 feca 	bl	8001570 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	37b8      	adds	r7, #184	; 0xb8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20004b28 	.word	0x20004b28
 80007e8:	40016c00 	.word	0x40016c00

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_I2C1_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_I2C1_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_I2C1_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <MX_I2C1_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_I2C1_Init+0x74>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <MX_I2C1_Init+0x74>)
 8000828:	f002 fce4 	bl	80031f4 <HAL_I2C_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000832:	f000 feb5 	bl	80015a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <MX_I2C1_Init+0x74>)
 800083a:	f002 fd76 	bl	800332a <HAL_I2CEx_ConfigAnalogFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000844:	f000 feac 	bl	80015a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_I2C1_Init+0x74>)
 800084c:	f002 fdb8 	bl	80033c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fea3 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20004b44 	.word	0x20004b44
 8000864:	40005400 	.word	0x40005400
 8000868:	307075b1 	.word	0x307075b1

0800086c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_I2C2_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <MX_I2C2_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_I2C2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008a8:	f002 fca4 	bl	80031f4 <HAL_I2C_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f000 fe75 	bl	80015a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008ba:	f002 fd36 	bl	800332a <HAL_I2CEx_ConfigAnalogFilter>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 fe6c 	bl	80015a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008cc:	f002 fd78 	bl	80033c0 <HAL_I2CEx_ConfigDigitalFilter>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f000 fe63 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20004b98 	.word	0x20004b98
 80008e4:	40005800 	.word	0x40005800
 80008e8:	307075b1 	.word	0x307075b1

080008ec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2234      	movs	r2, #52	; 0x34
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 f873 	bl	80079e4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000900:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <MX_LTDC_Init+0xf8>)
 8000902:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000904:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000906:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800090a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 800090c:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000912:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 8000920:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000922:	22fb      	movs	r2, #251	; 0xfb
 8000924:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000928:	2207      	movs	r2, #7
 800092a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800092e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000932:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000936:	220f      	movs	r2, #15
 8000938:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800093c:	f240 2247 	movw	r2, #583	; 0x247
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000944:	225f      	movs	r2, #95	; 0x5f
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800094a:	f240 3243 	movw	r2, #835	; 0x343
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000952:	2261      	movs	r2, #97	; 0x61
 8000954:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000958:	22ff      	movs	r2, #255	; 0xff
 800095a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000960:	22ff      	movs	r2, #255	; 0xff
 8000962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000968:	22ff      	movs	r2, #255	; 0xff
 800096a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800096e:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000970:	f002 fd72 	bl	8003458 <HAL_LTDC_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800097a:	f000 fe11 	bl	80015a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 8000982:	2350      	movs	r3, #80	; 0x50
 8000984:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 800098a:	2350      	movs	r3, #80	; 0x50
 800098c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800098e:	2301      	movs	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000992:	23ff      	movs	r3, #255	; 0xff
 8000994:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009a0:	2305      	movs	r3, #5
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_LTDC_Init+0xfc>)
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 80009a8:	2350      	movs	r3, #80	; 0x50
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 80009ac:	2350      	movs	r3, #80	; 0x50
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 80009b0:	23ff      	movs	r3, #255	; 0xff
 80009b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 80009b6:	23ff      	movs	r3, #255	; 0xff
 80009b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 80009bc:	23ff      	movs	r3, #255	; 0xff
 80009be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_LTDC_Init+0xf4>)
 80009ca:	f002 fe15 	bl	80035f8 <HAL_LTDC_ConfigLayer>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 80009d4:	f000 fde4 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3738      	adds	r7, #56	; 0x38
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20004bec 	.word	0x20004bec
 80009e4:	40016800 	.word	0x40016800
 80009e8:	20000000 	.word	0x20000000

080009ec <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a00:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a02:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <MX_OCTOSPI1_Init+0xa8>)
 8000a04:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a18:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a1c:	221a      	movs	r2, #26
 8000a1e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 16;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a54:	f002 ffa6 	bl	80039a4 <HAL_OSPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 8000a5e:	f000 fd9f 	bl	80015a0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000a6e:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a7a:	f003 f84d 	bl	8003b18 <HAL_OSPIM_Config>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 8000a84:	f000 fd8c 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20004c94 	.word	0x20004c94
 8000a94:	a0001000 	.word	0xa0001000

08000a98 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <MX_OCTOSPI2_Init+0xa4>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 1;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000af6:	2208      	movs	r2, #8
 8000af8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000afa:	480f      	ldr	r0, [pc, #60]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000afc:	f002 ff52 	bl	80039a4 <HAL_OSPI_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_OCTOSPI2_Init+0x72>
  {
    Error_Handler();
 8000b06:	f000 fd4b 	bl	80015a0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_OCTOSPI2_Init+0xa8>)
 8000b14:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000b20:	f002 fffa 	bl	8003b18 <HAL_OSPIM_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_OCTOSPI2_Init+0x96>
  {
    Error_Handler();
 8000b2a:	f000 fd39 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20004ce4 	.word	0x20004ce4
 8000b3c:	a0001400 	.word	0xa0001400
 8000b40:	00010002 	.word	0x00010002

08000b44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <MX_SPI1_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b72:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b7a:	2220      	movs	r2, #32
 8000b7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000ba4:	f005 f8f8 	bl	8005d98 <HAL_SPI_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f000 fcf7 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20004d34 	.word	0x20004d34
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bc6:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <MX_SPI2_Init+0x70>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bdc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c06:	2207      	movs	r2, #7
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c18:	f005 f8be 	bl	8005d98 <HAL_SPI_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000c22:	f000 fcbd 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20004d98 	.word	0x20004d98
 8000c30:	40003800 	.word	0x40003800

08000c34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <MX_SPI3_Init+0x70>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c64:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c8c:	f005 f884 	bl	8005d98 <HAL_SPI_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8000c96:	f000 fc83 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20004dfc 	.word	0x20004dfc
 8000ca4:	40003c00 	.word	0x40003c00

08000ca8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cae:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <MX_UART4_Init+0x94>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_UART4_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_UART4_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_UART4_Init+0x90>)
 8000cf2:	f005 ff7f 	bl	8006bf4 <HAL_UART_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000cfc:	f000 fc50 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_UART4_Init+0x90>)
 8000d04:	f006 fda4 	bl	8007850 <HAL_UARTEx_SetTxFifoThreshold>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000d0e:	f000 fc47 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4808      	ldr	r0, [pc, #32]	; (8000d38 <MX_UART4_Init+0x90>)
 8000d16:	f006 fdd9 	bl	80078cc <HAL_UARTEx_SetRxFifoThreshold>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d20:	f000 fc3e 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_UART4_Init+0x90>)
 8000d26:	f006 fd5a 	bl	80077de <HAL_UARTEx_DisableFifoMode>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d30:	f000 fc36 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20004e60 	.word	0x20004e60
 8000d3c:	40004c00 	.word	0x40004c00

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b87      	ldr	r3, [pc, #540]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a86      	ldr	r2, [pc, #536]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b84      	ldr	r3, [pc, #528]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	623b      	str	r3, [r7, #32]
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	4b81      	ldr	r3, [pc, #516]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a80      	ldr	r2, [pc, #512]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b7e      	ldr	r3, [pc, #504]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b7b      	ldr	r3, [pc, #492]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a7a      	ldr	r2, [pc, #488]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b78      	ldr	r3, [pc, #480]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a74      	ldr	r2, [pc, #464]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b72      	ldr	r3, [pc, #456]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db6:	4b6f      	ldr	r3, [pc, #444]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a6e      	ldr	r2, [pc, #440]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000dbc:	f043 0320 	orr.w	r3, r3, #32
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b6c      	ldr	r3, [pc, #432]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dce:	4b69      	ldr	r3, [pc, #420]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a68      	ldr	r2, [pc, #416]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b66      	ldr	r3, [pc, #408]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000de6:	f003 fb77 	bl	80044d8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a61      	ldr	r2, [pc, #388]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b5f      	ldr	r3, [pc, #380]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e02:	4b5c      	ldr	r3, [pc, #368]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a5b      	ldr	r2, [pc, #364]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000e08:	f043 0310 	orr.w	r3, r3, #16
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b59      	ldr	r3, [pc, #356]	; (8000f74 <MX_GPIO_Init+0x234>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0310 	and.w	r3, r3, #16
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	21a0      	movs	r1, #160	; 0xa0
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f002 f9cf 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2c:	4852      	ldr	r0, [pc, #328]	; (8000f78 <MX_GPIO_Init+0x238>)
 8000e2e:	f002 f9c9 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e38:	4850      	ldr	r0, [pc, #320]	; (8000f7c <MX_GPIO_Init+0x23c>)
 8000e3a:	f002 f9c3 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e44:	484e      	ldr	r0, [pc, #312]	; (8000f80 <MX_GPIO_Init+0x240>)
 8000e46:	f002 f9bd 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e50:	4849      	ldr	r0, [pc, #292]	; (8000f78 <MX_GPIO_Init+0x238>)
 8000e52:	f002 f9b7 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4846      	ldr	r0, [pc, #280]	; (8000f84 <MX_GPIO_Init+0x244>)
 8000e6c:	f002 f818 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8000e70:	2318      	movs	r3, #24
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f002 f80b 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e8a:	23a0      	movs	r3, #160	; 0xa0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f001 fffc 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4833      	ldr	r0, [pc, #204]	; (8000f88 <MX_GPIO_Init+0x248>)
 8000ebc:	f001 fff0 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4827      	ldr	r0, [pc, #156]	; (8000f78 <MX_GPIO_Init+0x238>)
 8000eda:	f001 ffe1 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ede:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_GPIO_Init+0x23c>)
 8000ef8:	f001 ffd2 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000efc:	2301      	movs	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481b      	ldr	r0, [pc, #108]	; (8000f7c <MX_GPIO_Init+0x23c>)
 8000f10:	f001 ffc6 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4814      	ldr	r0, [pc, #80]	; (8000f80 <MX_GPIO_Init+0x240>)
 8000f2e:	f001 ffb7 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_GPIO_Init+0x238>)
 8000f48:	f001 ffaa 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_GPIO_Init+0x238>)
 8000f66:	f001 ff9b 	bl	8002ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3738      	adds	r7, #56	; 0x38
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48001000 	.word	0x48001000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	48001400 	.word	0x48001400
 8000f84:	48000c00 	.word	0x48000c00
 8000f88:	48000800 	.word	0x48000800

08000f8c <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config() {
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b0af      	sub	sp, #188	; 0xbc
 8000f90:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK) {
 8000f92:	48c4      	ldr	r0, [pc, #784]	; (80012a4 <mipi_config+0x318>)
 8000f94:	f001 fe61 	bl	8002c5a <HAL_DSI_Start>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <mipi_config+0x16>
		Error_Handler();
 8000f9e:	f000 faff 	bl	80015a0 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8000fa2:	23c3      	movs	r3, #195	; 0xc3
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	23f0      	movs	r3, #240	; 0xf0
 8000fa8:	2215      	movs	r2, #21
 8000faa:	2100      	movs	r1, #0
 8000fac:	48bd      	ldr	r0, [pc, #756]	; (80012a4 <mipi_config+0x318>)
 8000fae:	f001 fe90 	bl	8002cd2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8000fb2:	2396      	movs	r3, #150	; 0x96
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	23f0      	movs	r3, #240	; 0xf0
 8000fb8:	2215      	movs	r2, #21
 8000fba:	2100      	movs	r1, #0
 8000fbc:	48b9      	ldr	r0, [pc, #740]	; (80012a4 <mipi_config+0x318>)
 8000fbe:	f001 fe88 	bl	8002cd2 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = { 0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33 };
 8000fc2:	4ab9      	ldr	r2, [pc, #740]	; (80012a8 <mipi_config+0x31c>)
 8000fc4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fcc:	6018      	str	r0, [r3, #0]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	8019      	strh	r1, [r3, #0]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	0c0a      	lsrs	r2, r1, #16
 8000fd6:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8000fd8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	23e7      	movs	r3, #231	; 0xe7
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	2239      	movs	r2, #57	; 0x39
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	48ae      	ldr	r0, [pc, #696]	; (80012a4 <mipi_config+0x318>)
 8000fea:	f001 fe94 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = { 0xC0, 0x68, 0xE0 };
 8000fee:	4aaf      	ldr	r2, [pc, #700]	; (80012ac <mipi_config+0x320>)
 8000ff0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	8019      	strh	r1, [r3, #0]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	0c12      	lsrs	r2, r2, #16
 8000ffe:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8001000:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	23a4      	movs	r3, #164	; 0xa4
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2304      	movs	r3, #4
 800100c:	2239      	movs	r2, #57	; 0x39
 800100e:	2100      	movs	r1, #0
 8001010:	48a4      	ldr	r0, [pc, #656]	; (80012a4 <mipi_config+0x318>)
 8001012:	f001 fe80 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = { 0x42, 0x05, 0x24, 0x03 };
 8001016:	4ba6      	ldr	r3, [pc, #664]	; (80012b0 <mipi_config+0x324>)
 8001018:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 800101c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	23c3      	movs	r3, #195	; 0xc3
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2305      	movs	r3, #5
 8001028:	2239      	movs	r2, #57	; 0x39
 800102a:	2100      	movs	r1, #0
 800102c:	489d      	ldr	r0, [pc, #628]	; (80012a4 <mipi_config+0x318>)
 800102e:	f001 fe72 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = { 0x42, 0x05, 0x24, 0x03 };
 8001032:	4b9f      	ldr	r3, [pc, #636]	; (80012b0 <mipi_config+0x324>)
 8001034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 8001038:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	23c4      	movs	r3, #196	; 0xc4
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2305      	movs	r3, #5
 8001044:	2239      	movs	r2, #57	; 0x39
 8001046:	2100      	movs	r1, #0
 8001048:	4896      	ldr	r0, [pc, #600]	; (80012a4 <mipi_config+0x318>)
 800104a:	f001 fe64 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 800104e:	4a99      	ldr	r2, [pc, #612]	; (80012b4 <mipi_config+0x328>)
 8001050:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001054:	ca07      	ldmia	r2, {r0, r1, r2}
 8001056:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 800105a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	23e5      	movs	r3, #229	; 0xe5
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	230d      	movs	r3, #13
 8001066:	2239      	movs	r2, #57	; 0x39
 8001068:	2100      	movs	r1, #0
 800106a:	488e      	ldr	r0, [pc, #568]	; (80012a4 <mipi_config+0x318>)
 800106c:	f001 fe53 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001070:	4a90      	ldr	r2, [pc, #576]	; (80012b4 <mipi_config+0x328>)
 8001072:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001076:	ca07      	ldmia	r2, {r0, r1, r2}
 8001078:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 800107c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	23e6      	movs	r3, #230	; 0xe6
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	230d      	movs	r3, #13
 8001088:	2239      	movs	r2, #57	; 0x39
 800108a:	2100      	movs	r1, #0
 800108c:	4885      	ldr	r0, [pc, #532]	; (80012a4 <mipi_config+0x318>)
 800108e:	f001 fe42 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = { 0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22 };
 8001092:	4a89      	ldr	r2, [pc, #548]	; (80012b8 <mipi_config+0x32c>)
 8001094:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001098:	e892 0003 	ldmia.w	r2, {r0, r1}
 800109c:	6018      	str	r0, [r3, #0]
 800109e:	3304      	adds	r3, #4
 80010a0:	8019      	strh	r1, [r3, #0]
 80010a2:	3302      	adds	r3, #2
 80010a4:	0c0a      	lsrs	r2, r1, #16
 80010a6:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 80010a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	23ec      	movs	r3, #236	; 0xec
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2308      	movs	r3, #8
 80010b4:	2239      	movs	r2, #57	; 0x39
 80010b6:	2100      	movs	r1, #0
 80010b8:	487a      	ldr	r0, [pc, #488]	; (80012a4 <mipi_config+0x318>)
 80010ba:	f001 fe2c 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80010be:	4b7f      	ldr	r3, [pc, #508]	; (80012bc <mipi_config+0x330>)
 80010c0:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 80010c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	23c1      	movs	r3, #193	; 0xc1
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2305      	movs	r3, #5
 80010ce:	2239      	movs	r2, #57	; 0x39
 80010d0:	2100      	movs	r1, #0
 80010d2:	4874      	ldr	r0, [pc, #464]	; (80012a4 <mipi_config+0x318>)
 80010d4:	f001 fe1f 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80010d8:	4b78      	ldr	r3, [pc, #480]	; (80012bc <mipi_config+0x330>)
 80010da:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 80010dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	23c2      	movs	r3, #194	; 0xc2
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2305      	movs	r3, #5
 80010e8:	2239      	movs	r2, #57	; 0x39
 80010ea:	2100      	movs	r1, #0
 80010ec:	486d      	ldr	r0, [pc, #436]	; (80012a4 <mipi_config+0x318>)
 80010ee:	f001 fe12 	bl	8002d16 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 80010f2:	2300      	movs	r3, #0
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2336      	movs	r3, #54	; 0x36
 80010f8:	2215      	movs	r2, #21
 80010fa:	2100      	movs	r1, #0
 80010fc:	4869      	ldr	r0, [pc, #420]	; (80012a4 <mipi_config+0x318>)
 80010fe:	f001 fde8 	bl	8002cd2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 8001102:	2307      	movs	r3, #7
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	233a      	movs	r3, #58	; 0x3a
 8001108:	2215      	movs	r2, #21
 800110a:	2100      	movs	r1, #0
 800110c:	4865      	ldr	r0, [pc, #404]	; (80012a4 <mipi_config+0x318>)
 800110e:	f001 fde0 	bl	8002cd2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 8001112:	23be      	movs	r3, #190	; 0xbe
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	23c5      	movs	r3, #197	; 0xc5
 8001118:	2215      	movs	r2, #21
 800111a:	2100      	movs	r1, #0
 800111c:	4861      	ldr	r0, [pc, #388]	; (80012a4 <mipi_config+0x318>)
 800111e:	f001 fdd8 	bl	8002cd2 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = { 0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55,
 8001122:	4b67      	ldr	r3, [pc, #412]	; (80012c0 <mipi_config+0x334>)
 8001124:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112a:	c407      	stmia	r4!, {r0, r1, r2}
 800112c:	8023      	strh	r3, [r4, #0]
			0x3D, 0x19, 0x18, 0x24, 0x27 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 800112e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	23e0      	movs	r3, #224	; 0xe0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	230f      	movs	r3, #15
 800113a:	2239      	movs	r2, #57	; 0x39
 800113c:	2100      	movs	r1, #0
 800113e:	4859      	ldr	r0, [pc, #356]	; (80012a4 <mipi_config+0x318>)
 8001140:	f001 fde9 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = { 0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56,
 8001144:	4b5f      	ldr	r3, [pc, #380]	; (80012c4 <mipi_config+0x338>)
 8001146:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800114a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114c:	c407      	stmia	r4!, {r0, r1, r2}
 800114e:	8023      	strh	r3, [r4, #0]
			0x3E, 0x1A, 0x18, 0x24, 0x28 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 8001150:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	23e1      	movs	r3, #225	; 0xe1
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	230f      	movs	r3, #15
 800115c:	2239      	movs	r2, #57	; 0x39
 800115e:	2100      	movs	r1, #0
 8001160:	4850      	ldr	r0, [pc, #320]	; (80012a4 <mipi_config+0x318>)
 8001162:	f001 fdd8 	bl	8002d16 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 8001166:	2310      	movs	r3, #16
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	23b2      	movs	r3, #178	; 0xb2
 800116c:	2215      	movs	r2, #21
 800116e:	2100      	movs	r1, #0
 8001170:	484c      	ldr	r0, [pc, #304]	; (80012a4 <mipi_config+0x318>)
 8001172:	f001 fdae 	bl	8002cd2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 8001176:	2301      	movs	r3, #1
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	23b3      	movs	r3, #179	; 0xb3
 800117c:	2215      	movs	r2, #21
 800117e:	2100      	movs	r1, #0
 8001180:	4848      	ldr	r0, [pc, #288]	; (80012a4 <mipi_config+0x318>)
 8001182:	f001 fda6 	bl	8002cd2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 8001186:	2301      	movs	r3, #1
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	23b4      	movs	r3, #180	; 0xb4
 800118c:	2215      	movs	r2, #21
 800118e:	2100      	movs	r1, #0
 8001190:	4844      	ldr	r0, [pc, #272]	; (80012a4 <mipi_config+0x318>)
 8001192:	f001 fd9e 	bl	8002cd2 <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = { 0x27, 0x09 };
 8001196:	f640 1327 	movw	r3, #2343	; 0x927
 800119a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 800119e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	23b6      	movs	r3, #182	; 0xb6
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2303      	movs	r3, #3
 80011aa:	2239      	movs	r2, #57	; 0x39
 80011ac:	2100      	movs	r1, #0
 80011ae:	483d      	ldr	r0, [pc, #244]	; (80012a4 <mipi_config+0x318>)
 80011b0:	f001 fdb1 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = { 0x00, 0x54, 0x00, 0x54 };
 80011b4:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 80011ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	23b5      	movs	r3, #181	; 0xb5
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2305      	movs	r3, #5
 80011c6:	2239      	movs	r2, #57	; 0x39
 80011c8:	2100      	movs	r1, #0
 80011ca:	4836      	ldr	r0, [pc, #216]	; (80012a4 <mipi_config+0x318>)
 80011cc:	f001 fda3 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80011d0:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <mipi_config+0x33c>)
 80011d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d8:	c303      	stmia	r3!, {r0, r1}
 80011da:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 80011dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	23a5      	movs	r3, #165	; 0xa5
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	230a      	movs	r3, #10
 80011e8:	2239      	movs	r2, #57	; 0x39
 80011ea:	2100      	movs	r1, #0
 80011ec:	482d      	ldr	r0, [pc, #180]	; (80012a4 <mipi_config+0x318>)
 80011ee:	f001 fd92 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80011f2:	4a35      	ldr	r2, [pc, #212]	; (80012c8 <mipi_config+0x33c>)
 80011f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011fa:	c303      	stmia	r3!, {r0, r1}
 80011fc:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 80011fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	23a6      	movs	r3, #166	; 0xa6
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	230a      	movs	r3, #10
 800120a:	2239      	movs	r2, #57	; 0x39
 800120c:	2100      	movs	r1, #0
 800120e:	4825      	ldr	r0, [pc, #148]	; (80012a4 <mipi_config+0x318>)
 8001210:	f001 fd81 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = { 0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00 };
 8001214:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <mipi_config+0x340>)
 8001216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121e:	6018      	str	r0, [r3, #0]
 8001220:	3304      	adds	r3, #4
 8001222:	8019      	strh	r1, [r3, #0]
 8001224:	3302      	adds	r3, #2
 8001226:	0c0a      	lsrs	r2, r1, #16
 8001228:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 800122a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	23ba      	movs	r3, #186	; 0xba
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2308      	movs	r3, #8
 8001236:	2239      	movs	r2, #57	; 0x39
 8001238:	2100      	movs	r1, #0
 800123a:	481a      	ldr	r0, [pc, #104]	; (80012a4 <mipi_config+0x318>)
 800123c:	f001 fd6b 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001240:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <mipi_config+0x344>)
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	23bb      	movs	r3, #187	; 0xbb
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2309      	movs	r3, #9
 800125a:	2239      	movs	r2, #57	; 0x39
 800125c:	2100      	movs	r1, #0
 800125e:	4811      	ldr	r0, [pc, #68]	; (80012a4 <mipi_config+0x318>)
 8001260:	f001 fd59 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <mipi_config+0x344>)
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	23bc      	movs	r3, #188	; 0xbc
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2309      	movs	r3, #9
 800127e:	2239      	movs	r2, #57	; 0x39
 8001280:	2100      	movs	r1, #0
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <mipi_config+0x318>)
 8001284:	f001 fd47 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = { 0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF,
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <mipi_config+0x348>)
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001290:	c303      	stmia	r3!, {r0, r1}
 8001292:	801a      	strh	r2, [r3, #0]
 8001294:	3302      	adds	r3, #2
 8001296:	0c12      	lsrs	r2, r2, #16
 8001298:	701a      	strb	r2, [r3, #0]
			0xFF, 0xF9 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	e01a      	b.n	80012d8 <mipi_config+0x34c>
 80012a2:	bf00      	nop
 80012a4:	20004b28 	.word	0x20004b28
 80012a8:	08007a64 	.word	0x08007a64
 80012ac:	08007a6c 	.word	0x08007a6c
 80012b0:	03240542 	.word	0x03240542
 80012b4:	08007a70 	.word	0x08007a70
 80012b8:	08007a7c 	.word	0x08007a7c
 80012bc:	180f0588 	.word	0x180f0588
 80012c0:	08007a84 	.word	0x08007a84
 80012c4:	08007a94 	.word	0x08007a94
 80012c8:	08007aa4 	.word	0x08007aa4
 80012cc:	08007ab0 	.word	0x08007ab0
 80012d0:	08007ab8 	.word	0x08007ab8
 80012d4:	08007ac0 	.word	0x08007ac0
 80012d8:	23bd      	movs	r3, #189	; 0xbd
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	230c      	movs	r3, #12
 80012de:	2239      	movs	r2, #57	; 0x39
 80012e0:	2100      	movs	r1, #0
 80012e2:	482d      	ldr	r0, [pc, #180]	; (8001398 <mipi_config+0x40c>)
 80012e4:	f001 fd17 	bl	8002d16 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 80012e8:	23c3      	movs	r3, #195	; 0xc3
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	23ed      	movs	r3, #237	; 0xed
 80012ee:	2215      	movs	r2, #21
 80012f0:	2100      	movs	r1, #0
 80012f2:	4829      	ldr	r0, [pc, #164]	; (8001398 <mipi_config+0x40c>)
 80012f4:	f001 fced 	bl	8002cd2 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = { 0x40, 0x0F, 0x00 };
 80012f8:	4a28      	ldr	r2, [pc, #160]	; (800139c <mipi_config+0x410>)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	4611      	mov	r1, r2
 8001302:	8019      	strh	r1, [r3, #0]
 8001304:	3302      	adds	r3, #2
 8001306:	0c12      	lsrs	r2, r2, #16
 8001308:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	23e4      	movs	r3, #228	; 0xe4
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2304      	movs	r3, #4
 8001316:	2239      	movs	r2, #57	; 0x39
 8001318:	2100      	movs	r1, #0
 800131a:	481f      	ldr	r0, [pc, #124]	; (8001398 <mipi_config+0x40c>)
 800131c:	f001 fcfb 	bl	8002d16 <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = { 0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25 };
 8001320:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <mipi_config+0x414>)
 8001322:	463b      	mov	r3, r7
 8001324:	ca07      	ldmia	r2, {r0, r1, r2}
 8001326:	c303      	stmia	r3!, {r0, r1}
 8001328:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 800132a:	463b      	mov	r3, r7
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	23cc      	movs	r3, #204	; 0xcc
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	230a      	movs	r3, #10
 8001334:	2239      	movs	r2, #57	; 0x39
 8001336:	2100      	movs	r1, #0
 8001338:	4817      	ldr	r0, [pc, #92]	; (8001398 <mipi_config+0x40c>)
 800133a:	f001 fcec 	bl	8002d16 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800133e:	2300      	movs	r3, #0
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2335      	movs	r3, #53	; 0x35
 8001344:	2215      	movs	r2, #21
 8001346:	2100      	movs	r1, #0
 8001348:	4813      	ldr	r0, [pc, #76]	; (8001398 <mipi_config+0x40c>)
 800134a:	f001 fcc2 	bl	8002cd2 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 fdf8 	bl	8001f44 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001354:	2300      	movs	r3, #0
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2311      	movs	r3, #17
 800135a:	2205      	movs	r2, #5
 800135c:	2100      	movs	r1, #0
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <mipi_config+0x40c>)
 8001360:	f001 fcb7 	bl	8002cd2 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001364:	2078      	movs	r0, #120	; 0x78
 8001366:	f000 fded 	bl	8001f44 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 800136a:	2300      	movs	r3, #0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2329      	movs	r3, #41	; 0x29
 8001370:	2205      	movs	r2, #5
 8001372:	2100      	movs	r1, #0
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <mipi_config+0x40c>)
 8001376:	f001 fcac 	bl	8002cd2 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800137a:	2078      	movs	r0, #120	; 0x78
 800137c:	f000 fde2 	bl	8001f44 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2335      	movs	r3, #53	; 0x35
 8001386:	2215      	movs	r2, #21
 8001388:	2100      	movs	r1, #0
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <mipi_config+0x40c>)
 800138c:	f001 fca1 	bl	8002cd2 <HAL_DSI_ShortWrite>
}
 8001390:	bf00      	nop
 8001392:	37b4      	adds	r7, #180	; 0xb4
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	20004b28 	.word	0x20004b28
 800139c:	08007acc 	.word	0x08007acc
 80013a0:	08007ad0 	.word	0x08007ad0

080013a4 <SPI2PC>:
	if (HAL_OSPI_Transmit(&hospi1, send_data_Page_Program, 20) == HAL_OK) {
		HAL_UART_Transmit(&huart4, "write OK", 8, 1000);
	}*/
}

void SPI2PC() {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	uint8_t buf[8192] = { 0 };
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	2200      	movs	r2, #0
 80013b4:	f843 2c08 	str.w	r2, [r3, #-8]
 80013b8:	3b04      	subs	r3, #4
 80013ba:	f641 72fc 	movw	r2, #8188	; 0x1ffc
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f006 fb0f 	bl	80079e4 <memset>
	__HAL_SPI_ENABLE(&hspi3);
 80013c6:	4b58      	ldr	r3, [pc, #352]	; (8001528 <SPI2PC+0x184>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b56      	ldr	r3, [pc, #344]	; (8001528 <SPI2PC+0x184>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013d4:	601a      	str	r2, [r3, #0]
	/*if (HAL_SPI_Receive(&hspi3, (uint8_t*) buf, 4, 1000) == HAL_OK)
	{
		HAL_UART_Transmit(&huart4, &buf, 4, 1000);
	}
	return 0;*/
	if (HAL_SPI_Receive(&hspi3, (uint8_t*) buf, 6402, 1000) == HAL_OK) {
 80013d6:	f107 0108 	add.w	r1, r7, #8
 80013da:	3908      	subs	r1, #8
 80013dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e0:	f641 1202 	movw	r2, #6402	; 0x1902
 80013e4:	4850      	ldr	r0, [pc, #320]	; (8001528 <SPI2PC+0x184>)
 80013e6:	f004 feef 	bl	80061c8 <HAL_SPI_Receive>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f040 8094 	bne.w	800151a <SPI2PC+0x176>
		int image_count = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80013f8:	f102 0204 	add.w	r2, r2, #4
 80013fc:	6013      	str	r3, [r2, #0]
		for (int i = 2; i < 6402;  i += 4)
 80013fe:	2302      	movs	r3, #2
 8001400:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e07a      	b.n	80014fe <SPI2PC+0x15a>
		{
			image_80x80_rgb888[image_count] = buf[i+1];
 8001408:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	f107 0208 	add.w	r2, r7, #8
 8001414:	4413      	add	r3, r2
 8001416:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 800141a:	4a44      	ldr	r2, [pc, #272]	; (800152c <SPI2PC+0x188>)
 800141c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001420:	f103 0304 	add.w	r3, r3, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	460a      	mov	r2, r1
 800142a:	701a      	strb	r2, [r3, #0]
			image_count = image_count + 2;
 800142c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001430:	f103 0304 	add.w	r3, r3, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3302      	adds	r3, #2
 8001438:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800143c:	f102 0204 	add.w	r2, r2, #4
 8001440:	6013      	str	r3, [r2, #0]
			image_80x80_rgb888[image_count] = buf[i];
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	461a      	mov	r2, r3
 8001448:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	3b08      	subs	r3, #8
 8001452:	7819      	ldrb	r1, [r3, #0]
 8001454:	4a35      	ldr	r2, [pc, #212]	; (800152c <SPI2PC+0x188>)
 8001456:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800145a:	f103 0304 	add.w	r3, r3, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4413      	add	r3, r2
 8001462:	460a      	mov	r2, r1
 8001464:	701a      	strb	r2, [r3, #0]
			image_count = image_count + 4;
 8001466:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800146a:	f103 0304 	add.w	r3, r3, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3304      	adds	r3, #4
 8001472:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001476:	f102 0204 	add.w	r2, r2, #4
 800147a:	6013      	str	r3, [r2, #0]
			image_80x80_rgb888[image_count] = buf[i+2];
 800147c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3302      	adds	r3, #2
 8001484:	f107 0208 	add.w	r2, r7, #8
 8001488:	4413      	add	r3, r2
 800148a:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 800148e:	4a27      	ldr	r2, [pc, #156]	; (800152c <SPI2PC+0x188>)
 8001490:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001494:	f103 0304 	add.w	r3, r3, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	460a      	mov	r2, r1
 800149e:	701a      	strb	r2, [r3, #0]
			image_count = image_count + 4;
 80014a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014a4:	f103 0304 	add.w	r3, r3, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3304      	adds	r3, #4
 80014ac:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014b0:	f102 0204 	add.w	r2, r2, #4
 80014b4:	6013      	str	r3, [r2, #0]
			image_80x80_rgb888[image_count] = buf[i+3];
 80014b6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3303      	adds	r3, #3
 80014be:	f107 0208 	add.w	r2, r7, #8
 80014c2:	4413      	add	r3, r2
 80014c4:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <SPI2PC+0x188>)
 80014ca:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014ce:	f103 0304 	add.w	r3, r3, #4
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	460a      	mov	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
			image_count = image_count + 2;
 80014da:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014de:	f103 0304 	add.w	r3, r3, #4
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3302      	adds	r3, #2
 80014e6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014ea:	f102 0204 	add.w	r2, r2, #4
 80014ee:	6013      	str	r3, [r2, #0]
		for (int i = 2; i < 6402;  i += 4)
 80014f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3304      	adds	r3, #4
 80014f8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f641 1201 	movw	r2, #6401	; 0x1901
 8001508:	4293      	cmp	r3, r2
 800150a:	f77f af7d 	ble.w	8001408 <SPI2PC+0x64>
		}

		SPI_master2slave(buf);
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	3b08      	subs	r3, #8
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f80b 	bl	8001530 <SPI_master2slave>
			break;
		default:  //Broadcast to every board
			break;
		}*/
	}
}
 800151a:	bf00      	nop
 800151c:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20004dfc 	.word	0x20004dfc
 800152c:	20000000 	.word	0x20000000

08001530 <SPI_master2slave>:

void SPI_master2slave(char * buf) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	for(int i=0; i< 6402; i++)
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e00b      	b.n	8001556 <SPI_master2slave+0x26>
	{
		if (HAL_SPI_Transmit(&hspi1, &buf[i], 1, 1000) == HAL_OK) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	18d1      	adds	r1, r2, r3
 8001544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001548:	2201      	movs	r2, #1
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <SPI_master2slave+0x3c>)
 800154c:	f004 fcc7 	bl	8005ede <HAL_SPI_Transmit>
	for(int i=0; i< 6402; i++)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f641 1201 	movw	r2, #6401	; 0x1901
 800155c:	4293      	cmp	r3, r2
 800155e:	ddee      	ble.n	800153e <SPI_master2slave+0xe>
			//HAL_UART_Transmit(&huart4, "SPI_master2slave", 16, 1000);
		}
	}
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20004d34 	.word	0x20004d34

08001570 <LCD_PowerOn>:
		}
	}*/
}

static void LCD_PowerOn(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <LCD_PowerOn+0x2c>)
 800157c:	f001 fe22 	bl	80031c4 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 8001580:	2014      	movs	r0, #20
 8001582:	f000 fcdf 	bl	8001f44 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <LCD_PowerOn+0x2c>)
 800158e:	f001 fe19 	bl	80031c4 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 8001592:	2078      	movs	r0, #120	; 0x78
 8001594:	f000 fcd6 	bl	8001f44 <HAL_Delay>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	48001000 	.word	0x48001000

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x44>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_MspInit+0x44>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6613      	str	r3, [r2, #96]	; 0x60
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_MspInit+0x44>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_MspInit+0x44>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6593      	str	r3, [r2, #88]	; 0x58
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0aa      	sub	sp, #168	; 0xa8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	229c      	movs	r2, #156	; 0x9c
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f006 f9ed 	bl	80079e4 <memset>
  if(hdsi->Instance==DSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_DSI_MspInit+0x60>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d11b      	bne.n	800164c <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001614:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001618:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fe3f 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8001630:	f7ff ffb6 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_DSI_MspInit+0x64>)
 8001636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_DSI_MspInit+0x64>)
 800163a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800163e:	6613      	str	r3, [r2, #96]	; 0x60
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_DSI_MspInit+0x64>)
 8001642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	37a8      	adds	r7, #168	; 0xa8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40016c00 	.word	0x40016c00
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0b2      	sub	sp, #200	; 0xc8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	229c      	movs	r2, #156	; 0x9c
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f006 f9b1 	bl	80079e4 <memset>
  if(hi2c->Instance==I2C1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a42      	ldr	r2, [pc, #264]	; (8001790 <HAL_I2C_MspInit+0x134>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d13c      	bne.n	8001706 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800168c:	2340      	movs	r3, #64	; 0x40
 800168e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001690:	2300      	movs	r3, #0
 8001692:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fe05 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016a4:	f7ff ff7c 	bl	80015a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_I2C_MspInit+0x138>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	4a39      	ldr	r2, [pc, #228]	; (8001794 <HAL_I2C_MspInit+0x138>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b4:	4b37      	ldr	r3, [pc, #220]	; (8001794 <HAL_I2C_MspInit+0x138>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80016c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c8:	2312      	movs	r3, #18
 80016ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016da:	2304      	movs	r3, #4
 80016dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016e4:	4619      	mov	r1, r3
 80016e6:	482c      	ldr	r0, [pc, #176]	; (8001798 <HAL_I2C_MspInit+0x13c>)
 80016e8:	f001 fbda 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_I2C_MspInit+0x138>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	4a28      	ldr	r2, [pc, #160]	; (8001794 <HAL_I2C_MspInit+0x138>)
 80016f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f6:	6593      	str	r3, [r2, #88]	; 0x58
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_I2C_MspInit+0x138>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001704:	e040      	b.n	8001788 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_I2C_MspInit+0x140>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d13b      	bne.n	8001788 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001714:	2300      	movs	r3, #0
 8001716:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fdc3 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001728:	f7ff ff3a 	bl	80015a0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_I2C_MspInit+0x138>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_I2C_MspInit+0x138>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_I2C_MspInit+0x138>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001744:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174c:	2312      	movs	r3, #18
 800174e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800175e:	2304      	movs	r3, #4
 8001760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001768:	4619      	mov	r1, r3
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <HAL_I2C_MspInit+0x13c>)
 800176c:	f001 fb98 	bl	8002ea0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_I2C_MspInit+0x138>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_I2C_MspInit+0x138>)
 8001776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800177a:	6593      	str	r3, [r2, #88]	; 0x58
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_I2C_MspInit+0x138>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
}
 8001788:	bf00      	nop
 800178a:	37c8      	adds	r7, #200	; 0xc8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40005400 	.word	0x40005400
 8001794:	40021000 	.word	0x40021000
 8001798:	48000400 	.word	0x48000400
 800179c:	40005800 	.word	0x40005800

080017a0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b0aa      	sub	sp, #168	; 0xa8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	229c      	movs	r2, #156	; 0x9c
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f006 f917 	bl	80079e4 <memset>
  if(hltdc->Instance==LTDC)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a19      	ldr	r2, [pc, #100]	; (8001820 <HAL_LTDC_MspInit+0x80>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d12a      	bne.n	8001816 <HAL_LTDC_MspInit+0x76>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 80017cc:	2303      	movs	r3, #3
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 80017d4:	2308      	movs	r3, #8
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 80017d8:	2302      	movs	r3, #2
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 80017dc:	2302      	movs	r3, #2
 80017de:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 80017e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e8:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fd5a 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_LTDC_MspInit+0x5e>
    {
      Error_Handler();
 80017fa:	f7ff fed1 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_LTDC_MspInit+0x84>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	4a08      	ldr	r2, [pc, #32]	; (8001824 <HAL_LTDC_MspInit+0x84>)
 8001804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001808:	6613      	str	r3, [r2, #96]	; 0x60
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_LTDC_MspInit+0x84>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	37a8      	adds	r7, #168	; 0xa8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40016800 	.word	0x40016800
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0b6      	sub	sp, #216	; 0xd8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001844:	229c      	movs	r2, #156	; 0x9c
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f006 f8cb 	bl	80079e4 <memset>
  if(hospi->Instance==OCTOSPI1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a86      	ldr	r2, [pc, #536]	; (8001a6c <HAL_OSPI_MspInit+0x244>)
 8001854:	4293      	cmp	r3, r2
 8001856:	f040 808c 	bne.w	8001972 <HAL_OSPI_MspInit+0x14a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800185a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fd1c 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 8001876:	f7ff fe93 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 800187a:	4b7d      	ldr	r3, [pc, #500]	; (8001a70 <HAL_OSPI_MspInit+0x248>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a7b      	ldr	r2, [pc, #492]	; (8001a70 <HAL_OSPI_MspInit+0x248>)
 8001882:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8001884:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <HAL_OSPI_MspInit+0x248>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10b      	bne.n	80018a4 <HAL_OSPI_MspInit+0x7c>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 800188c:	4b79      	ldr	r3, [pc, #484]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	4a78      	ldr	r2, [pc, #480]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 8001892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001898:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80018a4:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80018a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a8:	4a72      	ldr	r2, [pc, #456]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6513      	str	r3, [r2, #80]	; 0x50
 80018b0:	4b70      	ldr	r3, [pc, #448]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80018b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	623b      	str	r3, [r7, #32]
 80018ba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018bc:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	4a6c      	ldr	r2, [pc, #432]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d4:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	4a66      	ldr	r2, [pc, #408]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80018da:	f043 0320 	orr.w	r3, r3, #32
 80018de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	69bb      	ldr	r3, [r7, #24]
    PF6     ------> OCTOSPIM_P1_IO3
    PF7     ------> OCTOSPIM_P1_IO2
    PF10     ------> OCTOSPIM_P1_CLK
    PF9     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P1;
 8001906:	2305      	movs	r3, #5
 8001908:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001910:	4619      	mov	r1, r3
 8001912:	4859      	ldr	r0, [pc, #356]	; (8001a78 <HAL_OSPI_MspInit+0x250>)
 8001914:	f001 fac4 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8001918:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800191c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001932:	230a      	movs	r3, #10
 8001934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001938:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800193c:	4619      	mov	r1, r3
 800193e:	484f      	ldr	r0, [pc, #316]	; (8001a7c <HAL_OSPI_MspInit+0x254>)
 8001940:	f001 faae 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 800195e:	2303      	movs	r3, #3
 8001960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001964:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001968:	4619      	mov	r1, r3
 800196a:	4844      	ldr	r0, [pc, #272]	; (8001a7c <HAL_OSPI_MspInit+0x254>)
 800196c:	f001 fa98 	bl	8002ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001970:	e077      	b.n	8001a62 <HAL_OSPI_MspInit+0x23a>
  else if(hospi->Instance==OCTOSPI2)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a42      	ldr	r2, [pc, #264]	; (8001a80 <HAL_OSPI_MspInit+0x258>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d172      	bne.n	8001a62 <HAL_OSPI_MspInit+0x23a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800197c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fc8b 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_OSPI_MspInit+0x174>
      Error_Handler();
 8001998:	f7ff fe02 	bl	80015a0 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 800199c:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_OSPI_MspInit+0x248>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4a33      	ldr	r2, [pc, #204]	; (8001a70 <HAL_OSPI_MspInit+0x248>)
 80019a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80019a6:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_OSPI_MspInit+0x248>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d10b      	bne.n	80019c6 <HAL_OSPI_MspInit+0x19e>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80019ae:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ca:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d0:	6513      	str	r3, [r2, #80]	; 0x50
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 80019fc:	f043 0320 	orr.w	r3, r3, #32
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_OSPI_MspInit+0x24c>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 8001a26:	230a      	movs	r3, #10
 8001a28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4814      	ldr	r0, [pc, #80]	; (8001a84 <HAL_OSPI_MspInit+0x25c>)
 8001a34:	f001 fa34 	bl	8002ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4;
 8001a38:	2313      	movs	r3, #19
 8001a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8001a50:	2305      	movs	r3, #5
 8001a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <HAL_OSPI_MspInit+0x254>)
 8001a5e:	f001 fa1f 	bl	8002ea0 <HAL_GPIO_Init>
}
 8001a62:	bf00      	nop
 8001a64:	37d8      	adds	r7, #216	; 0xd8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	a0001000 	.word	0xa0001000
 8001a70:	20004ef4 	.word	0x20004ef4
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	48001400 	.word	0x48001400
 8001a80:	a0001400 	.word	0xa0001400
 8001a84:	48000c00 	.word	0x48000c00

08001a88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b092      	sub	sp, #72	; 0x48
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a80      	ldr	r2, [pc, #512]	; (8001ca8 <HAL_SPI_MspInit+0x220>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d146      	bne.n	8001b38 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aaa:	4b80      	ldr	r3, [pc, #512]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a7f      	ldr	r2, [pc, #508]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b7d      	ldr	r3, [pc, #500]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b7a      	ldr	r3, [pc, #488]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a79      	ldr	r2, [pc, #484]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b77      	ldr	r3, [pc, #476]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b74      	ldr	r3, [pc, #464]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a73      	ldr	r2, [pc, #460]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b71      	ldr	r3, [pc, #452]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 8001af2:	2338      	movs	r3, #56	; 0x38
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b02:	2305      	movs	r3, #5
 8001b04:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4868      	ldr	r0, [pc, #416]	; (8001cb0 <HAL_SPI_MspInit+0x228>)
 8001b0e:	f001 f9c7 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b24:	2305      	movs	r3, #5
 8001b26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b32:	f001 f9b5 	bl	8002ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b36:	e0b2      	b.n	8001c9e <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_SPI_MspInit+0x22c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d144      	bne.n	8001bcc <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b42:	4b5a      	ldr	r3, [pc, #360]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	4a59      	ldr	r2, [pc, #356]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4e:	4b57      	ldr	r3, [pc, #348]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a4d      	ldr	r2, [pc, #308]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4844      	ldr	r0, [pc, #272]	; (8001cb8 <HAL_SPI_MspInit+0x230>)
 8001ba6:	f001 f97b 	bl	8002ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001baa:	2304      	movs	r3, #4
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bba:	2305      	movs	r3, #5
 8001bbc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	483d      	ldr	r0, [pc, #244]	; (8001cbc <HAL_SPI_MspInit+0x234>)
 8001bc6:	f001 f96b 	bl	8002ea0 <HAL_GPIO_Init>
}
 8001bca:	e068      	b.n	8001c9e <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI3)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a3b      	ldr	r2, [pc, #236]	; (8001cc0 <HAL_SPI_MspInit+0x238>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d163      	bne.n	8001c9e <HAL_SPI_MspInit+0x216>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a34      	ldr	r2, [pc, #208]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c1e:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_SPI_MspInit+0x224>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001c36:	f002 fc4f 	bl	80044d8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c3a:	2340      	movs	r3, #64	; 0x40
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c52:	4619      	mov	r1, r3
 8001c54:	4818      	ldr	r0, [pc, #96]	; (8001cb8 <HAL_SPI_MspInit+0x230>)
 8001c56:	f001 f923 	bl	8002ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c6c:	2306      	movs	r3, #6
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c74:	4619      	mov	r1, r3
 8001c76:	4811      	ldr	r0, [pc, #68]	; (8001cbc <HAL_SPI_MspInit+0x234>)
 8001c78:	f001 f912 	bl	8002ea0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c8e:	2306      	movs	r3, #6
 8001c90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c96:	4619      	mov	r1, r3
 8001c98:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <HAL_SPI_MspInit+0x23c>)
 8001c9a:	f001 f901 	bl	8002ea0 <HAL_GPIO_Init>
}
 8001c9e:	bf00      	nop
 8001ca0:	3748      	adds	r7, #72	; 0x48
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40013000 	.word	0x40013000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	40003800 	.word	0x40003800
 8001cb8:	48000c00 	.word	0x48000c00
 8001cbc:	48000800 	.word	0x48000800
 8001cc0:	40003c00 	.word	0x40003c00
 8001cc4:	48001800 	.word	0x48001800

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0b0      	sub	sp, #192	; 0xc0
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	229c      	movs	r2, #156	; 0x9c
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 fe7b 	bl	80079e4 <memset>
  if(huart->Instance==UART4)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <HAL_UART_MspInit+0xb0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d13b      	bne.n	8001d70 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 facf 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d10:	f7ff fc46 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d44:	2303      	movs	r3, #3
 8001d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d66:	4619      	mov	r1, r3
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6c:	f001 f898 	bl	8002ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001d70:	bf00      	nop
 8001d72:	37c0      	adds	r7, #192	; 0xc0
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40004c00 	.word	0x40004c00
 8001d7c:	40021000 	.word	0x40021000

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <NMI_Handler+0x4>

08001d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <HardFault_Handler+0x4>

08001d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <MemManage_Handler+0x4>

08001d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <BusFault_Handler+0x4>

08001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <UsageFault_Handler+0x4>

08001d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dcc:	f000 f89a 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dfc:	f7ff ffea 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <LoopForever+0xe>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	; (8001e44 <LoopForever+0x16>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e26:	f005 fde5 	bl	80079f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2a:	f7fe fb65 	bl	80004f8 <main>

08001e2e <LoopForever>:

LoopForever:
    b LoopForever
 8001e2e:	e7fe      	b.n	8001e2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e30:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	20004b0c 	.word	0x20004b0c
  ldr r2, =_sidata
 8001e3c:	08007b6c 	.word	0x08007b6c
  ldr r2, =_sbss
 8001e40:	20004b0c 	.word	0x20004b0c
  ldr r4, =_ebss
 8001e44:	20004efc 	.word	0x20004efc

08001e48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC1_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_Init+0x3c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <HAL_Init+0x3c>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e62:	2003      	movs	r0, #3
 8001e64:	f000 f944 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e68:	200f      	movs	r0, #15
 8001e6a:	f000 f80f 	bl	8001e8c <HAL_InitTick>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	71fb      	strb	r3, [r7, #7]
 8001e78:	e001      	b.n	8001e7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e7a:	f7ff fb97 	bl	80015ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40022000 	.word	0x40022000

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_InitTick+0x6c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d023      	beq.n	8001ee8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_InitTick+0x70>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_InitTick+0x6c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f941 	bl	800213e <HAL_SYSTICK_Config>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10f      	bne.n	8001ee2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d809      	bhi.n	8001edc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f919 	bl	8002106 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_InitTick+0x74>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e007      	b.n	8001eec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e004      	b.n	8001eec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e001      	b.n	8001eec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20004b08 	.word	0x20004b08
 8001efc:	20004b00 	.word	0x20004b00
 8001f00:	20004b04 	.word	0x20004b04

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20004b08 	.word	0x20004b08
 8001f28:	20004ef8 	.word	0x20004ef8

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20004ef8 	.word	0x20004ef8

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff ffee 	bl	8001f2c <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d005      	beq.n	8001f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_Delay+0x44>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6a:	bf00      	nop
 8001f6c:	f7ff ffde 	bl	8001f2c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8f7      	bhi.n	8001f6c <HAL_Delay+0x28>
  {
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20004b08 	.word	0x20004b08

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff8e 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff47 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff5c 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff8e 	bl	8002044 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5d 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffb0 	bl	80020ac <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	019a      	lsls	r2, r3, #6
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	431a      	orrs	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	431a      	orrs	r2, r3
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002196:	f7ff fec9 	bl	8001f2c <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800219c:	e009      	b.n	80021b2 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800219e:	f7ff fec5 	bl	8001f2c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ac:	d901      	bls.n	80021b2 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e015      	b.n	80021de <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	019a      	lsls	r2, r3, #6
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	ea42 0103 	orr.w	r1, r2, r3
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	041a      	lsls	r2, r3, #16
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e10b      	b.n	8002414 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7c5b      	ldrb	r3, [r3, #17]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff f9f4 	bl	80015f4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2203      	movs	r2, #3
 8002210:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002226:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800223a:	f7ff fe77 	bl	8001f2c <HAL_GetTick>
 800223e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002240:	e009      	b.n	8002256 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002242:	f7ff fe73 	bl	8001f2c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002250:	d901      	bls.n	8002256 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e0de      	b.n	8002414 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800225e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ed      	beq.n	8002242 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002276:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800227a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002292:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800229a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7ff fe38 	bl	8001f44 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d4:	f7ff fe2a 	bl	8001f2c <HAL_GetTick>
 80022d8:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80022da:	e009      	b.n	80022f0 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80022dc:	f7ff fe26 	bl	8001f2c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ea:	d901      	bls.n	80022f0 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e091      	b.n	8002414 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ed      	beq.n	80022dc <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0206 	orr.w	r2, r2, #6
 8002310:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0203 	bic.w	r2, r2, #3
 8002324:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0203 	bic.w	r2, r2, #3
 8002352:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800237a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6899      	ldr	r1, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_DSI_Init+0x1b4>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	e000      	b.n	800239e <HAL_DSI_Init+0x1b6>
 800239c:	2301      	movs	r3, #1
 800239e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_DSI_Init+0x234>)
 80023a4:	fb03 f202 	mul.w	r2, r3, r2
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	409a      	lsls	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80023d4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	003d0900 	.word	0x003d0900

08002420 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7c1b      	ldrb	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_DSI_ConfigErrorMonitor+0x16>
 8002432:	2302      	movs	r3, #2
 8002434:	e0ab      	b.n	800258e <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002470:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002474:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002492:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0202 	orr.w	r2, r2, #2
 80024ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d009      	beq.n	80024f0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 020c 	orr.w	r2, r2, #12
 80024ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0210 	orr.w	r2, r2, #16
 800250a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0220 	orr.w	r2, r2, #32
 8002528:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002546:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002564:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8002582:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7c1b      	ldrb	r3, [r3, #16]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_DSI_SetGenericVCID+0x16>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e016      	b.n	80025de <HAL_DSI_SetGenericVCID+0x44>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0203 	bic.w	r2, r2, #3
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7c1b      	ldrb	r3, [r3, #16]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_DSI_ConfigVideoMode+0x16>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e1f6      	b.n	80029ee <HAL_DSI_ConfigVideoMode+0x404>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0203 	bic.w	r2, r2, #3
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800265a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800265e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002680:	f023 031f 	bic.w	r3, r3, #31
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80026a6:	f023 031f 	bic.w	r3, r3, #31
 80026aa:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0203 	bic.w	r2, r2, #3
 80026cc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68d9      	ldr	r1, [r3, #12]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0207 	bic.w	r2, r2, #7
 80026ee:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6959      	ldr	r1, [r3, #20]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	431a      	orrs	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 020f 	bic.w	r2, r2, #15
 800271c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6919      	ldr	r1, [r3, #16]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 020e 	bic.w	r2, r2, #14
 8002740:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	005a      	lsls	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d110      	bne.n	8002786 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002772:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6919      	ldr	r1, [r3, #16]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002794:	f023 030f 	bic.w	r3, r3, #15
 8002798:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027ba:	f023 030f 	bic.w	r3, r3, #15
 80027be:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027e4:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282c:	f023 0303 	bic.w	r3, r3, #3
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800287c:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80028c0:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6999      	ldr	r1, [r3, #24]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028e4:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6999      	ldr	r1, [r3, #24]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002906:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800298e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7c1b      	ldrb	r3, [r3, #16]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_DSI_ConfigPhyTimer+0x16>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e058      	b.n	8002ac2 <HAL_DSI_ConfigPhyTimer+0xc8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	bf38      	it	cc
 8002a22:	4613      	movcc	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8002a36:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	041a      	lsls	r2, r3, #16
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002a64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	021a      	lsls	r2, r3, #8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7c1b      	ldrb	r3, [r3, #16]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_DSI_ConfigHostTimeouts+0x16>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e0b4      	b.n	8002c4e <HAL_DSI_ConfigHostTimeouts+0x180>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002af8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	021a      	lsls	r2, r3, #8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	041a      	lsls	r2, r3, #16
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	0c1b      	lsrs	r3, r3, #16
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	0c1b      	lsrs	r3, r3, #16
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7c1b      	ldrb	r3, [r3, #16]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_DSI_Start+0x14>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e02b      	b.n	8002cc6 <HAL_DSI_Start+0x6c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b088      	sub	sp, #32
 8002cd6:	af02      	add	r7, sp, #8
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	7c1b      	ldrb	r3, [r3, #16]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_DSI_ShortWrite+0x1a>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e010      	b.n	8002d0e <HAL_DSI_ShortWrite+0x3c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fa43 	bl	8002188 <DSI_ShortWrite>
 8002d02:	4603      	mov	r3, r0
 8002d04:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	741a      	strb	r2, [r3, #16]

  return status;
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b08c      	sub	sp, #48	; 0x30
 8002d1a:	af02      	add	r7, sp, #8
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d26:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	7c1b      	ldrb	r3, [r3, #16]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_DSI_LongWrite+0x1e>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e084      	b.n	8002e3e <HAL_DSI_LongWrite+0x128>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d3a:	f7ff f8f7 	bl	8001f2c <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002d40:	e00c      	b.n	8002d5c <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002d42:	f7ff f8f3 	bl	8001f2c <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d50:	d904      	bls.n	8002d5c <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e070      	b.n	8002e3e <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0eb      	beq.n	8002d42 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	bf28      	it	cs
 8002d74:	2303      	movcs	r3, #3
 8002d76:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
 8002d7c:	e00f      	b.n	8002d9e <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	4413      	add	r3, r2
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	6a3a      	ldr	r2, [r7, #32]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3eb      	bcc.n	8002d7e <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002dbe:	e028      	b.n	8002e12 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf28      	it	cs
 8002dc6:	2304      	movcs	r3, #4
 8002dc8:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	e00e      	b.n	8002df2 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	3301      	adds	r3, #1
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	6a3a      	ldr	r2, [r7, #32]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d3ec      	bcc.n	8002dd4 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1d3      	bne.n	8002dc0 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002e20:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	f7ff f990 	bl	8002156 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7c1b      	ldrb	r3, [r3, #16]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_DSI_SetLowPowerRXFilter+0x16>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e01b      	b.n	8002e94 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002e72:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	065a      	lsls	r2, r3, #25
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eae:	e166      	b.n	800317e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8158 	beq.w	8003178 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d005      	beq.n	8002ee0 <HAL_GPIO_Init+0x40>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d130      	bne.n	8002f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f16:	2201      	movs	r2, #1
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0201 	and.w	r2, r3, #1
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d017      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d123      	bne.n	8002fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	6939      	ldr	r1, [r7, #16]
 8002fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0203 	and.w	r2, r3, #3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80b2 	beq.w	8003178 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003014:	4b61      	ldr	r3, [pc, #388]	; (800319c <HAL_GPIO_Init+0x2fc>)
 8003016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003018:	4a60      	ldr	r2, [pc, #384]	; (800319c <HAL_GPIO_Init+0x2fc>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6613      	str	r3, [r2, #96]	; 0x60
 8003020:	4b5e      	ldr	r3, [pc, #376]	; (800319c <HAL_GPIO_Init+0x2fc>)
 8003022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800302c:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_GPIO_Init+0x300>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003056:	d02b      	beq.n	80030b0 <HAL_GPIO_Init+0x210>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_GPIO_Init+0x304>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d025      	beq.n	80030ac <HAL_GPIO_Init+0x20c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_GPIO_Init+0x308>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d01f      	beq.n	80030a8 <HAL_GPIO_Init+0x208>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_GPIO_Init+0x30c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d019      	beq.n	80030a4 <HAL_GPIO_Init+0x204>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a4f      	ldr	r2, [pc, #316]	; (80031b0 <HAL_GPIO_Init+0x310>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <HAL_GPIO_Init+0x200>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a4e      	ldr	r2, [pc, #312]	; (80031b4 <HAL_GPIO_Init+0x314>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00d      	beq.n	800309c <HAL_GPIO_Init+0x1fc>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a4d      	ldr	r2, [pc, #308]	; (80031b8 <HAL_GPIO_Init+0x318>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d007      	beq.n	8003098 <HAL_GPIO_Init+0x1f8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a4c      	ldr	r2, [pc, #304]	; (80031bc <HAL_GPIO_Init+0x31c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_GPIO_Init+0x1f4>
 8003090:	2307      	movs	r3, #7
 8003092:	e00e      	b.n	80030b2 <HAL_GPIO_Init+0x212>
 8003094:	2308      	movs	r3, #8
 8003096:	e00c      	b.n	80030b2 <HAL_GPIO_Init+0x212>
 8003098:	2306      	movs	r3, #6
 800309a:	e00a      	b.n	80030b2 <HAL_GPIO_Init+0x212>
 800309c:	2305      	movs	r3, #5
 800309e:	e008      	b.n	80030b2 <HAL_GPIO_Init+0x212>
 80030a0:	2304      	movs	r3, #4
 80030a2:	e006      	b.n	80030b2 <HAL_GPIO_Init+0x212>
 80030a4:	2303      	movs	r3, #3
 80030a6:	e004      	b.n	80030b2 <HAL_GPIO_Init+0x212>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e002      	b.n	80030b2 <HAL_GPIO_Init+0x212>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_GPIO_Init+0x212>
 80030b0:	2300      	movs	r3, #0
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	f002 0203 	and.w	r2, r2, #3
 80030b8:	0092      	lsls	r2, r2, #2
 80030ba:	4093      	lsls	r3, r2
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030c2:	4937      	ldr	r1, [pc, #220]	; (80031a0 <HAL_GPIO_Init+0x300>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030d0:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <HAL_GPIO_Init+0x320>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030f4:	4a32      	ldr	r2, [pc, #200]	; (80031c0 <HAL_GPIO_Init+0x320>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030fa:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <HAL_GPIO_Init+0x320>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800311e:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <HAL_GPIO_Init+0x320>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003124:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <HAL_GPIO_Init+0x320>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <HAL_GPIO_Init+0x320>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_GPIO_Init+0x320>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003172:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <HAL_GPIO_Init+0x320>)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3301      	adds	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f ae91 	bne.w	8002eb0 <HAL_GPIO_Init+0x10>
  }
}
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40021000 	.word	0x40021000
 80031a0:	40010000 	.word	0x40010000
 80031a4:	48000400 	.word	0x48000400
 80031a8:	48000800 	.word	0x48000800
 80031ac:	48000c00 	.word	0x48000c00
 80031b0:	48001000 	.word	0x48001000
 80031b4:	48001400 	.word	0x48001400
 80031b8:	48001800 	.word	0x48001800
 80031bc:	48001c00 	.word	0x48001c00
 80031c0:	40010400 	.word	0x40010400

080031c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
 80031d0:	4613      	mov	r3, r2
 80031d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d4:	787b      	ldrb	r3, [r7, #1]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031e0:	e002      	b.n	80031e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e08d      	b.n	8003322 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe fa1e 	bl	800165c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2224      	movs	r2, #36	; 0x24
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003244:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003254:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d107      	bne.n	800326e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	e006      	b.n	800327c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800327a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d108      	bne.n	8003296 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	e007      	b.n	80032a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69d9      	ldr	r1, [r3, #28]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1a      	ldr	r2, [r3, #32]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b20      	cmp	r3, #32
 800333e:	d138      	bne.n	80033b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800334a:	2302      	movs	r3, #2
 800334c:	e032      	b.n	80033b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2224      	movs	r2, #36	; 0x24
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800337c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	d139      	bne.n	800344a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e033      	b.n	800344c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003412:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e0bf      	b.n	80035ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe f98e 	bl	80017a0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800349a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6999      	ldr	r1, [r3, #24]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6899      	ldr	r1, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_LTDC_Init+0x19c>)
 80034cc:	400b      	ands	r3, r1
 80034ce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68d9      	ldr	r1, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b3e      	ldr	r3, [pc, #248]	; (80035f4 <HAL_LTDC_Init+0x19c>)
 80034fa:	400b      	ands	r3, r1
 80034fc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68d9      	ldr	r1, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6919      	ldr	r1, [r3, #16]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <HAL_LTDC_Init+0x19c>)
 8003528:	400b      	ands	r3, r1
 800352a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6919      	ldr	r1, [r3, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6959      	ldr	r1, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_LTDC_Init+0x19c>)
 8003556:	400b      	ands	r3, r1
 8003558:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6959      	ldr	r1, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0206 	orr.w	r2, r2, #6
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	f000f800 	.word	0xf000f800

080035f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_LTDC_ConfigLayer+0x1a>
 800360e:	2302      	movs	r3, #2
 8003610:	e02c      	b.n	800366c <HAL_LTDC_ConfigLayer+0x74>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2134      	movs	r1, #52	; 0x34
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4614      	mov	r4, r2
 8003636:	461d      	mov	r5, r3
 8003638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800363a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800363c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800363e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f811 	bl	8003674 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bdb0      	pop	{r4, r5, r7, pc}

08003674 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	4413      	add	r3, r2
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	01db      	lsls	r3, r3, #7
 80036a0:	4413      	add	r3, r2
 80036a2:	3384      	adds	r3, #132	; 0x84
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	4611      	mov	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	01d2      	lsls	r2, r2, #7
 80036b0:	440a      	add	r2, r1
 80036b2:	3284      	adds	r2, #132	; 0x84
 80036b4:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80036b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80036ca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036cc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	01db      	lsls	r3, r3, #7
 80036d8:	440b      	add	r3, r1
 80036da:	3384      	adds	r3, #132	; 0x84
 80036dc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80036e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f2:	4413      	add	r3, r2
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	01db      	lsls	r3, r3, #7
 8003702:	4413      	add	r3, r2
 8003704:	3384      	adds	r3, #132	; 0x84
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	4611      	mov	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	01d2      	lsls	r2, r2, #7
 8003712:	440a      	add	r2, r1
 8003714:	3284      	adds	r2, #132	; 0x84
 8003716:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800371a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800372a:	4413      	add	r3, r2
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4619      	mov	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	01db      	lsls	r3, r3, #7
 8003738:	440b      	add	r3, r1
 800373a:	3384      	adds	r3, #132	; 0x84
 800373c:	4619      	mov	r1, r3
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4313      	orrs	r3, r2
 8003742:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	01db      	lsls	r3, r3, #7
 800374e:	4413      	add	r3, r2
 8003750:	3384      	adds	r3, #132	; 0x84
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	4611      	mov	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	01d2      	lsls	r2, r2, #7
 800375e:	440a      	add	r2, r1
 8003760:	3284      	adds	r2, #132	; 0x84
 8003762:	f023 0307 	bic.w	r3, r3, #7
 8003766:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	01db      	lsls	r3, r3, #7
 8003772:	4413      	add	r3, r2
 8003774:	3384      	adds	r3, #132	; 0x84
 8003776:	461a      	mov	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	061b      	lsls	r3, r3, #24
 8003798:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	01db      	lsls	r3, r3, #7
 80037a4:	4413      	add	r3, r2
 80037a6:	3384      	adds	r3, #132	; 0x84
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	01db      	lsls	r3, r3, #7
 80037b4:	4413      	add	r3, r2
 80037b6:	3384      	adds	r3, #132	; 0x84
 80037b8:	461a      	mov	r2, r3
 80037ba:	2300      	movs	r3, #0
 80037bc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037c4:	461a      	mov	r2, r3
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4619      	mov	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	01db      	lsls	r3, r3, #7
 80037d8:	440b      	add	r3, r1
 80037da:	3384      	adds	r3, #132	; 0x84
 80037dc:	4619      	mov	r1, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	01db      	lsls	r3, r3, #7
 80037ee:	4413      	add	r3, r2
 80037f0:	3384      	adds	r3, #132	; 0x84
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	4611      	mov	r1, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	01d2      	lsls	r2, r2, #7
 80037fe:	440a      	add	r2, r1
 8003800:	3284      	adds	r2, #132	; 0x84
 8003802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003806:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	01db      	lsls	r3, r3, #7
 8003812:	4413      	add	r3, r2
 8003814:	3384      	adds	r3, #132	; 0x84
 8003816:	461a      	mov	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	01db      	lsls	r3, r3, #7
 8003828:	4413      	add	r3, r2
 800382a:	3384      	adds	r3, #132	; 0x84
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	4611      	mov	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	01d2      	lsls	r2, r2, #7
 8003838:	440a      	add	r2, r1
 800383a:	3284      	adds	r2, #132	; 0x84
 800383c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003840:	f023 0307 	bic.w	r3, r3, #7
 8003844:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	68f9      	ldr	r1, [r7, #12]
 8003850:	6809      	ldr	r1, [r1, #0]
 8003852:	4608      	mov	r0, r1
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	01c9      	lsls	r1, r1, #7
 8003858:	4401      	add	r1, r0
 800385a:	3184      	adds	r1, #132	; 0x84
 800385c:	4313      	orrs	r3, r2
 800385e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	01db      	lsls	r3, r3, #7
 800386a:	4413      	add	r3, r2
 800386c:	3384      	adds	r3, #132	; 0x84
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	01db      	lsls	r3, r3, #7
 800387a:	4413      	add	r3, r2
 800387c:	3384      	adds	r3, #132	; 0x84
 800387e:	461a      	mov	r2, r3
 8003880:	2300      	movs	r3, #0
 8003882:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	01db      	lsls	r3, r3, #7
 800388e:	4413      	add	r3, r2
 8003890:	3384      	adds	r3, #132	; 0x84
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d102      	bne.n	80038a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80038a2:	2304      	movs	r3, #4
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e01b      	b.n	80038e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d102      	bne.n	80038b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80038b0:	2303      	movs	r3, #3
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e014      	b.n	80038e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d00b      	beq.n	80038d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d007      	beq.n	80038d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d003      	beq.n	80038d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80038d2:	2b07      	cmp	r3, #7
 80038d4:	d102      	bne.n	80038dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80038d6:	2302      	movs	r3, #2
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	e001      	b.n	80038e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80038dc:	2301      	movs	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	01db      	lsls	r3, r3, #7
 80038ea:	4413      	add	r3, r2
 80038ec:	3384      	adds	r3, #132	; 0x84
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	4611      	mov	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	01d2      	lsls	r2, r2, #7
 80038fa:	440a      	add	r2, r1
 80038fc:	3284      	adds	r2, #132	; 0x84
 80038fe:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003902:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	1acb      	subs	r3, r1, r3
 800391a:	69f9      	ldr	r1, [r7, #28]
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003922:	68f9      	ldr	r1, [r7, #12]
 8003924:	6809      	ldr	r1, [r1, #0]
 8003926:	4608      	mov	r0, r1
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	01c9      	lsls	r1, r1, #7
 800392c:	4401      	add	r1, r0
 800392e:	3184      	adds	r1, #132	; 0x84
 8003930:	4313      	orrs	r3, r2
 8003932:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	01db      	lsls	r3, r3, #7
 800393e:	4413      	add	r3, r2
 8003940:	3384      	adds	r3, #132	; 0x84
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	4611      	mov	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	01d2      	lsls	r2, r2, #7
 800394e:	440a      	add	r2, r1
 8003950:	3284      	adds	r2, #132	; 0x84
 8003952:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003956:	f023 0307 	bic.w	r3, r3, #7
 800395a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	01db      	lsls	r3, r3, #7
 8003966:	4413      	add	r3, r2
 8003968:	3384      	adds	r3, #132	; 0x84
 800396a:	461a      	mov	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	01db      	lsls	r3, r3, #7
 800397c:	4413      	add	r3, r2
 800397e:	3384      	adds	r3, #132	; 0x84
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	4611      	mov	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	01d2      	lsls	r2, r2, #7
 800398c:	440a      	add	r2, r1
 800398e:	3284      	adds	r2, #132	; 0x84
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6013      	str	r3, [r2, #0]
}
 8003996:	bf00      	nop
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80039b0:	f7fe fabc 	bl	8001f2c <HAL_GetTick>
 80039b4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
 80039c0:	e092      	b.n	8003ae8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 808b 	bne.w	8003ae8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd ff28 	bl	8001828 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80039d8:	f241 3188 	movw	r1, #5000	; 0x1388
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f88b 	bl	8003af8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_OSPI_Init+0x150>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68d1      	ldr	r1, [r2, #12]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6912      	ldr	r2, [r2, #16]
 80039f4:	3a01      	subs	r2, #1
 80039f6:	0412      	lsls	r2, r2, #16
 80039f8:	4311      	orrs	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6952      	ldr	r2, [r2, #20]
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0212      	lsls	r2, r2, #8
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a08:	4311      	orrs	r1, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	69d2      	ldr	r2, [r2, #28]
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	0412      	lsls	r2, r2, #16
 8003a22:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	021a      	lsls	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2120      	movs	r1, #32
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fb98 	bl	8004180 <OSPI_WaitFlagStateUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d146      	bne.n	8003ae8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a90:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d107      	bne.n	8003ad0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0202 	orr.w	r2, r2, #2
 8003ace:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad8:	d103      	bne.n	8003ae2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
 8003ae0:	e002      	b.n	8003ae8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	f8e0f8f4 	.word	0xf8e0f8f4

08003af8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b092      	sub	sp, #72	; 0x48
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <HAL_OSPIM_Config+0x40>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d105      	bne.n	8003b46 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003b44:	e004      	b.n	8003b50 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003b46:	2301      	movs	r3, #1
 8003b48:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003b56:	e01f      	b.n	8003b98 <HAL_OSPIM_Config+0x80>
 8003b58:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003b5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b60:	3301      	adds	r3, #1
 8003b62:	b2d8      	uxtb	r0, r3
 8003b64:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003b68:	f107 0114 	add.w	r1, r7, #20
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	4619      	mov	r1, r3
 8003b78:	f000 fb3a 	bl	80041f0 <OSPIM_GetConfig>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b92:	3301      	adds	r3, #1
 8003b94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003b98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d9dd      	bls.n	8003b5c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003ba0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 82de 	bne.w	8004166 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003baa:	4bc6      	ldr	r3, [pc, #792]	; (8003ec4 <HAL_OSPIM_Config+0x3ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003bb6:	4bc3      	ldr	r3, [pc, #780]	; (8003ec4 <HAL_OSPIM_Config+0x3ac>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4ac2      	ldr	r2, [pc, #776]	; (8003ec4 <HAL_OSPIM_Config+0x3ac>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003bc2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003bce:	4bbe      	ldr	r3, [pc, #760]	; (8003ec8 <HAL_OSPIM_Config+0x3b0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003bda:	4bbb      	ldr	r3, [pc, #748]	; (8003ec8 <HAL_OSPIM_Config+0x3b0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4aba      	ldr	r2, [pc, #744]	; (8003ec8 <HAL_OSPIM_Config+0x3b0>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003be6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003bea:	f043 0302 	orr.w	r3, r3, #2
 8003bee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003bf2:	49b6      	ldr	r1, [pc, #728]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	3348      	adds	r3, #72	; 0x48
 8003c00:	443b      	add	r3, r7
 8003c02:	3b2c      	subs	r3, #44	; 0x2c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	48af      	ldr	r0, [pc, #700]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003c10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	3348      	adds	r3, #72	; 0x48
 8003c1c:	443b      	add	r3, r7
 8003c1e:	3b2c      	subs	r3, #44	; 0x2c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4403      	add	r3, r0
 8003c2c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003c2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	3348      	adds	r3, #72	; 0x48
 8003c3a:	443b      	add	r3, r7
 8003c3c:	3b34      	subs	r3, #52	; 0x34
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a1 	beq.w	8003d88 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003c46:	49a1      	ldr	r1, [pc, #644]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003c48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	3348      	adds	r3, #72	; 0x48
 8003c54:	443b      	add	r3, r7
 8003c56:	3b34      	subs	r3, #52	; 0x34
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	489a      	ldr	r0, [pc, #616]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	3348      	adds	r3, #72	; 0x48
 8003c70:	443b      	add	r3, r7
 8003c72:	3b34      	subs	r3, #52	; 0x34
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	f021 0201 	bic.w	r2, r1, #1
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4403      	add	r3, r0
 8003c80:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3348      	adds	r3, #72	; 0x48
 8003c8e:	443b      	add	r3, r7
 8003c90:	3b30      	subs	r3, #48	; 0x30
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01d      	beq.n	8003cd4 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003c98:	498c      	ldr	r1, [pc, #560]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003c9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	3348      	adds	r3, #72	; 0x48
 8003ca6:	443b      	add	r3, r7
 8003ca8:	3b30      	subs	r3, #48	; 0x30
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	4885      	ldr	r0, [pc, #532]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	3348      	adds	r3, #72	; 0x48
 8003cc2:	443b      	add	r3, r7
 8003cc4:	3b30      	subs	r3, #48	; 0x30
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	f021 0210 	bic.w	r2, r1, #16
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4403      	add	r3, r0
 8003cd2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003cd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	3348      	adds	r3, #72	; 0x48
 8003ce0:	443b      	add	r3, r7
 8003ce2:	3b28      	subs	r3, #40	; 0x28
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d021      	beq.n	8003d2e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003cea:	4978      	ldr	r1, [pc, #480]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003cec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	3348      	adds	r3, #72	; 0x48
 8003cf8:	443b      	add	r3, r7
 8003cfa:	3b28      	subs	r3, #40	; 0x28
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	6859      	ldr	r1, [r3, #4]
 8003d0a:	4870      	ldr	r0, [pc, #448]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	3348      	adds	r3, #72	; 0x48
 8003d18:	443b      	add	r3, r7
 8003d1a:	3b28      	subs	r3, #40	; 0x28
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4403      	add	r3, r0
 8003d2c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003d2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	3348      	adds	r3, #72	; 0x48
 8003d3a:	443b      	add	r3, r7
 8003d3c:	3b24      	subs	r3, #36	; 0x24
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d021      	beq.n	8003d88 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003d44:	4961      	ldr	r1, [pc, #388]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	3348      	adds	r3, #72	; 0x48
 8003d52:	443b      	add	r3, r7
 8003d54:	3b24      	subs	r3, #36	; 0x24
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	4859      	ldr	r0, [pc, #356]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003d66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3348      	adds	r3, #72	; 0x48
 8003d72:	443b      	add	r3, r7
 8003d74:	3b24      	subs	r3, #36	; 0x24
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4403      	add	r3, r0
 8003d86:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6819      	ldr	r1, [r3, #0]
 8003d8c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	3348      	adds	r3, #72	; 0x48
 8003d9a:	443b      	add	r3, r7
 8003d9c:	3b34      	subs	r3, #52	; 0x34
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4299      	cmp	r1, r3
 8003da2:	d038      	beq.n	8003e16 <HAL_OSPIM_Config+0x2fe>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	3348      	adds	r3, #72	; 0x48
 8003db6:	443b      	add	r3, r7
 8003db8:	3b30      	subs	r3, #48	; 0x30
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4299      	cmp	r1, r3
 8003dbe:	d02a      	beq.n	8003e16 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6899      	ldr	r1, [r3, #8]
 8003dc4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	3348      	adds	r3, #72	; 0x48
 8003dd2:	443b      	add	r3, r7
 8003dd4:	3b2c      	subs	r3, #44	; 0x2c
 8003dd6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003dd8:	4299      	cmp	r1, r3
 8003dda:	d01c      	beq.n	8003e16 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	68d9      	ldr	r1, [r3, #12]
 8003de0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	3348      	adds	r3, #72	; 0x48
 8003dee:	443b      	add	r3, r7
 8003df0:	3b28      	subs	r3, #40	; 0x28
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4299      	cmp	r1, r3
 8003df6:	d00e      	beq.n	8003e16 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	6919      	ldr	r1, [r3, #16]
 8003dfc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	3348      	adds	r3, #72	; 0x48
 8003e0a:	443b      	add	r3, r7
 8003e0c:	3b24      	subs	r3, #36	; 0x24
 8003e0e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003e10:	4299      	cmp	r1, r3
 8003e12:	f040 80d3 	bne.w	8003fbc <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003e16:	492d      	ldr	r1, [pc, #180]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003e18:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	3348      	adds	r3, #72	; 0x48
 8003e26:	443b      	add	r3, r7
 8003e28:	3b34      	subs	r3, #52	; 0x34
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	4825      	ldr	r0, [pc, #148]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003e36:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	3348      	adds	r3, #72	; 0x48
 8003e44:	443b      	add	r3, r7
 8003e46:	3b34      	subs	r3, #52	; 0x34
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	f021 0201 	bic.w	r2, r1, #1
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4403      	add	r3, r0
 8003e54:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003e56:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	3348      	adds	r3, #72	; 0x48
 8003e64:	443b      	add	r3, r7
 8003e66:	3b30      	subs	r3, #48	; 0x30
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01f      	beq.n	8003eae <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003e6e:	4917      	ldr	r1, [pc, #92]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003e70:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	3348      	adds	r3, #72	; 0x48
 8003e7e:	443b      	add	r3, r7
 8003e80:	3b30      	subs	r3, #48	; 0x30
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	480f      	ldr	r0, [pc, #60]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003e8e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	3348      	adds	r3, #72	; 0x48
 8003e9c:	443b      	add	r3, r7
 8003e9e:	3b30      	subs	r3, #48	; 0x30
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	f021 0210 	bic.w	r2, r1, #16
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4403      	add	r3, r0
 8003eac:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003eae:	4907      	ldr	r1, [pc, #28]	; (8003ecc <HAL_OSPIM_Config+0x3b4>)
 8003eb0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	3348      	adds	r3, #72	; 0x48
 8003ebe:	443b      	add	r3, r7
 8003ec0:	3b2c      	subs	r3, #44	; 0x2c
 8003ec2:	e005      	b.n	8003ed0 <HAL_OSPIM_Config+0x3b8>
 8003ec4:	a0001000 	.word	0xa0001000
 8003ec8:	a0001400 	.word	0xa0001400
 8003ecc:	50061c00 	.word	0x50061c00
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	48a6      	ldr	r0, [pc, #664]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8003edc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	3348      	adds	r3, #72	; 0x48
 8003eea:	443b      	add	r3, r7
 8003eec:	3b2c      	subs	r3, #44	; 0x2c
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4403      	add	r3, r0
 8003efa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003efc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	3348      	adds	r3, #72	; 0x48
 8003f0a:	443b      	add	r3, r7
 8003f0c:	3b28      	subs	r3, #40	; 0x28
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d023      	beq.n	8003f5c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003f14:	4997      	ldr	r1, [pc, #604]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8003f16:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	3348      	adds	r3, #72	; 0x48
 8003f24:	443b      	add	r3, r7
 8003f26:	3b28      	subs	r3, #40	; 0x28
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	488f      	ldr	r0, [pc, #572]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8003f38:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	3348      	adds	r3, #72	; 0x48
 8003f46:	443b      	add	r3, r7
 8003f48:	3b28      	subs	r3, #40	; 0x28
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4403      	add	r3, r0
 8003f5a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003f5c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	3348      	adds	r3, #72	; 0x48
 8003f6a:	443b      	add	r3, r7
 8003f6c:	3b24      	subs	r3, #36	; 0x24
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d023      	beq.n	8003fbc <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003f74:	497f      	ldr	r1, [pc, #508]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8003f76:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	3348      	adds	r3, #72	; 0x48
 8003f84:	443b      	add	r3, r7
 8003f86:	3b24      	subs	r3, #36	; 0x24
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	6859      	ldr	r1, [r3, #4]
 8003f96:	4877      	ldr	r0, [pc, #476]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8003f98:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	3348      	adds	r3, #72	; 0x48
 8003fa6:	443b      	add	r3, r7
 8003fa8:	3b24      	subs	r3, #36	; 0x24
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4403      	add	r3, r0
 8003fba:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003fbc:	4a6d      	ldr	r2, [pc, #436]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd0:	025b      	lsls	r3, r3, #9
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	4967      	ldr	r1, [pc, #412]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003fe6:	4a63      	ldr	r2, [pc, #396]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f023 0203 	bic.w	r2, r3, #3
 8003ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	495d      	ldr	r1, [pc, #372]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3b01      	subs	r3, #1
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d014      	beq.n	8004042 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004018:	4a56      	ldr	r2, [pc, #344]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800402a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402c:	015b      	lsls	r3, r3, #5
 800402e:	431a      	orrs	r2, r3
 8004030:	4950      	ldr	r1, [pc, #320]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	3b01      	subs	r3, #1
 8004038:	f042 0210 	orr.w	r2, r2, #16
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d019      	beq.n	8004082 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800404e:	4a49      	ldr	r2, [pc, #292]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	3b01      	subs	r3, #1
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004066:	049b      	lsls	r3, r3, #18
 8004068:	431a      	orrs	r2, r3
 800406a:	4942      	ldr	r1, [pc, #264]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	3b01      	subs	r3, #1
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	605a      	str	r2, [r3, #4]
 8004080:	e01c      	b.n	80040bc <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d018      	beq.n	80040bc <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800408a:	4a3a      	ldr	r2, [pc, #232]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	3b01      	subs	r3, #1
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80040a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a2:	069b      	lsls	r3, r3, #26
 80040a4:	431a      	orrs	r2, r3
 80040a6:	4933      	ldr	r1, [pc, #204]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d019      	beq.n	80040fc <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80040c8:	4a2a      	ldr	r2, [pc, #168]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80040de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e0:	049b      	lsls	r3, r3, #18
 80040e2:	431a      	orrs	r2, r3
 80040e4:	4923      	ldr	r1, [pc, #140]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	e01c      	b.n	8004136 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d018      	beq.n	8004136 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	3b01      	subs	r3, #1
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800411a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411c:	069b      	lsls	r3, r3, #26
 800411e:	431a      	orrs	r2, r3
 8004120:	4914      	ldr	r1, [pc, #80]	; (8004174 <HAL_OSPIM_Config+0x65c>)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	3b01      	subs	r3, #1
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004136:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_OSPIM_Config+0x660>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a0c      	ldr	r2, [pc, #48]	; (8004178 <HAL_OSPIM_Config+0x660>)
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800414e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <HAL_OSPIM_Config+0x664>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a07      	ldr	r2, [pc, #28]	; (800417c <HAL_OSPIM_Config+0x664>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004166:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800416a:	4618      	mov	r0, r3
 800416c:	3748      	adds	r7, #72	; 0x48
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	50061c00 	.word	0x50061c00
 8004178:	a0001000 	.word	0xa0001000
 800417c:	a0001400 	.word	0xa0001400

08004180 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004190:	e01a      	b.n	80041c8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d016      	beq.n	80041c8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fd fec7 	bl	8001f2c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b6:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e00e      	b.n	80041e6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1d6      	bne.n	8004192 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <OSPIM_GetConfig+0x26>
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d802      	bhi.n	8004216 <OSPIM_GetConfig+0x26>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
 800421a:	e08e      	b.n	800433a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2200      	movs	r2, #0
 8004226:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2200      	movs	r2, #0
 8004232:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d101      	bne.n	8004244 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004240:	4b41      	ldr	r3, [pc, #260]	; (8004348 <OSPIM_GetConfig+0x158>)
 8004242:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e074      	b.n	8004334 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800424a:	4a40      	ldr	r2, [pc, #256]	; (800434c <OSPIM_GetConfig+0x15c>)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4053      	eors	r3, r2
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d103      	bne.n	8004276 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4053      	eors	r3, r2
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4053      	eors	r3, r2
 80042a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d018      	beq.n	80042f2 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4053      	eors	r3, r2
 80042c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d111      	bne.n	80042f2 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3301      	adds	r3, #1
 80042dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	e005      	b.n	80042f2 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d018      	beq.n	800432e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4053      	eors	r3, r2
 8004302:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d111      	bne.n	800432e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3301      	adds	r3, #1
 8004318:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	611a      	str	r2, [r3, #16]
 8004320:	e005      	b.n	800432e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3301      	adds	r3, #1
 8004326:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d987      	bls.n	800424a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	04040222 	.word	0x04040222
 800434c:	50061c00 	.word	0x50061c00

08004350 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800435c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004360:	d102      	bne.n	8004368 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004366:	e00b      	b.n	8004380 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004368:	4b08      	ldr	r3, [pc, #32]	; (800438c <HAL_PWREx_GetVoltageRange+0x3c>)
 800436a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004376:	d102      	bne.n	800437e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800437c:	e000      	b.n	8004380 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800437e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40007000 	.word	0x40007000

08004390 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d141      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800439e:	4b4b      	ldr	r3, [pc, #300]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043aa:	d131      	bne.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043ac:	4b47      	ldr	r3, [pc, #284]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b2:	4a46      	ldr	r2, [pc, #280]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043bc:	4b43      	ldr	r3, [pc, #268]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043c4:	4a41      	ldr	r2, [pc, #260]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043cc:	4b40      	ldr	r3, [pc, #256]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2232      	movs	r2, #50	; 0x32
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	4a3f      	ldr	r2, [pc, #252]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	0c9b      	lsrs	r3, r3, #18
 80043de:	3301      	adds	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e2:	e002      	b.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ea:	4b38      	ldr	r3, [pc, #224]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f6:	d102      	bne.n	80043fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f2      	bne.n	80043e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043fe:	4b33      	ldr	r3, [pc, #204]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440a:	d158      	bne.n	80044be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e057      	b.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004410:	4b2e      	ldr	r3, [pc, #184]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004416:	4a2d      	ldr	r2, [pc, #180]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800441c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004420:	e04d      	b.n	80044be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004428:	d141      	bne.n	80044ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800442a:	4b28      	ldr	r3, [pc, #160]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d131      	bne.n	800449c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004438:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443e:	4a23      	ldr	r2, [pc, #140]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004448:	4b20      	ldr	r3, [pc, #128]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004450:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004458:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2232      	movs	r2, #50	; 0x32
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	0c9b      	lsrs	r3, r3, #18
 800446a:	3301      	adds	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800446e:	e002      	b.n	8004476 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3b01      	subs	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004476:	4b15      	ldr	r3, [pc, #84]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004482:	d102      	bne.n	800448a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f2      	bne.n	8004470 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004496:	d112      	bne.n	80044be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e011      	b.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a2:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044ac:	e007      	b.n	80044be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044b6:	4a05      	ldr	r2, [pc, #20]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40007000 	.word	0x40007000
 80044d0:	20004b00 	.word	0x20004b00
 80044d4:	431bde83 	.word	0x431bde83

080044d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80044e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e6:	6053      	str	r3, [r2, #4]
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40007000 	.word	0x40007000

080044f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f000 bc08 	b.w	8004d1c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450c:	4b96      	ldr	r3, [pc, #600]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004516:	4b94      	ldr	r3, [pc, #592]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80e4 	beq.w	80046f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <HAL_RCC_OscConfig+0x4c>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b0c      	cmp	r3, #12
 8004538:	f040 808b 	bne.w	8004652 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b01      	cmp	r3, #1
 8004540:	f040 8087 	bne.w	8004652 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004544:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_OscConfig+0x64>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e3df      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	4b81      	ldr	r3, [pc, #516]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_RCC_OscConfig+0x7e>
 800456c:	4b7e      	ldr	r3, [pc, #504]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004574:	e005      	b.n	8004582 <HAL_RCC_OscConfig+0x8a>
 8004576:	4b7c      	ldr	r3, [pc, #496]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004582:	4293      	cmp	r3, r2
 8004584:	d223      	bcs.n	80045ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fdcc 	bl	8005128 <RCC_SetFlashLatencyFromMSIRange>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e3c0      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800459a:	4b73      	ldr	r3, [pc, #460]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a72      	ldr	r2, [pc, #456]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045a0:	f043 0308 	orr.w	r3, r3, #8
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	4b70      	ldr	r3, [pc, #448]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	496d      	ldr	r1, [pc, #436]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045b8:	4b6b      	ldr	r3, [pc, #428]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	4968      	ldr	r1, [pc, #416]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
 80045cc:	e025      	b.n	800461a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ce:	4b66      	ldr	r3, [pc, #408]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a65      	ldr	r2, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045d4:	f043 0308 	orr.w	r3, r3, #8
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4960      	ldr	r1, [pc, #384]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ec:	4b5e      	ldr	r3, [pc, #376]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	495b      	ldr	r1, [pc, #364]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fd8c 	bl	8005128 <RCC_SetFlashLatencyFromMSIRange>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e380      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800461a:	f000 fcc1 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 800461e:	4602      	mov	r2, r0
 8004620:	4b51      	ldr	r3, [pc, #324]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	4950      	ldr	r1, [pc, #320]	; (800476c <HAL_RCC_OscConfig+0x274>)
 800462c:	5ccb      	ldrb	r3, [r1, r3]
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	fa22 f303 	lsr.w	r3, r2, r3
 8004636:	4a4e      	ldr	r2, [pc, #312]	; (8004770 <HAL_RCC_OscConfig+0x278>)
 8004638:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800463a:	4b4e      	ldr	r3, [pc, #312]	; (8004774 <HAL_RCC_OscConfig+0x27c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fd fc24 	bl	8001e8c <HAL_InitTick>
 8004644:	4603      	mov	r3, r0
 8004646:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d052      	beq.n	80046f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	e364      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d032      	beq.n	80046c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800465a:	4b43      	ldr	r3, [pc, #268]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a42      	ldr	r2, [pc, #264]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004666:	f7fd fc61 	bl	8001f2c <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800466e:	f7fd fc5d 	bl	8001f2c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e34d      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004680:	4b39      	ldr	r3, [pc, #228]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a35      	ldr	r2, [pc, #212]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004692:	f043 0308 	orr.w	r3, r3, #8
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	4b33      	ldr	r3, [pc, #204]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	4930      	ldr	r1, [pc, #192]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046aa:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	492b      	ldr	r1, [pc, #172]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
 80046be:	e01a      	b.n	80046f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046c0:	4b29      	ldr	r3, [pc, #164]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a28      	ldr	r2, [pc, #160]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046cc:	f7fd fc2e 	bl	8001f2c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046d4:	f7fd fc2a 	bl	8001f2c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e31a      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1dc>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d073      	beq.n	80047ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d005      	beq.n	8004714 <HAL_RCC_OscConfig+0x21c>
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b0c      	cmp	r3, #12
 800470c:	d10e      	bne.n	800472c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d10b      	bne.n	800472c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d063      	beq.n	80047e8 <HAL_RCC_OscConfig+0x2f0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d15f      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e2f7      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	d106      	bne.n	8004744 <HAL_RCC_OscConfig+0x24c>
 8004736:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e025      	b.n	8004790 <HAL_RCC_OscConfig+0x298>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800474c:	d114      	bne.n	8004778 <HAL_RCC_OscConfig+0x280>
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a05      	ldr	r2, [pc, #20]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b03      	ldr	r3, [pc, #12]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a02      	ldr	r2, [pc, #8]	; (8004768 <HAL_RCC_OscConfig+0x270>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e013      	b.n	8004790 <HAL_RCC_OscConfig+0x298>
 8004768:	40021000 	.word	0x40021000
 800476c:	08007aec 	.word	0x08007aec
 8004770:	20004b00 	.word	0x20004b00
 8004774:	20004b04 	.word	0x20004b04
 8004778:	4ba0      	ldr	r3, [pc, #640]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a9f      	ldr	r2, [pc, #636]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 800477e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	4b9d      	ldr	r3, [pc, #628]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a9c      	ldr	r2, [pc, #624]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 800478a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d013      	beq.n	80047c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fd fbc8 	bl	8001f2c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a0:	f7fd fbc4 	bl	8001f2c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	; 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e2b4      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b2:	4b92      	ldr	r3, [pc, #584]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x2a8>
 80047be:	e014      	b.n	80047ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fbb4 	bl	8001f2c <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c8:	f7fd fbb0 	bl	8001f2c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e2a0      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047da:	4b88      	ldr	r3, [pc, #544]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x2d0>
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d060      	beq.n	80048b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_OscConfig+0x310>
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d119      	bne.n	8004836 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d116      	bne.n	8004836 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004808:	4b7c      	ldr	r3, [pc, #496]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_OscConfig+0x328>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e27d      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004820:	4b76      	ldr	r3, [pc, #472]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	4973      	ldr	r1, [pc, #460]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004834:	e040      	b.n	80048b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d023      	beq.n	8004886 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483e:	4b6f      	ldr	r3, [pc, #444]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6e      	ldr	r2, [pc, #440]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fd fb6f 	bl	8001f2c <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004852:	f7fd fb6b 	bl	8001f2c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e25b      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004864:	4b65      	ldr	r3, [pc, #404]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004870:	4b62      	ldr	r3, [pc, #392]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	495f      	ldr	r1, [pc, #380]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]
 8004884:	e018      	b.n	80048b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004886:	4b5d      	ldr	r3, [pc, #372]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5c      	ldr	r2, [pc, #368]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 800488c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fd fb4b 	bl	8001f2c <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489a:	f7fd fb47 	bl	8001f2c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e237      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ac:	4b53      	ldr	r3, [pc, #332]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f0      	bne.n	800489a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d03c      	beq.n	800493e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01c      	beq.n	8004906 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048cc:	4b4b      	ldr	r3, [pc, #300]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d2:	4a4a      	ldr	r2, [pc, #296]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fd fb26 	bl	8001f2c <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e4:	f7fd fb22 	bl	8001f2c <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e212      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f6:	4b41      	ldr	r3, [pc, #260]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80048f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0ef      	beq.n	80048e4 <HAL_RCC_OscConfig+0x3ec>
 8004904:	e01b      	b.n	800493e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004906:	4b3d      	ldr	r3, [pc, #244]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490c:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004916:	f7fd fb09 	bl	8001f2c <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491e:	f7fd fb05 	bl	8001f2c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e1f5      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004930:	4b32      	ldr	r3, [pc, #200]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1ef      	bne.n	800491e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 80a6 	beq.w	8004a98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800494c:	2300      	movs	r3, #0
 800494e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004950:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10d      	bne.n	8004978 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495c:	4b27      	ldr	r3, [pc, #156]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	4a26      	ldr	r2, [pc, #152]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 8004962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004966:	6593      	str	r3, [r2, #88]	; 0x58
 8004968:	4b24      	ldr	r3, [pc, #144]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004974:	2301      	movs	r3, #1
 8004976:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004978:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <HAL_RCC_OscConfig+0x508>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d118      	bne.n	80049b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004984:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <HAL_RCC_OscConfig+0x508>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1d      	ldr	r2, [pc, #116]	; (8004a00 <HAL_RCC_OscConfig+0x508>)
 800498a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004990:	f7fd facc 	bl	8001f2c <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004998:	f7fd fac8 	bl	8001f2c <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e1b8      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <HAL_RCC_OscConfig+0x508>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d108      	bne.n	80049d0 <HAL_RCC_OscConfig+0x4d8>
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ce:	e029      	b.n	8004a24 <HAL_RCC_OscConfig+0x52c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b05      	cmp	r3, #5
 80049d6:	d115      	bne.n	8004a04 <HAL_RCC_OscConfig+0x50c>
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	4a07      	ldr	r2, [pc, #28]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80049e0:	f043 0304 	orr.w	r3, r3, #4
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	4a03      	ldr	r2, [pc, #12]	; (80049fc <HAL_RCC_OscConfig+0x504>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f8:	e014      	b.n	8004a24 <HAL_RCC_OscConfig+0x52c>
 80049fa:	bf00      	nop
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40007000 	.word	0x40007000
 8004a04:	4b9d      	ldr	r3, [pc, #628]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	4a9c      	ldr	r2, [pc, #624]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a14:	4b99      	ldr	r3, [pc, #612]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1a:	4a98      	ldr	r2, [pc, #608]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004a1c:	f023 0304 	bic.w	r3, r3, #4
 8004a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d016      	beq.n	8004a5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2c:	f7fd fa7e 	bl	8001f2c <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a34:	f7fd fa7a 	bl	8001f2c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e168      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4a:	4b8c      	ldr	r3, [pc, #560]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ed      	beq.n	8004a34 <HAL_RCC_OscConfig+0x53c>
 8004a58:	e015      	b.n	8004a86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fd fa67 	bl	8001f2c <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a60:	e00a      	b.n	8004a78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fd fa63 	bl	8001f2c <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e151      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a78:	4b80      	ldr	r3, [pc, #512]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ed      	bne.n	8004a62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a86:	7ffb      	ldrb	r3, [r7, #31]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a8c:	4b7b      	ldr	r3, [pc, #492]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	4a7a      	ldr	r2, [pc, #488]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d03c      	beq.n	8004b1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01c      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004aac:	4b73      	ldr	r3, [pc, #460]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ab2:	4a72      	ldr	r2, [pc, #456]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fd fa36 	bl	8001f2c <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac4:	f7fd fa32 	bl	8001f2c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e122      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ad6:	4b69      	ldr	r3, [pc, #420]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ef      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x5cc>
 8004ae4:	e01b      	b.n	8004b1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ae6:	4b65      	ldr	r3, [pc, #404]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004ae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aec:	4a63      	ldr	r2, [pc, #396]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af6:	f7fd fa19 	bl	8001f2c <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004afe:	f7fd fa15 	bl	8001f2c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e105      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b10:	4b5a      	ldr	r3, [pc, #360]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ef      	bne.n	8004afe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80f9 	beq.w	8004d1a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f040 80cf 	bne.w	8004cd0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b32:	4b52      	ldr	r3, [pc, #328]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 0203 	and.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d12c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	3b01      	subs	r3, #1
 8004b52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d123      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d11b      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d113      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	3b01      	subs	r3, #1
 8004b86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d109      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d071      	beq.n	8004c84 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d068      	beq.n	8004c78 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ba6:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004bb2:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e0ac      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bc2:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bcc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bce:	f7fd f9ad 	bl	8001f2c <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd6:	f7fd f9a9 	bl	8001f2c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e099      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be8:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f0      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf4:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <HAL_RCC_OscConfig+0x788>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0112      	lsls	r2, r2, #4
 8004c08:	4311      	orrs	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c0e:	0212      	lsls	r2, r2, #8
 8004c10:	4311      	orrs	r1, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c16:	0852      	lsrs	r2, r2, #1
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	0552      	lsls	r2, r2, #21
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c22:	0852      	lsrs	r2, r2, #1
 8004c24:	3a01      	subs	r2, #1
 8004c26:	0652      	lsls	r2, r2, #25
 8004c28:	4311      	orrs	r1, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c2e:	06d2      	lsls	r2, r2, #27
 8004c30:	430a      	orrs	r2, r1
 8004c32:	4912      	ldr	r1, [pc, #72]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0f      	ldr	r2, [pc, #60]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c44:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c50:	f7fd f96c 	bl	8001f2c <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fd f968 	bl	8001f2c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e058      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6a:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <HAL_RCC_OscConfig+0x784>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c76:	e050      	b.n	8004d1a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e04f      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c84:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d144      	bne.n	8004d1a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c90:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a23      	ldr	r2, [pc, #140]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c9c:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ca8:	f7fd f940 	bl	8001f2c <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fd f93c 	bl	8001f2c <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e02c      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc2:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x7b8>
 8004cce:	e024      	b.n	8004d1a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d01f      	beq.n	8004d16 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fd f923 	bl	8001f2c <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cea:	f7fd f91f 	bl	8001f2c <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e00f      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	4905      	ldr	r1, [pc, #20]	; (8004d24 <HAL_RCC_OscConfig+0x82c>)
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_RCC_OscConfig+0x830>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	60cb      	str	r3, [r1, #12]
 8004d14:	e001      	b.n	8004d1a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3720      	adds	r7, #32
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	feeefffc 	.word	0xfeeefffc

08004d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e11d      	b.n	8004f80 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d44:	4b90      	ldr	r3, [pc, #576]	; (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d910      	bls.n	8004d74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b8d      	ldr	r3, [pc, #564]	; (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 020f 	bic.w	r2, r3, #15
 8004d5a:	498b      	ldr	r1, [pc, #556]	; (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b89      	ldr	r3, [pc, #548]	; (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e105      	b.n	8004f80 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d010      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	4b81      	ldr	r3, [pc, #516]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d908      	bls.n	8004da2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d90:	4b7e      	ldr	r3, [pc, #504]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	497b      	ldr	r1, [pc, #492]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d079      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d11e      	bne.n	8004df4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db6:	4b75      	ldr	r3, [pc, #468]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e0dc      	b.n	8004f80 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004dc6:	f000 fa09 	bl	80051dc <RCC_GetSysClockFreqFromPLLSource>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4a70      	ldr	r2, [pc, #448]	; (8004f90 <HAL_RCC_ClockConfig+0x264>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d946      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004dd2:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d140      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dde:	4b6b      	ldr	r3, [pc, #428]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004de6:	4a69      	ldr	r2, [pc, #420]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e035      	b.n	8004e60 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dfc:	4b63      	ldr	r3, [pc, #396]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d115      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0b9      	b.n	8004f80 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e14:	4b5d      	ldr	r3, [pc, #372]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d109      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0ad      	b.n	8004f80 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e24:	4b59      	ldr	r3, [pc, #356]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0a5      	b.n	8004f80 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004e34:	f000 f8b4 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4a55      	ldr	r2, [pc, #340]	; (8004f90 <HAL_RCC_ClockConfig+0x264>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d90f      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e40:	4b52      	ldr	r3, [pc, #328]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e4c:	4b4f      	ldr	r3, [pc, #316]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e54:	4a4d      	ldr	r2, [pc, #308]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e60:	4b4a      	ldr	r3, [pc, #296]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f023 0203 	bic.w	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4947      	ldr	r1, [pc, #284]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e72:	f7fd f85b 	bl	8001f2c <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e78:	e00a      	b.n	8004e90 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7a:	f7fd f857 	bl	8001f2c <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e077      	b.n	8004f80 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e90:	4b3e      	ldr	r3, [pc, #248]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 020c 	and.w	r2, r3, #12
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d1eb      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ea8:	4b38      	ldr	r3, [pc, #224]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4a37      	ldr	r2, [pc, #220]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d208      	bcs.n	8004ee2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed0:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	492b      	ldr	r1, [pc, #172]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee2:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d210      	bcs.n	8004f12 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 020f 	bic.w	r2, r3, #15
 8004ef8:	4923      	ldr	r1, [pc, #140]	; (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f00:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <HAL_RCC_ClockConfig+0x25c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e036      	b.n	8004f80 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	4918      	ldr	r1, [pc, #96]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f3c:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4910      	ldr	r1, [pc, #64]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f50:	f000 f826 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_RCC_ClockConfig+0x260>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	490c      	ldr	r1, [pc, #48]	; (8004f94 <HAL_RCC_ClockConfig+0x268>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <HAL_RCC_ClockConfig+0x26c>)
 8004f6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f70:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <HAL_RCC_ClockConfig+0x270>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fc ff89 	bl	8001e8c <HAL_InitTick>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40022000 	.word	0x40022000
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	04c4b400 	.word	0x04c4b400
 8004f94:	08007aec 	.word	0x08007aec
 8004f98:	20004b00 	.word	0x20004b00
 8004f9c:	20004b04 	.word	0x20004b04

08004fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fae:	4b3e      	ldr	r3, [pc, #248]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d121      	bne.n	8005012 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d11e      	bne.n	8005012 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fd4:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fe0:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e005      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ffc:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005004:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10d      	bne.n	8005028 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005010:	e00a      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b04      	cmp	r3, #4
 8005016:	d102      	bne.n	800501e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005018:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	e004      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d101      	bne.n	8005028 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005024:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005026:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d134      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800502e:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d003      	beq.n	8005046 <HAL_RCC_GetSysClockFreq+0xa6>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d003      	beq.n	800504c <HAL_RCC_GetSysClockFreq+0xac>
 8005044:	e005      	b.n	8005052 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005046:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005048:	617b      	str	r3, [r7, #20]
      break;
 800504a:	e005      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800504c:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800504e:	617b      	str	r3, [r7, #20]
      break;
 8005050:	e002      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	617b      	str	r3, [r7, #20]
      break;
 8005056:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	3301      	adds	r3, #1
 8005064:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	fb03 f202 	mul.w	r2, r3, r2
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	0e5b      	lsrs	r3, r3, #25
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	3301      	adds	r3, #1
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005098:	69bb      	ldr	r3, [r7, #24]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3724      	adds	r7, #36	; 0x24
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40021000 	.word	0x40021000
 80050ac:	08007b04 	.word	0x08007b04
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	007a1200 	.word	0x007a1200

080050b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_GetHCLKFreq+0x14>)
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	20004b00 	.word	0x20004b00

080050d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050d4:	f7ff fff0 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 80050d8:	4602      	mov	r2, r0
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	4904      	ldr	r1, [pc, #16]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000
 80050f8:	08007afc 	.word	0x08007afc

080050fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005100:	f7ff ffda 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0adb      	lsrs	r3, r3, #11
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4904      	ldr	r1, [pc, #16]	; (8005124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	08007afc 	.word	0x08007afc

08005128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005134:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005140:	f7ff f906 	bl	8004350 <HAL_PWREx_GetVoltageRange>
 8005144:	6178      	str	r0, [r7, #20]
 8005146:	e014      	b.n	8005172 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005148:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800514e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005152:	6593      	str	r3, [r2, #88]	; 0x58
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005160:	f7ff f8f6 	bl	8004350 <HAL_PWREx_GetVoltageRange>
 8005164:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005166:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800516c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005170:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005178:	d10b      	bne.n	8005192 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b80      	cmp	r3, #128	; 0x80
 800517e:	d913      	bls.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2ba0      	cmp	r3, #160	; 0xa0
 8005184:	d902      	bls.n	800518c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005186:	2302      	movs	r3, #2
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	e00d      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800518c:	2301      	movs	r3, #1
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e00a      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b7f      	cmp	r3, #127	; 0x7f
 8005196:	d902      	bls.n	800519e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005198:	2302      	movs	r3, #2
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	e004      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b70      	cmp	r3, #112	; 0x70
 80051a2:	d101      	bne.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051a4:	2301      	movs	r3, #1
 80051a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 020f 	bic.w	r2, r3, #15
 80051b0:	4909      	ldr	r1, [pc, #36]	; (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d001      	beq.n	80051ca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40022000 	.word	0x40022000

080051dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051e2:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d00b      	beq.n	800520a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d825      	bhi.n	8005244 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d008      	beq.n	8005210 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d11f      	bne.n	8005244 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005204:	4b25      	ldr	r3, [pc, #148]	; (800529c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005206:	613b      	str	r3, [r7, #16]
    break;
 8005208:	e01f      	b.n	800524a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800520a:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800520c:	613b      	str	r3, [r7, #16]
    break;
 800520e:	e01c      	b.n	800524a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005210:	4b21      	ldr	r3, [pc, #132]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d107      	bne.n	800522c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800521c:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800521e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e005      	b.n	8005238 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800522c:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005238:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005240:	613b      	str	r3, [r7, #16]
    break;
 8005242:	e002      	b.n	800524a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
    break;
 8005248:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	091b      	lsrs	r3, r3, #4
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	3301      	adds	r3, #1
 8005256:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005258:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	0a1b      	lsrs	r3, r3, #8
 800525e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	fb03 f202 	mul.w	r2, r3, r2
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	fbb2 f3f3 	udiv	r3, r2, r3
 800526e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	0e5b      	lsrs	r3, r3, #25
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	3301      	adds	r3, #1
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800528a:	683b      	ldr	r3, [r7, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40021000 	.word	0x40021000
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	007a1200 	.word	0x007a1200
 80052a4:	08007b04 	.word	0x08007b04

080052a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052b0:	2300      	movs	r3, #0
 80052b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052b4:	2300      	movs	r3, #0
 80052b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d040      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c8:	2b80      	cmp	r3, #128	; 0x80
 80052ca:	d02a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d825      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052d0:	2b60      	cmp	r3, #96	; 0x60
 80052d2:	d026      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052d4:	2b60      	cmp	r3, #96	; 0x60
 80052d6:	d821      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d006      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x42>
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	d81d      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d009      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d010      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80052e8:	e018      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052ea:	4b89      	ldr	r3, [pc, #548]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	4a88      	ldr	r2, [pc, #544]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052f6:	e015      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb62 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005308:	e00c      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3320      	adds	r3, #32
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fc4d 	bl	8005bb0 <RCCEx_PLLSAI2_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800531a:	e003      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	74fb      	strb	r3, [r7, #19]
      break;
 8005320:	e000      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800532a:	4b79      	ldr	r3, [pc, #484]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800532c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005330:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005338:	4975      	ldr	r1, [pc, #468]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005340:	e001      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d047      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535a:	d030      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x116>
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d82a      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005366:	d02a      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536c:	d824      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800536e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005372:	d008      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005378:	d81e      	bhi.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800537e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005382:	d010      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005384:	e018      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005386:	4b62      	ldr	r3, [pc, #392]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	4a61      	ldr	r2, [pc, #388]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005392:	e015      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	2100      	movs	r1, #0
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fb14 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053a4:	e00c      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3320      	adds	r3, #32
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fbff 	bl	8005bb0 <RCCEx_PLLSAI2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053b6:	e003      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	74fb      	strb	r3, [r7, #19]
      break;
 80053bc:	e000      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80053be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c0:	7cfb      	ldrb	r3, [r7, #19]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053c6:	4b52      	ldr	r3, [pc, #328]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	494e      	ldr	r1, [pc, #312]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80053dc:	e001      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 809f 	beq.w	800552e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f0:	2300      	movs	r3, #0
 80053f2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053f4:	4b46      	ldr	r3, [pc, #280]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00d      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800540a:	4b41      	ldr	r3, [pc, #260]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540e:	4a40      	ldr	r2, [pc, #256]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005414:	6593      	str	r3, [r2, #88]	; 0x58
 8005416:	4b3e      	ldr	r3, [pc, #248]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005422:	2301      	movs	r3, #1
 8005424:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005426:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a3a      	ldr	r2, [pc, #232]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800542c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005430:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005432:	f7fc fd7b 	bl	8001f2c <HAL_GetTick>
 8005436:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005438:	e009      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543a:	f7fc fd77 	bl	8001f2c <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d902      	bls.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	74fb      	strb	r3, [r7, #19]
        break;
 800544c:	e005      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800544e:	4b31      	ldr	r3, [pc, #196]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0ef      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800545a:	7cfb      	ldrb	r3, [r7, #19]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d15b      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005460:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01f      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	429a      	cmp	r2, r3
 800547c:	d019      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800547e:	4b24      	ldr	r3, [pc, #144]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005488:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800548a:	4b21      	ldr	r3, [pc, #132]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800548c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005490:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800549a:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a0:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054aa:	4a19      	ldr	r2, [pc, #100]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d016      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054bc:	f7fc fd36 	bl	8001f2c <HAL_GetTick>
 80054c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c2:	e00b      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fc fd32 	bl	8001f2c <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d902      	bls.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	74fb      	strb	r3, [r7, #19]
            break;
 80054da:	e006      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054dc:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0ec      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80054ea:	7cfb      	ldrb	r3, [r7, #19]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10c      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f0:	4b07      	ldr	r3, [pc, #28]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005500:	4903      	ldr	r1, [pc, #12]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005508:	e008      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800550a:	7cfb      	ldrb	r3, [r7, #19]
 800550c:	74bb      	strb	r3, [r7, #18]
 800550e:	e005      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005510:	40021000 	.word	0x40021000
 8005514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800551c:	7c7b      	ldrb	r3, [r7, #17]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d105      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005522:	4ba0      	ldr	r3, [pc, #640]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	4a9f      	ldr	r2, [pc, #636]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800552c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800553a:	4b9a      	ldr	r3, [pc, #616]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005540:	f023 0203 	bic.w	r2, r3, #3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005548:	4996      	ldr	r1, [pc, #600]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800555c:	4b91      	ldr	r3, [pc, #580]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f023 020c 	bic.w	r2, r3, #12
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	498e      	ldr	r1, [pc, #568]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800557e:	4b89      	ldr	r3, [pc, #548]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005584:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558c:	4985      	ldr	r1, [pc, #532]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055a0:	4b80      	ldr	r3, [pc, #512]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ae:	497d      	ldr	r1, [pc, #500]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055c2:	4b78      	ldr	r3, [pc, #480]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d0:	4974      	ldr	r1, [pc, #464]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055e4:	4b6f      	ldr	r3, [pc, #444]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	496c      	ldr	r1, [pc, #432]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005606:	4b67      	ldr	r3, [pc, #412]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005614:	4963      	ldr	r1, [pc, #396]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005628:	4b5e      	ldr	r3, [pc, #376]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005636:	495b      	ldr	r1, [pc, #364]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800564a:	4b56      	ldr	r3, [pc, #344]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005658:	4952      	ldr	r1, [pc, #328]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800566c:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	494a      	ldr	r1, [pc, #296]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800568e:	4b45      	ldr	r3, [pc, #276]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569c:	4941      	ldr	r1, [pc, #260]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056b0:	4b3c      	ldr	r3, [pc, #240]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056b6:	f023 0203 	bic.w	r2, r3, #3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056be:	4939      	ldr	r1, [pc, #228]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d028      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d2:	4b34      	ldr	r3, [pc, #208]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e0:	4930      	ldr	r1, [pc, #192]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f0:	d106      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f2:	4b2c      	ldr	r3, [pc, #176]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	4a2b      	ldr	r2, [pc, #172]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056fc:	60d3      	str	r3, [r2, #12]
 80056fe:	e011      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005708:	d10c      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3304      	adds	r3, #4
 800570e:	2101      	movs	r1, #1
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f959 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800571a:	7cfb      	ldrb	r3, [r7, #19]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d04d      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005738:	d108      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800573a:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800573c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005740:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005746:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800574a:	e012      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800574c:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800574e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005752:	4a14      	ldr	r2, [pc, #80]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005758:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800575c:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800576a:	490e      	ldr	r1, [pc, #56]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800577a:	d106      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005786:	60d3      	str	r3, [r2, #12]
 8005788:	e020      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800578e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005792:	d109      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4a02      	ldr	r2, [pc, #8]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800579a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579e:	60d3      	str	r3, [r2, #12]
 80057a0:	e014      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80057a2:	bf00      	nop
 80057a4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057b0:	d10c      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	2101      	movs	r1, #1
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 f905 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057c2:	7cfb      	ldrb	r3, [r7, #19]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80057c8:	7cfb      	ldrb	r3, [r7, #19]
 80057ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d028      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057d8:	4b7a      	ldr	r3, [pc, #488]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e6:	4977      	ldr	r1, [pc, #476]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f6:	d106      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f8:	4b72      	ldr	r3, [pc, #456]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	4a71      	ldr	r2, [pc, #452]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005802:	60d3      	str	r3, [r2, #12]
 8005804:	e011      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800580e:	d10c      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	2101      	movs	r1, #1
 8005816:	4618      	mov	r0, r3
 8005818:	f000 f8d6 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005826:	7cfb      	ldrb	r3, [r7, #19]
 8005828:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01e      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005836:	4b63      	ldr	r3, [pc, #396]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005846:	495f      	ldr	r1, [pc, #380]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005858:	d10c      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3304      	adds	r3, #4
 800585e:	2102      	movs	r1, #2
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f8b1 	bl	80059c8 <RCCEx_PLLSAI1_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800586a:	7cfb      	ldrb	r3, [r7, #19]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005880:	4b50      	ldr	r3, [pc, #320]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005882:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005886:	f023 0204 	bic.w	r2, r3, #4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005890:	494c      	ldr	r1, [pc, #304]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058a4:	4b47      	ldr	r3, [pc, #284]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058aa:	f023 0218 	bic.w	r2, r3, #24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b4:	4943      	ldr	r1, [pc, #268]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d035      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058c8:	4b3e      	ldr	r3, [pc, #248]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a3d      	ldr	r2, [pc, #244]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d4:	f7fc fb2a 	bl	8001f2c <HAL_GetTick>
 80058d8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058da:	e009      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058dc:	f7fc fb26 	bl	8001f2c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d902      	bls.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	74fb      	strb	r3, [r7, #19]
        break;
 80058ee:	e005      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058f0:	4b34      	ldr	r3, [pc, #208]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1ef      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80058fc:	7cfb      	ldrb	r3, [r7, #19]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d113      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005902:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005912:	492c      	ldr	r1, [pc, #176]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3320      	adds	r3, #32
 800591e:	2102      	movs	r1, #2
 8005920:	4618      	mov	r0, r3
 8005922:	f000 f945 	bl	8005bb0 <RCCEx_PLLSAI2_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800592a:	7cfb      	ldrb	r3, [r7, #19]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005930:	7cfb      	ldrb	r3, [r7, #19]
 8005932:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01e      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005940:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	491c      	ldr	r1, [pc, #112]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	d10c      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3320      	adds	r3, #32
 8005968:	2101      	movs	r1, #1
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f920 	bl	8005bb0 <RCCEx_PLLSAI2_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800597a:	7cfb      	ldrb	r3, [r7, #19]
 800597c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d017      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800598a:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800598c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599a:	490a      	ldr	r1, [pc, #40]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ac:	d105      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	4a04      	ldr	r2, [pc, #16]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40021000 	.word	0x40021000

080059c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059d6:	4b72      	ldr	r3, [pc, #456]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059e2:	4b6f      	ldr	r3, [pc, #444]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0203 	and.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d103      	bne.n	80059fa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
       ||
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d142      	bne.n	8005a80 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	73fb      	strb	r3, [r7, #15]
 80059fe:	e03f      	b.n	8005a80 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d018      	beq.n	8005a3a <RCCEx_PLLSAI1_Config+0x72>
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d825      	bhi.n	8005a58 <RCCEx_PLLSAI1_Config+0x90>
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d002      	beq.n	8005a16 <RCCEx_PLLSAI1_Config+0x4e>
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d009      	beq.n	8005a28 <RCCEx_PLLSAI1_Config+0x60>
 8005a14:	e020      	b.n	8005a58 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a16:	4b62      	ldr	r3, [pc, #392]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d11d      	bne.n	8005a5e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a26:	e01a      	b.n	8005a5e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a28:	4b5d      	ldr	r3, [pc, #372]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d116      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a38:	e013      	b.n	8005a62 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a3a:	4b59      	ldr	r3, [pc, #356]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10f      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a46:	4b56      	ldr	r3, [pc, #344]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a56:	e006      	b.n	8005a66 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a5c:	e004      	b.n	8005a68 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e002      	b.n	8005a68 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d108      	bne.n	8005a80 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005a6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f023 0203 	bic.w	r2, r3, #3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4949      	ldr	r1, [pc, #292]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 8086 	bne.w	8005b94 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a88:	4b45      	ldr	r3, [pc, #276]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a44      	ldr	r2, [pc, #272]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a94:	f7fc fa4a 	bl	8001f2c <HAL_GetTick>
 8005a98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a9a:	e009      	b.n	8005ab0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a9c:	f7fc fa46 	bl	8001f2c <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d902      	bls.n	8005ab0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	73fb      	strb	r3, [r7, #15]
        break;
 8005aae:	e005      	b.n	8005abc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ab0:	4b3b      	ldr	r3, [pc, #236]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1ef      	bne.n	8005a9c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d168      	bne.n	8005b94 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d113      	bne.n	8005af0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ac8:	4b35      	ldr	r3, [pc, #212]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	4b35      	ldr	r3, [pc, #212]	; (8005ba4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6892      	ldr	r2, [r2, #8]
 8005ad4:	0211      	lsls	r1, r2, #8
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68d2      	ldr	r2, [r2, #12]
 8005ada:	06d2      	lsls	r2, r2, #27
 8005adc:	4311      	orrs	r1, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6852      	ldr	r2, [r2, #4]
 8005ae2:	3a01      	subs	r2, #1
 8005ae4:	0112      	lsls	r2, r2, #4
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	492d      	ldr	r1, [pc, #180]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	610b      	str	r3, [r1, #16]
 8005aee:	e02d      	b.n	8005b4c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d115      	bne.n	8005b22 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005af6:	4b2a      	ldr	r3, [pc, #168]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6892      	ldr	r2, [r2, #8]
 8005b02:	0211      	lsls	r1, r2, #8
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6912      	ldr	r2, [r2, #16]
 8005b08:	0852      	lsrs	r2, r2, #1
 8005b0a:	3a01      	subs	r2, #1
 8005b0c:	0552      	lsls	r2, r2, #21
 8005b0e:	4311      	orrs	r1, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6852      	ldr	r2, [r2, #4]
 8005b14:	3a01      	subs	r2, #1
 8005b16:	0112      	lsls	r2, r2, #4
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	4921      	ldr	r1, [pc, #132]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	610b      	str	r3, [r1, #16]
 8005b20:	e014      	b.n	8005b4c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b22:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	4b21      	ldr	r3, [pc, #132]	; (8005bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6892      	ldr	r2, [r2, #8]
 8005b2e:	0211      	lsls	r1, r2, #8
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6952      	ldr	r2, [r2, #20]
 8005b34:	0852      	lsrs	r2, r2, #1
 8005b36:	3a01      	subs	r2, #1
 8005b38:	0652      	lsls	r2, r2, #25
 8005b3a:	4311      	orrs	r1, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6852      	ldr	r2, [r2, #4]
 8005b40:	3a01      	subs	r2, #1
 8005b42:	0112      	lsls	r2, r2, #4
 8005b44:	430a      	orrs	r2, r1
 8005b46:	4916      	ldr	r1, [pc, #88]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b4c:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b58:	f7fc f9e8 	bl	8001f2c <HAL_GetTick>
 8005b5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b5e:	e009      	b.n	8005b74 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b60:	f7fc f9e4 	bl	8001f2c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d902      	bls.n	8005b74 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	73fb      	strb	r3, [r7, #15]
          break;
 8005b72:	e005      	b.n	8005b80 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0ef      	beq.n	8005b60 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b86:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	4904      	ldr	r1, [pc, #16]	; (8005ba0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	07ff800f 	.word	0x07ff800f
 8005ba8:	ff9f800f 	.word	0xff9f800f
 8005bac:	f9ff800f 	.word	0xf9ff800f

08005bb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bbe:	4b72      	ldr	r3, [pc, #456]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00e      	beq.n	8005be8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bca:	4b6f      	ldr	r3, [pc, #444]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0203 	and.w	r2, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d103      	bne.n	8005be2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d142      	bne.n	8005c68 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	73fb      	strb	r3, [r7, #15]
 8005be6:	e03f      	b.n	8005c68 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d018      	beq.n	8005c22 <RCCEx_PLLSAI2_Config+0x72>
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d825      	bhi.n	8005c40 <RCCEx_PLLSAI2_Config+0x90>
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d002      	beq.n	8005bfe <RCCEx_PLLSAI2_Config+0x4e>
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d009      	beq.n	8005c10 <RCCEx_PLLSAI2_Config+0x60>
 8005bfc:	e020      	b.n	8005c40 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bfe:	4b62      	ldr	r3, [pc, #392]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d11d      	bne.n	8005c46 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c0e:	e01a      	b.n	8005c46 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c10:	4b5d      	ldr	r3, [pc, #372]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d116      	bne.n	8005c4a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c20:	e013      	b.n	8005c4a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c22:	4b59      	ldr	r3, [pc, #356]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c2e:	4b56      	ldr	r3, [pc, #344]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d109      	bne.n	8005c4e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c3e:	e006      	b.n	8005c4e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
      break;
 8005c44:	e004      	b.n	8005c50 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c46:	bf00      	nop
 8005c48:	e002      	b.n	8005c50 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e000      	b.n	8005c50 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d108      	bne.n	8005c68 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005c56:	4b4c      	ldr	r3, [pc, #304]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f023 0203 	bic.w	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4949      	ldr	r1, [pc, #292]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f040 8086 	bne.w	8005d7c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c70:	4b45      	ldr	r3, [pc, #276]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a44      	ldr	r2, [pc, #272]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7c:	f7fc f956 	bl	8001f2c <HAL_GetTick>
 8005c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c82:	e009      	b.n	8005c98 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c84:	f7fc f952 	bl	8001f2c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d902      	bls.n	8005c98 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	73fb      	strb	r3, [r7, #15]
        break;
 8005c96:	e005      	b.n	8005ca4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c98:	4b3b      	ldr	r3, [pc, #236]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1ef      	bne.n	8005c84 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d168      	bne.n	8005d7c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d113      	bne.n	8005cd8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cb0:	4b35      	ldr	r3, [pc, #212]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cb2:	695a      	ldr	r2, [r3, #20]
 8005cb4:	4b35      	ldr	r3, [pc, #212]	; (8005d8c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6892      	ldr	r2, [r2, #8]
 8005cbc:	0211      	lsls	r1, r2, #8
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68d2      	ldr	r2, [r2, #12]
 8005cc2:	06d2      	lsls	r2, r2, #27
 8005cc4:	4311      	orrs	r1, r2
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6852      	ldr	r2, [r2, #4]
 8005cca:	3a01      	subs	r2, #1
 8005ccc:	0112      	lsls	r2, r2, #4
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	492d      	ldr	r1, [pc, #180]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	614b      	str	r3, [r1, #20]
 8005cd6:	e02d      	b.n	8005d34 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d115      	bne.n	8005d0a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cde:	4b2a      	ldr	r3, [pc, #168]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce0:	695a      	ldr	r2, [r3, #20]
 8005ce2:	4b2b      	ldr	r3, [pc, #172]	; (8005d90 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6892      	ldr	r2, [r2, #8]
 8005cea:	0211      	lsls	r1, r2, #8
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6912      	ldr	r2, [r2, #16]
 8005cf0:	0852      	lsrs	r2, r2, #1
 8005cf2:	3a01      	subs	r2, #1
 8005cf4:	0552      	lsls	r2, r2, #21
 8005cf6:	4311      	orrs	r1, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6852      	ldr	r2, [r2, #4]
 8005cfc:	3a01      	subs	r2, #1
 8005cfe:	0112      	lsls	r2, r2, #4
 8005d00:	430a      	orrs	r2, r1
 8005d02:	4921      	ldr	r1, [pc, #132]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	614b      	str	r3, [r1, #20]
 8005d08:	e014      	b.n	8005d34 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d0a:	4b1f      	ldr	r3, [pc, #124]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	4b21      	ldr	r3, [pc, #132]	; (8005d94 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6892      	ldr	r2, [r2, #8]
 8005d16:	0211      	lsls	r1, r2, #8
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6952      	ldr	r2, [r2, #20]
 8005d1c:	0852      	lsrs	r2, r2, #1
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	0652      	lsls	r2, r2, #25
 8005d22:	4311      	orrs	r1, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6852      	ldr	r2, [r2, #4]
 8005d28:	3a01      	subs	r2, #1
 8005d2a:	0112      	lsls	r2, r2, #4
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	4916      	ldr	r1, [pc, #88]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d34:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fc f8f4 	bl	8001f2c <HAL_GetTick>
 8005d44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d46:	e009      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d48:	f7fc f8f0 	bl	8001f2c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d902      	bls.n	8005d5c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	73fb      	strb	r3, [r7, #15]
          break;
 8005d5a:	e005      	b.n	8005d68 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0ef      	beq.n	8005d48 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d70:	695a      	ldr	r2, [r3, #20]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	4904      	ldr	r1, [pc, #16]	; (8005d88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	07ff800f 	.word	0x07ff800f
 8005d90:	ff9f800f 	.word	0xff9f800f
 8005d94:	f9ff800f 	.word	0xf9ff800f

08005d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e095      	b.n	8005ed6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dba:	d009      	beq.n	8005dd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	61da      	str	r2, [r3, #28]
 8005dc2:	e005      	b.n	8005dd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb fe4c 	bl	8001a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e10:	d902      	bls.n	8005e18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	e002      	b.n	8005e1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e26:	d007      	beq.n	8005e38 <HAL_SPI_Init+0xa0>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e30:	d002      	beq.n	8005e38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7a:	ea42 0103 	orr.w	r1, r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	0c1b      	lsrs	r3, r3, #16
 8005e94:	f003 0204 	and.w	r2, r3, #4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005eb4:	ea42 0103 	orr.w	r1, r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b088      	sub	sp, #32
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_SPI_Transmit+0x22>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e15f      	b.n	80061c0 <HAL_SPI_Transmit+0x2e2>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f08:	f7fc f810 	bl	8001f2c <HAL_GetTick>
 8005f0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d002      	beq.n	8005f24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f22:	e148      	b.n	80061b6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_SPI_Transmit+0x52>
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f34:	e13f      	b.n	80061b6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2203      	movs	r2, #3
 8005f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	88fa      	ldrh	r2, [r7, #6]
 8005f54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f80:	d10f      	bne.n	8005fa2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d007      	beq.n	8005fc0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fc8:	d94f      	bls.n	800606a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_SPI_Transmit+0xfa>
 8005fd2:	8afb      	ldrh	r3, [r7, #22]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d142      	bne.n	800605e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	881a      	ldrh	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	1c9a      	adds	r2, r3, #2
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ffc:	e02f      	b.n	800605e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b02      	cmp	r3, #2
 800600a:	d112      	bne.n	8006032 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	881a      	ldrh	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	1c9a      	adds	r2, r3, #2
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006030:	e015      	b.n	800605e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006032:	f7fb ff7b 	bl	8001f2c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d803      	bhi.n	800604a <HAL_SPI_Transmit+0x16c>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d102      	bne.n	8006050 <HAL_SPI_Transmit+0x172>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d106      	bne.n	800605e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800605c:	e0ab      	b.n	80061b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1ca      	bne.n	8005ffe <HAL_SPI_Transmit+0x120>
 8006068:	e080      	b.n	800616c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_SPI_Transmit+0x19a>
 8006072:	8afb      	ldrh	r3, [r7, #22]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d174      	bne.n	8006162 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d912      	bls.n	80060a8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	881a      	ldrh	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	1c9a      	adds	r2, r3, #2
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b02      	subs	r3, #2
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060a6:	e05c      	b.n	8006162 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	7812      	ldrb	r2, [r2, #0]
 80060b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80060ce:	e048      	b.n	8006162 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d12b      	bne.n	8006136 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d912      	bls.n	800610e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	881a      	ldrh	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	1c9a      	adds	r2, r3, #2
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b02      	subs	r3, #2
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800610c:	e029      	b.n	8006162 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006134:	e015      	b.n	8006162 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006136:	f7fb fef9 	bl	8001f2c <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d803      	bhi.n	800614e <HAL_SPI_Transmit+0x270>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d102      	bne.n	8006154 <HAL_SPI_Transmit+0x276>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006160:	e029      	b.n	80061b6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1b1      	bne.n	80060d0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fcf9 	bl	8006b68 <SPI_EndRxTxTransaction>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800618a:	2300      	movs	r3, #0
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	77fb      	strb	r3, [r7, #31]
 80061ac:	e003      	b.n	80061b6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061be:	7ffb      	ldrb	r3, [r7, #31]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3720      	adds	r7, #32
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d002      	beq.n	80061ee <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80061e8:	2302      	movs	r3, #2
 80061ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061ec:	e11a      	b.n	8006424 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061f6:	d112      	bne.n	800621e <HAL_SPI_Receive+0x56>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10e      	bne.n	800621e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2204      	movs	r2, #4
 8006204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006208:	88fa      	ldrh	r2, [r7, #6]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	4613      	mov	r3, r2
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f90e 	bl	8006436 <HAL_SPI_TransmitReceive>
 800621a:	4603      	mov	r3, r0
 800621c:	e107      	b.n	800642e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_SPI_Receive+0x64>
 8006228:	2302      	movs	r3, #2
 800622a:	e100      	b.n	800642e <HAL_SPI_Receive+0x266>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006234:	f7fb fe7a 	bl	8001f2c <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SPI_Receive+0x7e>
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
    goto error;
 800624a:	e0eb      	b.n	8006424 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2204      	movs	r2, #4
 8006250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	88fa      	ldrh	r2, [r7, #6]
 800626c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006296:	d908      	bls.n	80062aa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062a6:	605a      	str	r2, [r3, #4]
 80062a8:	e007      	b.n	80062ba <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062b8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c2:	d10f      	bne.n	80062e4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d007      	beq.n	8006302 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800630a:	d86f      	bhi.n	80063ec <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800630c:	e034      	b.n	8006378 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b01      	cmp	r3, #1
 800631a:	d117      	bne.n	800634c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f103 020c 	add.w	r2, r3, #12
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	7812      	ldrb	r2, [r2, #0]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800634a:	e015      	b.n	8006378 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800634c:	f7fb fdee 	bl	8001f2c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d803      	bhi.n	8006364 <HAL_SPI_Receive+0x19c>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d102      	bne.n	800636a <HAL_SPI_Receive+0x1a2>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006376:	e055      	b.n	8006424 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1c4      	bne.n	800630e <HAL_SPI_Receive+0x146>
 8006384:	e038      	b.n	80063f8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b01      	cmp	r3, #1
 8006392:	d115      	bne.n	80063c0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	b292      	uxth	r2, r2
 80063a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	1c9a      	adds	r2, r3, #2
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063be:	e015      	b.n	80063ec <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c0:	f7fb fdb4 	bl	8001f2c <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d803      	bhi.n	80063d8 <HAL_SPI_Receive+0x210>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	d102      	bne.n	80063de <HAL_SPI_Receive+0x216>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80063ea:	e01b      	b.n	8006424 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1c6      	bne.n	8006386 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fb5b 	bl	8006ab8 <SPI_EndRxTransaction>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
 800641a:	e003      	b.n	8006424 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b08a      	sub	sp, #40	; 0x28
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006444:	2301      	movs	r3, #1
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_SPI_TransmitReceive+0x26>
 8006458:	2302      	movs	r3, #2
 800645a:	e20a      	b.n	8006872 <HAL_SPI_TransmitReceive+0x43c>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006464:	f7fb fd62 	bl	8001f2c <HAL_GetTick>
 8006468:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006470:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006478:	887b      	ldrh	r3, [r7, #2]
 800647a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800647c:	887b      	ldrh	r3, [r7, #2]
 800647e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006480:	7efb      	ldrb	r3, [r7, #27]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d00e      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x6e>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800648c:	d106      	bne.n	800649c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <HAL_SPI_TransmitReceive+0x66>
 8006496:	7efb      	ldrb	r3, [r7, #27]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d003      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800649c:	2302      	movs	r3, #2
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80064a2:	e1e0      	b.n	8006866 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x80>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x80>
 80064b0:	887b      	ldrh	r3, [r7, #2]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80064bc:	e1d3      	b.n	8006866 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d003      	beq.n	80064d2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2205      	movs	r2, #5
 80064ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	887a      	ldrh	r2, [r7, #2]
 80064e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	887a      	ldrh	r2, [r7, #2]
 80064ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	887a      	ldrh	r2, [r7, #2]
 80064f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	887a      	ldrh	r2, [r7, #2]
 80064fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006514:	d802      	bhi.n	800651c <HAL_SPI_TransmitReceive+0xe6>
 8006516:	8a3b      	ldrh	r3, [r7, #16]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d908      	bls.n	800652e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	e007      	b.n	800653e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800653c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	d007      	beq.n	800655c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800655a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006564:	f240 8081 	bls.w	800666a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <HAL_SPI_TransmitReceive+0x140>
 8006570:	8a7b      	ldrh	r3, [r7, #18]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d16d      	bne.n	8006652 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	881a      	ldrh	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	1c9a      	adds	r2, r3, #2
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800659a:	e05a      	b.n	8006652 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d11b      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x1ac>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d016      	beq.n	80065e2 <HAL_SPI_TransmitReceive+0x1ac>
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d113      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	881a      	ldrh	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	1c9a      	adds	r2, r3, #2
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d11c      	bne.n	800662a <HAL_SPI_TransmitReceive+0x1f4>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	b292      	uxth	r2, r2
 8006608:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	1c9a      	adds	r2, r3, #2
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006626:	2301      	movs	r3, #1
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800662a:	f7fb fc7f 	bl	8001f2c <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006636:	429a      	cmp	r2, r3
 8006638:	d80b      	bhi.n	8006652 <HAL_SPI_TransmitReceive+0x21c>
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d007      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006650:	e109      	b.n	8006866 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006656:	b29b      	uxth	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d19f      	bne.n	800659c <HAL_SPI_TransmitReceive+0x166>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d199      	bne.n	800659c <HAL_SPI_TransmitReceive+0x166>
 8006668:	e0e3      	b.n	8006832 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_SPI_TransmitReceive+0x244>
 8006672:	8a7b      	ldrh	r3, [r7, #18]
 8006674:	2b01      	cmp	r3, #1
 8006676:	f040 80cf 	bne.w	8006818 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b01      	cmp	r3, #1
 8006682:	d912      	bls.n	80066aa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	881a      	ldrh	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	1c9a      	adds	r2, r3, #2
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b02      	subs	r3, #2
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066a8:	e0b6      	b.n	8006818 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	7812      	ldrb	r2, [r2, #0]
 80066b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d0:	e0a2      	b.n	8006818 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d134      	bne.n	800674a <HAL_SPI_TransmitReceive+0x314>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d02f      	beq.n	800674a <HAL_SPI_TransmitReceive+0x314>
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d12c      	bne.n	800674a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d912      	bls.n	8006720 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	881a      	ldrh	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	1c9a      	adds	r2, r3, #2
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b02      	subs	r3, #2
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800671e:	e012      	b.n	8006746 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	7812      	ldrb	r2, [r2, #0]
 800672c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b01      	cmp	r3, #1
 8006756:	d148      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x3b4>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d042      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b01      	cmp	r3, #1
 800676e:	d923      	bls.n	80067b8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	b292      	uxth	r2, r2
 800677c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	1c9a      	adds	r2, r3, #2
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b02      	subs	r3, #2
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d81f      	bhi.n	80067e6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e016      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f103 020c 	add.w	r2, r3, #12
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	7812      	ldrb	r2, [r2, #0]
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067e6:	2301      	movs	r3, #1
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067ea:	f7fb fb9f 	bl	8001f2c <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d803      	bhi.n	8006802 <HAL_SPI_TransmitReceive+0x3cc>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d102      	bne.n	8006808 <HAL_SPI_TransmitReceive+0x3d2>
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	2b00      	cmp	r3, #0
 8006806:	d107      	bne.n	8006818 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006816:	e026      	b.n	8006866 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	f47f af57 	bne.w	80066d2 <HAL_SPI_TransmitReceive+0x29c>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	f47f af50 	bne.w	80066d2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f996 	bl	8006b68 <SPI_EndRxTxTransaction>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685c:	e003      	b.n	8006866 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800686e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006872:	4618      	mov	r0, r3
 8006874:	3728      	adds	r7, #40	; 0x28
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	4613      	mov	r3, r2
 800688a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800688c:	f7fb fb4e 	bl	8001f2c <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	4413      	add	r3, r2
 800689a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800689c:	f7fb fb46 	bl	8001f2c <HAL_GetTick>
 80068a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068a2:	4b39      	ldr	r3, [pc, #228]	; (8006988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	015b      	lsls	r3, r3, #5
 80068a8:	0d1b      	lsrs	r3, r3, #20
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	fb02 f303 	mul.w	r3, r2, r3
 80068b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068b2:	e054      	b.n	800695e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ba:	d050      	beq.n	800695e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068bc:	f7fb fb36 	bl	8001f2c <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d902      	bls.n	80068d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d13d      	bne.n	800694e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ea:	d111      	bne.n	8006910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f4:	d004      	beq.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068fe:	d107      	bne.n	8006910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006918:	d10f      	bne.n	800693a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e017      	b.n	800697e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	3b01      	subs	r3, #1
 800695c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	429a      	cmp	r2, r3
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	429a      	cmp	r2, r3
 800697a:	d19b      	bne.n	80068b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20004b00 	.word	0x20004b00

0800698c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	; 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800699e:	f7fb fac5 	bl	8001f2c <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	1a9b      	subs	r3, r3, r2
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	4413      	add	r3, r2
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80069ae:	f7fb fabd 	bl	8001f2c <HAL_GetTick>
 80069b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069bc:	4b3d      	ldr	r3, [pc, #244]	; (8006ab4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	00da      	lsls	r2, r3, #3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	0d1b      	lsrs	r3, r3, #20
 80069cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069d4:	e060      	b.n	8006a98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80069dc:	d107      	bne.n	80069ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d050      	beq.n	8006a98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069f6:	f7fb fa99 	bl	8001f2c <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d902      	bls.n	8006a0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d13d      	bne.n	8006a88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a24:	d111      	bne.n	8006a4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d004      	beq.n	8006a3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a38:	d107      	bne.n	8006a4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a52:	d10f      	bne.n	8006a74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e010      	b.n	8006aaa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d196      	bne.n	80069d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3728      	adds	r7, #40	; 0x28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20004b00 	.word	0x20004b00

08006ab8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006acc:	d111      	bne.n	8006af2 <SPI_EndRxTransaction+0x3a>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad6:	d004      	beq.n	8006ae2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae0:	d107      	bne.n	8006af2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2200      	movs	r2, #0
 8006afa:	2180      	movs	r1, #128	; 0x80
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f7ff febd 	bl	800687c <SPI_WaitFlagStateUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d007      	beq.n	8006b18 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0c:	f043 0220 	orr.w	r2, r3, #32
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e023      	b.n	8006b60 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b20:	d11d      	bne.n	8006b5e <SPI_EndRxTransaction+0xa6>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b2a:	d004      	beq.n	8006b36 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b34:	d113      	bne.n	8006b5e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff ff22 	bl	800698c <SPI_WaitFifoStateUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b52:	f043 0220 	orr.w	r2, r3, #32
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e000      	b.n	8006b60 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff ff03 	bl	800698c <SPI_WaitFifoStateUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b90:	f043 0220 	orr.w	r2, r3, #32
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e027      	b.n	8006bec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2180      	movs	r1, #128	; 0x80
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fe68 	bl	800687c <SPI_WaitFlagStateUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d007      	beq.n	8006bc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb6:	f043 0220 	orr.w	r2, r3, #32
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e014      	b.n	8006bec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fedc 	bl	800698c <SPI_WaitFifoStateUntilTimeout>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d007      	beq.n	8006bea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e000      	b.n	8006bec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e042      	b.n	8006c8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fb f855 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2224      	movs	r2, #36	; 0x24
 8006c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0201 	bic.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fbb4 	bl	80073ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f8b5 	bl	8006db4 <UART_SetConfig>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e01b      	b.n	8006c8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fc33 	bl	80074f0 <UART_CheckIdleState>
 8006c8a:	4603      	mov	r3, r0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d17c      	bne.n	8006da8 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_UART_Transmit+0x26>
 8006cb4:	88fb      	ldrh	r3, [r7, #6]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e075      	b.n	8006daa <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2221      	movs	r2, #33	; 0x21
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cce:	f7fb f92d 	bl	8001f2c <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d108      	bne.n	8006d00 <HAL_UART_Transmit+0x6c>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e003      	b.n	8006d08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d08:	e031      	b.n	8006d6e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2200      	movs	r2, #0
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fc95 	bl	8007644 <UART_WaitOnFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e03e      	b.n	8006daa <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	881a      	ldrh	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	3302      	adds	r3, #2
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	e008      	b.n	8006d5c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	781a      	ldrb	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	b292      	uxth	r2, r2
 8006d54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1c7      	bne.n	8006d0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2200      	movs	r2, #0
 8006d82:	2140      	movs	r1, #64	; 0x40
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 fc5d 	bl	8007644 <UART_WaitOnFlagUntilTimeout>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e006      	b.n	8006daa <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e000      	b.n	8006daa <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
  }
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db8:	b08c      	sub	sp, #48	; 0x30
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4baa      	ldr	r3, [pc, #680]	; (800708c <UART_SetConfig+0x2d8>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a9f      	ldr	r2, [pc, #636]	; (8007090 <UART_SetConfig+0x2dc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	f023 010f 	bic.w	r1, r3, #15
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a90      	ldr	r2, [pc, #576]	; (8007094 <UART_SetConfig+0x2e0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d125      	bne.n	8006ea4 <UART_SetConfig+0xf0>
 8006e58:	4b8f      	ldr	r3, [pc, #572]	; (8007098 <UART_SetConfig+0x2e4>)
 8006e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d81a      	bhi.n	8006e9c <UART_SetConfig+0xe8>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <UART_SetConfig+0xb8>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006e8d 	.word	0x08006e8d
 8006e74:	08006e85 	.word	0x08006e85
 8006e78:	08006e95 	.word	0x08006e95
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e82:	e116      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006e84:	2302      	movs	r3, #2
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8a:	e112      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e92:	e10e      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006e94:	2308      	movs	r3, #8
 8006e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e9a:	e10a      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea2:	e106      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a7c      	ldr	r2, [pc, #496]	; (800709c <UART_SetConfig+0x2e8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d138      	bne.n	8006f20 <UART_SetConfig+0x16c>
 8006eae:	4b7a      	ldr	r3, [pc, #488]	; (8007098 <UART_SetConfig+0x2e4>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb4:	f003 030c 	and.w	r3, r3, #12
 8006eb8:	2b0c      	cmp	r3, #12
 8006eba:	d82d      	bhi.n	8006f18 <UART_SetConfig+0x164>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <UART_SetConfig+0x110>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ef9 	.word	0x08006ef9
 8006ec8:	08006f19 	.word	0x08006f19
 8006ecc:	08006f19 	.word	0x08006f19
 8006ed0:	08006f19 	.word	0x08006f19
 8006ed4:	08006f09 	.word	0x08006f09
 8006ed8:	08006f19 	.word	0x08006f19
 8006edc:	08006f19 	.word	0x08006f19
 8006ee0:	08006f19 	.word	0x08006f19
 8006ee4:	08006f01 	.word	0x08006f01
 8006ee8:	08006f19 	.word	0x08006f19
 8006eec:	08006f19 	.word	0x08006f19
 8006ef0:	08006f19 	.word	0x08006f19
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006efe:	e0d8      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f00:	2302      	movs	r3, #2
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f06:	e0d4      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0e:	e0d0      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f10:	2308      	movs	r3, #8
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f16:	e0cc      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1e:	e0c8      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a5e      	ldr	r2, [pc, #376]	; (80070a0 <UART_SetConfig+0x2ec>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d125      	bne.n	8006f76 <UART_SetConfig+0x1c2>
 8006f2a:	4b5b      	ldr	r3, [pc, #364]	; (8007098 <UART_SetConfig+0x2e4>)
 8006f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	d016      	beq.n	8006f66 <UART_SetConfig+0x1b2>
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d818      	bhi.n	8006f6e <UART_SetConfig+0x1ba>
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d00a      	beq.n	8006f56 <UART_SetConfig+0x1a2>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d814      	bhi.n	8006f6e <UART_SetConfig+0x1ba>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <UART_SetConfig+0x19a>
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d008      	beq.n	8006f5e <UART_SetConfig+0x1aa>
 8006f4c:	e00f      	b.n	8006f6e <UART_SetConfig+0x1ba>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f54:	e0ad      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f56:	2302      	movs	r3, #2
 8006f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f5c:	e0a9      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f5e:	2304      	movs	r3, #4
 8006f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f64:	e0a5      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f66:	2308      	movs	r3, #8
 8006f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f6c:	e0a1      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f6e:	2310      	movs	r3, #16
 8006f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f74:	e09d      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a4a      	ldr	r2, [pc, #296]	; (80070a4 <UART_SetConfig+0x2f0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d125      	bne.n	8006fcc <UART_SetConfig+0x218>
 8006f80:	4b45      	ldr	r3, [pc, #276]	; (8007098 <UART_SetConfig+0x2e4>)
 8006f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f8c:	d016      	beq.n	8006fbc <UART_SetConfig+0x208>
 8006f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f90:	d818      	bhi.n	8006fc4 <UART_SetConfig+0x210>
 8006f92:	2b80      	cmp	r3, #128	; 0x80
 8006f94:	d00a      	beq.n	8006fac <UART_SetConfig+0x1f8>
 8006f96:	2b80      	cmp	r3, #128	; 0x80
 8006f98:	d814      	bhi.n	8006fc4 <UART_SetConfig+0x210>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <UART_SetConfig+0x1f0>
 8006f9e:	2b40      	cmp	r3, #64	; 0x40
 8006fa0:	d008      	beq.n	8006fb4 <UART_SetConfig+0x200>
 8006fa2:	e00f      	b.n	8006fc4 <UART_SetConfig+0x210>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006faa:	e082      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006fac:	2302      	movs	r3, #2
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb2:	e07e      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fba:	e07a      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc2:	e076      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fca:	e072      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a35      	ldr	r2, [pc, #212]	; (80070a8 <UART_SetConfig+0x2f4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d12a      	bne.n	800702c <UART_SetConfig+0x278>
 8006fd6:	4b30      	ldr	r3, [pc, #192]	; (8007098 <UART_SetConfig+0x2e4>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe4:	d01a      	beq.n	800701c <UART_SetConfig+0x268>
 8006fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fea:	d81b      	bhi.n	8007024 <UART_SetConfig+0x270>
 8006fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff0:	d00c      	beq.n	800700c <UART_SetConfig+0x258>
 8006ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff6:	d815      	bhi.n	8007024 <UART_SetConfig+0x270>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <UART_SetConfig+0x250>
 8006ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007000:	d008      	beq.n	8007014 <UART_SetConfig+0x260>
 8007002:	e00f      	b.n	8007024 <UART_SetConfig+0x270>
 8007004:	2300      	movs	r3, #0
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700a:	e052      	b.n	80070b2 <UART_SetConfig+0x2fe>
 800700c:	2302      	movs	r3, #2
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007012:	e04e      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800701a:	e04a      	b.n	80070b2 <UART_SetConfig+0x2fe>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007022:	e046      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800702a:	e042      	b.n	80070b2 <UART_SetConfig+0x2fe>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a17      	ldr	r2, [pc, #92]	; (8007090 <UART_SetConfig+0x2dc>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d13a      	bne.n	80070ac <UART_SetConfig+0x2f8>
 8007036:	4b18      	ldr	r3, [pc, #96]	; (8007098 <UART_SetConfig+0x2e4>)
 8007038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007044:	d01a      	beq.n	800707c <UART_SetConfig+0x2c8>
 8007046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800704a:	d81b      	bhi.n	8007084 <UART_SetConfig+0x2d0>
 800704c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007050:	d00c      	beq.n	800706c <UART_SetConfig+0x2b8>
 8007052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007056:	d815      	bhi.n	8007084 <UART_SetConfig+0x2d0>
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <UART_SetConfig+0x2b0>
 800705c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007060:	d008      	beq.n	8007074 <UART_SetConfig+0x2c0>
 8007062:	e00f      	b.n	8007084 <UART_SetConfig+0x2d0>
 8007064:	2300      	movs	r3, #0
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800706a:	e022      	b.n	80070b2 <UART_SetConfig+0x2fe>
 800706c:	2302      	movs	r3, #2
 800706e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007072:	e01e      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8007074:	2304      	movs	r3, #4
 8007076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707a:	e01a      	b.n	80070b2 <UART_SetConfig+0x2fe>
 800707c:	2308      	movs	r3, #8
 800707e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007082:	e016      	b.n	80070b2 <UART_SetConfig+0x2fe>
 8007084:	2310      	movs	r3, #16
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708a:	e012      	b.n	80070b2 <UART_SetConfig+0x2fe>
 800708c:	cfff69f3 	.word	0xcfff69f3
 8007090:	40008000 	.word	0x40008000
 8007094:	40013800 	.word	0x40013800
 8007098:	40021000 	.word	0x40021000
 800709c:	40004400 	.word	0x40004400
 80070a0:	40004800 	.word	0x40004800
 80070a4:	40004c00 	.word	0x40004c00
 80070a8:	40005000 	.word	0x40005000
 80070ac:	2310      	movs	r3, #16
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4aae      	ldr	r2, [pc, #696]	; (8007370 <UART_SetConfig+0x5bc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	f040 8097 	bne.w	80071ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070c2:	2b08      	cmp	r3, #8
 80070c4:	d823      	bhi.n	800710e <UART_SetConfig+0x35a>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <UART_SetConfig+0x318>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	080070f1 	.word	0x080070f1
 80070d0:	0800710f 	.word	0x0800710f
 80070d4:	080070f9 	.word	0x080070f9
 80070d8:	0800710f 	.word	0x0800710f
 80070dc:	080070ff 	.word	0x080070ff
 80070e0:	0800710f 	.word	0x0800710f
 80070e4:	0800710f 	.word	0x0800710f
 80070e8:	0800710f 	.word	0x0800710f
 80070ec:	08007107 	.word	0x08007107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f0:	f7fd ffee 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80070f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070f6:	e010      	b.n	800711a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f8:	4b9e      	ldr	r3, [pc, #632]	; (8007374 <UART_SetConfig+0x5c0>)
 80070fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070fc:	e00d      	b.n	800711a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070fe:	f7fd ff4f 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8007102:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007104:	e009      	b.n	800711a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800710c:	e005      	b.n	800711a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007118:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8130 	beq.w	8007382 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	4a94      	ldr	r2, [pc, #592]	; (8007378 <UART_SetConfig+0x5c4>)
 8007128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800712c:	461a      	mov	r2, r3
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	fbb3 f3f2 	udiv	r3, r3, r2
 8007134:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	4413      	add	r3, r2
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	429a      	cmp	r2, r3
 8007144:	d305      	bcc.n	8007152 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	429a      	cmp	r2, r3
 8007150:	d903      	bls.n	800715a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007158:	e113      	b.n	8007382 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	2200      	movs	r2, #0
 800715e:	60bb      	str	r3, [r7, #8]
 8007160:	60fa      	str	r2, [r7, #12]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	4a84      	ldr	r2, [pc, #528]	; (8007378 <UART_SetConfig+0x5c4>)
 8007168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800716c:	b29b      	uxth	r3, r3
 800716e:	2200      	movs	r2, #0
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007178:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800717c:	f7f9 f83e 	bl	80001fc <__aeabi_uldivmod>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4610      	mov	r0, r2
 8007186:	4619      	mov	r1, r3
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	020b      	lsls	r3, r1, #8
 8007192:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007196:	0202      	lsls	r2, r0, #8
 8007198:	6979      	ldr	r1, [r7, #20]
 800719a:	6849      	ldr	r1, [r1, #4]
 800719c:	0849      	lsrs	r1, r1, #1
 800719e:	2000      	movs	r0, #0
 80071a0:	460c      	mov	r4, r1
 80071a2:	4605      	mov	r5, r0
 80071a4:	eb12 0804 	adds.w	r8, r2, r4
 80071a8:	eb43 0905 	adc.w	r9, r3, r5
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	469a      	mov	sl, r3
 80071b4:	4693      	mov	fp, r2
 80071b6:	4652      	mov	r2, sl
 80071b8:	465b      	mov	r3, fp
 80071ba:	4640      	mov	r0, r8
 80071bc:	4649      	mov	r1, r9
 80071be:	f7f9 f81d 	bl	80001fc <__aeabi_uldivmod>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4613      	mov	r3, r2
 80071c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071d0:	d308      	bcc.n	80071e4 <UART_SetConfig+0x430>
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d8:	d204      	bcs.n	80071e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6a3a      	ldr	r2, [r7, #32]
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	e0ce      	b.n	8007382 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071ea:	e0ca      	b.n	8007382 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f4:	d166      	bne.n	80072c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80071f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d827      	bhi.n	800724e <UART_SetConfig+0x49a>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <UART_SetConfig+0x450>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007229 	.word	0x08007229
 8007208:	08007231 	.word	0x08007231
 800720c:	08007239 	.word	0x08007239
 8007210:	0800724f 	.word	0x0800724f
 8007214:	0800723f 	.word	0x0800723f
 8007218:	0800724f 	.word	0x0800724f
 800721c:	0800724f 	.word	0x0800724f
 8007220:	0800724f 	.word	0x0800724f
 8007224:	08007247 	.word	0x08007247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fd ff52 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 800722c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800722e:	e014      	b.n	800725a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007230:	f7fd ff64 	bl	80050fc <HAL_RCC_GetPCLK2Freq>
 8007234:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007236:	e010      	b.n	800725a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007238:	4b4e      	ldr	r3, [pc, #312]	; (8007374 <UART_SetConfig+0x5c0>)
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800723c:	e00d      	b.n	800725a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723e:	f7fd feaf 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8007242:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007244:	e009      	b.n	800725a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800724c:	e005      	b.n	800725a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8090 	beq.w	8007382 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	4a44      	ldr	r2, [pc, #272]	; (8007378 <UART_SetConfig+0x5c4>)
 8007268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800726c:	461a      	mov	r2, r3
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	fbb3 f3f2 	udiv	r3, r3, r2
 8007274:	005a      	lsls	r2, r3, #1
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	441a      	add	r2, r3
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	fbb2 f3f3 	udiv	r3, r2, r3
 8007286:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	2b0f      	cmp	r3, #15
 800728c:	d916      	bls.n	80072bc <UART_SetConfig+0x508>
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007294:	d212      	bcs.n	80072bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f023 030f 	bic.w	r3, r3, #15
 800729e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	8bfb      	ldrh	r3, [r7, #30]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	8bfa      	ldrh	r2, [r7, #30]
 80072b8:	60da      	str	r2, [r3, #12]
 80072ba:	e062      	b.n	8007382 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072c2:	e05e      	b.n	8007382 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d828      	bhi.n	800731e <UART_SetConfig+0x56a>
 80072cc:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <UART_SetConfig+0x520>)
 80072ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d2:	bf00      	nop
 80072d4:	080072f9 	.word	0x080072f9
 80072d8:	08007301 	.word	0x08007301
 80072dc:	08007309 	.word	0x08007309
 80072e0:	0800731f 	.word	0x0800731f
 80072e4:	0800730f 	.word	0x0800730f
 80072e8:	0800731f 	.word	0x0800731f
 80072ec:	0800731f 	.word	0x0800731f
 80072f0:	0800731f 	.word	0x0800731f
 80072f4:	08007317 	.word	0x08007317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072f8:	f7fd feea 	bl	80050d0 <HAL_RCC_GetPCLK1Freq>
 80072fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072fe:	e014      	b.n	800732a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007300:	f7fd fefc 	bl	80050fc <HAL_RCC_GetPCLK2Freq>
 8007304:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007306:	e010      	b.n	800732a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007308:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <UART_SetConfig+0x5c0>)
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800730c:	e00d      	b.n	800732a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800730e:	f7fd fe47 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8007312:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007314:	e009      	b.n	800732a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800731c:	e005      	b.n	800732a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007328:	bf00      	nop
    }

    if (pclk != 0U)
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d028      	beq.n	8007382 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	4a10      	ldr	r2, [pc, #64]	; (8007378 <UART_SetConfig+0x5c4>)
 8007336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800733a:	461a      	mov	r2, r3
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	085b      	lsrs	r3, r3, #1
 8007348:	441a      	add	r2, r3
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007352:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d910      	bls.n	800737c <UART_SetConfig+0x5c8>
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007360:	d20c      	bcs.n	800737c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	b29a      	uxth	r2, r3
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60da      	str	r2, [r3, #12]
 800736c:	e009      	b.n	8007382 <UART_SetConfig+0x5ce>
 800736e:	bf00      	nop
 8007370:	40008000 	.word	0x40008000
 8007374:	00f42400 	.word	0x00f42400
 8007378:	08007b34 	.word	0x08007b34
      }
      else
      {
        ret = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2201      	movs	r2, #1
 8007386:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2201      	movs	r2, #1
 800738e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2200      	movs	r2, #0
 8007396:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2200      	movs	r2, #0
 800739c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800739e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3730      	adds	r7, #48	; 0x30
 80073a6:	46bd      	mov	sp, r7
 80073a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080073ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01a      	beq.n	80074c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074aa:	d10a      	bne.n	80074c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	605a      	str	r2, [r3, #4]
  }
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b098      	sub	sp, #96	; 0x60
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007500:	f7fa fd14 	bl	8001f2c <HAL_GetTick>
 8007504:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0308 	and.w	r3, r3, #8
 8007510:	2b08      	cmp	r3, #8
 8007512:	d12f      	bne.n	8007574 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751c:	2200      	movs	r2, #0
 800751e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f88e 	bl	8007644 <UART_WaitOnFlagUntilTimeout>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d022      	beq.n	8007574 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007542:	653b      	str	r3, [r7, #80]	; 0x50
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800754c:	647b      	str	r3, [r7, #68]	; 0x44
 800754e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800755a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e6      	bne.n	800752e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e063      	b.n	800763c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0304 	and.w	r3, r3, #4
 800757e:	2b04      	cmp	r3, #4
 8007580:	d149      	bne.n	8007616 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007582:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800758a:	2200      	movs	r2, #0
 800758c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f857 	bl	8007644 <UART_WaitOnFlagUntilTimeout>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d03c      	beq.n	8007616 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	623b      	str	r3, [r7, #32]
   return(result);
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ba:	633b      	str	r3, [r7, #48]	; 0x30
 80075bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e6      	bne.n	800759c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3308      	adds	r3, #8
 80075d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f023 0301 	bic.w	r3, r3, #1
 80075e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3308      	adds	r3, #8
 80075ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ee:	61fa      	str	r2, [r7, #28]
 80075f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	69b9      	ldr	r1, [r7, #24]
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	617b      	str	r3, [r7, #20]
   return(result);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e5      	bne.n	80075ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e012      	b.n	800763c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3758      	adds	r7, #88	; 0x58
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	4613      	mov	r3, r2
 8007652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007654:	e049      	b.n	80076ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d045      	beq.n	80076ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765e:	f7fa fc65 	bl	8001f2c <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	429a      	cmp	r2, r3
 800766c:	d302      	bcc.n	8007674 <UART_WaitOnFlagUntilTimeout+0x30>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e048      	b.n	800770a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d031      	beq.n	80076ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b08      	cmp	r3, #8
 8007692:	d110      	bne.n	80076b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2208      	movs	r2, #8
 800769a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f838 	bl	8007712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2208      	movs	r2, #8
 80076a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e029      	b.n	800770a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c4:	d111      	bne.n	80076ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f81e 	bl	8007712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e00f      	b.n	800770a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4013      	ands	r3, r2
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	bf0c      	ite	eq
 80076fa:	2301      	moveq	r3, #1
 80076fc:	2300      	movne	r3, #0
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	429a      	cmp	r2, r3
 8007706:	d0a6      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007712:	b480      	push	{r7}
 8007714:	b095      	sub	sp, #84	; 0x54
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800772e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007738:	643b      	str	r3, [r7, #64]	; 0x40
 800773a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800773e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e6      	bne.n	800771a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	61fb      	str	r3, [r7, #28]
   return(result);
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007762:	f023 0301 	bic.w	r3, r3, #1
 8007766:	64bb      	str	r3, [r7, #72]	; 0x48
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e3      	bne.n	800774c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007788:	2b01      	cmp	r3, #1
 800778a:	d118      	bne.n	80077be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	60bb      	str	r3, [r7, #8]
   return(result);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f023 0310 	bic.w	r3, r3, #16
 80077a0:	647b      	str	r3, [r7, #68]	; 0x44
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077aa:	61bb      	str	r3, [r7, #24]
 80077ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6979      	ldr	r1, [r7, #20]
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	613b      	str	r3, [r7, #16]
   return(result);
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e6      	bne.n	800778c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80077d2:	bf00      	nop
 80077d4:	3754      	adds	r7, #84	; 0x54
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e027      	b.n	8007844 <HAL_UARTEx_DisableFifoMode+0x66>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	; 0x24
 8007800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007822:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007864:	2302      	movs	r3, #2
 8007866:	e02d      	b.n	80078c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2224      	movs	r2, #36	; 0x24
 8007874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f84f 	bl	8007948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e02d      	b.n	8007940 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2224      	movs	r2, #36	; 0x24
 80078f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0201 	bic.w	r2, r2, #1
 800790a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f811 	bl	8007948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007954:	2b00      	cmp	r3, #0
 8007956:	d108      	bne.n	800796a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007968:	e031      	b.n	80079ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800796a:	2308      	movs	r3, #8
 800796c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800796e:	2308      	movs	r3, #8
 8007970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	0e5b      	lsrs	r3, r3, #25
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	0f5b      	lsrs	r3, r3, #29
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	7b3a      	ldrb	r2, [r7, #12]
 8007996:	4911      	ldr	r1, [pc, #68]	; (80079dc <UARTEx_SetNbDataToProcess+0x94>)
 8007998:	5c8a      	ldrb	r2, [r1, r2]
 800799a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800799e:	7b3a      	ldrb	r2, [r7, #12]
 80079a0:	490f      	ldr	r1, [pc, #60]	; (80079e0 <UARTEx_SetNbDataToProcess+0x98>)
 80079a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	7b7a      	ldrb	r2, [r7, #13]
 80079b4:	4909      	ldr	r1, [pc, #36]	; (80079dc <UARTEx_SetNbDataToProcess+0x94>)
 80079b6:	5c8a      	ldrb	r2, [r1, r2]
 80079b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079bc:	7b7a      	ldrb	r2, [r7, #13]
 80079be:	4908      	ldr	r1, [pc, #32]	; (80079e0 <UARTEx_SetNbDataToProcess+0x98>)
 80079c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	08007b4c 	.word	0x08007b4c
 80079e0:	08007b54 	.word	0x08007b54

080079e4 <memset>:
 80079e4:	4402      	add	r2, r0
 80079e6:	4603      	mov	r3, r0
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d100      	bne.n	80079ee <memset+0xa>
 80079ec:	4770      	bx	lr
 80079ee:	f803 1b01 	strb.w	r1, [r3], #1
 80079f2:	e7f9      	b.n	80079e8 <memset+0x4>

080079f4 <__libc_init_array>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4d0d      	ldr	r5, [pc, #52]	; (8007a2c <__libc_init_array+0x38>)
 80079f8:	4c0d      	ldr	r4, [pc, #52]	; (8007a30 <__libc_init_array+0x3c>)
 80079fa:	1b64      	subs	r4, r4, r5
 80079fc:	10a4      	asrs	r4, r4, #2
 80079fe:	2600      	movs	r6, #0
 8007a00:	42a6      	cmp	r6, r4
 8007a02:	d109      	bne.n	8007a18 <__libc_init_array+0x24>
 8007a04:	4d0b      	ldr	r5, [pc, #44]	; (8007a34 <__libc_init_array+0x40>)
 8007a06:	4c0c      	ldr	r4, [pc, #48]	; (8007a38 <__libc_init_array+0x44>)
 8007a08:	f000 f818 	bl	8007a3c <_init>
 8007a0c:	1b64      	subs	r4, r4, r5
 8007a0e:	10a4      	asrs	r4, r4, #2
 8007a10:	2600      	movs	r6, #0
 8007a12:	42a6      	cmp	r6, r4
 8007a14:	d105      	bne.n	8007a22 <__libc_init_array+0x2e>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1c:	4798      	blx	r3
 8007a1e:	3601      	adds	r6, #1
 8007a20:	e7ee      	b.n	8007a00 <__libc_init_array+0xc>
 8007a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a26:	4798      	blx	r3
 8007a28:	3601      	adds	r6, #1
 8007a2a:	e7f2      	b.n	8007a12 <__libc_init_array+0x1e>
 8007a2c:	08007b64 	.word	0x08007b64
 8007a30:	08007b64 	.word	0x08007b64
 8007a34:	08007b64 	.word	0x08007b64
 8007a38:	08007b68 	.word	0x08007b68

08007a3c <_init>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	bf00      	nop
 8007a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a42:	bc08      	pop	{r3}
 8007a44:	469e      	mov	lr, r3
 8007a46:	4770      	bx	lr

08007a48 <_fini>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr
