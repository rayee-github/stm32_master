
New_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e0  080077e0  00024b0c  2**0
                  CONTENTS
  4 .ARM          00000008  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e8  080077e8  00024b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004b0c  20000000  080077f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20004b0c  0800c2fc  00024b0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004efc  0800c2fc  00024efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024b0c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024b3c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018767  00000000  00000000  00024b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a08  00000000  00000000  0003d2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f69  00000000  00000000  00041098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000317e9  00000000  00000000  00042001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198f2  00000000  00000000  000737ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012aabe  00000000  00000000  0008d0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054a0  00000000  00000000  001b7b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001bd03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20004b0c 	.word	0x20004b0c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080076b8 	.word	0x080076b8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20004b10 	.word	0x20004b10
 80001f8:	080076b8 	.word	0x080076b8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 fc5a 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f826 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 fc08 	bl	8000d18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f95c 	bl	80007c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f99a 	bl	8000844 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 fa58 	bl	80009c4 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000514:	f000 faac 	bl	8000a70 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8000518:	f000 fb00 	bl	8000b1c <MX_SPI1_Init>
  MX_SPI2_Init();
 800051c:	f000 fb3c 	bl	8000b98 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000520:	f000 fb74 	bl	8000c0c <MX_SPI3_Init>
  MX_UART4_Init();
 8000524:	f000 fbac 	bl	8000c80 <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 8000528:	f000 f860 	bl	80005ec <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 800052c:	f000 f9ca 	bl	80008c4 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 8000530:	f000 fd18 	bl	8000f64 <mipi_config>
  HAL_UART_Transmit(&huart4, "start", 5, 1000);
 8000534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000538:	2205      	movs	r2, #5
 800053a:	4903      	ldr	r1, [pc, #12]	; (8000548 <main+0x50>)
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <main+0x54>)
 800053e:	f006 f9e7 	bl	8006910 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart4, "off ", 4, 1000);
		HAL_Delay(1000);*/
		//SPI2PC();
		//SPI2Flash();
		SPI_get_form_master();
 8000542:	f000 ff1b 	bl	800137c <SPI_get_form_master>
 8000546:	e7fc      	b.n	8000542 <main+0x4a>
 8000548:	080076d0 	.word	0x080076d0
 800054c:	20004e60 	.word	0x20004e60

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	; 0x58
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2244      	movs	r2, #68	; 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f007 f87e 	bl	8007660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000572:	2000      	movs	r0, #0
 8000574:	f003 fec0 	bl	80042f8 <HAL_PWREx_ControlVoltageScaling>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800057e:	f000 ffe1 	bl	8001544 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000590:	2303      	movs	r3, #3
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000594:	2301      	movs	r3, #1
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000598:	231e      	movs	r3, #30
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 ff57 	bl	8004460 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005b8:	f000 ffc4 	bl	8001544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2303      	movs	r3, #3
 80005c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2105      	movs	r1, #5
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 fb5d 	bl	8004c94 <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e0:	f000 ffb0 	bl	8001544 <Error_Handler>
  }
}
 80005e4:	bf00      	nop
 80005e6:	3758      	adds	r7, #88	; 0x58
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0ae      	sub	sp, #184	; 0xb8
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80005f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80005fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000602:	2224      	movs	r2, #36	; 0x24
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f007 f82a 	bl	8007660 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800060c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	226c      	movs	r2, #108	; 0x6c
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f007 f81b 	bl	8007660 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800062a:	4b64      	ldr	r3, [pc, #400]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 800062c:	4a64      	ldr	r2, [pc, #400]	; (80007c0 <MX_DSIHOST_DSI_Init+0x1d4>)
 800062e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000630:	4b62      	ldr	r3, [pc, #392]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8000636:	4b61      	ldr	r3, [pc, #388]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 8000638:	2202      	movs	r2, #2
 800063a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800063c:	4b5f      	ldr	r3, [pc, #380]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8000642:	2332      	movs	r3, #50	; 0x32
 8000644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000648:	2301      	movs	r3, #1
 800064a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 800064e:	2301      	movs	r3, #1
 8000650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000654:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000658:	4619      	mov	r1, r3
 800065a:	4858      	ldr	r0, [pc, #352]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 800065c:	f001 fd78 	bl	8002150 <HAL_DSI_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000666:	f000 ff6d 	bl	8001544 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800066a:	2301      	movs	r3, #1
 800066c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80006a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006a4:	4619      	mov	r1, r3
 80006a6:	4845      	ldr	r0, [pc, #276]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 80006a8:	f002 f9c5 	bl	8002a36 <HAL_DSI_ConfigHostTimeouts>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80006b2:	f000 ff47 	bl	8001544 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 80006b6:	2313      	movs	r3, #19
 80006b8:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 80006ba:	230f      	movs	r3, #15
 80006bc:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 80006be:	2309      	movs	r3, #9
 80006c0:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 80006c2:	230a      	movs	r3, #10
 80006c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80006d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006d6:	4619      	mov	r1, r3
 80006d8:	4838      	ldr	r0, [pc, #224]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 80006da:	f002 f942 	bl	8002962 <HAL_DSI_ConfigPhyTimer>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 80006e4:	f000 ff2e 	bl	8001544 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80006e8:	f242 7110 	movw	r1, #10000	; 0x2710
 80006ec:	4833      	ldr	r0, [pc, #204]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 80006ee:	f002 fb5e 	bl	8002dae <HAL_DSI_SetLowPowerRXFilter>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 80006f8:	f000 ff24 	bl	8001544 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80006fc:	2100      	movs	r1, #0
 80006fe:	482f      	ldr	r0, [pc, #188]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 8000700:	f001 fe42 	bl	8002388 <HAL_DSI_ConfigErrorMonitor>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 800070a:	f000 ff1b 	bl	8001544 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000712:	2305      	movs	r3, #5
 8000714:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 800071a:	2301      	movs	r3, #1
 800071c:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 800071e:	2350      	movs	r3, #80	; 0x50
 8000720:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000732:	2300      	movs	r3, #0
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 8000736:	23fc      	movs	r3, #252	; 0xfc
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 800073a:	23fc      	movs	r3, #252	; 0xfc
 800073c:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 800073e:	f44f 7351 	mov.w	r3, #836	; 0x344
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 8000750:	2350      	movs	r3, #80	; 0x50
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 800075a:	231c      	movs	r3, #28
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 800075e:	2350      	movs	r3, #80	; 0x50
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 800076e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000772:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000778:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 800077a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800077e:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000784:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	480b      	ldr	r0, [pc, #44]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 8000790:	f001 fedf 	bl	8002552 <HAL_DSI_ConfigVideoMode>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 800079a:	f000 fed3 	bl	8001544 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_DSIHOST_DSI_Init+0x1d0>)
 80007a2:	f001 feae 	bl	8002502 <HAL_DSI_SetGenericVCID>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 80007ac:	f000 feca 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
	LCD_PowerOn();
 80007b0:	f000 feb0 	bl	8001514 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	37b8      	adds	r7, #184	; 0xb8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20004b28 	.word	0x20004b28
 80007c0:	40016c00 	.word	0x40016c00

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C1_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_I2C1_Init+0x74>)
 8000800:	f002 fcac 	bl	800315c <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 fe9b 	bl	8001544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C1_Init+0x74>)
 8000812:	f002 fd3e 	bl	8003292 <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 fe92 	bl	8001544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2C1_Init+0x74>)
 8000824:	f002 fd80 	bl	8003328 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fe89 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20004b44 	.word	0x20004b44
 800083c:	40005400 	.word	0x40005400
 8000840:	307075b1 	.word	0x307075b1

08000844 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_I2C2_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_I2C2_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_I2C2_Init+0x74>)
 800085c:	2201      	movs	r2, #1
 800085e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000880:	f002 fc6c 	bl	800315c <HAL_I2C_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800088a:	f000 fe5b 	bl	8001544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000892:	f002 fcfe 	bl	8003292 <HAL_I2CEx_ConfigAnalogFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800089c:	f000 fe52 	bl	8001544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_I2C2_Init+0x74>)
 80008a4:	f002 fd40 	bl	8003328 <HAL_I2CEx_ConfigDigitalFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 fe49 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20004b98 	.word	0x20004b98
 80008bc:	40005800 	.word	0x40005800
 80008c0:	307075b1 	.word	0x307075b1

080008c4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2234      	movs	r2, #52	; 0x34
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f006 fec5 	bl	8007660 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008d6:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <MX_LTDC_Init+0xf4>)
 80008d8:	4a38      	ldr	r2, [pc, #224]	; (80009bc <MX_LTDC_Init+0xf8>)
 80008da:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 80008dc:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <MX_LTDC_Init+0xf4>)
 80008de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80008e2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 80008e4:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <MX_LTDC_Init+0xf4>)
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <MX_LTDC_Init+0xf4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <MX_LTDC_Init+0xf4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <MX_LTDC_Init+0xf4>)
 80008fa:	22fb      	movs	r2, #251	; 0xfb
 80008fc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <MX_LTDC_Init+0xf4>)
 8000900:	2207      	movs	r2, #7
 8000902:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <MX_LTDC_Init+0xf4>)
 8000906:	f240 12f7 	movw	r2, #503	; 0x1f7
 800090a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_LTDC_Init+0xf4>)
 800090e:	220f      	movs	r2, #15
 8000910:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <MX_LTDC_Init+0xf4>)
 8000914:	f240 2247 	movw	r2, #583	; 0x247
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_LTDC_Init+0xf4>)
 800091c:	225f      	movs	r2, #95	; 0x5f
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_LTDC_Init+0xf4>)
 8000922:	f240 3243 	movw	r2, #835	; 0x343
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MX_LTDC_Init+0xf4>)
 800092a:	2261      	movs	r2, #97	; 0x61
 800092c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_LTDC_Init+0xf4>)
 8000930:	22ff      	movs	r2, #255	; 0xff
 8000932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_LTDC_Init+0xf4>)
 8000938:	22ff      	movs	r2, #255	; 0xff
 800093a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_LTDC_Init+0xf4>)
 8000940:	22ff      	movs	r2, #255	; 0xff
 8000942:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000946:	481c      	ldr	r0, [pc, #112]	; (80009b8 <MX_LTDC_Init+0xf4>)
 8000948:	f002 fd3a 	bl	80033c0 <HAL_LTDC_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000952:	f000 fdf7 	bl	8001544 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 800095a:	2350      	movs	r3, #80	; 0x50
 800095c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 8000962:	2350      	movs	r3, #80	; 0x50
 8000964:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000966:	2301      	movs	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800096a:	23ff      	movs	r3, #255	; 0xff
 800096c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000978:	2305      	movs	r3, #5
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_LTDC_Init+0xfc>)
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 8000980:	2350      	movs	r3, #80	; 0x50
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 8000984:	2350      	movs	r3, #80	; 0x50
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000988:	23ff      	movs	r3, #255	; 0xff
 800098a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 800098e:	23ff      	movs	r3, #255	; 0xff
 8000990:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000994:	23ff      	movs	r3, #255	; 0xff
 8000996:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_LTDC_Init+0xf4>)
 80009a2:	f002 fddd 	bl	8003560 <HAL_LTDC_ConfigLayer>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 80009ac:	f000 fdca 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3738      	adds	r7, #56	; 0x38
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20004bec 	.word	0x20004bec
 80009bc:	40016800 	.word	0x40016800
 80009c0:	20000000 	.word	0x20000000

080009c4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80009d8:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 80009da:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <MX_OCTOSPI1_Init+0xa8>)
 80009dc:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 80009e0:	2204      	movs	r2, #4
 80009e2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 80009ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009f0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 80009f4:	221a      	movs	r2, #26
 80009f6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 8000a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a2a:	480f      	ldr	r0, [pc, #60]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 8000a2c:	f002 ff6e 	bl	800390c <HAL_OSPI_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 8000a36:	f000 fd85 	bl	8001544 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a42:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000a46:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_OCTOSPI1_Init+0xa4>)
 8000a52:	f003 f815 	bl	8003a80 <HAL_OSPIM_Config>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 8000a5c:	f000 fd72 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20004c94 	.word	0x20004c94
 8000a6c:	a0001000 	.word	0xa0001000

08000a70 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_OCTOSPI2_Init+0xa4>)
 8000a88:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 1;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000ad2:	480f      	ldr	r0, [pc, #60]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000ad4:	f002 ff1a 	bl	800390c <HAL_OSPI_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_OCTOSPI2_Init+0x72>
  {
    Error_Handler();
 8000ade:	f000 fd31 	bl	8001544 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_OCTOSPI2_Init+0xa8>)
 8000aec:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_OCTOSPI2_Init+0xa0>)
 8000af8:	f002 ffc2 	bl	8003a80 <HAL_OSPIM_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_OCTOSPI2_Init+0x96>
  {
    Error_Handler();
 8000b02:	f000 fd1f 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20004ce4 	.word	0x20004ce4
 8000b14:	a0001400 	.word	0xa0001400
 8000b18:	00010002 	.word	0x00010002

08000b1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <MX_SPI1_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b6a:	2207      	movs	r2, #7
 8000b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b76:	2208      	movs	r2, #8
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b7c:	f005 f8c0 	bl	8005d00 <HAL_SPI_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 fcdd 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20004d34 	.word	0x20004d34
 8000b94:	40013000 	.word	0x40013000

08000b98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000b9e:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <MX_SPI2_Init+0x70>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bb0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bde:	2207      	movs	r2, #7
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_SPI2_Init+0x6c>)
 8000bf0:	f005 f886 	bl	8005d00 <HAL_SPI_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000bfa:	f000 fca3 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20004d98 	.word	0x20004d98
 8000c08:	40003800 	.word	0x40003800

08000c0c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c12:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <MX_SPI3_Init+0x70>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c28:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3c:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c52:	2207      	movs	r2, #7
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_SPI3_Init+0x6c>)
 8000c64:	f005 f84c 	bl	8005d00 <HAL_SPI_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8000c6e:	f000 fc69 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20004dfc 	.word	0x20004dfc
 8000c7c:	40003c00 	.word	0x40003c00

08000c80 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_UART4_Init+0x90>)
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <MX_UART4_Init+0x94>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_UART4_Init+0x90>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_UART4_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_UART4_Init+0x90>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_UART4_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_UART4_Init+0x90>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_UART4_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_UART4_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_UART4_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_UART4_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_UART4_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_UART4_Init+0x90>)
 8000cca:	f005 fdd1 	bl	8006870 <HAL_UART_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000cd4:	f000 fc36 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_UART4_Init+0x90>)
 8000cdc:	f006 fbf6 	bl	80074cc <HAL_UARTEx_SetTxFifoThreshold>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ce6:	f000 fc2d 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <MX_UART4_Init+0x90>)
 8000cee:	f006 fc2b 	bl	8007548 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000cf8:	f000 fc24 	bl	8001544 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_UART4_Init+0x90>)
 8000cfe:	f006 fbac 	bl	800745a <HAL_UARTEx_DisableFifoMode>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 fc1c 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20004e60 	.word	0x20004e60
 8000d14:	40004c00 	.word	0x40004c00

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b87      	ldr	r3, [pc, #540]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a86      	ldr	r2, [pc, #536]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b84      	ldr	r3, [pc, #528]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
 8000d44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b81      	ldr	r3, [pc, #516]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a80      	ldr	r2, [pc, #512]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b7e      	ldr	r3, [pc, #504]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b7b      	ldr	r3, [pc, #492]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a7a      	ldr	r2, [pc, #488]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b78      	ldr	r3, [pc, #480]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d76:	4b75      	ldr	r3, [pc, #468]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a74      	ldr	r2, [pc, #464]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d7c:	f043 0320 	orr.w	r3, r3, #32
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b72      	ldr	r3, [pc, #456]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8e:	4b6f      	ldr	r3, [pc, #444]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a6e      	ldr	r2, [pc, #440]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b6c      	ldr	r3, [pc, #432]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8000da6:	f003 fb4b 	bl	8004440 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	4b68      	ldr	r3, [pc, #416]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a67      	ldr	r2, [pc, #412]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b65      	ldr	r3, [pc, #404]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b62      	ldr	r3, [pc, #392]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a61      	ldr	r2, [pc, #388]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b5f      	ldr	r3, [pc, #380]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	4b5c      	ldr	r3, [pc, #368]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a5b      	ldr	r2, [pc, #364]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b59      	ldr	r3, [pc, #356]	; (8000f4c <MX_GPIO_Init+0x234>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	21a0      	movs	r1, #160	; 0xa0
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f002 f997 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e04:	4852      	ldr	r0, [pc, #328]	; (8000f50 <MX_GPIO_Init+0x238>)
 8000e06:	f002 f991 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e10:	4850      	ldr	r0, [pc, #320]	; (8000f54 <MX_GPIO_Init+0x23c>)
 8000e12:	f002 f98b 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1c:	484e      	ldr	r0, [pc, #312]	; (8000f58 <MX_GPIO_Init+0x240>)
 8000e1e:	f002 f985 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e28:	4849      	ldr	r0, [pc, #292]	; (8000f50 <MX_GPIO_Init+0x238>)
 8000e2a:	f002 f97f 	bl	800312c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4846      	ldr	r0, [pc, #280]	; (8000f5c <MX_GPIO_Init+0x244>)
 8000e44:	f001 ffe0 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8000e48:	2318      	movs	r3, #24
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f001 ffd3 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e62:	23a0      	movs	r3, #160	; 0xa0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f001 ffc4 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e80:	2310      	movs	r3, #16
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4833      	ldr	r0, [pc, #204]	; (8000f60 <MX_GPIO_Init+0x248>)
 8000e94:	f001 ffb8 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4827      	ldr	r0, [pc, #156]	; (8000f50 <MX_GPIO_Init+0x238>)
 8000eb2:	f001 ffa9 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000eb6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4821      	ldr	r0, [pc, #132]	; (8000f54 <MX_GPIO_Init+0x23c>)
 8000ed0:	f001 ff9a 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481b      	ldr	r0, [pc, #108]	; (8000f54 <MX_GPIO_Init+0x23c>)
 8000ee8:	f001 ff8e 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000eec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <MX_GPIO_Init+0x240>)
 8000f06:	f001 ff7f 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_GPIO_Init+0x238>)
 8000f20:	f001 ff72 	bl	8002e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_GPIO_Init+0x238>)
 8000f3e:	f001 ff63 	bl	8002e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f42:	bf00      	nop
 8000f44:	3738      	adds	r7, #56	; 0x38
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48001000 	.word	0x48001000
 8000f54:	48000400 	.word	0x48000400
 8000f58:	48001400 	.word	0x48001400
 8000f5c:	48000c00 	.word	0x48000c00
 8000f60:	48000800 	.word	0x48000800

08000f64 <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config() {
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b0af      	sub	sp, #188	; 0xbc
 8000f68:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK) {
 8000f6a:	48c4      	ldr	r0, [pc, #784]	; (800127c <mipi_config+0x318>)
 8000f6c:	f001 fe29 	bl	8002bc2 <HAL_DSI_Start>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <mipi_config+0x16>
		Error_Handler();
 8000f76:	f000 fae5 	bl	8001544 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8000f7a:	23c3      	movs	r3, #195	; 0xc3
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	23f0      	movs	r3, #240	; 0xf0
 8000f80:	2215      	movs	r2, #21
 8000f82:	2100      	movs	r1, #0
 8000f84:	48bd      	ldr	r0, [pc, #756]	; (800127c <mipi_config+0x318>)
 8000f86:	f001 fe58 	bl	8002c3a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8000f8a:	2396      	movs	r3, #150	; 0x96
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	23f0      	movs	r3, #240	; 0xf0
 8000f90:	2215      	movs	r2, #21
 8000f92:	2100      	movs	r1, #0
 8000f94:	48b9      	ldr	r0, [pc, #740]	; (800127c <mipi_config+0x318>)
 8000f96:	f001 fe50 	bl	8002c3a <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = { 0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33 };
 8000f9a:	4ab9      	ldr	r2, [pc, #740]	; (8001280 <mipi_config+0x31c>)
 8000f9c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa4:	6018      	str	r0, [r3, #0]
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	8019      	strh	r1, [r3, #0]
 8000faa:	3302      	adds	r3, #2
 8000fac:	0c0a      	lsrs	r2, r1, #16
 8000fae:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8000fb0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	23e7      	movs	r3, #231	; 0xe7
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2308      	movs	r3, #8
 8000fbc:	2239      	movs	r2, #57	; 0x39
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	48ae      	ldr	r0, [pc, #696]	; (800127c <mipi_config+0x318>)
 8000fc2:	f001 fe5c 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = { 0xC0, 0x68, 0xE0 };
 8000fc6:	4aaf      	ldr	r2, [pc, #700]	; (8001284 <mipi_config+0x320>)
 8000fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	8019      	strh	r1, [r3, #0]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	0c12      	lsrs	r2, r2, #16
 8000fd6:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8000fd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	23a4      	movs	r3, #164	; 0xa4
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	2239      	movs	r2, #57	; 0x39
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	48a4      	ldr	r0, [pc, #656]	; (800127c <mipi_config+0x318>)
 8000fea:	f001 fe48 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = { 0x42, 0x05, 0x24, 0x03 };
 8000fee:	4ba6      	ldr	r3, [pc, #664]	; (8001288 <mipi_config+0x324>)
 8000ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8000ff4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	23c3      	movs	r3, #195	; 0xc3
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2305      	movs	r3, #5
 8001000:	2239      	movs	r2, #57	; 0x39
 8001002:	2100      	movs	r1, #0
 8001004:	489d      	ldr	r0, [pc, #628]	; (800127c <mipi_config+0x318>)
 8001006:	f001 fe3a 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = { 0x42, 0x05, 0x24, 0x03 };
 800100a:	4b9f      	ldr	r3, [pc, #636]	; (8001288 <mipi_config+0x324>)
 800100c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 8001010:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	23c4      	movs	r3, #196	; 0xc4
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2305      	movs	r3, #5
 800101c:	2239      	movs	r2, #57	; 0x39
 800101e:	2100      	movs	r1, #0
 8001020:	4896      	ldr	r0, [pc, #600]	; (800127c <mipi_config+0x318>)
 8001022:	f001 fe2c 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001026:	4a99      	ldr	r2, [pc, #612]	; (800128c <mipi_config+0x328>)
 8001028:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800102c:	ca07      	ldmia	r2, {r0, r1, r2}
 800102e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 8001032:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	23e5      	movs	r3, #229	; 0xe5
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	230d      	movs	r3, #13
 800103e:	2239      	movs	r2, #57	; 0x39
 8001040:	2100      	movs	r1, #0
 8001042:	488e      	ldr	r0, [pc, #568]	; (800127c <mipi_config+0x318>)
 8001044:	f001 fe1b 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001048:	4a90      	ldr	r2, [pc, #576]	; (800128c <mipi_config+0x328>)
 800104a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800104e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001050:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001054:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	23e6      	movs	r3, #230	; 0xe6
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	230d      	movs	r3, #13
 8001060:	2239      	movs	r2, #57	; 0x39
 8001062:	2100      	movs	r1, #0
 8001064:	4885      	ldr	r0, [pc, #532]	; (800127c <mipi_config+0x318>)
 8001066:	f001 fe0a 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = { 0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22 };
 800106a:	4a89      	ldr	r2, [pc, #548]	; (8001290 <mipi_config+0x32c>)
 800106c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001074:	6018      	str	r0, [r3, #0]
 8001076:	3304      	adds	r3, #4
 8001078:	8019      	strh	r1, [r3, #0]
 800107a:	3302      	adds	r3, #2
 800107c:	0c0a      	lsrs	r2, r1, #16
 800107e:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 8001080:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	23ec      	movs	r3, #236	; 0xec
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2308      	movs	r3, #8
 800108c:	2239      	movs	r2, #57	; 0x39
 800108e:	2100      	movs	r1, #0
 8001090:	487a      	ldr	r0, [pc, #488]	; (800127c <mipi_config+0x318>)
 8001092:	f001 fdf4 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = { 0x88, 0x05, 0x0F, 0x18 };
 8001096:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <mipi_config+0x330>)
 8001098:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 800109a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	23c1      	movs	r3, #193	; 0xc1
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2305      	movs	r3, #5
 80010a6:	2239      	movs	r2, #57	; 0x39
 80010a8:	2100      	movs	r1, #0
 80010aa:	4874      	ldr	r0, [pc, #464]	; (800127c <mipi_config+0x318>)
 80010ac:	f001 fde7 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80010b0:	4b78      	ldr	r3, [pc, #480]	; (8001294 <mipi_config+0x330>)
 80010b2:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 80010b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	23c2      	movs	r3, #194	; 0xc2
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2305      	movs	r3, #5
 80010c0:	2239      	movs	r2, #57	; 0x39
 80010c2:	2100      	movs	r1, #0
 80010c4:	486d      	ldr	r0, [pc, #436]	; (800127c <mipi_config+0x318>)
 80010c6:	f001 fdda 	bl	8002c7e <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 80010ca:	2300      	movs	r3, #0
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2336      	movs	r3, #54	; 0x36
 80010d0:	2215      	movs	r2, #21
 80010d2:	2100      	movs	r1, #0
 80010d4:	4869      	ldr	r0, [pc, #420]	; (800127c <mipi_config+0x318>)
 80010d6:	f001 fdb0 	bl	8002c3a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 80010da:	2307      	movs	r3, #7
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	233a      	movs	r3, #58	; 0x3a
 80010e0:	2215      	movs	r2, #21
 80010e2:	2100      	movs	r1, #0
 80010e4:	4865      	ldr	r0, [pc, #404]	; (800127c <mipi_config+0x318>)
 80010e6:	f001 fda8 	bl	8002c3a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 80010ea:	23be      	movs	r3, #190	; 0xbe
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	23c5      	movs	r3, #197	; 0xc5
 80010f0:	2215      	movs	r2, #21
 80010f2:	2100      	movs	r1, #0
 80010f4:	4861      	ldr	r0, [pc, #388]	; (800127c <mipi_config+0x318>)
 80010f6:	f001 fda0 	bl	8002c3a <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = { 0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55,
 80010fa:	4b67      	ldr	r3, [pc, #412]	; (8001298 <mipi_config+0x334>)
 80010fc:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001100:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001102:	c407      	stmia	r4!, {r0, r1, r2}
 8001104:	8023      	strh	r3, [r4, #0]
			0x3D, 0x19, 0x18, 0x24, 0x27 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 8001106:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	23e0      	movs	r3, #224	; 0xe0
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	230f      	movs	r3, #15
 8001112:	2239      	movs	r2, #57	; 0x39
 8001114:	2100      	movs	r1, #0
 8001116:	4859      	ldr	r0, [pc, #356]	; (800127c <mipi_config+0x318>)
 8001118:	f001 fdb1 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = { 0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56,
 800111c:	4b5f      	ldr	r3, [pc, #380]	; (800129c <mipi_config+0x338>)
 800111e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001124:	c407      	stmia	r4!, {r0, r1, r2}
 8001126:	8023      	strh	r3, [r4, #0]
			0x3E, 0x1A, 0x18, 0x24, 0x28 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 8001128:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	23e1      	movs	r3, #225	; 0xe1
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	230f      	movs	r3, #15
 8001134:	2239      	movs	r2, #57	; 0x39
 8001136:	2100      	movs	r1, #0
 8001138:	4850      	ldr	r0, [pc, #320]	; (800127c <mipi_config+0x318>)
 800113a:	f001 fda0 	bl	8002c7e <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 800113e:	2310      	movs	r3, #16
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	23b2      	movs	r3, #178	; 0xb2
 8001144:	2215      	movs	r2, #21
 8001146:	2100      	movs	r1, #0
 8001148:	484c      	ldr	r0, [pc, #304]	; (800127c <mipi_config+0x318>)
 800114a:	f001 fd76 	bl	8002c3a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 800114e:	2301      	movs	r3, #1
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	23b3      	movs	r3, #179	; 0xb3
 8001154:	2215      	movs	r2, #21
 8001156:	2100      	movs	r1, #0
 8001158:	4848      	ldr	r0, [pc, #288]	; (800127c <mipi_config+0x318>)
 800115a:	f001 fd6e 	bl	8002c3a <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 800115e:	2301      	movs	r3, #1
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	23b4      	movs	r3, #180	; 0xb4
 8001164:	2215      	movs	r2, #21
 8001166:	2100      	movs	r1, #0
 8001168:	4844      	ldr	r0, [pc, #272]	; (800127c <mipi_config+0x318>)
 800116a:	f001 fd66 	bl	8002c3a <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = { 0x27, 0x09 };
 800116e:	f640 1327 	movw	r3, #2343	; 0x927
 8001172:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 8001176:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	23b6      	movs	r3, #182	; 0xb6
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2303      	movs	r3, #3
 8001182:	2239      	movs	r2, #57	; 0x39
 8001184:	2100      	movs	r1, #0
 8001186:	483d      	ldr	r0, [pc, #244]	; (800127c <mipi_config+0x318>)
 8001188:	f001 fd79 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = { 0x00, 0x54, 0x00, 0x54 };
 800118c:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 8001190:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 8001192:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	23b5      	movs	r3, #181	; 0xb5
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2305      	movs	r3, #5
 800119e:	2239      	movs	r2, #57	; 0x39
 80011a0:	2100      	movs	r1, #0
 80011a2:	4836      	ldr	r0, [pc, #216]	; (800127c <mipi_config+0x318>)
 80011a4:	f001 fd6b 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80011a8:	4a3d      	ldr	r2, [pc, #244]	; (80012a0 <mipi_config+0x33c>)
 80011aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b0:	c303      	stmia	r3!, {r0, r1}
 80011b2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 80011b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	23a5      	movs	r3, #165	; 0xa5
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	230a      	movs	r3, #10
 80011c0:	2239      	movs	r2, #57	; 0x39
 80011c2:	2100      	movs	r1, #0
 80011c4:	482d      	ldr	r0, [pc, #180]	; (800127c <mipi_config+0x318>)
 80011c6:	f001 fd5a 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80011ca:	4a35      	ldr	r2, [pc, #212]	; (80012a0 <mipi_config+0x33c>)
 80011cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d2:	c303      	stmia	r3!, {r0, r1}
 80011d4:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 80011d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	23a6      	movs	r3, #166	; 0xa6
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	230a      	movs	r3, #10
 80011e2:	2239      	movs	r2, #57	; 0x39
 80011e4:	2100      	movs	r1, #0
 80011e6:	4825      	ldr	r0, [pc, #148]	; (800127c <mipi_config+0x318>)
 80011e8:	f001 fd49 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = { 0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00 };
 80011ec:	4a2d      	ldr	r2, [pc, #180]	; (80012a4 <mipi_config+0x340>)
 80011ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f6:	6018      	str	r0, [r3, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	8019      	strh	r1, [r3, #0]
 80011fc:	3302      	adds	r3, #2
 80011fe:	0c0a      	lsrs	r2, r1, #16
 8001200:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 8001202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	23ba      	movs	r3, #186	; 0xba
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2308      	movs	r3, #8
 800120e:	2239      	movs	r2, #57	; 0x39
 8001210:	2100      	movs	r1, #0
 8001212:	481a      	ldr	r0, [pc, #104]	; (800127c <mipi_config+0x318>)
 8001214:	f001 fd33 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001218:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <mipi_config+0x344>)
 800121a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 8001226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	23bb      	movs	r3, #187	; 0xbb
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2309      	movs	r3, #9
 8001232:	2239      	movs	r2, #57	; 0x39
 8001234:	2100      	movs	r1, #0
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <mipi_config+0x318>)
 8001238:	f001 fd21 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 800123c:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <mipi_config+0x344>)
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001246:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	23bc      	movs	r3, #188	; 0xbc
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2309      	movs	r3, #9
 8001256:	2239      	movs	r2, #57	; 0x39
 8001258:	2100      	movs	r1, #0
 800125a:	4808      	ldr	r0, [pc, #32]	; (800127c <mipi_config+0x318>)
 800125c:	f001 fd0f 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = { 0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF,
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <mipi_config+0x348>)
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	ca07      	ldmia	r2, {r0, r1, r2}
 8001268:	c303      	stmia	r3!, {r0, r1}
 800126a:	801a      	strh	r2, [r3, #0]
 800126c:	3302      	adds	r3, #2
 800126e:	0c12      	lsrs	r2, r2, #16
 8001270:	701a      	strb	r2, [r3, #0]
			0xFF, 0xF9 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	e01a      	b.n	80012b0 <mipi_config+0x34c>
 800127a:	bf00      	nop
 800127c:	20004b28 	.word	0x20004b28
 8001280:	080076d8 	.word	0x080076d8
 8001284:	080076e0 	.word	0x080076e0
 8001288:	03240542 	.word	0x03240542
 800128c:	080076e4 	.word	0x080076e4
 8001290:	080076f0 	.word	0x080076f0
 8001294:	180f0588 	.word	0x180f0588
 8001298:	080076f8 	.word	0x080076f8
 800129c:	08007708 	.word	0x08007708
 80012a0:	08007718 	.word	0x08007718
 80012a4:	08007724 	.word	0x08007724
 80012a8:	0800772c 	.word	0x0800772c
 80012ac:	08007734 	.word	0x08007734
 80012b0:	23bd      	movs	r3, #189	; 0xbd
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	230c      	movs	r3, #12
 80012b6:	2239      	movs	r2, #57	; 0x39
 80012b8:	2100      	movs	r1, #0
 80012ba:	482d      	ldr	r0, [pc, #180]	; (8001370 <mipi_config+0x40c>)
 80012bc:	f001 fcdf 	bl	8002c7e <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 80012c0:	23c3      	movs	r3, #195	; 0xc3
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	23ed      	movs	r3, #237	; 0xed
 80012c6:	2215      	movs	r2, #21
 80012c8:	2100      	movs	r1, #0
 80012ca:	4829      	ldr	r0, [pc, #164]	; (8001370 <mipi_config+0x40c>)
 80012cc:	f001 fcb5 	bl	8002c3a <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = { 0x40, 0x0F, 0x00 };
 80012d0:	4a28      	ldr	r2, [pc, #160]	; (8001374 <mipi_config+0x410>)
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	4611      	mov	r1, r2
 80012da:	8019      	strh	r1, [r3, #0]
 80012dc:	3302      	adds	r3, #2
 80012de:	0c12      	lsrs	r2, r2, #16
 80012e0:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	23e4      	movs	r3, #228	; 0xe4
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2304      	movs	r3, #4
 80012ee:	2239      	movs	r2, #57	; 0x39
 80012f0:	2100      	movs	r1, #0
 80012f2:	481f      	ldr	r0, [pc, #124]	; (8001370 <mipi_config+0x40c>)
 80012f4:	f001 fcc3 	bl	8002c7e <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = { 0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25 };
 80012f8:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <mipi_config+0x414>)
 80012fa:	463b      	mov	r3, r7
 80012fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80012fe:	c303      	stmia	r3!, {r0, r1}
 8001300:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 8001302:	463b      	mov	r3, r7
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	23cc      	movs	r3, #204	; 0xcc
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	230a      	movs	r3, #10
 800130c:	2239      	movs	r2, #57	; 0x39
 800130e:	2100      	movs	r1, #0
 8001310:	4817      	ldr	r0, [pc, #92]	; (8001370 <mipi_config+0x40c>)
 8001312:	f001 fcb4 	bl	8002c7e <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2335      	movs	r3, #53	; 0x35
 800131c:	2215      	movs	r2, #21
 800131e:	2100      	movs	r1, #0
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <mipi_config+0x40c>)
 8001322:	f001 fc8a 	bl	8002c3a <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 8001326:	2000      	movs	r0, #0
 8001328:	f000 fdc0 	bl	8001eac <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2311      	movs	r3, #17
 8001332:	2205      	movs	r2, #5
 8001334:	2100      	movs	r1, #0
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <mipi_config+0x40c>)
 8001338:	f001 fc7f 	bl	8002c3a <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800133c:	2078      	movs	r0, #120	; 0x78
 800133e:	f000 fdb5 	bl	8001eac <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8001342:	2300      	movs	r3, #0
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2329      	movs	r3, #41	; 0x29
 8001348:	2205      	movs	r2, #5
 800134a:	2100      	movs	r1, #0
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <mipi_config+0x40c>)
 800134e:	f001 fc74 	bl	8002c3a <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001352:	2078      	movs	r0, #120	; 0x78
 8001354:	f000 fdaa 	bl	8001eac <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001358:	2300      	movs	r3, #0
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2335      	movs	r3, #53	; 0x35
 800135e:	2215      	movs	r2, #21
 8001360:	2100      	movs	r1, #0
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <mipi_config+0x40c>)
 8001364:	f001 fc69 	bl	8002c3a <HAL_DSI_ShortWrite>
}
 8001368:	bf00      	nop
 800136a:	37b4      	adds	r7, #180	; 0xb4
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	20004b28 	.word	0x20004b28
 8001374:	08007740 	.word	0x08007740
 8001378:	08007744 	.word	0x08007744

0800137c <SPI_get_form_master>:
			break;
		}*/
	}
}

void SPI_get_form_master() {
 800137c:	b580      	push	{r7, lr}
 800137e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
	uint8_t buf[8192] = { 0 };
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2200      	movs	r2, #0
 800138c:	f843 2c08 	str.w	r2, [r3, #-8]
 8001390:	3b04      	subs	r3, #4
 8001392:	f641 72fc 	movw	r2, #8188	; 0x1ffc
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f006 f961 	bl	8007660 <memset>
	__HAL_SPI_ENABLE(&hspi1);
 800139e:	4b59      	ldr	r3, [pc, #356]	; (8001504 <SPI_get_form_master+0x188>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b57      	ldr	r3, [pc, #348]	; (8001504 <SPI_get_form_master+0x188>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ac:	601a      	str	r2, [r3, #0]
	if (HAL_SPI_Receive(&hspi1, (uint8_t*) buf, 6400, 1000) == HAL_OK) {
 80013ae:	f107 0108 	add.w	r1, r7, #8
 80013b2:	3908      	subs	r1, #8
 80013b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80013bc:	4851      	ldr	r0, [pc, #324]	; (8001504 <SPI_get_form_master+0x188>)
 80013be:	f004 fd42 	bl	8005e46 <HAL_SPI_Receive>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f040 8097 	bne.w	80014f8 <SPI_get_form_master+0x17c>
		int image_count = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80013d0:	f102 0204 	add.w	r2, r2, #4
 80013d4:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart4, "a", 1, 1000);
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	2201      	movs	r2, #1
 80013dc:	494a      	ldr	r1, [pc, #296]	; (8001508 <SPI_get_form_master+0x18c>)
 80013de:	484b      	ldr	r0, [pc, #300]	; (800150c <SPI_get_form_master+0x190>)
 80013e0:	f005 fa96 	bl	8006910 <HAL_UART_Transmit>
		HAL_Delay(10);
 80013e4:	200a      	movs	r0, #10
 80013e6:	f000 fd61 	bl	8001eac <HAL_Delay>
		for (int i = 2; i < 6400;  i += 4)
 80013ea:	2302      	movs	r3, #2
 80013ec:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e07a      	b.n	80014ea <SPI_get_form_master+0x16e>
		{
			image_80x80_rgb888[image_count] = buf[i+1];
 80013f4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	f107 0208 	add.w	r2, r7, #8
 8001400:	4413      	add	r3, r2
 8001402:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8001406:	4a42      	ldr	r2, [pc, #264]	; (8001510 <SPI_get_form_master+0x194>)
 8001408:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800140c:	f103 0304 	add.w	r3, r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	460a      	mov	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
			image_count = image_count + 2;
 8001418:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800141c:	f103 0304 	add.w	r3, r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001428:	f102 0204 	add.w	r2, r2, #4
 800142c:	6013      	str	r3, [r2, #0]
			image_80x80_rgb888[image_count] = buf[i];
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	461a      	mov	r2, r3
 8001434:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	3b08      	subs	r3, #8
 800143e:	7819      	ldrb	r1, [r3, #0]
 8001440:	4a33      	ldr	r2, [pc, #204]	; (8001510 <SPI_get_form_master+0x194>)
 8001442:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001446:	f103 0304 	add.w	r3, r3, #4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4413      	add	r3, r2
 800144e:	460a      	mov	r2, r1
 8001450:	701a      	strb	r2, [r3, #0]
			image_count = image_count + 4;
 8001452:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001456:	f103 0304 	add.w	r3, r3, #4
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3304      	adds	r3, #4
 800145e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001462:	f102 0204 	add.w	r2, r2, #4
 8001466:	6013      	str	r3, [r2, #0]
			image_80x80_rgb888[image_count] = buf[i+2];
 8001468:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3302      	adds	r3, #2
 8001470:	f107 0208 	add.w	r2, r7, #8
 8001474:	4413      	add	r3, r2
 8001476:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 800147a:	4a25      	ldr	r2, [pc, #148]	; (8001510 <SPI_get_form_master+0x194>)
 800147c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001480:	f103 0304 	add.w	r3, r3, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	460a      	mov	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
			image_count = image_count + 4;
 800148c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001490:	f103 0304 	add.w	r3, r3, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3304      	adds	r3, #4
 8001498:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800149c:	f102 0204 	add.w	r2, r2, #4
 80014a0:	6013      	str	r3, [r2, #0]
			image_80x80_rgb888[image_count] = buf[i+3];
 80014a2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3303      	adds	r3, #3
 80014aa:	f107 0208 	add.w	r2, r7, #8
 80014ae:	4413      	add	r3, r2
 80014b0:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 80014b4:	4a16      	ldr	r2, [pc, #88]	; (8001510 <SPI_get_form_master+0x194>)
 80014b6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014ba:	f103 0304 	add.w	r3, r3, #4
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	460a      	mov	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
			image_count = image_count + 2;
 80014c6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014ca:	f103 0304 	add.w	r3, r3, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3302      	adds	r3, #2
 80014d2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014d6:	f102 0204 	add.w	r2, r2, #4
 80014da:	6013      	str	r3, [r2, #0]
		for (int i = 2; i < 6400;  i += 4)
 80014dc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3304      	adds	r3, #4
 80014e4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80014f4:	f6ff af7e 	blt.w	80013f4 <SPI_get_form_master+0x78>
		}
	}
}
 80014f8:	bf00      	nop
 80014fa:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20004d34 	.word	0x20004d34
 8001508:	08007758 	.word	0x08007758
 800150c:	20004e60 	.word	0x20004e60
 8001510:	20000000 	.word	0x20000000

08001514 <LCD_PowerOn>:
		}
	}*/
}

static void LCD_PowerOn(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151e:	4808      	ldr	r0, [pc, #32]	; (8001540 <LCD_PowerOn+0x2c>)
 8001520:	f001 fe04 	bl	800312c <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 8001524:	2014      	movs	r0, #20
 8001526:	f000 fcc1 	bl	8001eac <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <LCD_PowerOn+0x2c>)
 8001532:	f001 fdfb 	bl	800312c <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 8001536:	2078      	movs	r0, #120	; 0x78
 8001538:	f000 fcb8 	bl	8001eac <HAL_Delay>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	48001000 	.word	0x48001000

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800154c:	e7fe      	b.n	800154c <Error_Handler+0x8>
	...

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x44>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_MspInit+0x44>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6613      	str	r3, [r2, #96]	; 0x60
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_MspInit+0x44>)
 8001564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x44>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x44>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6593      	str	r3, [r2, #88]	; 0x58
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x44>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0aa      	sub	sp, #168	; 0xa8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	229c      	movs	r2, #156	; 0x9c
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 f859 	bl	8007660 <memset>
  if(hdsi->Instance==DSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_DSI_MspInit+0x60>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d11b      	bne.n	80015f0 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80015b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80015bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fe21 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 80015d4:	f7ff ffb6 	bl	8001544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_DSI_MspInit+0x64>)
 80015da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_DSI_MspInit+0x64>)
 80015de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015e2:	6613      	str	r3, [r2, #96]	; 0x60
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_DSI_MspInit+0x64>)
 80015e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	37a8      	adds	r7, #168	; 0xa8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40016c00 	.word	0x40016c00
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0b2      	sub	sp, #200	; 0xc8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	229c      	movs	r2, #156	; 0x9c
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f006 f81d 	bl	8007660 <memset>
  if(hi2c->Instance==I2C1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a42      	ldr	r2, [pc, #264]	; (8001734 <HAL_I2C_MspInit+0x134>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d13c      	bne.n	80016aa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001630:	2340      	movs	r3, #64	; 0x40
 8001632:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001634:	2300      	movs	r3, #0
 8001636:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fde7 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001648:	f7ff ff7c 	bl	8001544 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164c:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <HAL_I2C_MspInit+0x138>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	4a39      	ldr	r2, [pc, #228]	; (8001738 <HAL_I2C_MspInit+0x138>)
 8001652:	f043 0302 	orr.w	r3, r3, #2
 8001656:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001658:	4b37      	ldr	r3, [pc, #220]	; (8001738 <HAL_I2C_MspInit+0x138>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001664:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167e:	2304      	movs	r3, #4
 8001680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001688:	4619      	mov	r1, r3
 800168a:	482c      	ldr	r0, [pc, #176]	; (800173c <HAL_I2C_MspInit+0x13c>)
 800168c:	f001 fbbc 	bl	8002e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_I2C_MspInit+0x138>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a28      	ldr	r2, [pc, #160]	; (8001738 <HAL_I2C_MspInit+0x138>)
 8001696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_I2C_MspInit+0x138>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016a8:	e040      	b.n	800172c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a24      	ldr	r2, [pc, #144]	; (8001740 <HAL_I2C_MspInit+0x140>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d13b      	bne.n	800172c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fda5 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80016cc:	f7ff ff3a 	bl	8001544 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_I2C_MspInit+0x138>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	4a18      	ldr	r2, [pc, #96]	; (8001738 <HAL_I2C_MspInit+0x138>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_I2C_MspInit+0x138>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80016e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f0:	2312      	movs	r3, #18
 80016f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001702:	2304      	movs	r3, #4
 8001704:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800170c:	4619      	mov	r1, r3
 800170e:	480b      	ldr	r0, [pc, #44]	; (800173c <HAL_I2C_MspInit+0x13c>)
 8001710:	f001 fb7a 	bl	8002e08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_I2C_MspInit+0x138>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_I2C_MspInit+0x138>)
 800171a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171e:	6593      	str	r3, [r2, #88]	; 0x58
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_I2C_MspInit+0x138>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
}
 800172c:	bf00      	nop
 800172e:	37c8      	adds	r7, #200	; 0xc8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40005400 	.word	0x40005400
 8001738:	40021000 	.word	0x40021000
 800173c:	48000400 	.word	0x48000400
 8001740:	40005800 	.word	0x40005800

08001744 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0aa      	sub	sp, #168	; 0xa8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	229c      	movs	r2, #156	; 0x9c
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f005 ff83 	bl	8007660 <memset>
  if(hltdc->Instance==LTDC)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_LTDC_MspInit+0x80>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d12a      	bne.n	80017ba <HAL_LTDC_MspInit+0x76>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001768:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8001770:	2303      	movs	r3, #3
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8001778:	2308      	movs	r3, #8
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 800177c:	2302      	movs	r3, #2
 800177e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8001780:	2302      	movs	r3, #2
 8001782:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001784:	2302      	movs	r3, #2
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8001788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fd3c 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_LTDC_MspInit+0x5e>
    {
      Error_Handler();
 800179e:	f7ff fed1 	bl	8001544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_LTDC_MspInit+0x84>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <HAL_LTDC_MspInit+0x84>)
 80017a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017ac:	6613      	str	r3, [r2, #96]	; 0x60
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_LTDC_MspInit+0x84>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	37a8      	adds	r7, #168	; 0xa8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40016800 	.word	0x40016800
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0b6      	sub	sp, #216	; 0xd8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e8:	229c      	movs	r2, #156	; 0x9c
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 ff37 	bl	8007660 <memset>
  if(hospi->Instance==OCTOSPI1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a86      	ldr	r2, [pc, #536]	; (8001a10 <HAL_OSPI_MspInit+0x244>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	f040 808c 	bne.w	8001916 <HAL_OSPI_MspInit+0x14a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80017fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fcfe 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 800181a:	f7ff fe93 	bl	8001544 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 800181e:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <HAL_OSPI_MspInit+0x248>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a7b      	ldr	r2, [pc, #492]	; (8001a14 <HAL_OSPI_MspInit+0x248>)
 8001826:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8001828:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <HAL_OSPI_MspInit+0x248>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d10b      	bne.n	8001848 <HAL_OSPI_MspInit+0x7c>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8001830:	4b79      	ldr	r3, [pc, #484]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	4a78      	ldr	r2, [pc, #480]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800183a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183c:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001848:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 800184a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184c:	4a72      	ldr	r2, [pc, #456]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001852:	6513      	str	r3, [r2, #80]	; 0x50
 8001854:	4b70      	ldr	r3, [pc, #448]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001860:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	4a6c      	ldr	r2, [pc, #432]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001878:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 800187e:	f043 0320 	orr.w	r3, r3, #32
 8001882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001884:	4b64      	ldr	r3, [pc, #400]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	69bb      	ldr	r3, [r7, #24]
    PF6     ------> OCTOSPIM_P1_IO3
    PF7     ------> OCTOSPIM_P1_IO2
    PF10     ------> OCTOSPIM_P1_CLK
    PF9     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P1;
 80018aa:	2305      	movs	r3, #5
 80018ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4859      	ldr	r0, [pc, #356]	; (8001a1c <HAL_OSPI_MspInit+0x250>)
 80018b8:	f001 faa6 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80018bc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80018c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80018d6:	230a      	movs	r3, #10
 80018d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018e0:	4619      	mov	r1, r3
 80018e2:	484f      	ldr	r0, [pc, #316]	; (8001a20 <HAL_OSPI_MspInit+0x254>)
 80018e4:	f001 fa90 	bl	8002e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8001902:	2303      	movs	r3, #3
 8001904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001908:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800190c:	4619      	mov	r1, r3
 800190e:	4844      	ldr	r0, [pc, #272]	; (8001a20 <HAL_OSPI_MspInit+0x254>)
 8001910:	f001 fa7a 	bl	8002e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001914:	e077      	b.n	8001a06 <HAL_OSPI_MspInit+0x23a>
  else if(hospi->Instance==OCTOSPI2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a42      	ldr	r2, [pc, #264]	; (8001a24 <HAL_OSPI_MspInit+0x258>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d172      	bne.n	8001a06 <HAL_OSPI_MspInit+0x23a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fc6d 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_OSPI_MspInit+0x174>
      Error_Handler();
 800193c:	f7ff fe02 	bl	8001544 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8001940:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <HAL_OSPI_MspInit+0x248>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	4a33      	ldr	r2, [pc, #204]	; (8001a14 <HAL_OSPI_MspInit+0x248>)
 8001948:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 800194a:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_OSPI_MspInit+0x248>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10b      	bne.n	800196a <HAL_OSPI_MspInit+0x19e>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a30      	ldr	r2, [pc, #192]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	4a2a      	ldr	r2, [pc, #168]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001974:	6513      	str	r3, [r2, #80]	; 0x50
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_OSPI_MspInit+0x24c>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b2:	2308      	movs	r3, #8
 80019b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 80019ca:	230a      	movs	r3, #10
 80019cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4814      	ldr	r0, [pc, #80]	; (8001a28 <HAL_OSPI_MspInit+0x25c>)
 80019d8:	f001 fa16 	bl	8002e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4;
 80019dc:	2313      	movs	r3, #19
 80019de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80019f4:	2305      	movs	r3, #5
 80019f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4807      	ldr	r0, [pc, #28]	; (8001a20 <HAL_OSPI_MspInit+0x254>)
 8001a02:	f001 fa01 	bl	8002e08 <HAL_GPIO_Init>
}
 8001a06:	bf00      	nop
 8001a08:	37d8      	adds	r7, #216	; 0xd8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	a0001000 	.word	0xa0001000
 8001a14:	20004ef4 	.word	0x20004ef4
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	48000800 	.word	0x48000800
 8001a20:	48001400 	.word	0x48001400
 8001a24:	a0001400 	.word	0xa0001400
 8001a28:	48000c00 	.word	0x48000c00

08001a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b090      	sub	sp, #64	; 0x40
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a71      	ldr	r2, [pc, #452]	; (8001c10 <HAL_SPI_MspInit+0x1e4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d128      	bne.n	8001aa0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4e:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	4a70      	ldr	r2, [pc, #448]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a58:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5a:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a64:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a6a      	ldr	r2, [pc, #424]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 8001a7e:	2338      	movs	r3, #56	; 0x38
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a96:	4619      	mov	r1, r3
 8001a98:	485f      	ldr	r0, [pc, #380]	; (8001c18 <HAL_SPI_MspInit+0x1ec>)
 8001a9a:	f001 f9b5 	bl	8002e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a9e:	e0b2      	b.n	8001c06 <HAL_SPI_MspInit+0x1da>
  else if(hspi->Instance==SPI2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5d      	ldr	r2, [pc, #372]	; (8001c1c <HAL_SPI_MspInit+0x1f0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d144      	bne.n	8001b34 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aaa:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	4a59      	ldr	r2, [pc, #356]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab6:	4b57      	ldr	r3, [pc, #348]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac2:	4b54      	ldr	r3, [pc, #336]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a53      	ldr	r2, [pc, #332]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a4d      	ldr	r2, [pc, #308]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001af2:	2312      	movs	r3, #18
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b02:	2305      	movs	r3, #5
 8001b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4844      	ldr	r0, [pc, #272]	; (8001c20 <HAL_SPI_MspInit+0x1f4>)
 8001b0e:	f001 f97b 	bl	8002e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b12:	2304      	movs	r3, #4
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b22:	2305      	movs	r3, #5
 8001b24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	483d      	ldr	r0, [pc, #244]	; (8001c24 <HAL_SPI_MspInit+0x1f8>)
 8001b2e:	f001 f96b 	bl	8002e08 <HAL_GPIO_Init>
}
 8001b32:	e068      	b.n	8001c06 <HAL_SPI_MspInit+0x1da>
  else if(hspi->Instance==SPI3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a3b      	ldr	r2, [pc, #236]	; (8001c28 <HAL_SPI_MspInit+0x1fc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d163      	bne.n	8001c06 <HAL_SPI_MspInit+0x1da>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b48:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4a:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a2e      	ldr	r2, [pc, #184]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b86:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a22      	ldr	r2, [pc, #136]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_SPI_MspInit+0x1e8>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001b9e:	f002 fc4f 	bl	8004440 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ba2:	2340      	movs	r3, #64	; 0x40
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4818      	ldr	r0, [pc, #96]	; (8001c20 <HAL_SPI_MspInit+0x1f4>)
 8001bbe:	f001 f923 	bl	8002e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bd4:	2306      	movs	r3, #6
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4811      	ldr	r0, [pc, #68]	; (8001c24 <HAL_SPI_MspInit+0x1f8>)
 8001be0:	f001 f912 	bl	8002e08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480a      	ldr	r0, [pc, #40]	; (8001c2c <HAL_SPI_MspInit+0x200>)
 8001c02:	f001 f901 	bl	8002e08 <HAL_GPIO_Init>
}
 8001c06:	bf00      	nop
 8001c08:	3740      	adds	r7, #64	; 0x40
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40013000 	.word	0x40013000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	40003800 	.word	0x40003800
 8001c20:	48000c00 	.word	0x48000c00
 8001c24:	48000800 	.word	0x48000800
 8001c28:	40003c00 	.word	0x40003c00
 8001c2c:	48001800 	.word	0x48001800

08001c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0b0      	sub	sp, #192	; 0xc0
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	229c      	movs	r2, #156	; 0x9c
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f005 fd05 	bl	8007660 <memset>
  if(huart->Instance==UART4)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_UART_MspInit+0xb0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d13b      	bne.n	8001cd8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c60:	2308      	movs	r3, #8
 8001c62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 facf 	bl	8005210 <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c78:	f7ff fc64 	bl	8001544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_UART_MspInit+0xb4>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_UART_MspInit+0xb4>)
 8001c82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c86:	6593      	str	r3, [r2, #88]	; 0x58
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_UART_MspInit+0xb4>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_UART_MspInit+0xb4>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_UART_MspInit+0xb4>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_UART_MspInit+0xb4>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cac:	2303      	movs	r3, #3
 8001cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd4:	f001 f898 	bl	8002e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	37c0      	adds	r7, #192	; 0xc0
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40004c00 	.word	0x40004c00
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <NMI_Handler+0x4>

08001cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d34:	f000 f89a 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <SystemInit+0x20>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <SystemInit+0x20>)
 8001d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d64:	f7ff ffea 	bl	8001d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d68:	480c      	ldr	r0, [pc, #48]	; (8001d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6a:	490d      	ldr	r1, [pc, #52]	; (8001da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <LoopForever+0xe>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d80:	4c0a      	ldr	r4, [pc, #40]	; (8001dac <LoopForever+0x16>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f005 fc6f 	bl	8007670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d92:	f7fe fbb1 	bl	80004f8 <main>

08001d96 <LoopForever>:

LoopForever:
    b LoopForever
 8001d96:	e7fe      	b.n	8001d96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d98:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	20004b0c 	.word	0x20004b0c
  ldr r2, =_sidata
 8001da4:	080077f0 	.word	0x080077f0
  ldr r2, =_sbss
 8001da8:	20004b0c 	.word	0x20004b0c
  ldr r4, =_ebss
 8001dac:	20004efc 	.word	0x20004efc

08001db0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC1_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_Init+0x3c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <HAL_Init+0x3c>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dca:	2003      	movs	r0, #3
 8001dcc:	f000 f944 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f000 f80f 	bl	8001df4 <HAL_InitTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	e001      	b.n	8001de6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de2:	f7ff fbb5 	bl	8001550 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de6:	79fb      	ldrb	r3, [r7, #7]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40022000 	.word	0x40022000

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_InitTick+0x6c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_InitTick+0x70>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_InitTick+0x6c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f941 	bl	80020a6 <HAL_SYSTICK_Config>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10f      	bne.n	8001e4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b0f      	cmp	r3, #15
 8001e2e:	d809      	bhi.n	8001e44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e30:	2200      	movs	r2, #0
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f000 f919 	bl	800206e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <HAL_InitTick+0x74>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e007      	b.n	8001e54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e004      	b.n	8001e54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	e001      	b.n	8001e54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20004b08 	.word	0x20004b08
 8001e64:	20004b00 	.word	0x20004b00
 8001e68:	20004b04 	.word	0x20004b04

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20004b08 	.word	0x20004b08
 8001e90:	20004ef8 	.word	0x20004ef8

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20004ef8 	.word	0x20004ef8

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff ffee 	bl	8001e94 <HAL_GetTick>
 8001eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d005      	beq.n	8001ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_Delay+0x44>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed2:	bf00      	nop
 8001ed4:	f7ff ffde 	bl	8001e94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8f7      	bhi.n	8001ed4 <HAL_Delay+0x28>
  {
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20004b08 	.word	0x20004b08

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff8e 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff47 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff5c 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff8e 	bl	8001fac <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5d 	bl	8001f58 <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffb0 	bl	8002014 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	019a      	lsls	r2, r3, #6
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	431a      	orrs	r2, r3
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	041b      	lsls	r3, r3, #16
 80020de:	431a      	orrs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80020fe:	f7ff fec9 	bl	8001e94 <HAL_GetTick>
 8002102:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002104:	e009      	b.n	800211a <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002106:	f7ff fec5 	bl	8001e94 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002114:	d901      	bls.n	800211a <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e015      	b.n	8002146 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ee      	beq.n	8002106 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	019a      	lsls	r2, r3, #6
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	431a      	orrs	r2, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	ea42 0103 	orr.w	r1, r2, r3
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	041a      	lsls	r2, r3, #16
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e10b      	b.n	800237c <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7c5b      	ldrb	r3, [r3, #17]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fa12 	bl	8001598 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2203      	movs	r2, #3
 8002178:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800218e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800219a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021a2:	f7ff fe77 	bl	8001e94 <HAL_GetTick>
 80021a6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80021a8:	e009      	b.n	80021be <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80021aa:	f7ff fe73 	bl	8001e94 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b8:	d901      	bls.n	80021be <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e0de      	b.n	800237c <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ed      	beq.n	80021aa <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80021de:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80021e2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80021fa:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002202:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002236:	2001      	movs	r0, #1
 8002238:	f7ff fe38 	bl	8001eac <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800223c:	f7ff fe2a 	bl	8001e94 <HAL_GetTick>
 8002240:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002242:	e009      	b.n	8002258 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002244:	f7ff fe26 	bl	8001e94 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002252:	d901      	bls.n	8002258 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e091      	b.n	800237c <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ed      	beq.n	8002244 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0206 	orr.w	r2, r2, #6
 8002278:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0203 	bic.w	r2, r2, #3
 800228c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0203 	bic.w	r2, r2, #3
 80022ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022e2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6899      	ldr	r1, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_DSI_Init+0x1b4>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	e000      	b.n	8002306 <HAL_DSI_Init+0x1b6>
 8002304:	2301      	movs	r3, #1
 8002306:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <HAL_DSI_Init+0x234>)
 800230c:	fb03 f202 	mul.w	r2, r3, r2
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	409a      	lsls	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800233c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	430a      	orrs	r2, r1
 8002350:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	003d0900 	.word	0x003d0900

08002388 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7c1b      	ldrb	r3, [r3, #16]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_DSI_ConfigErrorMonitor+0x16>
 800239a:	2302      	movs	r3, #2
 800239c:	e0ab      	b.n	80024f6 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80023d8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80023dc:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80023fa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0202 	orr.w	r2, r2, #2
 8002436:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 020c 	orr.w	r2, r2, #12
 8002454:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0210 	orr.w	r2, r2, #16
 8002472:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0220 	orr.w	r2, r2, #32
 8002490:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80024ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7c1b      	ldrb	r3, [r3, #16]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_DSI_SetGenericVCID+0x16>
 8002514:	2302      	movs	r3, #2
 8002516:	e016      	b.n	8002546 <HAL_DSI_SetGenericVCID+0x44>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0203 	bic.w	r2, r2, #3
 800252c:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7c1b      	ldrb	r3, [r3, #16]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_DSI_ConfigVideoMode+0x16>
 8002564:	2302      	movs	r3, #2
 8002566:	e1f6      	b.n	8002956 <HAL_DSI_ConfigVideoMode+0x404>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0203 	bic.w	r2, r2, #3
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025c6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80025e8:	f023 031f 	bic.w	r3, r3, #31
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800260e:	f023 031f 	bic.w	r3, r3, #31
 8002612:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0203 	bic.w	r2, r2, #3
 8002634:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68d9      	ldr	r1, [r3, #12]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0207 	bic.w	r2, r2, #7
 8002656:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6959      	ldr	r1, [r3, #20]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	431a      	orrs	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 020f 	bic.w	r2, r2, #15
 8002684:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6919      	ldr	r1, [r3, #16]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 020e 	bic.w	r2, r2, #14
 80026a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	005a      	lsls	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d110      	bne.n	80026ee <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026da:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6919      	ldr	r1, [r3, #16]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80026fc:	f023 030f 	bic.w	r3, r3, #15
 8002700:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002722:	f023 030f 	bic.w	r3, r3, #15
 8002726:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002748:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800274c:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800276e:	f023 0303 	bic.w	r3, r3, #3
 8002772:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002794:	f023 0303 	bic.w	r3, r3, #3
 8002798:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e4:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002806:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002828:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6999      	ldr	r1, [r3, #24]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002834:	041a      	lsls	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800284c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6999      	ldr	r1, [r3, #24]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800286e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7c1b      	ldrb	r3, [r3, #16]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_DSI_ConfigPhyTimer+0x16>
 8002974:	2302      	movs	r3, #2
 8002976:	e058      	b.n	8002a2a <HAL_DSI_ConfigPhyTimer+0xc8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4293      	cmp	r3, r2
 8002988:	bf38      	it	cc
 800298a:	4613      	movcc	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800299e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80029cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	021a      	lsls	r2, r3, #8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7c1b      	ldrb	r3, [r3, #16]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_DSI_ConfigHostTimeouts+0x16>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e0b4      	b.n	8002bb6 <HAL_DSI_ConfigHostTimeouts+0x180>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a60:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	021a      	lsls	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b292      	uxth	r2, r2
 8002a82:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	041a      	lsls	r2, r3, #16
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	0c1b      	lsrs	r3, r3, #16
 8002b68:	041b      	lsls	r3, r3, #16
 8002b6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7c1b      	ldrb	r3, [r3, #16]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_DSI_Start+0x14>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e02b      	b.n	8002c2e <HAL_DSI_Start+0x6c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0208 	orr.w	r2, r2, #8
 8002c12:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b088      	sub	sp, #32
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	7c1b      	ldrb	r3, [r3, #16]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_DSI_ShortWrite+0x1a>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e010      	b.n	8002c76 <HAL_DSI_ShortWrite+0x3c>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff fa43 	bl	80020f0 <DSI_ShortWrite>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	741a      	strb	r2, [r3, #16]

  return status;
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b08c      	sub	sp, #48	; 0x30
 8002c82:	af02      	add	r7, sp, #8
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8e:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	7c1b      	ldrb	r3, [r3, #16]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_DSI_LongWrite+0x1e>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e084      	b.n	8002da6 <HAL_DSI_LongWrite+0x128>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca2:	f7ff f8f7 	bl	8001e94 <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002ca8:	e00c      	b.n	8002cc4 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002caa:	f7ff f8f3 	bl	8001e94 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb8:	d904      	bls.n	8002cc4 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e070      	b.n	8002da6 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0eb      	beq.n	8002caa <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	bf28      	it	cs
 8002cdc:	2303      	movcs	r3, #3
 8002cde:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	e00f      	b.n	8002d06 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	3301      	adds	r3, #1
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	6a3a      	ldr	r2, [r7, #32]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d3eb      	bcc.n	8002ce6 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002d26:	e028      	b.n	8002d7a <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf28      	it	cs
 8002d2e:	2304      	movcs	r3, #4
 8002d30:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	e00e      	b.n	8002d5a <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	4413      	add	r3, r2
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	3301      	adds	r3, #1
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d3ec      	bcc.n	8002d3c <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1d3      	bne.n	8002d28 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d88:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	4613      	mov	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	f7ff f990 	bl	80020be <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3728      	adds	r7, #40	; 0x28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7c1b      	ldrb	r3, [r3, #16]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e01b      	b.n	8002dfc <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002dda:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	065a      	lsls	r2, r3, #25
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e16:	e166      	b.n	80030e6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8158 	beq.w	80030e0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d005      	beq.n	8002e48 <HAL_GPIO_Init+0x40>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d130      	bne.n	8002eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7e:	2201      	movs	r2, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 0201 	and.w	r2, r3, #1
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d017      	beq.n	8002ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d123      	bne.n	8002f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	08da      	lsrs	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3208      	adds	r2, #8
 8002efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	08da      	lsrs	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3208      	adds	r2, #8
 8002f34:	6939      	ldr	r1, [r7, #16]
 8002f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0203 	and.w	r2, r3, #3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80b2 	beq.w	80030e0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <HAL_GPIO_Init+0x2fc>)
 8002f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f80:	4a60      	ldr	r2, [pc, #384]	; (8003104 <HAL_GPIO_Init+0x2fc>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6613      	str	r3, [r2, #96]	; 0x60
 8002f88:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <HAL_GPIO_Init+0x2fc>)
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f94:	4a5c      	ldr	r2, [pc, #368]	; (8003108 <HAL_GPIO_Init+0x300>)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	220f      	movs	r2, #15
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fbe:	d02b      	beq.n	8003018 <HAL_GPIO_Init+0x210>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_GPIO_Init+0x304>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d025      	beq.n	8003014 <HAL_GPIO_Init+0x20c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a51      	ldr	r2, [pc, #324]	; (8003110 <HAL_GPIO_Init+0x308>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d01f      	beq.n	8003010 <HAL_GPIO_Init+0x208>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a50      	ldr	r2, [pc, #320]	; (8003114 <HAL_GPIO_Init+0x30c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d019      	beq.n	800300c <HAL_GPIO_Init+0x204>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a4f      	ldr	r2, [pc, #316]	; (8003118 <HAL_GPIO_Init+0x310>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <HAL_GPIO_Init+0x200>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a4e      	ldr	r2, [pc, #312]	; (800311c <HAL_GPIO_Init+0x314>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00d      	beq.n	8003004 <HAL_GPIO_Init+0x1fc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a4d      	ldr	r2, [pc, #308]	; (8003120 <HAL_GPIO_Init+0x318>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <HAL_GPIO_Init+0x1f8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a4c      	ldr	r2, [pc, #304]	; (8003124 <HAL_GPIO_Init+0x31c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_GPIO_Init+0x1f4>
 8002ff8:	2307      	movs	r3, #7
 8002ffa:	e00e      	b.n	800301a <HAL_GPIO_Init+0x212>
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	e00c      	b.n	800301a <HAL_GPIO_Init+0x212>
 8003000:	2306      	movs	r3, #6
 8003002:	e00a      	b.n	800301a <HAL_GPIO_Init+0x212>
 8003004:	2305      	movs	r3, #5
 8003006:	e008      	b.n	800301a <HAL_GPIO_Init+0x212>
 8003008:	2304      	movs	r3, #4
 800300a:	e006      	b.n	800301a <HAL_GPIO_Init+0x212>
 800300c:	2303      	movs	r3, #3
 800300e:	e004      	b.n	800301a <HAL_GPIO_Init+0x212>
 8003010:	2302      	movs	r3, #2
 8003012:	e002      	b.n	800301a <HAL_GPIO_Init+0x212>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_GPIO_Init+0x212>
 8003018:	2300      	movs	r3, #0
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	f002 0203 	and.w	r2, r2, #3
 8003020:	0092      	lsls	r2, r2, #2
 8003022:	4093      	lsls	r3, r2
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800302a:	4937      	ldr	r1, [pc, #220]	; (8003108 <HAL_GPIO_Init+0x300>)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_GPIO_Init+0x320>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800305c:	4a32      	ldr	r2, [pc, #200]	; (8003128 <HAL_GPIO_Init+0x320>)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003062:	4b31      	ldr	r3, [pc, #196]	; (8003128 <HAL_GPIO_Init+0x320>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	43db      	mvns	r3, r3
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4013      	ands	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003086:	4a28      	ldr	r2, [pc, #160]	; (8003128 <HAL_GPIO_Init+0x320>)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800308c:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_GPIO_Init+0x320>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030b0:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <HAL_GPIO_Init+0x320>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <HAL_GPIO_Init+0x320>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030da:	4a13      	ldr	r2, [pc, #76]	; (8003128 <HAL_GPIO_Init+0x320>)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3301      	adds	r3, #1
 80030e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f47f ae91 	bne.w	8002e18 <HAL_GPIO_Init+0x10>
  }
}
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40021000 	.word	0x40021000
 8003108:	40010000 	.word	0x40010000
 800310c:	48000400 	.word	0x48000400
 8003110:	48000800 	.word	0x48000800
 8003114:	48000c00 	.word	0x48000c00
 8003118:	48001000 	.word	0x48001000
 800311c:	48001400 	.word	0x48001400
 8003120:	48001800 	.word	0x48001800
 8003124:	48001c00 	.word	0x48001c00
 8003128:	40010400 	.word	0x40010400

0800312c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
 8003138:	4613      	mov	r3, r2
 800313a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800313c:	787b      	ldrb	r3, [r7, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003148:	e002      	b.n	8003150 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e08d      	b.n	800328a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe fa3c 	bl	8001600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e006      	b.n	80031e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d108      	bne.n	80031fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	e007      	b.n	800320e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800321c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003220:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69d9      	ldr	r1, [r3, #28]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1a      	ldr	r2, [r3, #32]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d138      	bne.n	800331a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e032      	b.n	800331c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2224      	movs	r2, #36	; 0x24
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6819      	ldr	r1, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800331a:	2302      	movs	r3, #2
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	d139      	bne.n	80033b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003348:	2302      	movs	r3, #2
 800334a:	e033      	b.n	80033b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	; 0x24
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800337a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0bf      	b.n	8003552 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe f9ac 	bl	8001744 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003402:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003418:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_LTDC_Init+0x19c>)
 8003434:	400b      	ands	r3, r1
 8003436:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6899      	ldr	r1, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68d9      	ldr	r1, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_LTDC_Init+0x19c>)
 8003462:	400b      	ands	r3, r1
 8003464:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68d9      	ldr	r1, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1a      	ldr	r2, [r3, #32]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6919      	ldr	r1, [r3, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_LTDC_Init+0x19c>)
 8003490:	400b      	ands	r3, r1
 8003492:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6919      	ldr	r1, [r3, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6959      	ldr	r1, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_LTDC_Init+0x19c>)
 80034be:	400b      	ands	r3, r1
 80034c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	041b      	lsls	r3, r3, #16
 80034c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6959      	ldr	r1, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0206 	orr.w	r2, r2, #6
 800352e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	f000f800 	.word	0xf000f800

08003560 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_LTDC_ConfigLayer+0x1a>
 8003576:	2302      	movs	r3, #2
 8003578:	e02c      	b.n	80035d4 <HAL_LTDC_ConfigLayer+0x74>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2202      	movs	r2, #2
 8003586:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2134      	movs	r1, #52	; 0x34
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	4413      	add	r3, r2
 8003596:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4614      	mov	r4, r2
 800359e:	461d      	mov	r5, r3
 80035a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f811 	bl	80035dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2201      	movs	r2, #1
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bdb0      	pop	{r4, r5, r7, pc}

080035dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	4413      	add	r3, r2
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	01db      	lsls	r3, r3, #7
 8003608:	4413      	add	r3, r2
 800360a:	3384      	adds	r3, #132	; 0x84
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	4611      	mov	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	01d2      	lsls	r2, r2, #7
 8003618:	440a      	add	r2, r1
 800361a:	3284      	adds	r2, #132	; 0x84
 800361c:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003620:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003632:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003634:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4619      	mov	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	01db      	lsls	r3, r3, #7
 8003640:	440b      	add	r3, r1
 8003642:	3384      	adds	r3, #132	; 0x84
 8003644:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800364a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800365a:	4413      	add	r3, r2
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	01db      	lsls	r3, r3, #7
 800366a:	4413      	add	r3, r2
 800366c:	3384      	adds	r3, #132	; 0x84
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	4611      	mov	r1, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	01d2      	lsls	r2, r2, #7
 800367a:	440a      	add	r2, r1
 800367c:	3284      	adds	r2, #132	; 0x84
 800367e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003682:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003692:	4413      	add	r3, r2
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4619      	mov	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	01db      	lsls	r3, r3, #7
 80036a0:	440b      	add	r3, r1
 80036a2:	3384      	adds	r3, #132	; 0x84
 80036a4:	4619      	mov	r1, r3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	01db      	lsls	r3, r3, #7
 80036b6:	4413      	add	r3, r2
 80036b8:	3384      	adds	r3, #132	; 0x84
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	4611      	mov	r1, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	01d2      	lsls	r2, r2, #7
 80036c6:	440a      	add	r2, r1
 80036c8:	3284      	adds	r2, #132	; 0x84
 80036ca:	f023 0307 	bic.w	r3, r3, #7
 80036ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	01db      	lsls	r3, r3, #7
 80036da:	4413      	add	r3, r2
 80036dc:	3384      	adds	r3, #132	; 0x84
 80036de:	461a      	mov	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	061b      	lsls	r3, r3, #24
 8003700:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	01db      	lsls	r3, r3, #7
 800370c:	4413      	add	r3, r2
 800370e:	3384      	adds	r3, #132	; 0x84
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	01db      	lsls	r3, r3, #7
 800371c:	4413      	add	r3, r2
 800371e:	3384      	adds	r3, #132	; 0x84
 8003720:	461a      	mov	r2, r3
 8003722:	2300      	movs	r3, #0
 8003724:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800372c:	461a      	mov	r2, r3
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	431a      	orrs	r2, r3
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4619      	mov	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	01db      	lsls	r3, r3, #7
 8003740:	440b      	add	r3, r1
 8003742:	3384      	adds	r3, #132	; 0x84
 8003744:	4619      	mov	r1, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	01db      	lsls	r3, r3, #7
 8003756:	4413      	add	r3, r2
 8003758:	3384      	adds	r3, #132	; 0x84
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	4611      	mov	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	01d2      	lsls	r2, r2, #7
 8003766:	440a      	add	r2, r1
 8003768:	3284      	adds	r2, #132	; 0x84
 800376a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800376e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	01db      	lsls	r3, r3, #7
 800377a:	4413      	add	r3, r2
 800377c:	3384      	adds	r3, #132	; 0x84
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	01db      	lsls	r3, r3, #7
 8003790:	4413      	add	r3, r2
 8003792:	3384      	adds	r3, #132	; 0x84
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	4611      	mov	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	01d2      	lsls	r2, r2, #7
 80037a0:	440a      	add	r2, r1
 80037a2:	3284      	adds	r2, #132	; 0x84
 80037a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037a8:	f023 0307 	bic.w	r3, r3, #7
 80037ac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	6809      	ldr	r1, [r1, #0]
 80037ba:	4608      	mov	r0, r1
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	01c9      	lsls	r1, r1, #7
 80037c0:	4401      	add	r1, r0
 80037c2:	3184      	adds	r1, #132	; 0x84
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	01db      	lsls	r3, r3, #7
 80037d2:	4413      	add	r3, r2
 80037d4:	3384      	adds	r3, #132	; 0x84
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	01db      	lsls	r3, r3, #7
 80037e2:	4413      	add	r3, r2
 80037e4:	3384      	adds	r3, #132	; 0x84
 80037e6:	461a      	mov	r2, r3
 80037e8:	2300      	movs	r3, #0
 80037ea:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	01db      	lsls	r3, r3, #7
 80037f6:	4413      	add	r3, r2
 80037f8:	3384      	adds	r3, #132	; 0x84
 80037fa:	461a      	mov	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800380a:	2304      	movs	r3, #4
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	e01b      	b.n	8003848 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d102      	bne.n	800381e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003818:	2303      	movs	r3, #3
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e014      	b.n	8003848 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d00b      	beq.n	800383e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800382a:	2b02      	cmp	r3, #2
 800382c:	d007      	beq.n	800383e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003832:	2b03      	cmp	r3, #3
 8003834:	d003      	beq.n	800383e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800383a:	2b07      	cmp	r3, #7
 800383c:	d102      	bne.n	8003844 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800383e:	2302      	movs	r3, #2
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e001      	b.n	8003848 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003844:	2301      	movs	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	01db      	lsls	r3, r3, #7
 8003852:	4413      	add	r3, r2
 8003854:	3384      	adds	r3, #132	; 0x84
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	4611      	mov	r1, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	01d2      	lsls	r2, r2, #7
 8003862:	440a      	add	r2, r1
 8003864:	3284      	adds	r2, #132	; 0x84
 8003866:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800386a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	1acb      	subs	r3, r1, r3
 8003882:	69f9      	ldr	r1, [r7, #28]
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	6809      	ldr	r1, [r1, #0]
 800388e:	4608      	mov	r0, r1
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	01c9      	lsls	r1, r1, #7
 8003894:	4401      	add	r1, r0
 8003896:	3184      	adds	r1, #132	; 0x84
 8003898:	4313      	orrs	r3, r2
 800389a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	01db      	lsls	r3, r3, #7
 80038a6:	4413      	add	r3, r2
 80038a8:	3384      	adds	r3, #132	; 0x84
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	4611      	mov	r1, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	01d2      	lsls	r2, r2, #7
 80038b6:	440a      	add	r2, r1
 80038b8:	3284      	adds	r2, #132	; 0x84
 80038ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038be:	f023 0307 	bic.w	r3, r3, #7
 80038c2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	01db      	lsls	r3, r3, #7
 80038ce:	4413      	add	r3, r2
 80038d0:	3384      	adds	r3, #132	; 0x84
 80038d2:	461a      	mov	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	01db      	lsls	r3, r3, #7
 80038e4:	4413      	add	r3, r2
 80038e6:	3384      	adds	r3, #132	; 0x84
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	4611      	mov	r1, r2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	01d2      	lsls	r2, r2, #7
 80038f4:	440a      	add	r2, r1
 80038f6:	3284      	adds	r2, #132	; 0x84
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	3724      	adds	r7, #36	; 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af02      	add	r7, sp, #8
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003918:	f7fe fabc 	bl	8001e94 <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e092      	b.n	8003a50 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	2b00      	cmp	r3, #0
 8003936:	f040 808b 	bne.w	8003a50 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd ff46 	bl	80017cc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003940:	f241 3188 	movw	r1, #5000	; 0x1388
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f88b 	bl	8003a60 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4b42      	ldr	r3, [pc, #264]	; (8003a5c <HAL_OSPI_Init+0x150>)
 8003952:	4013      	ands	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	68d1      	ldr	r1, [r2, #12]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6912      	ldr	r2, [r2, #16]
 800395c:	3a01      	subs	r2, #1
 800395e:	0412      	lsls	r2, r2, #16
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6952      	ldr	r2, [r2, #20]
 8003966:	3a01      	subs	r2, #1
 8003968:	0212      	lsls	r2, r2, #8
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003970:	4311      	orrs	r1, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	69d2      	ldr	r2, [r2, #28]
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	430b      	orrs	r3, r1
 800397e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0412      	lsls	r2, r2, #16
 800398a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	021a      	lsls	r2, r3, #8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2120      	movs	r1, #32
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fb98 	bl	80040e8 <OSPI_WaitFlagStateUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d146      	bne.n	8003a50 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039f8:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d107      	bne.n	8003a38 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0202 	orr.w	r2, r2, #2
 8003a36:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a40:	d103      	bne.n	8003a4a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
 8003a48:	e002      	b.n	8003a50 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	f8e0f8f4 	.word	0xf8e0f8f4

08003a60 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b092      	sub	sp, #72	; 0x48
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a08      	ldr	r2, [pc, #32]	; (8003ac0 <HAL_OSPIM_Config+0x40>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d105      	bne.n	8003aae <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003aac:	e004      	b.n	8003ab8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003abe:	e01f      	b.n	8003b00 <HAL_OSPIM_Config+0x80>
 8003ac0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003ac4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ac8:	3301      	adds	r3, #1
 8003aca:	b2d8      	uxtb	r0, r3
 8003acc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003ad0:	f107 0114 	add.w	r1, r7, #20
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f000 fb3a 	bl	8004158 <OSPIM_GetConfig>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2208      	movs	r2, #8
 8003af4:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003af6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003afa:	3301      	adds	r3, #1
 8003afc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003b00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d9dd      	bls.n	8003ac4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003b08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 82de 	bne.w	80040ce <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003b12:	4bc6      	ldr	r3, [pc, #792]	; (8003e2c <HAL_OSPIM_Config+0x3ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003b1e:	4bc3      	ldr	r3, [pc, #780]	; (8003e2c <HAL_OSPIM_Config+0x3ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4ac2      	ldr	r2, [pc, #776]	; (8003e2c <HAL_OSPIM_Config+0x3ac>)
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003b2a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003b36:	4bbe      	ldr	r3, [pc, #760]	; (8003e30 <HAL_OSPIM_Config+0x3b0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003b42:	4bbb      	ldr	r3, [pc, #748]	; (8003e30 <HAL_OSPIM_Config+0x3b0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4aba      	ldr	r2, [pc, #744]	; (8003e30 <HAL_OSPIM_Config+0x3b0>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003b4e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003b5a:	49b6      	ldr	r1, [pc, #728]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	3348      	adds	r3, #72	; 0x48
 8003b68:	443b      	add	r3, r7
 8003b6a:	3b2c      	subs	r3, #44	; 0x2c
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	48af      	ldr	r0, [pc, #700]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	3348      	adds	r3, #72	; 0x48
 8003b84:	443b      	add	r3, r7
 8003b86:	3b2c      	subs	r3, #44	; 0x2c
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4403      	add	r3, r0
 8003b94:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003b96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	3348      	adds	r3, #72	; 0x48
 8003ba2:	443b      	add	r3, r7
 8003ba4:	3b34      	subs	r3, #52	; 0x34
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a1 	beq.w	8003cf0 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003bae:	49a1      	ldr	r1, [pc, #644]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	3348      	adds	r3, #72	; 0x48
 8003bbc:	443b      	add	r3, r7
 8003bbe:	3b34      	subs	r3, #52	; 0x34
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	489a      	ldr	r0, [pc, #616]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003bcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	3348      	adds	r3, #72	; 0x48
 8003bd8:	443b      	add	r3, r7
 8003bda:	3b34      	subs	r3, #52	; 0x34
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	f021 0201 	bic.w	r2, r1, #1
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4403      	add	r3, r0
 8003be8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003bea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	3348      	adds	r3, #72	; 0x48
 8003bf6:	443b      	add	r3, r7
 8003bf8:	3b30      	subs	r3, #48	; 0x30
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01d      	beq.n	8003c3c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003c00:	498c      	ldr	r1, [pc, #560]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003c02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	3348      	adds	r3, #72	; 0x48
 8003c0e:	443b      	add	r3, r7
 8003c10:	3b30      	subs	r3, #48	; 0x30
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	4885      	ldr	r0, [pc, #532]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3348      	adds	r3, #72	; 0x48
 8003c2a:	443b      	add	r3, r7
 8003c2c:	3b30      	subs	r3, #48	; 0x30
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	f021 0210 	bic.w	r2, r1, #16
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4403      	add	r3, r0
 8003c3a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003c3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	3348      	adds	r3, #72	; 0x48
 8003c48:	443b      	add	r3, r7
 8003c4a:	3b28      	subs	r3, #40	; 0x28
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d021      	beq.n	8003c96 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003c52:	4978      	ldr	r1, [pc, #480]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003c54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	3348      	adds	r3, #72	; 0x48
 8003c60:	443b      	add	r3, r7
 8003c62:	3b28      	subs	r3, #40	; 0x28
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	4870      	ldr	r0, [pc, #448]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003c74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	3348      	adds	r3, #72	; 0x48
 8003c80:	443b      	add	r3, r7
 8003c82:	3b28      	subs	r3, #40	; 0x28
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4403      	add	r3, r0
 8003c94:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	3348      	adds	r3, #72	; 0x48
 8003ca2:	443b      	add	r3, r7
 8003ca4:	3b24      	subs	r3, #36	; 0x24
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d021      	beq.n	8003cf0 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003cac:	4961      	ldr	r1, [pc, #388]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	3348      	adds	r3, #72	; 0x48
 8003cba:	443b      	add	r3, r7
 8003cbc:	3b24      	subs	r3, #36	; 0x24
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	4859      	ldr	r0, [pc, #356]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	3348      	adds	r3, #72	; 0x48
 8003cda:	443b      	add	r3, r7
 8003cdc:	3b24      	subs	r3, #36	; 0x24
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4403      	add	r3, r0
 8003cee:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	3348      	adds	r3, #72	; 0x48
 8003d02:	443b      	add	r3, r7
 8003d04:	3b34      	subs	r3, #52	; 0x34
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	d038      	beq.n	8003d7e <HAL_OSPIM_Config+0x2fe>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	3348      	adds	r3, #72	; 0x48
 8003d1e:	443b      	add	r3, r7
 8003d20:	3b30      	subs	r3, #48	; 0x30
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4299      	cmp	r1, r3
 8003d26:	d02a      	beq.n	8003d7e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	3348      	adds	r3, #72	; 0x48
 8003d3a:	443b      	add	r3, r7
 8003d3c:	3b2c      	subs	r3, #44	; 0x2c
 8003d3e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003d40:	4299      	cmp	r1, r3
 8003d42:	d01c      	beq.n	8003d7e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	68d9      	ldr	r1, [r3, #12]
 8003d48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	3348      	adds	r3, #72	; 0x48
 8003d56:	443b      	add	r3, r7
 8003d58:	3b28      	subs	r3, #40	; 0x28
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	d00e      	beq.n	8003d7e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6919      	ldr	r1, [r3, #16]
 8003d64:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3348      	adds	r3, #72	; 0x48
 8003d72:	443b      	add	r3, r7
 8003d74:	3b24      	subs	r3, #36	; 0x24
 8003d76:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003d78:	4299      	cmp	r1, r3
 8003d7a:	f040 80d3 	bne.w	8003f24 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003d7e:	492d      	ldr	r1, [pc, #180]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003d80:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	3348      	adds	r3, #72	; 0x48
 8003d8e:	443b      	add	r3, r7
 8003d90:	3b34      	subs	r3, #52	; 0x34
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	4825      	ldr	r0, [pc, #148]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003d9e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	3348      	adds	r3, #72	; 0x48
 8003dac:	443b      	add	r3, r7
 8003dae:	3b34      	subs	r3, #52	; 0x34
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	f021 0201 	bic.w	r2, r1, #1
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4403      	add	r3, r0
 8003dbc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003dbe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	3348      	adds	r3, #72	; 0x48
 8003dcc:	443b      	add	r3, r7
 8003dce:	3b30      	subs	r3, #48	; 0x30
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01f      	beq.n	8003e16 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003dd6:	4917      	ldr	r1, [pc, #92]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003dd8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	3348      	adds	r3, #72	; 0x48
 8003de6:	443b      	add	r3, r7
 8003de8:	3b30      	subs	r3, #48	; 0x30
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	480f      	ldr	r0, [pc, #60]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003df6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	3348      	adds	r3, #72	; 0x48
 8003e04:	443b      	add	r3, r7
 8003e06:	3b30      	subs	r3, #48	; 0x30
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f021 0210 	bic.w	r2, r1, #16
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4403      	add	r3, r0
 8003e14:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003e16:	4907      	ldr	r1, [pc, #28]	; (8003e34 <HAL_OSPIM_Config+0x3b4>)
 8003e18:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	3348      	adds	r3, #72	; 0x48
 8003e26:	443b      	add	r3, r7
 8003e28:	3b2c      	subs	r3, #44	; 0x2c
 8003e2a:	e005      	b.n	8003e38 <HAL_OSPIM_Config+0x3b8>
 8003e2c:	a0001000 	.word	0xa0001000
 8003e30:	a0001400 	.word	0xa0001400
 8003e34:	50061c00 	.word	0x50061c00
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	48a6      	ldr	r0, [pc, #664]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003e44:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3348      	adds	r3, #72	; 0x48
 8003e52:	443b      	add	r3, r7
 8003e54:	3b2c      	subs	r3, #44	; 0x2c
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4403      	add	r3, r0
 8003e62:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e64:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	3348      	adds	r3, #72	; 0x48
 8003e72:	443b      	add	r3, r7
 8003e74:	3b28      	subs	r3, #40	; 0x28
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d023      	beq.n	8003ec4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e7c:	4997      	ldr	r1, [pc, #604]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003e7e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	3348      	adds	r3, #72	; 0x48
 8003e8c:	443b      	add	r3, r7
 8003e8e:	3b28      	subs	r3, #40	; 0x28
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	488f      	ldr	r0, [pc, #572]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003ea0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	3348      	adds	r3, #72	; 0x48
 8003eae:	443b      	add	r3, r7
 8003eb0:	3b28      	subs	r3, #40	; 0x28
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4403      	add	r3, r0
 8003ec2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003ec4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	3348      	adds	r3, #72	; 0x48
 8003ed2:	443b      	add	r3, r7
 8003ed4:	3b24      	subs	r3, #36	; 0x24
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d023      	beq.n	8003f24 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003edc:	497f      	ldr	r1, [pc, #508]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003ede:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	3348      	adds	r3, #72	; 0x48
 8003eec:	443b      	add	r3, r7
 8003eee:	3b24      	subs	r3, #36	; 0x24
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	4877      	ldr	r0, [pc, #476]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003f00:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	3348      	adds	r3, #72	; 0x48
 8003f0e:	443b      	add	r3, r7
 8003f10:	3b24      	subs	r3, #36	; 0x24
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4403      	add	r3, r0
 8003f22:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003f24:	4a6d      	ldr	r2, [pc, #436]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f38:	025b      	lsls	r3, r3, #9
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	4967      	ldr	r1, [pc, #412]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003f4e:	4a63      	ldr	r2, [pc, #396]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f023 0203 	bic.w	r2, r3, #3
 8003f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	431a      	orrs	r2, r3
 8003f66:	495d      	ldr	r1, [pc, #372]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d014      	beq.n	8003faa <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003f80:	4a56      	ldr	r2, [pc, #344]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f94:	015b      	lsls	r3, r3, #5
 8003f96:	431a      	orrs	r2, r3
 8003f98:	4950      	ldr	r1, [pc, #320]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	f042 0210 	orr.w	r2, r2, #16
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d019      	beq.n	8003fea <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003fb6:	4a49      	ldr	r2, [pc, #292]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fce:	049b      	lsls	r3, r3, #18
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	4942      	ldr	r1, [pc, #264]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	e01c      	b.n	8004024 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d018      	beq.n	8004024 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003ff2:	4a3a      	ldr	r2, [pc, #232]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400a:	069b      	lsls	r3, r3, #26
 800400c:	431a      	orrs	r2, r3
 800400e:	4933      	ldr	r1, [pc, #204]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	3b01      	subs	r3, #1
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d019      	beq.n	8004064 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004030:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	3b01      	subs	r3, #1
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004048:	049b      	lsls	r3, r3, #18
 800404a:	431a      	orrs	r2, r3
 800404c:	4923      	ldr	r1, [pc, #140]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	3b01      	subs	r3, #1
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	e01c      	b.n	800409e <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d018      	beq.n	800409e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	3b01      	subs	r3, #1
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004084:	069b      	lsls	r3, r3, #26
 8004086:	431a      	orrs	r2, r3
 8004088:	4914      	ldr	r1, [pc, #80]	; (80040dc <HAL_OSPIM_Config+0x65c>)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	3b01      	subs	r3, #1
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800409e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_OSPIM_Config+0x660>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <HAL_OSPIM_Config+0x660>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80040b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_OSPIM_Config+0x664>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <HAL_OSPIM_Config+0x664>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80040ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3748      	adds	r7, #72	; 0x48
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	50061c00 	.word	0x50061c00
 80040e0:	a0001000 	.word	0xa0001000
 80040e4:	a0001400 	.word	0xa0001400

080040e8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80040f8:	e01a      	b.n	8004130 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d016      	beq.n	8004130 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7fd fec7 	bl	8001e94 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e00e      	b.n	800414e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6a1a      	ldr	r2, [r3, #32]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	429a      	cmp	r2, r3
 800414a:	d1d6      	bne.n	80040fa <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <OSPIM_GetConfig+0x26>
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d802      	bhi.n	800417e <OSPIM_GetConfig+0x26>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
 8004182:	e08e      	b.n	80042a2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2200      	movs	r2, #0
 800418e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2200      	movs	r2, #0
 8004194:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d101      	bne.n	80041ac <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80041a8:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <OSPIM_GetConfig+0x158>)
 80041aa:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e074      	b.n	800429c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80041b2:	4a40      	ldr	r2, [pc, #256]	; (80042b4 <OSPIM_GetConfig+0x15c>)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4053      	eors	r3, r2
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d103      	bne.n	80041de <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4053      	eors	r3, r2
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4053      	eors	r3, r2
 800420e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d018      	beq.n	800425a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4053      	eors	r3, r2
 800422e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d111      	bne.n	800425a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3301      	adds	r3, #1
 8004244:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	e005      	b.n	800425a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3301      	adds	r3, #1
 8004252:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d018      	beq.n	8004296 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4053      	eors	r3, r2
 800426a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d111      	bne.n	8004296 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3301      	adds	r3, #1
 8004280:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	611a      	str	r2, [r3, #16]
 8004288:	e005      	b.n	8004296 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3301      	adds	r3, #1
 800428e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d987      	bls.n	80041b2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	04040222 	.word	0x04040222
 80042b4:	50061c00 	.word	0x50061c00

080042b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042bc:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c8:	d102      	bne.n	80042d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80042ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ce:	e00b      	b.n	80042e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80042d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042de:	d102      	bne.n	80042e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80042e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e4:	e000      	b.n	80042e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80042e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40007000 	.word	0x40007000

080042f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d141      	bne.n	800438a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004306:	4b4b      	ldr	r3, [pc, #300]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d131      	bne.n	8004378 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004314:	4b47      	ldr	r3, [pc, #284]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431a:	4a46      	ldr	r2, [pc, #280]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004324:	4b43      	ldr	r3, [pc, #268]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800432c:	4a41      	ldr	r2, [pc, #260]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004334:	4b40      	ldr	r3, [pc, #256]	; (8004438 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2232      	movs	r2, #50	; 0x32
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	4a3f      	ldr	r2, [pc, #252]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	0c9b      	lsrs	r3, r3, #18
 8004346:	3301      	adds	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800434a:	e002      	b.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3b01      	subs	r3, #1
 8004350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004352:	4b38      	ldr	r3, [pc, #224]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	d102      	bne.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f2      	bne.n	800434c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004366:	4b33      	ldr	r3, [pc, #204]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d158      	bne.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e057      	b.n	8004428 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004378:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437e:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004388:	e04d      	b.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004390:	d141      	bne.n	8004416 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004392:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439e:	d131      	bne.n	8004404 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a6:	4a23      	ldr	r2, [pc, #140]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b0:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043b8:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043c0:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2232      	movs	r2, #50	; 0x32
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	0c9b      	lsrs	r3, r3, #18
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d6:	e002      	b.n	80043de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3b01      	subs	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ea:	d102      	bne.n	80043f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f2      	bne.n	80043d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fe:	d112      	bne.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e011      	b.n	8004428 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004414:	e007      	b.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004416:	4b07      	ldr	r3, [pc, #28]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800441e:	4a05      	ldr	r2, [pc, #20]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004420:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004424:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	40007000 	.word	0x40007000
 8004438:	20004b00 	.word	0x20004b00
 800443c:	431bde83 	.word	0x431bde83

08004440 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_PWREx_EnableVddIO2+0x1c>)
 800444a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800444e:	6053      	str	r3, [r2, #4]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f000 bc08 	b.w	8004c84 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004474:	4b96      	ldr	r3, [pc, #600]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447e:	4b94      	ldr	r3, [pc, #592]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80e4 	beq.w	800465e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_RCC_OscConfig+0x4c>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	f040 808b 	bne.w	80045ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	f040 8087 	bne.w	80045ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ac:	4b88      	ldr	r3, [pc, #544]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_OscConfig+0x64>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e3df      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	4b81      	ldr	r3, [pc, #516]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_RCC_OscConfig+0x7e>
 80044d4:	4b7e      	ldr	r3, [pc, #504]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044dc:	e005      	b.n	80044ea <HAL_RCC_OscConfig+0x8a>
 80044de:	4b7c      	ldr	r3, [pc, #496]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d223      	bcs.n	8004536 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fdcc 	bl	8005090 <RCC_SetFlashLatencyFromMSIRange>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e3c0      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004502:	4b73      	ldr	r3, [pc, #460]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a72      	ldr	r2, [pc, #456]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b70      	ldr	r3, [pc, #448]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	496d      	ldr	r1, [pc, #436]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004520:	4b6b      	ldr	r3, [pc, #428]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	4968      	ldr	r1, [pc, #416]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
 8004534:	e025      	b.n	8004582 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004536:	4b66      	ldr	r3, [pc, #408]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a65      	ldr	r2, [pc, #404]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800453c:	f043 0308 	orr.w	r3, r3, #8
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b63      	ldr	r3, [pc, #396]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	4960      	ldr	r1, [pc, #384]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004554:	4b5e      	ldr	r3, [pc, #376]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	495b      	ldr	r1, [pc, #364]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd8c 	bl	8005090 <RCC_SetFlashLatencyFromMSIRange>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e380      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004582:	f000 fcc1 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004586:	4602      	mov	r2, r0
 8004588:	4b51      	ldr	r3, [pc, #324]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	4950      	ldr	r1, [pc, #320]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004594:	5ccb      	ldrb	r3, [r1, r3]
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	fa22 f303 	lsr.w	r3, r2, r3
 800459e:	4a4e      	ldr	r2, [pc, #312]	; (80046d8 <HAL_RCC_OscConfig+0x278>)
 80045a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045a2:	4b4e      	ldr	r3, [pc, #312]	; (80046dc <HAL_RCC_OscConfig+0x27c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fc24 	bl	8001df4 <HAL_InitTick>
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d052      	beq.n	800465c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	e364      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d032      	beq.n	8004628 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c2:	4b43      	ldr	r3, [pc, #268]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a42      	ldr	r2, [pc, #264]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ce:	f7fd fc61 	bl	8001e94 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d6:	f7fd fc5d 	bl	8001e94 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e34d      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e8:	4b39      	ldr	r3, [pc, #228]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f4:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a35      	ldr	r2, [pc, #212]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045fa:	f043 0308 	orr.w	r3, r3, #8
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	4b33      	ldr	r3, [pc, #204]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4930      	ldr	r1, [pc, #192]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004612:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	492b      	ldr	r1, [pc, #172]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004622:	4313      	orrs	r3, r2
 8004624:	604b      	str	r3, [r1, #4]
 8004626:	e01a      	b.n	800465e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004628:	4b29      	ldr	r3, [pc, #164]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a28      	ldr	r2, [pc, #160]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004634:	f7fd fc2e 	bl	8001e94 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800463c:	f7fd fc2a 	bl	8001e94 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e31a      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800464e:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x1dc>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d073      	beq.n	8004752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x21c>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d10e      	bne.n	8004694 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d10b      	bne.n	8004694 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d063      	beq.n	8004750 <HAL_RCC_OscConfig+0x2f0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d15f      	bne.n	8004750 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e2f7      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d106      	bne.n	80046ac <HAL_RCC_OscConfig+0x24c>
 800469e:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e025      	b.n	80046f8 <HAL_RCC_OscConfig+0x298>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b4:	d114      	bne.n	80046e0 <HAL_RCC_OscConfig+0x280>
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a05      	ldr	r2, [pc, #20]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a02      	ldr	r2, [pc, #8]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e013      	b.n	80046f8 <HAL_RCC_OscConfig+0x298>
 80046d0:	40021000 	.word	0x40021000
 80046d4:	08007770 	.word	0x08007770
 80046d8:	20004b00 	.word	0x20004b00
 80046dc:	20004b04 	.word	0x20004b04
 80046e0:	4ba0      	ldr	r3, [pc, #640]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a9f      	ldr	r2, [pc, #636]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b9d      	ldr	r3, [pc, #628]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a9c      	ldr	r2, [pc, #624]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd fbc8 	bl	8001e94 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004708:	f7fd fbc4 	bl	8001e94 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e2b4      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800471a:	4b92      	ldr	r3, [pc, #584]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x2a8>
 8004726:	e014      	b.n	8004752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd fbb4 	bl	8001e94 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004730:	f7fd fbb0 	bl	8001e94 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e2a0      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004742:	4b88      	ldr	r3, [pc, #544]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x2d0>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d060      	beq.n	8004820 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d005      	beq.n	8004770 <HAL_RCC_OscConfig+0x310>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d119      	bne.n	800479e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d116      	bne.n	800479e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004770:	4b7c      	ldr	r3, [pc, #496]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_OscConfig+0x328>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e27d      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	4b76      	ldr	r3, [pc, #472]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	4973      	ldr	r1, [pc, #460]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800479c:	e040      	b.n	8004820 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d023      	beq.n	80047ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a6:	4b6f      	ldr	r3, [pc, #444]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6e      	ldr	r2, [pc, #440]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fd fb6f 	bl	8001e94 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ba:	f7fd fb6b 	bl	8001e94 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e25b      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047cc:	4b65      	ldr	r3, [pc, #404]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	4b62      	ldr	r3, [pc, #392]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	495f      	ldr	r1, [pc, #380]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	e018      	b.n	8004820 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ee:	4b5d      	ldr	r3, [pc, #372]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a5c      	ldr	r2, [pc, #368]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fd fb4b 	bl	8001e94 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004802:	f7fd fb47 	bl	8001e94 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e237      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004814:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d03c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01c      	beq.n	800486e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004834:	4b4b      	ldr	r3, [pc, #300]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483a:	4a4a      	ldr	r2, [pc, #296]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd fb26 	bl	8001e94 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484c:	f7fd fb22 	bl	8001e94 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e212      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ef      	beq.n	800484c <HAL_RCC_OscConfig+0x3ec>
 800486c:	e01b      	b.n	80048a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	4a3b      	ldr	r2, [pc, #236]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fd fb09 	bl	8001e94 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004886:	f7fd fb05 	bl	8001e94 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e1f5      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004898:	4b32      	ldr	r3, [pc, #200]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ef      	bne.n	8004886 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80a6 	beq.w	8004a00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048b8:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	4a26      	ldr	r2, [pc, #152]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6593      	str	r3, [r2, #88]	; 0x58
 80048d0:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048dc:	2301      	movs	r3, #1
 80048de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_RCC_OscConfig+0x508>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d118      	bne.n	800491e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ec:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <HAL_RCC_OscConfig+0x508>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_RCC_OscConfig+0x508>)
 80048f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f8:	f7fd facc 	bl	8001e94 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004900:	f7fd fac8 	bl	8001e94 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e1b8      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <HAL_RCC_OscConfig+0x508>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d108      	bne.n	8004938 <HAL_RCC_OscConfig+0x4d8>
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004936:	e029      	b.n	800498c <HAL_RCC_OscConfig+0x52c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b05      	cmp	r3, #5
 800493e:	d115      	bne.n	800496c <HAL_RCC_OscConfig+0x50c>
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	4a07      	ldr	r2, [pc, #28]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	4a03      	ldr	r2, [pc, #12]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004960:	e014      	b.n	800498c <HAL_RCC_OscConfig+0x52c>
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	40007000 	.word	0x40007000
 800496c:	4b9d      	ldr	r3, [pc, #628]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	4a9c      	ldr	r2, [pc, #624]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800497c:	4b99      	ldr	r3, [pc, #612]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	4a98      	ldr	r2, [pc, #608]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004984:	f023 0304 	bic.w	r3, r3, #4
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d016      	beq.n	80049c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fd fa7e 	bl	8001e94 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800499a:	e00a      	b.n	80049b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499c:	f7fd fa7a 	bl	8001e94 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e168      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b2:	4b8c      	ldr	r3, [pc, #560]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ed      	beq.n	800499c <HAL_RCC_OscConfig+0x53c>
 80049c0:	e015      	b.n	80049ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fd fa67 	bl	8001e94 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fd fa63 	bl	8001e94 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e151      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e0:	4b80      	ldr	r3, [pc, #512]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ed      	bne.n	80049ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ee:	7ffb      	ldrb	r3, [r7, #31]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4b7b      	ldr	r3, [pc, #492]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	4a7a      	ldr	r2, [pc, #488]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d03c      	beq.n	8004a86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01c      	beq.n	8004a4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a14:	4b73      	ldr	r3, [pc, #460]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a1a:	4a72      	ldr	r2, [pc, #456]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fd fa36 	bl	8001e94 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a2c:	f7fd fa32 	bl	8001e94 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e122      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a3e:	4b69      	ldr	r3, [pc, #420]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ef      	beq.n	8004a2c <HAL_RCC_OscConfig+0x5cc>
 8004a4c:	e01b      	b.n	8004a86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a4e:	4b65      	ldr	r3, [pc, #404]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a54:	4a63      	ldr	r2, [pc, #396]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fd fa19 	bl	8001e94 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a66:	f7fd fa15 	bl	8001e94 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e105      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a78:	4b5a      	ldr	r3, [pc, #360]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ef      	bne.n	8004a66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 80f9 	beq.w	8004c82 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	f040 80cf 	bne.w	8004c38 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a9a:	4b52      	ldr	r3, [pc, #328]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f003 0203 	and.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d12c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d123      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d11b      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d113      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	3b01      	subs	r3, #1
 8004aee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d109      	bne.n	8004b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	3b01      	subs	r3, #1
 8004b02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d071      	beq.n	8004bec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	d068      	beq.n	8004be0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b0e:	4b35      	ldr	r3, [pc, #212]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b1a:	4b32      	ldr	r3, [pc, #200]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0ac      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2d      	ldr	r2, [pc, #180]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b36:	f7fd f9ad 	bl	8001e94 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3e:	f7fd f9a9 	bl	8001e94 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e099      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b50:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b5c:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <HAL_RCC_OscConfig+0x788>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b6c:	3a01      	subs	r2, #1
 8004b6e:	0112      	lsls	r2, r2, #4
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b76:	0212      	lsls	r2, r2, #8
 8004b78:	4311      	orrs	r1, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b7e:	0852      	lsrs	r2, r2, #1
 8004b80:	3a01      	subs	r2, #1
 8004b82:	0552      	lsls	r2, r2, #21
 8004b84:	4311      	orrs	r1, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b8a:	0852      	lsrs	r2, r2, #1
 8004b8c:	3a01      	subs	r2, #1
 8004b8e:	0652      	lsls	r2, r2, #25
 8004b90:	4311      	orrs	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b96:	06d2      	lsls	r2, r2, #27
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	4912      	ldr	r1, [pc, #72]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004baa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bac:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a0c      	ldr	r2, [pc, #48]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bb8:	f7fd f96c 	bl	8001e94 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fd f968 	bl	8001e94 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e058      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <HAL_RCC_OscConfig+0x784>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bde:	e050      	b.n	8004c82 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04f      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
 8004be4:	40021000 	.word	0x40021000
 8004be8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bec:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d144      	bne.n	8004c82 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bf8:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c04:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a20      	ldr	r2, [pc, #128]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c10:	f7fd f940 	bl	8001e94 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fd f93c 	bl	8001e94 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e02c      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c2a:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x7b8>
 8004c36:	e024      	b.n	8004c82 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b0c      	cmp	r3, #12
 8004c3c:	d01f      	beq.n	8004c7e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fd f923 	bl	8001e94 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fd f91f 	bl	8001e94 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e00f      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c64:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f0      	bne.n	8004c52 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	4905      	ldr	r1, [pc, #20]	; (8004c8c <HAL_RCC_OscConfig+0x82c>)
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_RCC_OscConfig+0x830>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60cb      	str	r3, [r1, #12]
 8004c7c:	e001      	b.n	8004c82 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	feeefffc 	.word	0xfeeefffc

08004c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e11d      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b90      	ldr	r3, [pc, #576]	; (8004ef0 <HAL_RCC_ClockConfig+0x25c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d910      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b8d      	ldr	r3, [pc, #564]	; (8004ef0 <HAL_RCC_ClockConfig+0x25c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 020f 	bic.w	r2, r3, #15
 8004cc2:	498b      	ldr	r1, [pc, #556]	; (8004ef0 <HAL_RCC_ClockConfig+0x25c>)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b89      	ldr	r3, [pc, #548]	; (8004ef0 <HAL_RCC_ClockConfig+0x25c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e105      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d010      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	4b81      	ldr	r3, [pc, #516]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d908      	bls.n	8004d0a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf8:	4b7e      	ldr	r3, [pc, #504]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	497b      	ldr	r1, [pc, #492]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d079      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d11e      	bne.n	8004d5c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	4b75      	ldr	r3, [pc, #468]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0dc      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004d2e:	f000 fa09 	bl	8005144 <RCC_GetSysClockFreqFromPLLSource>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4a70      	ldr	r2, [pc, #448]	; (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d946      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d3a:	4b6e      	ldr	r3, [pc, #440]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d140      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d46:	4b6b      	ldr	r3, [pc, #428]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d4e:	4a69      	ldr	r2, [pc, #420]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e035      	b.n	8004dc8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d64:	4b63      	ldr	r3, [pc, #396]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d115      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0b9      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d7c:	4b5d      	ldr	r3, [pc, #372]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0ad      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d8c:	4b59      	ldr	r3, [pc, #356]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0a5      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004d9c:	f000 f8b4 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4a55      	ldr	r2, [pc, #340]	; (8004ef8 <HAL_RCC_ClockConfig+0x264>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d90f      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004da8:	4b52      	ldr	r3, [pc, #328]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004db4:	4b4f      	ldr	r3, [pc, #316]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dbc:	4a4d      	ldr	r2, [pc, #308]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dc8:	4b4a      	ldr	r3, [pc, #296]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f023 0203 	bic.w	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4947      	ldr	r1, [pc, #284]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dda:	f7fd f85b 	bl	8001e94 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de2:	f7fd f857 	bl	8001e94 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e077      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df8:	4b3e      	ldr	r3, [pc, #248]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 020c 	and.w	r2, r3, #12
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d1eb      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d105      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e10:	4b38      	ldr	r3, [pc, #224]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a37      	ldr	r2, [pc, #220]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d010      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d208      	bcs.n	8004e4a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e38:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	492b      	ldr	r1, [pc, #172]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4a:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <HAL_RCC_ClockConfig+0x25c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d210      	bcs.n	8004e7a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e58:	4b25      	ldr	r3, [pc, #148]	; (8004ef0 <HAL_RCC_ClockConfig+0x25c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 020f 	bic.w	r2, r3, #15
 8004e60:	4923      	ldr	r1, [pc, #140]	; (8004ef0 <HAL_RCC_ClockConfig+0x25c>)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <HAL_RCC_ClockConfig+0x25c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d001      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e036      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d008      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	4918      	ldr	r1, [pc, #96]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d009      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea4:	4b13      	ldr	r3, [pc, #76]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	4910      	ldr	r1, [pc, #64]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eb8:	f000 f826 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <HAL_RCC_ClockConfig+0x260>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	490c      	ldr	r1, [pc, #48]	; (8004efc <HAL_RCC_ClockConfig+0x268>)
 8004eca:	5ccb      	ldrb	r3, [r1, r3]
 8004ecc:	f003 031f 	and.w	r3, r3, #31
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <HAL_RCC_ClockConfig+0x26c>)
 8004ed6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <HAL_RCC_ClockConfig+0x270>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fc ff89 	bl	8001df4 <HAL_InitTick>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	73fb      	strb	r3, [r7, #15]

  return status;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40022000 	.word	0x40022000
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	04c4b400 	.word	0x04c4b400
 8004efc:	08007770 	.word	0x08007770
 8004f00:	20004b00 	.word	0x20004b00
 8004f04:	20004b04 	.word	0x20004b04

08004f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	; 0x24
 8004f0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f16:	4b3e      	ldr	r3, [pc, #248]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f20:	4b3b      	ldr	r3, [pc, #236]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x34>
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b0c      	cmp	r3, #12
 8004f34:	d121      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d11e      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f3c:	4b34      	ldr	r3, [pc, #208]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f48:	4b31      	ldr	r3, [pc, #196]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e005      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f58:	4b2d      	ldr	r3, [pc, #180]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f64:	4a2b      	ldr	r2, [pc, #172]	; (8005014 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10d      	bne.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f78:	e00a      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d102      	bne.n	8004f86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f80:	4b25      	ldr	r3, [pc, #148]	; (8005018 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	e004      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d101      	bne.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f8c:	4b23      	ldr	r3, [pc, #140]	; (800501c <HAL_RCC_GetSysClockFreq+0x114>)
 8004f8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b0c      	cmp	r3, #12
 8004f94:	d134      	bne.n	8005000 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f96:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d003      	beq.n	8004fae <HAL_RCC_GetSysClockFreq+0xa6>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d003      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xac>
 8004fac:	e005      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fb0:	617b      	str	r3, [r7, #20]
      break;
 8004fb2:	e005      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <HAL_RCC_GetSysClockFreq+0x114>)
 8004fb6:	617b      	str	r3, [r7, #20]
      break;
 8004fb8:	e002      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	617b      	str	r3, [r7, #20]
      break;
 8004fbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	3301      	adds	r3, #1
 8004fcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fce:	4b10      	ldr	r3, [pc, #64]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	fb03 f202 	mul.w	r2, r3, r2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	0e5b      	lsrs	r3, r3, #25
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005000:	69bb      	ldr	r3, [r7, #24]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3724      	adds	r7, #36	; 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000
 8005014:	08007788 	.word	0x08007788
 8005018:	00f42400 	.word	0x00f42400
 800501c:	007a1200 	.word	0x007a1200

08005020 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <HAL_RCC_GetHCLKFreq+0x14>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20004b00 	.word	0x20004b00

08005038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800503c:	f7ff fff0 	bl	8005020 <HAL_RCC_GetHCLKFreq>
 8005040:	4602      	mov	r2, r0
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	4904      	ldr	r1, [pc, #16]	; (8005060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800504e:	5ccb      	ldrb	r3, [r1, r3]
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005058:	4618      	mov	r0, r3
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40021000 	.word	0x40021000
 8005060:	08007780 	.word	0x08007780

08005064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005068:	f7ff ffda 	bl	8005020 <HAL_RCC_GetHCLKFreq>
 800506c:	4602      	mov	r2, r0
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	0adb      	lsrs	r3, r3, #11
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	4904      	ldr	r1, [pc, #16]	; (800508c <HAL_RCC_GetPCLK2Freq+0x28>)
 800507a:	5ccb      	ldrb	r3, [r1, r3]
 800507c:	f003 031f 	and.w	r3, r3, #31
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000
 800508c:	08007780 	.word	0x08007780

08005090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800509c:	4b27      	ldr	r3, [pc, #156]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050a8:	f7ff f906 	bl	80042b8 <HAL_PWREx_GetVoltageRange>
 80050ac:	6178      	str	r0, [r7, #20]
 80050ae:	e014      	b.n	80050da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050b0:	4b22      	ldr	r3, [pc, #136]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	4a21      	ldr	r2, [pc, #132]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ba:	6593      	str	r3, [r2, #88]	; 0x58
 80050bc:	4b1f      	ldr	r3, [pc, #124]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050c8:	f7ff f8f6 	bl	80042b8 <HAL_PWREx_GetVoltageRange>
 80050cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050ce:	4b1b      	ldr	r3, [pc, #108]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	4a1a      	ldr	r2, [pc, #104]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80050d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e0:	d10b      	bne.n	80050fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b80      	cmp	r3, #128	; 0x80
 80050e6:	d913      	bls.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2ba0      	cmp	r3, #160	; 0xa0
 80050ec:	d902      	bls.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ee:	2302      	movs	r3, #2
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	e00d      	b.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050f4:	2301      	movs	r3, #1
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e00a      	b.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b7f      	cmp	r3, #127	; 0x7f
 80050fe:	d902      	bls.n	8005106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005100:	2302      	movs	r3, #2
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	e004      	b.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b70      	cmp	r3, #112	; 0x70
 800510a:	d101      	bne.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800510c:	2301      	movs	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f023 020f 	bic.w	r2, r3, #15
 8005118:	4909      	ldr	r1, [pc, #36]	; (8005140 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d001      	beq.n	8005132 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	40022000 	.word	0x40022000

08005144 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800514a:	4b2d      	ldr	r3, [pc, #180]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d00b      	beq.n	8005172 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d825      	bhi.n	80051ac <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d008      	beq.n	8005178 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d11f      	bne.n	80051ac <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800516c:	4b25      	ldr	r3, [pc, #148]	; (8005204 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800516e:	613b      	str	r3, [r7, #16]
    break;
 8005170:	e01f      	b.n	80051b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005172:	4b25      	ldr	r3, [pc, #148]	; (8005208 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005174:	613b      	str	r3, [r7, #16]
    break;
 8005176:	e01c      	b.n	80051b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005178:	4b21      	ldr	r3, [pc, #132]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005184:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	e005      	b.n	80051a0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80051a0:	4a1a      	ldr	r2, [pc, #104]	; (800520c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a8:	613b      	str	r3, [r7, #16]
    break;
 80051aa:	e002      	b.n	80051b2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	613b      	str	r3, [r7, #16]
    break;
 80051b0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	3301      	adds	r3, #1
 80051be:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	0a1b      	lsrs	r3, r3, #8
 80051c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	fb03 f202 	mul.w	r2, r3, r2
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051d8:	4b09      	ldr	r3, [pc, #36]	; (8005200 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	0e5b      	lsrs	r3, r3, #25
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	3301      	adds	r3, #1
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80051f2:	683b      	ldr	r3, [r7, #0]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40021000 	.word	0x40021000
 8005204:	00f42400 	.word	0x00f42400
 8005208:	007a1200 	.word	0x007a1200
 800520c:	08007788 	.word	0x08007788

08005210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005218:	2300      	movs	r3, #0
 800521a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800521c:	2300      	movs	r3, #0
 800521e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005228:	2b00      	cmp	r3, #0
 800522a:	d040      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d02a      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005234:	2b80      	cmp	r3, #128	; 0x80
 8005236:	d825      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005238:	2b60      	cmp	r3, #96	; 0x60
 800523a:	d026      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800523c:	2b60      	cmp	r3, #96	; 0x60
 800523e:	d821      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d006      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d81d      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d009      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800524c:	2b20      	cmp	r3, #32
 800524e:	d010      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005250:	e018      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005252:	4b89      	ldr	r3, [pc, #548]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	4a88      	ldr	r2, [pc, #544]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800525e:	e015      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fb62 	bl	8005930 <RCCEx_PLLSAI1_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005270:	e00c      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3320      	adds	r3, #32
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fc4d 	bl	8005b18 <RCCEx_PLLSAI2_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005282:	e003      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	74fb      	strb	r3, [r7, #19]
      break;
 8005288:	e000      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800528a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005292:	4b79      	ldr	r3, [pc, #484]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005298:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a0:	4975      	ldr	r1, [pc, #468]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80052a8:	e001      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d047      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c2:	d030      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80052c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c8:	d82a      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ce:	d02a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80052d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d4:	d824      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052da:	d008      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xde>
 80052dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e0:	d81e      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80052e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ea:	d010      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80052ec:	e018      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052ee:	4b62      	ldr	r3, [pc, #392]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	4a61      	ldr	r2, [pc, #388]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052fa:	e015      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fb14 	bl	8005930 <RCCEx_PLLSAI1_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800530c:	e00c      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3320      	adds	r3, #32
 8005312:	2100      	movs	r1, #0
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fbff 	bl	8005b18 <RCCEx_PLLSAI2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800531e:	e003      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	74fb      	strb	r3, [r7, #19]
      break;
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800532e:	4b52      	ldr	r3, [pc, #328]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005330:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533c:	494e      	ldr	r1, [pc, #312]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005344:	e001      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 809f 	beq.w	8005496 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005358:	2300      	movs	r3, #0
 800535a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800535c:	4b46      	ldr	r3, [pc, #280]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800536c:	2300      	movs	r3, #0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00d      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005372:	4b41      	ldr	r3, [pc, #260]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	4a40      	ldr	r2, [pc, #256]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537c:	6593      	str	r3, [r2, #88]	; 0x58
 800537e:	4b3e      	ldr	r3, [pc, #248]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800538a:	2301      	movs	r3, #1
 800538c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800538e:	4b3b      	ldr	r3, [pc, #236]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a3a      	ldr	r2, [pc, #232]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800539a:	f7fc fd7b 	bl	8001e94 <HAL_GetTick>
 800539e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053a0:	e009      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a2:	f7fc fd77 	bl	8001e94 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d902      	bls.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	74fb      	strb	r3, [r7, #19]
        break;
 80053b4:	e005      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053b6:	4b31      	ldr	r3, [pc, #196]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0ef      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d15b      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053c8:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01f      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d019      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053e6:	4b24      	ldr	r3, [pc, #144]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053f2:	4b21      	ldr	r3, [pc, #132]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005402:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800540a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005412:	4a19      	ldr	r2, [pc, #100]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d016      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fc fd36 	bl	8001e94 <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800542a:	e00b      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542c:	f7fc fd32 	bl	8001e94 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	; 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d902      	bls.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	74fb      	strb	r3, [r7, #19]
            break;
 8005442:	e006      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0ec      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005452:	7cfb      	ldrb	r3, [r7, #19]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10c      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005458:	4b07      	ldr	r3, [pc, #28]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005468:	4903      	ldr	r1, [pc, #12]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005470:	e008      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	74bb      	strb	r3, [r7, #18]
 8005476:	e005      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005478:	40021000 	.word	0x40021000
 800547c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005484:	7c7b      	ldrb	r3, [r7, #17]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d105      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800548a:	4ba0      	ldr	r3, [pc, #640]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	4a9f      	ldr	r2, [pc, #636]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005494:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054a2:	4b9a      	ldr	r3, [pc, #616]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f023 0203 	bic.w	r2, r3, #3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b0:	4996      	ldr	r1, [pc, #600]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054c4:	4b91      	ldr	r3, [pc, #580]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f023 020c 	bic.w	r2, r3, #12
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	498e      	ldr	r1, [pc, #568]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054e6:	4b89      	ldr	r3, [pc, #548]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f4:	4985      	ldr	r1, [pc, #532]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005508:	4b80      	ldr	r3, [pc, #512]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005516:	497d      	ldr	r1, [pc, #500]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800552a:	4b78      	ldr	r3, [pc, #480]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005538:	4974      	ldr	r1, [pc, #464]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800554c:	4b6f      	ldr	r3, [pc, #444]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555a:	496c      	ldr	r1, [pc, #432]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800556e:	4b67      	ldr	r3, [pc, #412]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557c:	4963      	ldr	r1, [pc, #396]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005590:	4b5e      	ldr	r3, [pc, #376]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559e:	495b      	ldr	r1, [pc, #364]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055b2:	4b56      	ldr	r3, [pc, #344]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c0:	4952      	ldr	r1, [pc, #328]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055d4:	4b4d      	ldr	r3, [pc, #308]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e2:	494a      	ldr	r1, [pc, #296]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055f6:	4b45      	ldr	r3, [pc, #276]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005604:	4941      	ldr	r1, [pc, #260]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005618:	4b3c      	ldr	r3, [pc, #240]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800561a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800561e:	f023 0203 	bic.w	r2, r3, #3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005626:	4939      	ldr	r1, [pc, #228]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d028      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800563a:	4b34      	ldr	r3, [pc, #208]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005640:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005648:	4930      	ldr	r1, [pc, #192]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005658:	d106      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800565a:	4b2c      	ldr	r3, [pc, #176]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	4a2b      	ldr	r2, [pc, #172]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005664:	60d3      	str	r3, [r2, #12]
 8005666:	e011      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005670:	d10c      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	2101      	movs	r1, #1
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f959 	bl	8005930 <RCCEx_PLLSAI1_Config>
 800567e:	4603      	mov	r3, r0
 8005680:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005682:	7cfb      	ldrb	r3, [r7, #19]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005688:	7cfb      	ldrb	r3, [r7, #19]
 800568a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d04d      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800569c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056a0:	d108      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80056a2:	4b1a      	ldr	r3, [pc, #104]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056a8:	4a18      	ldr	r2, [pc, #96]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80056b2:	e012      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056ba:	4a14      	ldr	r2, [pc, #80]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80056c4:	4b11      	ldr	r3, [pc, #68]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056d2:	490e      	ldr	r1, [pc, #56]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e2:	d106      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a08      	ldr	r2, [pc, #32]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ee:	60d3      	str	r3, [r2, #12]
 80056f0:	e020      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fa:	d109      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056fc:	4b03      	ldr	r3, [pc, #12]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4a02      	ldr	r2, [pc, #8]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005706:	60d3      	str	r3, [r2, #12]
 8005708:	e014      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800570a:	bf00      	nop
 800570c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005718:	d10c      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3304      	adds	r3, #4
 800571e:	2101      	movs	r1, #1
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f905 	bl	8005930 <RCCEx_PLLSAI1_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800572a:	7cfb      	ldrb	r3, [r7, #19]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005730:	7cfb      	ldrb	r3, [r7, #19]
 8005732:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d028      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005740:	4b7a      	ldr	r3, [pc, #488]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800574e:	4977      	ldr	r1, [pc, #476]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575e:	d106      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005760:	4b72      	ldr	r3, [pc, #456]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4a71      	ldr	r2, [pc, #452]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800576a:	60d3      	str	r3, [r2, #12]
 800576c:	e011      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005772:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005776:	d10c      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	2101      	movs	r1, #1
 800577e:	4618      	mov	r0, r3
 8005780:	f000 f8d6 	bl	8005930 <RCCEx_PLLSAI1_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005788:	7cfb      	ldrb	r3, [r7, #19]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800578e:	7cfb      	ldrb	r3, [r7, #19]
 8005790:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01e      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800579e:	4b63      	ldr	r3, [pc, #396]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ae:	495f      	ldr	r1, [pc, #380]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057c0:	d10c      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3304      	adds	r3, #4
 80057c6:	2102      	movs	r1, #2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 f8b1 	bl	8005930 <RCCEx_PLLSAI1_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057d2:	7cfb      	ldrb	r3, [r7, #19]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80057d8:	7cfb      	ldrb	r3, [r7, #19]
 80057da:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00b      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057e8:	4b50      	ldr	r3, [pc, #320]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057ee:	f023 0204 	bic.w	r2, r3, #4
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f8:	494c      	ldr	r1, [pc, #304]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800580c:	4b47      	ldr	r3, [pc, #284]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800580e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005812:	f023 0218 	bic.w	r2, r3, #24
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	4943      	ldr	r1, [pc, #268]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d035      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005830:	4b3e      	ldr	r3, [pc, #248]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a3d      	ldr	r2, [pc, #244]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800583a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583c:	f7fc fb2a 	bl	8001e94 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005842:	e009      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005844:	f7fc fb26 	bl	8001e94 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d902      	bls.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	74fb      	strb	r3, [r7, #19]
        break;
 8005856:	e005      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005858:	4b34      	ldr	r3, [pc, #208]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ef      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d113      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800586a:	4b30      	ldr	r3, [pc, #192]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800586c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587a:	492c      	ldr	r1, [pc, #176]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	3320      	adds	r3, #32
 8005886:	2102      	movs	r1, #2
 8005888:	4618      	mov	r0, r3
 800588a:	f000 f945 	bl	8005b18 <RCCEx_PLLSAI2_Config>
 800588e:	4603      	mov	r3, r0
 8005890:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005892:	7cfb      	ldrb	r3, [r7, #19]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005898:	7cfb      	ldrb	r3, [r7, #19]
 800589a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01e      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b8:	491c      	ldr	r1, [pc, #112]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ca:	d10c      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3320      	adds	r3, #32
 80058d0:	2101      	movs	r1, #1
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f920 	bl	8005b18 <RCCEx_PLLSAI2_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80058e2:	7cfb      	ldrb	r3, [r7, #19]
 80058e4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d017      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005902:	490a      	ldr	r1, [pc, #40]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005914:	d105      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	4a04      	ldr	r2, [pc, #16]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800591c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005920:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005922:	7cbb      	ldrb	r3, [r7, #18]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40021000 	.word	0x40021000

08005930 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800593e:	4b72      	ldr	r3, [pc, #456]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00e      	beq.n	8005968 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800594a:	4b6f      	ldr	r3, [pc, #444]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0203 	and.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d103      	bne.n	8005962 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
       ||
 800595e:	2b00      	cmp	r3, #0
 8005960:	d142      	bne.n	80059e8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	73fb      	strb	r3, [r7, #15]
 8005966:	e03f      	b.n	80059e8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b03      	cmp	r3, #3
 800596e:	d018      	beq.n	80059a2 <RCCEx_PLLSAI1_Config+0x72>
 8005970:	2b03      	cmp	r3, #3
 8005972:	d825      	bhi.n	80059c0 <RCCEx_PLLSAI1_Config+0x90>
 8005974:	2b01      	cmp	r3, #1
 8005976:	d002      	beq.n	800597e <RCCEx_PLLSAI1_Config+0x4e>
 8005978:	2b02      	cmp	r3, #2
 800597a:	d009      	beq.n	8005990 <RCCEx_PLLSAI1_Config+0x60>
 800597c:	e020      	b.n	80059c0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800597e:	4b62      	ldr	r3, [pc, #392]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d11d      	bne.n	80059c6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800598e:	e01a      	b.n	80059c6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005990:	4b5d      	ldr	r3, [pc, #372]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005998:	2b00      	cmp	r3, #0
 800599a:	d116      	bne.n	80059ca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a0:	e013      	b.n	80059ca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059a2:	4b59      	ldr	r3, [pc, #356]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059ae:	4b56      	ldr	r3, [pc, #344]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059be:	e006      	b.n	80059ce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
      break;
 80059c4:	e004      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80059c6:	bf00      	nop
 80059c8:	e002      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80059ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d108      	bne.n	80059e8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80059d6:	4b4c      	ldr	r3, [pc, #304]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f023 0203 	bic.w	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4949      	ldr	r1, [pc, #292]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f040 8086 	bne.w	8005afc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059f0:	4b45      	ldr	r3, [pc, #276]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a44      	ldr	r2, [pc, #272]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80059f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059fc:	f7fc fa4a 	bl	8001e94 <HAL_GetTick>
 8005a00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a02:	e009      	b.n	8005a18 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a04:	f7fc fa46 	bl	8001e94 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d902      	bls.n	8005a18 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	73fb      	strb	r3, [r7, #15]
        break;
 8005a16:	e005      	b.n	8005a24 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a18:	4b3b      	ldr	r3, [pc, #236]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1ef      	bne.n	8005a04 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d168      	bne.n	8005afc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d113      	bne.n	8005a58 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a30:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	4b35      	ldr	r3, [pc, #212]	; (8005b0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6892      	ldr	r2, [r2, #8]
 8005a3c:	0211      	lsls	r1, r2, #8
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68d2      	ldr	r2, [r2, #12]
 8005a42:	06d2      	lsls	r2, r2, #27
 8005a44:	4311      	orrs	r1, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6852      	ldr	r2, [r2, #4]
 8005a4a:	3a01      	subs	r2, #1
 8005a4c:	0112      	lsls	r2, r2, #4
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	492d      	ldr	r1, [pc, #180]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	610b      	str	r3, [r1, #16]
 8005a56:	e02d      	b.n	8005ab4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d115      	bne.n	8005a8a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	4b2b      	ldr	r3, [pc, #172]	; (8005b10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6892      	ldr	r2, [r2, #8]
 8005a6a:	0211      	lsls	r1, r2, #8
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6912      	ldr	r2, [r2, #16]
 8005a70:	0852      	lsrs	r2, r2, #1
 8005a72:	3a01      	subs	r2, #1
 8005a74:	0552      	lsls	r2, r2, #21
 8005a76:	4311      	orrs	r1, r2
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6852      	ldr	r2, [r2, #4]
 8005a7c:	3a01      	subs	r2, #1
 8005a7e:	0112      	lsls	r2, r2, #4
 8005a80:	430a      	orrs	r2, r1
 8005a82:	4921      	ldr	r1, [pc, #132]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	610b      	str	r3, [r1, #16]
 8005a88:	e014      	b.n	8005ab4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a8a:	4b1f      	ldr	r3, [pc, #124]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	4b21      	ldr	r3, [pc, #132]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6892      	ldr	r2, [r2, #8]
 8005a96:	0211      	lsls	r1, r2, #8
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6952      	ldr	r2, [r2, #20]
 8005a9c:	0852      	lsrs	r2, r2, #1
 8005a9e:	3a01      	subs	r2, #1
 8005aa0:	0652      	lsls	r2, r2, #25
 8005aa2:	4311      	orrs	r1, r2
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6852      	ldr	r2, [r2, #4]
 8005aa8:	3a01      	subs	r2, #1
 8005aaa:	0112      	lsls	r2, r2, #4
 8005aac:	430a      	orrs	r2, r1
 8005aae:	4916      	ldr	r1, [pc, #88]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ab4:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a13      	ldr	r2, [pc, #76]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005abe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac0:	f7fc f9e8 	bl	8001e94 <HAL_GetTick>
 8005ac4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ac6:	e009      	b.n	8005adc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ac8:	f7fc f9e4 	bl	8001e94 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d902      	bls.n	8005adc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	73fb      	strb	r3, [r7, #15]
          break;
 8005ada:	e005      	b.n	8005ae8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0ef      	beq.n	8005ac8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	4904      	ldr	r1, [pc, #16]	; (8005b08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	07ff800f 	.word	0x07ff800f
 8005b10:	ff9f800f 	.word	0xff9f800f
 8005b14:	f9ff800f 	.word	0xf9ff800f

08005b18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b26:	4b72      	ldr	r3, [pc, #456]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b32:	4b6f      	ldr	r3, [pc, #444]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0203 	and.w	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d103      	bne.n	8005b4a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
       ||
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d142      	bne.n	8005bd0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	73fb      	strb	r3, [r7, #15]
 8005b4e:	e03f      	b.n	8005bd0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d018      	beq.n	8005b8a <RCCEx_PLLSAI2_Config+0x72>
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d825      	bhi.n	8005ba8 <RCCEx_PLLSAI2_Config+0x90>
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d002      	beq.n	8005b66 <RCCEx_PLLSAI2_Config+0x4e>
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d009      	beq.n	8005b78 <RCCEx_PLLSAI2_Config+0x60>
 8005b64:	e020      	b.n	8005ba8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b66:	4b62      	ldr	r3, [pc, #392]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d11d      	bne.n	8005bae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b76:	e01a      	b.n	8005bae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b78:	4b5d      	ldr	r3, [pc, #372]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d116      	bne.n	8005bb2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b88:	e013      	b.n	8005bb2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b8a:	4b59      	ldr	r3, [pc, #356]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10f      	bne.n	8005bb6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b96:	4b56      	ldr	r3, [pc, #344]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ba6:	e006      	b.n	8005bb6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	73fb      	strb	r3, [r7, #15]
      break;
 8005bac:	e004      	b.n	8005bb8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d108      	bne.n	8005bd0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005bbe:	4b4c      	ldr	r3, [pc, #304]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4949      	ldr	r1, [pc, #292]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f040 8086 	bne.w	8005ce4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bd8:	4b45      	ldr	r3, [pc, #276]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a44      	ldr	r2, [pc, #272]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be4:	f7fc f956 	bl	8001e94 <HAL_GetTick>
 8005be8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bea:	e009      	b.n	8005c00 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bec:	f7fc f952 	bl	8001e94 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d902      	bls.n	8005c00 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	73fb      	strb	r3, [r7, #15]
        break;
 8005bfe:	e005      	b.n	8005c0c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c00:	4b3b      	ldr	r3, [pc, #236]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1ef      	bne.n	8005bec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d168      	bne.n	8005ce4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d113      	bne.n	8005c40 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c18:	4b35      	ldr	r3, [pc, #212]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c1a:	695a      	ldr	r2, [r3, #20]
 8005c1c:	4b35      	ldr	r3, [pc, #212]	; (8005cf4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6892      	ldr	r2, [r2, #8]
 8005c24:	0211      	lsls	r1, r2, #8
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68d2      	ldr	r2, [r2, #12]
 8005c2a:	06d2      	lsls	r2, r2, #27
 8005c2c:	4311      	orrs	r1, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6852      	ldr	r2, [r2, #4]
 8005c32:	3a01      	subs	r2, #1
 8005c34:	0112      	lsls	r2, r2, #4
 8005c36:	430a      	orrs	r2, r1
 8005c38:	492d      	ldr	r1, [pc, #180]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	614b      	str	r3, [r1, #20]
 8005c3e:	e02d      	b.n	8005c9c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d115      	bne.n	8005c72 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c46:	4b2a      	ldr	r3, [pc, #168]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6892      	ldr	r2, [r2, #8]
 8005c52:	0211      	lsls	r1, r2, #8
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6912      	ldr	r2, [r2, #16]
 8005c58:	0852      	lsrs	r2, r2, #1
 8005c5a:	3a01      	subs	r2, #1
 8005c5c:	0552      	lsls	r2, r2, #21
 8005c5e:	4311      	orrs	r1, r2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6852      	ldr	r2, [r2, #4]
 8005c64:	3a01      	subs	r2, #1
 8005c66:	0112      	lsls	r2, r2, #4
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	4921      	ldr	r1, [pc, #132]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	614b      	str	r3, [r1, #20]
 8005c70:	e014      	b.n	8005c9c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c72:	4b1f      	ldr	r3, [pc, #124]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c74:	695a      	ldr	r2, [r3, #20]
 8005c76:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <RCCEx_PLLSAI2_Config+0x1e4>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6892      	ldr	r2, [r2, #8]
 8005c7e:	0211      	lsls	r1, r2, #8
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6952      	ldr	r2, [r2, #20]
 8005c84:	0852      	lsrs	r2, r2, #1
 8005c86:	3a01      	subs	r2, #1
 8005c88:	0652      	lsls	r2, r2, #25
 8005c8a:	4311      	orrs	r1, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6852      	ldr	r2, [r2, #4]
 8005c90:	3a01      	subs	r2, #1
 8005c92:	0112      	lsls	r2, r2, #4
 8005c94:	430a      	orrs	r2, r1
 8005c96:	4916      	ldr	r1, [pc, #88]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c9c:	4b14      	ldr	r3, [pc, #80]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a13      	ldr	r2, [pc, #76]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca8:	f7fc f8f4 	bl	8001e94 <HAL_GetTick>
 8005cac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cae:	e009      	b.n	8005cc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cb0:	f7fc f8f0 	bl	8001e94 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d902      	bls.n	8005cc4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	73fb      	strb	r3, [r7, #15]
          break;
 8005cc2:	e005      	b.n	8005cd0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0ef      	beq.n	8005cb0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005cd6:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	4904      	ldr	r1, [pc, #16]	; (8005cf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	07ff800f 	.word	0x07ff800f
 8005cf8:	ff9f800f 	.word	0xff9f800f
 8005cfc:	f9ff800f 	.word	0xf9ff800f

08005d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e095      	b.n	8005e3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d108      	bne.n	8005d2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d22:	d009      	beq.n	8005d38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	61da      	str	r2, [r3, #28]
 8005d2a:	e005      	b.n	8005d38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fb fe6a 	bl	8001a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d78:	d902      	bls.n	8005d80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e002      	b.n	8005d86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d8e:	d007      	beq.n	8005da0 <HAL_SPI_Init+0xa0>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d98:	d002      	beq.n	8005da0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	ea42 0103 	orr.w	r1, r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	0c1b      	lsrs	r3, r3, #16
 8005dfc:	f003 0204 	and.w	r2, r3, #4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e1c:	ea42 0103 	orr.w	r1, r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b088      	sub	sp, #32
 8005e4a:	af02      	add	r7, sp, #8
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d002      	beq.n	8005e6c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
 8005e68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e6a:	e11a      	b.n	80060a2 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e74:	d112      	bne.n	8005e9c <HAL_SPI_Receive+0x56>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10e      	bne.n	8005e9c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2204      	movs	r2, #4
 8005e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f90e 	bl	80060b4 <HAL_SPI_TransmitReceive>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	e107      	b.n	80060ac <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_SPI_Receive+0x64>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e100      	b.n	80060ac <HAL_SPI_Receive+0x266>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eb2:	f7fb ffef 	bl	8001e94 <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_SPI_Receive+0x7e>
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ec8:	e0eb      	b.n	80060a2 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	88fa      	ldrh	r2, [r7, #6]
 8005ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	88fa      	ldrh	r2, [r7, #6]
 8005eea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f14:	d908      	bls.n	8005f28 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	e007      	b.n	8005f38 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f36:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f40:	d10f      	bne.n	8005f62 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d007      	beq.n	8005f80 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f88:	d86f      	bhi.n	800606a <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f8a:	e034      	b.n	8005ff6 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d117      	bne.n	8005fca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f103 020c 	add.w	r2, r3, #12
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	7812      	ldrb	r2, [r2, #0]
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005fc8:	e015      	b.n	8005ff6 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fca:	f7fb ff63 	bl	8001e94 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d803      	bhi.n	8005fe2 <HAL_SPI_Receive+0x19c>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d102      	bne.n	8005fe8 <HAL_SPI_Receive+0x1a2>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005ff4:	e055      	b.n	80060a2 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1c4      	bne.n	8005f8c <HAL_SPI_Receive+0x146>
 8006002:	e038      	b.n	8006076 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b01      	cmp	r3, #1
 8006010:	d115      	bne.n	800603e <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	b292      	uxth	r2, r2
 800601e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	1c9a      	adds	r2, r3, #2
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800603c:	e015      	b.n	800606a <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800603e:	f7fb ff29 	bl	8001e94 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d803      	bhi.n	8006056 <HAL_SPI_Receive+0x210>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d102      	bne.n	800605c <HAL_SPI_Receive+0x216>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006068:	e01b      	b.n	80060a2 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1c6      	bne.n	8006004 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 fb5a 	bl	8006734 <SPI_EndRxTransaction>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	75fb      	strb	r3, [r7, #23]
 8006098:	e003      	b.n	80060a2 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	; 0x28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060c2:	2301      	movs	r3, #1
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_SPI_TransmitReceive+0x26>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e20a      	b.n	80064f0 <HAL_SPI_TransmitReceive+0x43c>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060e2:	f7fb fed7 	bl	8001e94 <HAL_GetTick>
 80060e6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060ee:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80060f6:	887b      	ldrh	r3, [r7, #2]
 80060f8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80060fa:	887b      	ldrh	r3, [r7, #2]
 80060fc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060fe:	7efb      	ldrb	r3, [r7, #27]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d00e      	beq.n	8006122 <HAL_SPI_TransmitReceive+0x6e>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800610a:	d106      	bne.n	800611a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <HAL_SPI_TransmitReceive+0x66>
 8006114:	7efb      	ldrb	r3, [r7, #27]
 8006116:	2b04      	cmp	r3, #4
 8006118:	d003      	beq.n	8006122 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800611a:	2302      	movs	r3, #2
 800611c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006120:	e1e0      	b.n	80064e4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x80>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x80>
 800612e:	887b      	ldrh	r3, [r7, #2]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d103      	bne.n	800613c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800613a:	e1d3      	b.n	80064e4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b04      	cmp	r3, #4
 8006146:	d003      	beq.n	8006150 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2205      	movs	r2, #5
 800614c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	887a      	ldrh	r2, [r7, #2]
 8006160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	887a      	ldrh	r2, [r7, #2]
 8006168:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	887a      	ldrh	r2, [r7, #2]
 8006176:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	887a      	ldrh	r2, [r7, #2]
 800617c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006192:	d802      	bhi.n	800619a <HAL_SPI_TransmitReceive+0xe6>
 8006194:	8a3b      	ldrh	r3, [r7, #16]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d908      	bls.n	80061ac <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061a8:	605a      	str	r2, [r3, #4]
 80061aa:	e007      	b.n	80061bc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d007      	beq.n	80061da <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061e2:	f240 8081 	bls.w	80062e8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x140>
 80061ee:	8a7b      	ldrh	r3, [r7, #18]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d16d      	bne.n	80062d0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	881a      	ldrh	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	1c9a      	adds	r2, r3, #2
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006218:	e05a      	b.n	80062d0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b02      	cmp	r3, #2
 8006226:	d11b      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x1ac>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <HAL_SPI_TransmitReceive+0x1ac>
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	2b01      	cmp	r3, #1
 8006236:	d113      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	881a      	ldrh	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	1c9a      	adds	r2, r3, #2
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b01      	cmp	r3, #1
 800626c:	d11c      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x1f4>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d016      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	b292      	uxth	r2, r2
 8006286:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	1c9a      	adds	r2, r3, #2
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062a4:	2301      	movs	r3, #1
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062a8:	f7fb fdf4 	bl	8001e94 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d80b      	bhi.n	80062d0 <HAL_SPI_TransmitReceive+0x21c>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d007      	beq.n	80062d0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80062ce:	e109      	b.n	80064e4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d19f      	bne.n	800621a <HAL_SPI_TransmitReceive+0x166>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d199      	bne.n	800621a <HAL_SPI_TransmitReceive+0x166>
 80062e6:	e0e3      	b.n	80064b0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x244>
 80062f0:	8a7b      	ldrh	r3, [r7, #18]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	f040 80cf 	bne.w	8006496 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d912      	bls.n	8006328 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	881a      	ldrh	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	1c9a      	adds	r2, r3, #2
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b02      	subs	r3, #2
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006326:	e0b6      	b.n	8006496 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800634e:	e0a2      	b.n	8006496 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b02      	cmp	r3, #2
 800635c:	d134      	bne.n	80063c8 <HAL_SPI_TransmitReceive+0x314>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d02f      	beq.n	80063c8 <HAL_SPI_TransmitReceive+0x314>
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	2b01      	cmp	r3, #1
 800636c:	d12c      	bne.n	80063c8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	d912      	bls.n	800639e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	881a      	ldrh	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	1c9a      	adds	r2, r3, #2
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b02      	subs	r3, #2
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800639c:	e012      	b.n	80063c4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	330c      	adds	r3, #12
 80063a8:	7812      	ldrb	r2, [r2, #0]
 80063aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d148      	bne.n	8006468 <HAL_SPI_TransmitReceive+0x3b4>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d042      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d923      	bls.n	8006436 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	b292      	uxth	r2, r2
 80063fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	1c9a      	adds	r2, r3, #2
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b02      	subs	r3, #2
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	d81f      	bhi.n	8006464 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006432:	605a      	str	r2, [r3, #4]
 8006434:	e016      	b.n	8006464 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f103 020c 	add.w	r2, r3, #12
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	7812      	ldrb	r2, [r2, #0]
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006464:	2301      	movs	r3, #1
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006468:	f7fb fd14 	bl	8001e94 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006474:	429a      	cmp	r2, r3
 8006476:	d803      	bhi.n	8006480 <HAL_SPI_TransmitReceive+0x3cc>
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d102      	bne.n	8006486 <HAL_SPI_TransmitReceive+0x3d2>
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	2b00      	cmp	r3, #0
 8006484:	d107      	bne.n	8006496 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006494:	e026      	b.n	80064e4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	f47f af57 	bne.w	8006350 <HAL_SPI_TransmitReceive+0x29c>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f47f af50 	bne.w	8006350 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 f995 	bl	80067e4 <SPI_EndRxTxTransaction>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2220      	movs	r2, #32
 80064ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064da:	e003      	b.n	80064e4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3728      	adds	r7, #40	; 0x28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006508:	f7fb fcc4 	bl	8001e94 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	4413      	add	r3, r2
 8006516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006518:	f7fb fcbc 	bl	8001e94 <HAL_GetTick>
 800651c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800651e:	4b39      	ldr	r3, [pc, #228]	; (8006604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	015b      	lsls	r3, r3, #5
 8006524:	0d1b      	lsrs	r3, r3, #20
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	fb02 f303 	mul.w	r3, r2, r3
 800652c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800652e:	e054      	b.n	80065da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d050      	beq.n	80065da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006538:	f7fb fcac 	bl	8001e94 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	429a      	cmp	r2, r3
 8006546:	d902      	bls.n	800654e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d13d      	bne.n	80065ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800655c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006566:	d111      	bne.n	800658c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006570:	d004      	beq.n	800657c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657a:	d107      	bne.n	800658c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006594:	d10f      	bne.n	80065b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e017      	b.n	80065fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	bf0c      	ite	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	2300      	movne	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d19b      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3720      	adds	r7, #32
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20004b00 	.word	0x20004b00

08006608 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	; 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800661a:	f7fb fc3b 	bl	8001e94 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	1a9b      	subs	r3, r3, r2
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	4413      	add	r3, r2
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800662a:	f7fb fc33 	bl	8001e94 <HAL_GetTick>
 800662e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	330c      	adds	r3, #12
 8006636:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006638:	4b3d      	ldr	r3, [pc, #244]	; (8006730 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	00da      	lsls	r2, r3, #3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	0d1b      	lsrs	r3, r3, #20
 8006648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006650:	e060      	b.n	8006714 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006658:	d107      	bne.n	800666a <SPI_WaitFifoStateUntilTimeout+0x62>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006668:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d050      	beq.n	8006714 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006672:	f7fb fc0f 	bl	8001e94 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667e:	429a      	cmp	r2, r3
 8006680:	d902      	bls.n	8006688 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	d13d      	bne.n	8006704 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006696:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a0:	d111      	bne.n	80066c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	d004      	beq.n	80066b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b4:	d107      	bne.n	80066c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ce:	d10f      	bne.n	80066f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e010      	b.n	8006726 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	3b01      	subs	r3, #1
 8006712:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4013      	ands	r3, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d196      	bne.n	8006652 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3728      	adds	r7, #40	; 0x28
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20004b00 	.word	0x20004b00

08006734 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006748:	d111      	bne.n	800676e <SPI_EndRxTransaction+0x3a>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006752:	d004      	beq.n	800675e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675c:	d107      	bne.n	800676e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	2180      	movs	r1, #128	; 0x80
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff febd 	bl	80064f8 <SPI_WaitFlagStateUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006788:	f043 0220 	orr.w	r2, r3, #32
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e023      	b.n	80067dc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800679c:	d11d      	bne.n	80067da <SPI_EndRxTransaction+0xa6>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a6:	d004      	beq.n	80067b2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b0:	d113      	bne.n	80067da <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff ff22 	bl	8006608 <SPI_WaitFifoStateUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ce:	f043 0220 	orr.w	r2, r3, #32
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e000      	b.n	80067dc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff ff03 	bl	8006608 <SPI_WaitFifoStateUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680c:	f043 0220 	orr.w	r2, r3, #32
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e027      	b.n	8006868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	2180      	movs	r1, #128	; 0x80
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7ff fe68 	bl	80064f8 <SPI_WaitFlagStateUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006832:	f043 0220 	orr.w	r2, r3, #32
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e014      	b.n	8006868 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2200      	movs	r2, #0
 8006846:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff fedc 	bl	8006608 <SPI_WaitFifoStateUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e000      	b.n	8006868 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e042      	b.n	8006908 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fb f9cb 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2224      	movs	r2, #36	; 0x24
 800689e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fbb4 	bl	8007028 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f8b5 	bl	8006a30 <UART_SetConfig>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e01b      	b.n	8006908 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fc33 	bl	800716c <UART_CheckIdleState>
 8006906:	4603      	mov	r3, r0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	4613      	mov	r3, r2
 800691e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006926:	2b20      	cmp	r3, #32
 8006928:	d17c      	bne.n	8006a24 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_UART_Transmit+0x26>
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e075      	b.n	8006a26 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2221      	movs	r2, #33	; 0x21
 8006946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800694a:	f7fb faa3 	bl	8001e94 <HAL_GetTick>
 800694e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	88fa      	ldrh	r2, [r7, #6]
 8006954:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006968:	d108      	bne.n	800697c <HAL_UART_Transmit+0x6c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	e003      	b.n	8006984 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006984:	e031      	b.n	80069ea <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2200      	movs	r2, #0
 800698e:	2180      	movs	r1, #128	; 0x80
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fc95 	bl	80072c0 <UART_WaitOnFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e03e      	b.n	8006a26 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	881a      	ldrh	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ba:	b292      	uxth	r2, r2
 80069bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	3302      	adds	r3, #2
 80069c2:	61bb      	str	r3, [r7, #24]
 80069c4:	e008      	b.n	80069d8 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	b292      	uxth	r2, r2
 80069d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	3301      	adds	r3, #1
 80069d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1c7      	bne.n	8006986 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2200      	movs	r2, #0
 80069fe:	2140      	movs	r1, #64	; 0x40
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fc5d 	bl	80072c0 <UART_WaitOnFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e006      	b.n	8006a26 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	e000      	b.n	8006a26 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8006a24:	2302      	movs	r3, #2
  }
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a34:	b08c      	sub	sp, #48	; 0x30
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4baa      	ldr	r3, [pc, #680]	; (8006d08 <UART_SetConfig+0x2d8>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a9f      	ldr	r2, [pc, #636]	; (8006d0c <UART_SetConfig+0x2dc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006aa6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	f023 010f 	bic.w	r1, r3, #15
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a90      	ldr	r2, [pc, #576]	; (8006d10 <UART_SetConfig+0x2e0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d125      	bne.n	8006b20 <UART_SetConfig+0xf0>
 8006ad4:	4b8f      	ldr	r3, [pc, #572]	; (8006d14 <UART_SetConfig+0x2e4>)
 8006ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d81a      	bhi.n	8006b18 <UART_SetConfig+0xe8>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0xb8>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b09 	.word	0x08006b09
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b11 	.word	0x08006b11
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006afe:	e116      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b00:	2302      	movs	r3, #2
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b06:	e112      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b08:	2304      	movs	r3, #4
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0e:	e10e      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b10:	2308      	movs	r3, #8
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b16:	e10a      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b1e:	e106      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a7c      	ldr	r2, [pc, #496]	; (8006d18 <UART_SetConfig+0x2e8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d138      	bne.n	8006b9c <UART_SetConfig+0x16c>
 8006b2a:	4b7a      	ldr	r3, [pc, #488]	; (8006d14 <UART_SetConfig+0x2e4>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	2b0c      	cmp	r3, #12
 8006b36:	d82d      	bhi.n	8006b94 <UART_SetConfig+0x164>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x110>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b75 	.word	0x08006b75
 8006b44:	08006b95 	.word	0x08006b95
 8006b48:	08006b95 	.word	0x08006b95
 8006b4c:	08006b95 	.word	0x08006b95
 8006b50:	08006b85 	.word	0x08006b85
 8006b54:	08006b95 	.word	0x08006b95
 8006b58:	08006b95 	.word	0x08006b95
 8006b5c:	08006b95 	.word	0x08006b95
 8006b60:	08006b7d 	.word	0x08006b7d
 8006b64:	08006b95 	.word	0x08006b95
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	08006b95 	.word	0x08006b95
 8006b70:	08006b8d 	.word	0x08006b8d
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7a:	e0d8      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b82:	e0d4      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b84:	2304      	movs	r3, #4
 8006b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8a:	e0d0      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b92:	e0cc      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b94:	2310      	movs	r3, #16
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b9a:	e0c8      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a5e      	ldr	r2, [pc, #376]	; (8006d1c <UART_SetConfig+0x2ec>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d125      	bne.n	8006bf2 <UART_SetConfig+0x1c2>
 8006ba6:	4b5b      	ldr	r3, [pc, #364]	; (8006d14 <UART_SetConfig+0x2e4>)
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d016      	beq.n	8006be2 <UART_SetConfig+0x1b2>
 8006bb4:	2b30      	cmp	r3, #48	; 0x30
 8006bb6:	d818      	bhi.n	8006bea <UART_SetConfig+0x1ba>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d00a      	beq.n	8006bd2 <UART_SetConfig+0x1a2>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d814      	bhi.n	8006bea <UART_SetConfig+0x1ba>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <UART_SetConfig+0x19a>
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d008      	beq.n	8006bda <UART_SetConfig+0x1aa>
 8006bc8:	e00f      	b.n	8006bea <UART_SetConfig+0x1ba>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd0:	e0ad      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd8:	e0a9      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006bda:	2304      	movs	r3, #4
 8006bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be0:	e0a5      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006be2:	2308      	movs	r3, #8
 8006be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be8:	e0a1      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006bea:	2310      	movs	r3, #16
 8006bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf0:	e09d      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a4a      	ldr	r2, [pc, #296]	; (8006d20 <UART_SetConfig+0x2f0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d125      	bne.n	8006c48 <UART_SetConfig+0x218>
 8006bfc:	4b45      	ldr	r3, [pc, #276]	; (8006d14 <UART_SetConfig+0x2e4>)
 8006bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c06:	2bc0      	cmp	r3, #192	; 0xc0
 8006c08:	d016      	beq.n	8006c38 <UART_SetConfig+0x208>
 8006c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c0c:	d818      	bhi.n	8006c40 <UART_SetConfig+0x210>
 8006c0e:	2b80      	cmp	r3, #128	; 0x80
 8006c10:	d00a      	beq.n	8006c28 <UART_SetConfig+0x1f8>
 8006c12:	2b80      	cmp	r3, #128	; 0x80
 8006c14:	d814      	bhi.n	8006c40 <UART_SetConfig+0x210>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <UART_SetConfig+0x1f0>
 8006c1a:	2b40      	cmp	r3, #64	; 0x40
 8006c1c:	d008      	beq.n	8006c30 <UART_SetConfig+0x200>
 8006c1e:	e00f      	b.n	8006c40 <UART_SetConfig+0x210>
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c26:	e082      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c2e:	e07e      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c36:	e07a      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3e:	e076      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c46:	e072      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a35      	ldr	r2, [pc, #212]	; (8006d24 <UART_SetConfig+0x2f4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d12a      	bne.n	8006ca8 <UART_SetConfig+0x278>
 8006c52:	4b30      	ldr	r3, [pc, #192]	; (8006d14 <UART_SetConfig+0x2e4>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c60:	d01a      	beq.n	8006c98 <UART_SetConfig+0x268>
 8006c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c66:	d81b      	bhi.n	8006ca0 <UART_SetConfig+0x270>
 8006c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6c:	d00c      	beq.n	8006c88 <UART_SetConfig+0x258>
 8006c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c72:	d815      	bhi.n	8006ca0 <UART_SetConfig+0x270>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <UART_SetConfig+0x250>
 8006c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7c:	d008      	beq.n	8006c90 <UART_SetConfig+0x260>
 8006c7e:	e00f      	b.n	8006ca0 <UART_SetConfig+0x270>
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c86:	e052      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8e:	e04e      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006c90:	2304      	movs	r3, #4
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c96:	e04a      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006c98:	2308      	movs	r3, #8
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9e:	e046      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca6:	e042      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a17      	ldr	r2, [pc, #92]	; (8006d0c <UART_SetConfig+0x2dc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d13a      	bne.n	8006d28 <UART_SetConfig+0x2f8>
 8006cb2:	4b18      	ldr	r3, [pc, #96]	; (8006d14 <UART_SetConfig+0x2e4>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc0:	d01a      	beq.n	8006cf8 <UART_SetConfig+0x2c8>
 8006cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc6:	d81b      	bhi.n	8006d00 <UART_SetConfig+0x2d0>
 8006cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ccc:	d00c      	beq.n	8006ce8 <UART_SetConfig+0x2b8>
 8006cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd2:	d815      	bhi.n	8006d00 <UART_SetConfig+0x2d0>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <UART_SetConfig+0x2b0>
 8006cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cdc:	d008      	beq.n	8006cf0 <UART_SetConfig+0x2c0>
 8006cde:	e00f      	b.n	8006d00 <UART_SetConfig+0x2d0>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce6:	e022      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cee:	e01e      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf6:	e01a      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfe:	e016      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d06:	e012      	b.n	8006d2e <UART_SetConfig+0x2fe>
 8006d08:	cfff69f3 	.word	0xcfff69f3
 8006d0c:	40008000 	.word	0x40008000
 8006d10:	40013800 	.word	0x40013800
 8006d14:	40021000 	.word	0x40021000
 8006d18:	40004400 	.word	0x40004400
 8006d1c:	40004800 	.word	0x40004800
 8006d20:	40004c00 	.word	0x40004c00
 8006d24:	40005000 	.word	0x40005000
 8006d28:	2310      	movs	r3, #16
 8006d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4aae      	ldr	r2, [pc, #696]	; (8006fec <UART_SetConfig+0x5bc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	f040 8097 	bne.w	8006e68 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d823      	bhi.n	8006d8a <UART_SetConfig+0x35a>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x318>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d8b 	.word	0x08006d8b
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d8b 	.word	0x08006d8b
 8006d58:	08006d7b 	.word	0x08006d7b
 8006d5c:	08006d8b 	.word	0x08006d8b
 8006d60:	08006d8b 	.word	0x08006d8b
 8006d64:	08006d8b 	.word	0x08006d8b
 8006d68:	08006d83 	.word	0x08006d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7fe f964 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 8006d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d72:	e010      	b.n	8006d96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d74:	4b9e      	ldr	r3, [pc, #632]	; (8006ff0 <UART_SetConfig+0x5c0>)
 8006d76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d78:	e00d      	b.n	8006d96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7a:	f7fe f8c5 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8006d7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d80:	e009      	b.n	8006d96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d88:	e005      	b.n	8006d96 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8130 	beq.w	8006ffe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	4a94      	ldr	r2, [pc, #592]	; (8006ff4 <UART_SetConfig+0x5c4>)
 8006da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	4413      	add	r3, r2
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d305      	bcc.n	8006dce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d903      	bls.n	8006dd6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006dd4:	e113      	b.n	8006ffe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	2200      	movs	r2, #0
 8006dda:	60bb      	str	r3, [r7, #8]
 8006ddc:	60fa      	str	r2, [r7, #12]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	4a84      	ldr	r2, [pc, #528]	; (8006ff4 <UART_SetConfig+0x5c4>)
 8006de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2200      	movs	r2, #0
 8006dec:	603b      	str	r3, [r7, #0]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006df4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006df8:	f7f9 fa00 	bl	80001fc <__aeabi_uldivmod>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4610      	mov	r0, r2
 8006e02:	4619      	mov	r1, r3
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	020b      	lsls	r3, r1, #8
 8006e0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e12:	0202      	lsls	r2, r0, #8
 8006e14:	6979      	ldr	r1, [r7, #20]
 8006e16:	6849      	ldr	r1, [r1, #4]
 8006e18:	0849      	lsrs	r1, r1, #1
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	4605      	mov	r5, r0
 8006e20:	eb12 0804 	adds.w	r8, r2, r4
 8006e24:	eb43 0905 	adc.w	r9, r3, r5
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	469a      	mov	sl, r3
 8006e30:	4693      	mov	fp, r2
 8006e32:	4652      	mov	r2, sl
 8006e34:	465b      	mov	r3, fp
 8006e36:	4640      	mov	r0, r8
 8006e38:	4649      	mov	r1, r9
 8006e3a:	f7f9 f9df 	bl	80001fc <__aeabi_uldivmod>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4613      	mov	r3, r2
 8006e44:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4c:	d308      	bcc.n	8006e60 <UART_SetConfig+0x430>
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e54:	d204      	bcs.n	8006e60 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	60da      	str	r2, [r3, #12]
 8006e5e:	e0ce      	b.n	8006ffe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e66:	e0ca      	b.n	8006ffe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e70:	d166      	bne.n	8006f40 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d827      	bhi.n	8006eca <UART_SetConfig+0x49a>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0x450>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006ea5 	.word	0x08006ea5
 8006e84:	08006ead 	.word	0x08006ead
 8006e88:	08006eb5 	.word	0x08006eb5
 8006e8c:	08006ecb 	.word	0x08006ecb
 8006e90:	08006ebb 	.word	0x08006ebb
 8006e94:	08006ecb 	.word	0x08006ecb
 8006e98:	08006ecb 	.word	0x08006ecb
 8006e9c:	08006ecb 	.word	0x08006ecb
 8006ea0:	08006ec3 	.word	0x08006ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea4:	f7fe f8c8 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 8006ea8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eaa:	e014      	b.n	8006ed6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eac:	f7fe f8da 	bl	8005064 <HAL_RCC_GetPCLK2Freq>
 8006eb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eb2:	e010      	b.n	8006ed6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb4:	4b4e      	ldr	r3, [pc, #312]	; (8006ff0 <UART_SetConfig+0x5c0>)
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006eb8:	e00d      	b.n	8006ed6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eba:	f7fe f825 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8006ebe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ec0:	e009      	b.n	8006ed6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ec8:	e005      	b.n	8006ed6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8090 	beq.w	8006ffe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	4a44      	ldr	r2, [pc, #272]	; (8006ff4 <UART_SetConfig+0x5c4>)
 8006ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ef0:	005a      	lsls	r2, r3, #1
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	441a      	add	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f02:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	2b0f      	cmp	r3, #15
 8006f08:	d916      	bls.n	8006f38 <UART_SetConfig+0x508>
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d212      	bcs.n	8006f38 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f023 030f 	bic.w	r3, r3, #15
 8006f1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	085b      	lsrs	r3, r3, #1
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	8bfb      	ldrh	r3, [r7, #30]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	8bfa      	ldrh	r2, [r7, #30]
 8006f34:	60da      	str	r2, [r3, #12]
 8006f36:	e062      	b.n	8006ffe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f3e:	e05e      	b.n	8006ffe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d828      	bhi.n	8006f9a <UART_SetConfig+0x56a>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <UART_SetConfig+0x520>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f7d 	.word	0x08006f7d
 8006f58:	08006f85 	.word	0x08006f85
 8006f5c:	08006f9b 	.word	0x08006f9b
 8006f60:	08006f8b 	.word	0x08006f8b
 8006f64:	08006f9b 	.word	0x08006f9b
 8006f68:	08006f9b 	.word	0x08006f9b
 8006f6c:	08006f9b 	.word	0x08006f9b
 8006f70:	08006f93 	.word	0x08006f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f74:	f7fe f860 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 8006f78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f7a:	e014      	b.n	8006fa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f7c:	f7fe f872 	bl	8005064 <HAL_RCC_GetPCLK2Freq>
 8006f80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f82:	e010      	b.n	8006fa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f84:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <UART_SetConfig+0x5c0>)
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f88:	e00d      	b.n	8006fa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f8a:	f7fd ffbd 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8006f8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f90:	e009      	b.n	8006fa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f98:	e005      	b.n	8006fa6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fa4:	bf00      	nop
    }

    if (pclk != 0U)
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d028      	beq.n	8006ffe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	4a10      	ldr	r2, [pc, #64]	; (8006ff4 <UART_SetConfig+0x5c4>)
 8006fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	441a      	add	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	2b0f      	cmp	r3, #15
 8006fd4:	d910      	bls.n	8006ff8 <UART_SetConfig+0x5c8>
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fdc:	d20c      	bcs.n	8006ff8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60da      	str	r2, [r3, #12]
 8006fe8:	e009      	b.n	8006ffe <UART_SetConfig+0x5ce>
 8006fea:	bf00      	nop
 8006fec:	40008000 	.word	0x40008000
 8006ff0:	00f42400 	.word	0x00f42400
 8006ff4:	080077b8 	.word	0x080077b8
      }
      else
      {
        ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2201      	movs	r2, #1
 8007002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2201      	movs	r2, #1
 800700a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2200      	movs	r2, #0
 8007012:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2200      	movs	r2, #0
 8007018:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800701a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800701e:	4618      	mov	r0, r3
 8007020:	3730      	adds	r7, #48	; 0x30
 8007022:	46bd      	mov	sp, r7
 8007024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01a      	beq.n	800713e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007126:	d10a      	bne.n	800713e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
  }
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b098      	sub	sp, #96	; 0x60
 8007170:	af02      	add	r7, sp, #8
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800717c:	f7fa fe8a 	bl	8001e94 <HAL_GetTick>
 8007180:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b08      	cmp	r3, #8
 800718e:	d12f      	bne.n	80071f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007198:	2200      	movs	r2, #0
 800719a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f88e 	bl	80072c0 <UART_WaitOnFlagUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d022      	beq.n	80071f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071be:	653b      	str	r3, [r7, #80]	; 0x50
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071c8:	647b      	str	r3, [r7, #68]	; 0x44
 80071ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e063      	b.n	80072b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d149      	bne.n	8007292 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007206:	2200      	movs	r2, #0
 8007208:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f857 	bl	80072c0 <UART_WaitOnFlagUntilTimeout>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d03c      	beq.n	8007292 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	623b      	str	r3, [r7, #32]
   return(result);
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800722c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007236:	633b      	str	r3, [r7, #48]	; 0x30
 8007238:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800723c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e6      	bne.n	8007218 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	60fb      	str	r3, [r7, #12]
   return(result);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 0301 	bic.w	r3, r3, #1
 8007260:	64bb      	str	r3, [r7, #72]	; 0x48
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3308      	adds	r3, #8
 8007268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800726a:	61fa      	str	r2, [r7, #28]
 800726c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	69b9      	ldr	r1, [r7, #24]
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	617b      	str	r3, [r7, #20]
   return(result);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e5      	bne.n	800724a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e012      	b.n	80072b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2220      	movs	r2, #32
 800729e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3758      	adds	r7, #88	; 0x58
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d0:	e049      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d045      	beq.n	8007366 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072da:	f7fa fddb 	bl	8001e94 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d302      	bcc.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e048      	b.n	8007386 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d031      	beq.n	8007366 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b08      	cmp	r3, #8
 800730e:	d110      	bne.n	8007332 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2208      	movs	r2, #8
 8007316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f838 	bl	800738e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2208      	movs	r2, #8
 8007322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e029      	b.n	8007386 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800733c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007340:	d111      	bne.n	8007366 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800734a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f81e 	bl	800738e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e00f      	b.n	8007386 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4013      	ands	r3, r2
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	429a      	cmp	r2, r3
 8007374:	bf0c      	ite	eq
 8007376:	2301      	moveq	r3, #1
 8007378:	2300      	movne	r3, #0
 800737a:	b2db      	uxtb	r3, r3
 800737c:	461a      	mov	r2, r3
 800737e:	79fb      	ldrb	r3, [r7, #7]
 8007380:	429a      	cmp	r2, r3
 8007382:	d0a6      	beq.n	80072d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800738e:	b480      	push	{r7}
 8007390:	b095      	sub	sp, #84	; 0x54
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b4:	643b      	str	r3, [r7, #64]	; 0x40
 80073b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e6      	bne.n	8007396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3308      	adds	r3, #8
 80073ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3308      	adds	r3, #8
 80073ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e3      	bne.n	80073c8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007404:	2b01      	cmp	r3, #1
 8007406:	d118      	bne.n	800743a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	60bb      	str	r3, [r7, #8]
   return(result);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f023 0310 	bic.w	r3, r3, #16
 800741c:	647b      	str	r3, [r7, #68]	; 0x44
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007426:	61bb      	str	r3, [r7, #24]
 8007428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6979      	ldr	r1, [r7, #20]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	613b      	str	r3, [r7, #16]
   return(result);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e6      	bne.n	8007408 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800744e:	bf00      	nop
 8007450:	3754      	adds	r7, #84	; 0x54
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_UARTEx_DisableFifoMode+0x16>
 800746c:	2302      	movs	r3, #2
 800746e:	e027      	b.n	80074c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2224      	movs	r2, #36	; 0x24
 800747c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800749e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e02d      	b.n	8007540 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	; 0x24
 80074f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f84f 	bl	80075c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800755c:	2302      	movs	r3, #2
 800755e:	e02d      	b.n	80075bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2224      	movs	r2, #36	; 0x24
 800756c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0201 	bic.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f811 	bl	80075c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d108      	bne.n	80075e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075e4:	e031      	b.n	800764a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075e6:	2308      	movs	r3, #8
 80075e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075ea:	2308      	movs	r3, #8
 80075ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	0e5b      	lsrs	r3, r3, #25
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	0f5b      	lsrs	r3, r3, #29
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	7b3a      	ldrb	r2, [r7, #12]
 8007612:	4911      	ldr	r1, [pc, #68]	; (8007658 <UARTEx_SetNbDataToProcess+0x94>)
 8007614:	5c8a      	ldrb	r2, [r1, r2]
 8007616:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800761a:	7b3a      	ldrb	r2, [r7, #12]
 800761c:	490f      	ldr	r1, [pc, #60]	; (800765c <UARTEx_SetNbDataToProcess+0x98>)
 800761e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007620:	fb93 f3f2 	sdiv	r3, r3, r2
 8007624:	b29a      	uxth	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	7b7a      	ldrb	r2, [r7, #13]
 8007630:	4909      	ldr	r1, [pc, #36]	; (8007658 <UARTEx_SetNbDataToProcess+0x94>)
 8007632:	5c8a      	ldrb	r2, [r1, r2]
 8007634:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007638:	7b7a      	ldrb	r2, [r7, #13]
 800763a:	4908      	ldr	r1, [pc, #32]	; (800765c <UARTEx_SetNbDataToProcess+0x98>)
 800763c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800763e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	080077d0 	.word	0x080077d0
 800765c:	080077d8 	.word	0x080077d8

08007660 <memset>:
 8007660:	4402      	add	r2, r0
 8007662:	4603      	mov	r3, r0
 8007664:	4293      	cmp	r3, r2
 8007666:	d100      	bne.n	800766a <memset+0xa>
 8007668:	4770      	bx	lr
 800766a:	f803 1b01 	strb.w	r1, [r3], #1
 800766e:	e7f9      	b.n	8007664 <memset+0x4>

08007670 <__libc_init_array>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	4d0d      	ldr	r5, [pc, #52]	; (80076a8 <__libc_init_array+0x38>)
 8007674:	4c0d      	ldr	r4, [pc, #52]	; (80076ac <__libc_init_array+0x3c>)
 8007676:	1b64      	subs	r4, r4, r5
 8007678:	10a4      	asrs	r4, r4, #2
 800767a:	2600      	movs	r6, #0
 800767c:	42a6      	cmp	r6, r4
 800767e:	d109      	bne.n	8007694 <__libc_init_array+0x24>
 8007680:	4d0b      	ldr	r5, [pc, #44]	; (80076b0 <__libc_init_array+0x40>)
 8007682:	4c0c      	ldr	r4, [pc, #48]	; (80076b4 <__libc_init_array+0x44>)
 8007684:	f000 f818 	bl	80076b8 <_init>
 8007688:	1b64      	subs	r4, r4, r5
 800768a:	10a4      	asrs	r4, r4, #2
 800768c:	2600      	movs	r6, #0
 800768e:	42a6      	cmp	r6, r4
 8007690:	d105      	bne.n	800769e <__libc_init_array+0x2e>
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	f855 3b04 	ldr.w	r3, [r5], #4
 8007698:	4798      	blx	r3
 800769a:	3601      	adds	r6, #1
 800769c:	e7ee      	b.n	800767c <__libc_init_array+0xc>
 800769e:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a2:	4798      	blx	r3
 80076a4:	3601      	adds	r6, #1
 80076a6:	e7f2      	b.n	800768e <__libc_init_array+0x1e>
 80076a8:	080077e8 	.word	0x080077e8
 80076ac:	080077e8 	.word	0x080077e8
 80076b0:	080077e8 	.word	0x080077e8
 80076b4:	080077ec 	.word	0x080077ec

080076b8 <_init>:
 80076b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ba:	bf00      	nop
 80076bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076be:	bc08      	pop	{r3}
 80076c0:	469e      	mov	lr, r3
 80076c2:	4770      	bx	lr

080076c4 <_fini>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	bf00      	nop
 80076c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ca:	bc08      	pop	{r3}
 80076cc:	469e      	mov	lr, r3
 80076ce:	4770      	bx	lr
