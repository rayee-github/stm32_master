
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da8  08008da8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008da8  08008da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008db0  08008db0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000099fc  20000014  08008dcc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009a10  08008dcc  00029a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a49  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d00  00000000  00000000  00039ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  0003c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fee  00000000  00000000  0003dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031a03  00000000  00000000  0003ec0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001abec  00000000  00000000  00070611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012ad8b  00000000  00000000  0008b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005744  00000000  00000000  001b5f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001bb6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000014 	.word	0x20000014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008c78 	.word	0x08008c78

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000018 	.word	0x20000018
 80001f8:	08008c78 	.word	0x08008c78

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f002 f8c5 	bl	800268c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f9e7 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fdc5 	bl	8001094 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050a:	f000 fb1d 	bl	8000b48 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050e:	f000 fb5b 	bl	8000bc8 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000512:	f000 fc19 	bl	8000d48 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000516:	f000 fc6b 	bl	8000df0 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 800051a:	f000 fcbf 	bl	8000e9c <MX_SPI1_Init>
  MX_SPI2_Init();
 800051e:	f000 fcfb 	bl	8000f18 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000522:	f000 fd33 	bl	8000f8c <MX_SPI3_Init>
  MX_UART4_Init();
 8000526:	f000 fd69 	bl	8000ffc <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 800052a:	f000 fa21 	bl	8000970 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 800052e:	f000 fb8b 	bl	8000c48 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 8000532:	f000 fef3 	bl	800131c <mipi_config>
  HAL_UART_Transmit(&huart4, "master start", 12, 1000);
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	220c      	movs	r2, #12
 800053c:	4993      	ldr	r1, [pc, #588]	; (800078c <main+0x294>)
 800053e:	4894      	ldr	r0, [pc, #592]	; (8000790 <main+0x298>)
 8000540:	f007 fcc6 	bl	8007ed0 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int frame_buf_count = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]

  	__HAL_SPI_ENABLE(&hspi1);
 8000548:	4b92      	ldr	r3, [pc, #584]	; (8000794 <main+0x29c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4b91      	ldr	r3, [pc, #580]	; (8000794 <main+0x29c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000556:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi3);
 8000558:	4b8f      	ldr	r3, [pc, #572]	; (8000798 <main+0x2a0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b8e      	ldr	r3, [pc, #568]	; (8000798 <main+0x2a0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000566:	601a      	str	r2, [r3, #0]
			//HAL_Delay(1);
		}
		HAL_UART_Transmit(&huart4, "off ", 4, 1000);
		HAL_Delay(1000);*/

		if(play_mode == 0)
 8000568:	4b8c      	ldr	r3, [pc, #560]	; (800079c <main+0x2a4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d175      	bne.n	800065c <main+0x164>
		{
			frame_buf_count = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	e06b      	b.n	8000652 <main+0x15a>
			{
				if(static_flag==0)
 800057a:	4b89      	ldr	r3, [pc, #548]	; (80007a0 <main+0x2a8>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d130      	bne.n	80005e4 <main+0xec>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+1];
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	3301      	adds	r3, #1
 8000586:	4a87      	ldr	r2, [pc, #540]	; (80007a4 <main+0x2ac>)
 8000588:	5cd1      	ldrb	r1, [r2, r3]
 800058a:	4a87      	ldr	r2, [pc, #540]	; (80007a8 <main+0x2b0>)
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	4413      	add	r3, r2
 8000590:	460a      	mov	r2, r1
 8000592:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	3302      	adds	r3, #2
 8000598:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i];
 800059a:	4a82      	ldr	r2, [pc, #520]	; (80007a4 <main+0x2ac>)
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	4413      	add	r3, r2
 80005a0:	7819      	ldrb	r1, [r3, #0]
 80005a2:	4a81      	ldr	r2, [pc, #516]	; (80007a8 <main+0x2b0>)
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	4413      	add	r3, r2
 80005a8:	460a      	mov	r2, r1
 80005aa:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	3304      	adds	r3, #4
 80005b0:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+2];
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	3302      	adds	r3, #2
 80005b6:	4a7b      	ldr	r2, [pc, #492]	; (80007a4 <main+0x2ac>)
 80005b8:	5cd1      	ldrb	r1, [r2, r3]
 80005ba:	4a7b      	ldr	r2, [pc, #492]	; (80007a8 <main+0x2b0>)
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	4413      	add	r3, r2
 80005c0:	460a      	mov	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	3304      	adds	r3, #4
 80005c8:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+3];
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	3303      	adds	r3, #3
 80005ce:	4a75      	ldr	r2, [pc, #468]	; (80007a4 <main+0x2ac>)
 80005d0:	5cd1      	ldrb	r1, [r2, r3]
 80005d2:	4a75      	ldr	r2, [pc, #468]	; (80007a8 <main+0x2b0>)
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	4413      	add	r3, r2
 80005d8:	460a      	mov	r2, r1
 80005da:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3302      	adds	r3, #2
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e033      	b.n	800064c <main+0x154>
				}
				else if(static_flag==1)
 80005e4:	4b6e      	ldr	r3, [pc, #440]	; (80007a0 <main+0x2a8>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d12f      	bne.n	800064c <main+0x154>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+1];
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	3301      	adds	r3, #1
 80005f0:	4a6e      	ldr	r2, [pc, #440]	; (80007ac <main+0x2b4>)
 80005f2:	5cd1      	ldrb	r1, [r2, r3]
 80005f4:	4a6c      	ldr	r2, [pc, #432]	; (80007a8 <main+0x2b0>)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	4413      	add	r3, r2
 80005fa:	460a      	mov	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3302      	adds	r3, #2
 8000602:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i];
 8000604:	4a69      	ldr	r2, [pc, #420]	; (80007ac <main+0x2b4>)
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	4413      	add	r3, r2
 800060a:	7819      	ldrb	r1, [r3, #0]
 800060c:	4a66      	ldr	r2, [pc, #408]	; (80007a8 <main+0x2b0>)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	4413      	add	r3, r2
 8000612:	460a      	mov	r2, r1
 8000614:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3304      	adds	r3, #4
 800061a:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+2];
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	3302      	adds	r3, #2
 8000620:	4a62      	ldr	r2, [pc, #392]	; (80007ac <main+0x2b4>)
 8000622:	5cd1      	ldrb	r1, [r2, r3]
 8000624:	4a60      	ldr	r2, [pc, #384]	; (80007a8 <main+0x2b0>)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	4413      	add	r3, r2
 800062a:	460a      	mov	r2, r1
 800062c:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	3304      	adds	r3, #4
 8000632:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+3];
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	3303      	adds	r3, #3
 8000638:	4a5c      	ldr	r2, [pc, #368]	; (80007ac <main+0x2b4>)
 800063a:	5cd1      	ldrb	r1, [r2, r3]
 800063c:	4a5a      	ldr	r2, [pc, #360]	; (80007a8 <main+0x2b0>)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	4413      	add	r3, r2
 8000642:	460a      	mov	r2, r1
 8000644:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3302      	adds	r3, #2
 800064a:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	3304      	adds	r3, #4
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000658:	db8f      	blt.n	800057a <main+0x82>
 800065a:	e128      	b.n	80008ae <main+0x3b6>
				}
			}
		}
		else if(play_mode == 1)
 800065c:	4b4f      	ldr	r3, [pc, #316]	; (800079c <main+0x2a4>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	f040 8124 	bne.w	80008ae <main+0x3b6>
		{
			if(static_flag==0)
 8000666:	4b4e      	ldr	r3, [pc, #312]	; (80007a0 <main+0x2a8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	f040 8083 	bne.w	8000776 <main+0x27e>
			{
				frame_buf_count = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	e032      	b.n	80006e0 <main+0x1e8>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+1];
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3301      	adds	r3, #1
 800067e:	4a4b      	ldr	r2, [pc, #300]	; (80007ac <main+0x2b4>)
 8000680:	5cd1      	ldrb	r1, [r2, r3]
 8000682:	4a49      	ldr	r2, [pc, #292]	; (80007a8 <main+0x2b0>)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	4413      	add	r3, r2
 8000688:	460a      	mov	r2, r1
 800068a:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3302      	adds	r3, #2
 8000690:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i];
 8000692:	4a46      	ldr	r2, [pc, #280]	; (80007ac <main+0x2b4>)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	7819      	ldrb	r1, [r3, #0]
 800069a:	4a43      	ldr	r2, [pc, #268]	; (80007a8 <main+0x2b0>)
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	4413      	add	r3, r2
 80006a0:	460a      	mov	r2, r1
 80006a2:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3304      	adds	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+2];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3302      	adds	r3, #2
 80006ae:	4a3f      	ldr	r2, [pc, #252]	; (80007ac <main+0x2b4>)
 80006b0:	5cd1      	ldrb	r1, [r2, r3]
 80006b2:	4a3d      	ldr	r2, [pc, #244]	; (80007a8 <main+0x2b0>)
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	4413      	add	r3, r2
 80006b8:	460a      	mov	r2, r1
 80006ba:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	3304      	adds	r3, #4
 80006c0:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+3];
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3303      	adds	r3, #3
 80006c6:	4a39      	ldr	r2, [pc, #228]	; (80007ac <main+0x2b4>)
 80006c8:	5cd1      	ldrb	r1, [r2, r3]
 80006ca:	4a37      	ldr	r2, [pc, #220]	; (80007a8 <main+0x2b0>)
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	4413      	add	r3, r2
 80006d0:	460a      	mov	r2, r1
 80006d2:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3302      	adds	r3, #2
 80006d8:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3304      	adds	r3, #4
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80006e6:	dbc8      	blt.n	800067a <main+0x182>
				}
				HAL_Delay(frame_rate);
 80006e8:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <main+0x2b8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 f849 	bl	8002784 <HAL_Delay>
				frame_buf_count = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	e032      	b.n	8000762 <main+0x26a>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+1];
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <main+0x2ac>)
 8000702:	5cd1      	ldrb	r1, [r2, r3]
 8000704:	4a28      	ldr	r2, [pc, #160]	; (80007a8 <main+0x2b0>)
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	4413      	add	r3, r2
 800070a:	460a      	mov	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3302      	adds	r3, #2
 8000712:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i];
 8000714:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <main+0x2ac>)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4413      	add	r3, r2
 800071a:	7819      	ldrb	r1, [r3, #0]
 800071c:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <main+0x2b0>)
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	4413      	add	r3, r2
 8000722:	460a      	mov	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3304      	adds	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+2];
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	3302      	adds	r3, #2
 8000730:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <main+0x2ac>)
 8000732:	5cd1      	ldrb	r1, [r2, r3]
 8000734:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <main+0x2b0>)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	4413      	add	r3, r2
 800073a:	460a      	mov	r2, r1
 800073c:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3304      	adds	r3, #4
 8000742:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+3];
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	3303      	adds	r3, #3
 8000748:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <main+0x2ac>)
 800074a:	5cd1      	ldrb	r1, [r2, r3]
 800074c:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <main+0x2b0>)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	4413      	add	r3, r2
 8000752:	460a      	mov	r2, r1
 8000754:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3302      	adds	r3, #2
 800075a:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3304      	adds	r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000768:	dbc8      	blt.n	80006fc <main+0x204>
				}
				HAL_Delay(frame_rate);
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <main+0x2b8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f002 f808 	bl	8002784 <HAL_Delay>
 8000774:	e09b      	b.n	80008ae <main+0x3b6>
			}
			else if(static_flag==1)
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <main+0x2a8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	f040 8097 	bne.w	80008ae <main+0x3b6>
			{
				frame_buf_count = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	e047      	b.n	800081a <main+0x322>
 800078a:	bf00      	nop
 800078c:	08008c90 	.word	0x08008c90
 8000790:	20000368 	.word	0x20000368
 8000794:	2000023c 	.word	0x2000023c
 8000798:	20000304 	.word	0x20000304
 800079c:	20004f00 	.word	0x20004f00
 80007a0:	20004f01 	.word	0x20004f01
 80007a4:	20001d00 	.word	0x20001d00
 80007a8:	20004f04 	.word	0x20004f04
 80007ac:	20003600 	.word	0x20003600
 80007b0:	20000004 	.word	0x20000004
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+1];
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a40      	ldr	r2, [pc, #256]	; (80008bc <main+0x3c4>)
 80007ba:	5cd1      	ldrb	r1, [r2, r3]
 80007bc:	4a40      	ldr	r2, [pc, #256]	; (80008c0 <main+0x3c8>)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	4413      	add	r3, r2
 80007c2:	460a      	mov	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3302      	adds	r3, #2
 80007ca:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i];
 80007cc:	4a3b      	ldr	r2, [pc, #236]	; (80008bc <main+0x3c4>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	7819      	ldrb	r1, [r3, #0]
 80007d4:	4a3a      	ldr	r2, [pc, #232]	; (80008c0 <main+0x3c8>)
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	460a      	mov	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3304      	adds	r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+2];
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3302      	adds	r3, #2
 80007e8:	4a34      	ldr	r2, [pc, #208]	; (80008bc <main+0x3c4>)
 80007ea:	5cd1      	ldrb	r1, [r2, r3]
 80007ec:	4a34      	ldr	r2, [pc, #208]	; (80008c0 <main+0x3c8>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	460a      	mov	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3304      	adds	r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+3];
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3303      	adds	r3, #3
 8000800:	4a2e      	ldr	r2, [pc, #184]	; (80008bc <main+0x3c4>)
 8000802:	5cd1      	ldrb	r1, [r2, r3]
 8000804:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <main+0x3c8>)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	4413      	add	r3, r2
 800080a:	460a      	mov	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3302      	adds	r3, #2
 8000812:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3304      	adds	r3, #4
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000820:	dbc8      	blt.n	80007b4 <main+0x2bc>
				}
				HAL_Delay(frame_rate);
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <main+0x3cc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f001 ffac 	bl	8002784 <HAL_Delay>
				frame_buf_count = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	e032      	b.n	800089c <main+0x3a4>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+1];
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <main+0x3d0>)
 800083c:	5cd1      	ldrb	r1, [r2, r3]
 800083e:	4a20      	ldr	r2, [pc, #128]	; (80008c0 <main+0x3c8>)
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	4413      	add	r3, r2
 8000844:	460a      	mov	r2, r1
 8000846:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	3302      	adds	r3, #2
 800084c:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i];
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <main+0x3d0>)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	4413      	add	r3, r2
 8000854:	7819      	ldrb	r1, [r3, #0]
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <main+0x3c8>)
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	4413      	add	r3, r2
 800085c:	460a      	mov	r2, r1
 800085e:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	3304      	adds	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+2];
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	3302      	adds	r3, #2
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <main+0x3d0>)
 800086c:	5cd1      	ldrb	r1, [r2, r3]
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <main+0x3c8>)
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	4413      	add	r3, r2
 8000874:	460a      	mov	r2, r1
 8000876:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3304      	adds	r3, #4
 800087c:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+3];
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3303      	adds	r3, #3
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <main+0x3d0>)
 8000884:	5cd1      	ldrb	r1, [r2, r3]
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <main+0x3c8>)
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	460a      	mov	r2, r1
 800088e:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3302      	adds	r3, #2
 8000894:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	3304      	adds	r3, #4
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80008a2:	dbc8      	blt.n	8000836 <main+0x33e>
				}
				HAL_Delay(frame_rate);
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <main+0x3cc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 ff6b 	bl	8002784 <HAL_Delay>
			}
		}
		HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 80008ae:	2202      	movs	r2, #2
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <main+0x3d4>)
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <main+0x3d8>)
 80008b4:	f006 fcbc 	bl	8007230 <HAL_SPI_Receive_IT>
		if(play_mode == 0)
 80008b8:	e656      	b.n	8000568 <main+0x70>
 80008ba:	bf00      	nop
 80008bc:	20001d00 	.word	0x20001d00
 80008c0:	20004f04 	.word	0x20004f04
 80008c4:	20000004 	.word	0x20000004
 80008c8:	20003600 	.word	0x20003600
 80008cc:	200003fc 	.word	0x200003fc
 80008d0:	20000304 	.word	0x20000304

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b096      	sub	sp, #88	; 0x58
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2244      	movs	r2, #68	; 0x44
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f008 f99c 	bl	8008c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008f6:	2000      	movs	r0, #0
 80008f8:	f004 fa24 	bl	8004d44 <HAL_PWREx_ControlVoltageScaling>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000902:	f001 fa79 	bl	8001df8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2302      	movs	r3, #2
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000914:	2303      	movs	r3, #3
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800091c:	231e      	movs	r3, #30
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4618      	mov	r0, r3
 8000932:	f004 fabb 	bl	8004eac <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800093c:	f001 fa5c 	bl	8001df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	230f      	movs	r3, #15
 8000942:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2303      	movs	r3, #3
 8000946:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	2105      	movs	r1, #5
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fec1 	bl	80056e0 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000964:	f001 fa48 	bl	8001df8 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3758      	adds	r7, #88	; 0x58
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0ae      	sub	sp, #184	; 0xb8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000976:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000982:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000986:	2224      	movs	r2, #36	; 0x24
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f008 f948 	bl	8008c20 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000990:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
 80009a0:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	226c      	movs	r2, #108	; 0x6c
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f008 f939 	bl	8008c20 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80009ae:	4b64      	ldr	r3, [pc, #400]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009b0:	4a64      	ldr	r2, [pc, #400]	; (8000b44 <MX_DSIHOST_DSI_Init+0x1d4>)
 80009b2:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009b4:	4b62      	ldr	r3, [pc, #392]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 80009ba:	4b61      	ldr	r3, [pc, #388]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009bc:	2202      	movs	r2, #2
 80009be:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80009c0:	4b5f      	ldr	r3, [pc, #380]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 80009c6:	2332      	movs	r3, #50	; 0x32
 80009c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009dc:	4619      	mov	r1, r3
 80009de:	4858      	ldr	r0, [pc, #352]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009e0:	f002 f8ac 	bl	8002b3c <HAL_DSI_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 80009ea:	f001 fa05 	bl	8001df8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a24:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4845      	ldr	r0, [pc, #276]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a2c:	f002 fcf9 	bl	8003422 <HAL_DSI_ConfigHostTimeouts>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000a36:	f001 f9df 	bl	8001df8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000a3a:	2313      	movs	r3, #19
 8000a3c:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000a42:	2309      	movs	r3, #9
 8000a44:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000a46:	230a      	movs	r3, #10
 8000a48:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4838      	ldr	r0, [pc, #224]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a5e:	f002 fc76 	bl	800334e <HAL_DSI_ConfigPhyTimer>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000a68:	f001 f9c6 	bl	8001df8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a6c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a70:	4833      	ldr	r0, [pc, #204]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a72:	f002 fe92 	bl	800379a <HAL_DSI_SetLowPowerRXFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000a7c:	f001 f9bc 	bl	8001df8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	482f      	ldr	r0, [pc, #188]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a84:	f002 f976 	bl	8002d74 <HAL_DSI_ConfigErrorMonitor>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000a8e:	f001 f9b3 	bl	8001df8 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000a96:	2305      	movs	r3, #5
 8000a98:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 8000aa2:	2350      	movs	r3, #80	; 0x50
 8000aa4:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 8000aba:	23fc      	movs	r3, #252	; 0xfc
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 8000abe:	23fc      	movs	r3, #252	; 0xfc
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 8000ac2:	f44f 7351 	mov.w	r3, #836	; 0x344
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000acc:	2308      	movs	r3, #8
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 8000ad4:	2350      	movs	r3, #80	; 0x50
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000adc:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000ade:	231c      	movs	r3, #28
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000ae2:	2350      	movs	r3, #80	; 0x50
 8000ae4:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aea:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000af6:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afc:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b02:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b08:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b14:	f002 fa13 	bl	8002f3e <HAL_DSI_ConfigVideoMode>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000b1e:	f001 f96b 	bl	8001df8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b26:	f002 f9e2 	bl	8002eee <HAL_DSI_SetGenericVCID>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000b30:	f001 f962 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
	LCD_PowerOn();
 8000b34:	f000 feca 	bl	80018cc <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	37b8      	adds	r7, #184	; 0xb8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000030 	.word	0x20000030
 8000b44:	40016c00 	.word	0x40016c00

08000b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <MX_I2C1_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b54:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <MX_I2C1_Init+0x7c>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b82:	480e      	ldr	r0, [pc, #56]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b84:	f003 f810 	bl	8003ba8 <HAL_I2C_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b8e:	f001 f933 	bl	8001df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000b96:	f003 f8a2 	bl	8003cde <HAL_I2CEx_ConfigAnalogFilter>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba0:	f001 f92a 	bl	8001df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_I2C1_Init+0x74>)
 8000ba8:	f003 f8e4 	bl	8003d74 <HAL_I2CEx_ConfigDigitalFilter>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f001 f921 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000004c 	.word	0x2000004c
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	307075b1 	.word	0x307075b1

08000bc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <MX_I2C2_Init+0x78>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <MX_I2C2_Init+0x7c>)
 8000bd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000c04:	f002 ffd0 	bl	8003ba8 <HAL_I2C_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c0e:	f001 f8f3 	bl	8001df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000c16:	f003 f862 	bl	8003cde <HAL_I2CEx_ConfigAnalogFilter>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c20:	f001 f8ea 	bl	8001df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_I2C2_Init+0x74>)
 8000c28:	f003 f8a4 	bl	8003d74 <HAL_I2CEx_ConfigDigitalFilter>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c32:	f001 f8e1 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000a0 	.word	0x200000a0
 8000c40:	40005800 	.word	0x40005800
 8000c44:	307075b1 	.word	0x307075b1

08000c48 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2234      	movs	r2, #52	; 0x34
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f007 ffe3 	bl	8008c20 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c5a:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c5c:	4a38      	ldr	r2, [pc, #224]	; (8000d40 <MX_LTDC_Init+0xf8>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000c60:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c66:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000c68:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c76:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c7e:	22fb      	movs	r2, #251	; 0xfb
 8000c80:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c8a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000c8e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c92:	220f      	movs	r2, #15
 8000c94:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 8000c96:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000c98:	f240 2247 	movw	r2, #583	; 0x247
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000ca0:	225f      	movs	r2, #95	; 0x5f
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000ca6:	f240 3243 	movw	r2, #835	; 0x343
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000cae:	2261      	movs	r2, #97	; 0x61
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000cb4:	22ff      	movs	r2, #255	; 0xff
 8000cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000cbc:	22ff      	movs	r2, #255	; 0xff
 8000cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cca:	481c      	ldr	r0, [pc, #112]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000ccc:	f003 f89e 	bl	8003e0c <HAL_LTDC_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000cd6:	f001 f88f 	bl	8001df8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 8000cde:	2350      	movs	r3, #80	; 0x50
 8000ce0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 8000ce6:	2350      	movs	r3, #80	; 0x50
 8000ce8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000cee:	23ff      	movs	r3, #255	; 0xff
 8000cf0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_LTDC_Init+0xfc>)
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 8000d04:	2350      	movs	r3, #80	; 0x50
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 8000d08:	2350      	movs	r3, #80	; 0x50
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000d0c:	23ff      	movs	r3, #255	; 0xff
 8000d0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000d12:	23ff      	movs	r3, #255	; 0xff
 8000d14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000d18:	23ff      	movs	r3, #255	; 0xff
 8000d1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_LTDC_Init+0xf4>)
 8000d26:	f003 f941 	bl	8003fac <HAL_LTDC_ConfigLayer>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000d30:	f001 f862 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000f4 	.word	0x200000f4
 8000d40:	40016800 	.word	0x40016800
 8000d44:	20004f04 	.word	0x20004f04

08000d48 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d5e:	4a23      	ldr	r2, [pc, #140]	; (8000dec <MX_OCTOSPI1_Init+0xa4>)
 8000d60:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d64:	2204      	movs	r2, #4
 8000d66:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d74:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 27;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d78:	221b      	movs	r2, #27
 8000d7a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d7e:	2202      	movs	r2, #2
 8000d80:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 16;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d90:	2210      	movs	r2, #16
 8000d92:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000daa:	2208      	movs	r2, #8
 8000dac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000dae:	480e      	ldr	r0, [pc, #56]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000db0:	f003 fad2 	bl	8004358 <HAL_OSPI_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 8000dba:	f001 f81d 	bl	8001df8 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000dc2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000dc6:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_OCTOSPI1_Init+0xa0>)
 8000dd2:	f003 fb7b 	bl	80044cc <HAL_OSPIM_Config>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_OCTOSPI1_Init+0x98>
  {
    Error_Handler();
 8000ddc:	f001 f80c 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000019c 	.word	0x2000019c
 8000dec:	a0001000 	.word	0xa0001000

08000df0 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <MX_OCTOSPI2_Init+0xa4>)
 8000e08:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000e10:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e1c:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e20:	2220      	movs	r2, #32
 8000e22:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 32;
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e38:	2220      	movs	r2, #32
 8000e3a:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e50:	2208      	movs	r2, #8
 8000e52:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000e54:	480e      	ldr	r0, [pc, #56]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e56:	f003 fa7f 	bl	8004358 <HAL_OSPI_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_OCTOSPI2_Init+0x74>
  {
    Error_Handler();
 8000e60:	f000 ffca 	bl	8001df8 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_OCTOSPI2_Init+0xa8>)
 8000e6e:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_OCTOSPI2_Init+0xa0>)
 8000e7a:	f003 fb27 	bl	80044cc <HAL_OSPIM_Config>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_OCTOSPI2_Init+0x98>
  {
    Error_Handler();
 8000e84:	f000 ffb8 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001ec 	.word	0x200001ec
 8000e94:	a0001400 	.word	0xa0001400
 8000e98:	00010002 	.word	0x00010002

08000e9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <MX_SPI1_Init+0x78>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000eb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000eca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ece:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000eea:	2207      	movs	r2, #7
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000ef6:	2208      	movs	r2, #8
 8000ef8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_SPI1_Init+0x74>)
 8000efc:	f005 fc26 	bl	800674c <HAL_SPI_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f06:	f000 ff77 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000023c 	.word	0x2000023c
 8000f14:	40013000 	.word	0x40013000

08000f18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f1e:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <MX_SPI2_Init+0x70>)
 8000f20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f30:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f48:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f5e:	2207      	movs	r2, #7
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_SPI2_Init+0x6c>)
 8000f70:	f005 fbec 	bl	800674c <HAL_SPI_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000f7a:	f000 ff3d 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200002a0 	.word	0x200002a0
 8000f88:	40003800 	.word	0x40003800

08000f8c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <MX_SPI3_Init+0x6c>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fa4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fa8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_SPI3_Init+0x68>)
 8000fe2:	f005 fbb3 	bl	800674c <HAL_SPI_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000fec:	f000 ff04 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000304 	.word	0x20000304
 8000ff8:	40003c00 	.word	0x40003c00

08000ffc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_UART4_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <MX_UART4_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_UART4_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_UART4_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_UART4_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_UART4_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_UART4_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_UART4_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_UART4_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_UART4_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_UART4_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_UART4_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_UART4_Init+0x90>)
 8001046:	f006 fef3 	bl	8007e30 <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 fed2 	bl	8001df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_UART4_Init+0x90>)
 8001058:	f007 fd18 	bl	8008a8c <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001062:	f000 fec9 	bl	8001df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_UART4_Init+0x90>)
 800106a:	f007 fd4d 	bl	8008b08 <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 fec0 	bl	8001df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_UART4_Init+0x90>)
 800107a:	f007 fcce 	bl	8008a1a <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 feb8 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000368 	.word	0x20000368
 8001090:	40004c00 	.word	0x40004c00

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b96      	ldr	r3, [pc, #600]	; (8001304 <MX_GPIO_Init+0x270>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a95      	ldr	r2, [pc, #596]	; (8001304 <MX_GPIO_Init+0x270>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b93      	ldr	r3, [pc, #588]	; (8001304 <MX_GPIO_Init+0x270>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	623b      	str	r3, [r7, #32]
 80010c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	4b90      	ldr	r3, [pc, #576]	; (8001304 <MX_GPIO_Init+0x270>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a8f      	ldr	r2, [pc, #572]	; (8001304 <MX_GPIO_Init+0x270>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b8d      	ldr	r3, [pc, #564]	; (8001304 <MX_GPIO_Init+0x270>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b8a      	ldr	r3, [pc, #552]	; (8001304 <MX_GPIO_Init+0x270>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a89      	ldr	r2, [pc, #548]	; (8001304 <MX_GPIO_Init+0x270>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b87      	ldr	r3, [pc, #540]	; (8001304 <MX_GPIO_Init+0x270>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	61bb      	str	r3, [r7, #24]
 80010f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b84      	ldr	r3, [pc, #528]	; (8001304 <MX_GPIO_Init+0x270>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a83      	ldr	r2, [pc, #524]	; (8001304 <MX_GPIO_Init+0x270>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b81      	ldr	r3, [pc, #516]	; (8001304 <MX_GPIO_Init+0x270>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800110a:	4b7e      	ldr	r3, [pc, #504]	; (8001304 <MX_GPIO_Init+0x270>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a7d      	ldr	r2, [pc, #500]	; (8001304 <MX_GPIO_Init+0x270>)
 8001110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b7b      	ldr	r3, [pc, #492]	; (8001304 <MX_GPIO_Init+0x270>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8001122:	f003 feb3 	bl	8004e8c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001126:	4b77      	ldr	r3, [pc, #476]	; (8001304 <MX_GPIO_Init+0x270>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a76      	ldr	r2, [pc, #472]	; (8001304 <MX_GPIO_Init+0x270>)
 800112c:	f043 0320 	orr.w	r3, r3, #32
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b74      	ldr	r3, [pc, #464]	; (8001304 <MX_GPIO_Init+0x270>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	4b71      	ldr	r3, [pc, #452]	; (8001304 <MX_GPIO_Init+0x270>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a70      	ldr	r2, [pc, #448]	; (8001304 <MX_GPIO_Init+0x270>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b6e      	ldr	r3, [pc, #440]	; (8001304 <MX_GPIO_Init+0x270>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001156:	4b6b      	ldr	r3, [pc, #428]	; (8001304 <MX_GPIO_Init+0x270>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a6a      	ldr	r2, [pc, #424]	; (8001304 <MX_GPIO_Init+0x270>)
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b68      	ldr	r3, [pc, #416]	; (8001304 <MX_GPIO_Init+0x270>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	4864      	ldr	r0, [pc, #400]	; (8001308 <MX_GPIO_Init+0x274>)
 8001176:	f002 fce7 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	21a0      	movs	r1, #160	; 0xa0
 800117e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001182:	f002 fce1 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118c:	485f      	ldr	r0, [pc, #380]	; (800130c <MX_GPIO_Init+0x278>)
 800118e:	f002 fcdb 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001198:	485d      	ldr	r0, [pc, #372]	; (8001310 <MX_GPIO_Init+0x27c>)
 800119a:	f002 fcd5 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a4:	485b      	ldr	r0, [pc, #364]	; (8001314 <MX_GPIO_Init+0x280>)
 80011a6:	f002 fccf 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b0:	4856      	ldr	r0, [pc, #344]	; (800130c <MX_GPIO_Init+0x278>)
 80011b2:	f002 fcc9 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	4619      	mov	r1, r3
 80011ce:	484e      	ldr	r0, [pc, #312]	; (8001308 <MX_GPIO_Init+0x274>)
 80011d0:	f002 fb10 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	484b      	ldr	r0, [pc, #300]	; (8001318 <MX_GPIO_Init+0x284>)
 80011ea:	f002 fb03 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80011ee:	2318      	movs	r3, #24
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f002 faf6 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001208:	23a0      	movs	r3, #160	; 0xa0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f002 fae7 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001226:	2310      	movs	r3, #16
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4833      	ldr	r0, [pc, #204]	; (8001308 <MX_GPIO_Init+0x274>)
 800123a:	f002 fadb 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	482d      	ldr	r0, [pc, #180]	; (800130c <MX_GPIO_Init+0x278>)
 8001258:	f002 facc 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800125c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4826      	ldr	r0, [pc, #152]	; (8001310 <MX_GPIO_Init+0x27c>)
 8001276:	f002 fabd 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127a:	2301      	movs	r3, #1
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	2300      	movs	r3, #0
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	4820      	ldr	r0, [pc, #128]	; (8001310 <MX_GPIO_Init+0x27c>)
 800128e:	f002 fab1 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	481a      	ldr	r0, [pc, #104]	; (8001314 <MX_GPIO_Init+0x280>)
 80012ac:	f002 faa2 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012bc:	2302      	movs	r3, #2
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	4811      	ldr	r0, [pc, #68]	; (800130c <MX_GPIO_Init+0x278>)
 80012c8:	f002 fa94 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	4619      	mov	r1, r3
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <MX_GPIO_Init+0x278>)
 80012e6:	f002 fa85 	bl	80037f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2103      	movs	r1, #3
 80012ee:	2028      	movs	r0, #40	; 0x28
 80012f0:	f001 fb47 	bl	8002982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012f4:	2028      	movs	r0, #40	; 0x28
 80012f6:	f001 fb60 	bl	80029ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fa:	bf00      	nop
 80012fc:	3738      	adds	r7, #56	; 0x38
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	48000800 	.word	0x48000800
 800130c:	48001000 	.word	0x48001000
 8001310:	48000400 	.word	0x48000400
 8001314:	48001400 	.word	0x48001400
 8001318:	48000c00 	.word	0x48000c00

0800131c <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config() {
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b0af      	sub	sp, #188	; 0xbc
 8001320:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK) {
 8001322:	48c4      	ldr	r0, [pc, #784]	; (8001634 <mipi_config+0x318>)
 8001324:	f002 f943 	bl	80035ae <HAL_DSI_Start>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <mipi_config+0x16>
		Error_Handler();
 800132e:	f000 fd63 	bl	8001df8 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8001332:	23c3      	movs	r3, #195	; 0xc3
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	23f0      	movs	r3, #240	; 0xf0
 8001338:	2215      	movs	r2, #21
 800133a:	2100      	movs	r1, #0
 800133c:	48bd      	ldr	r0, [pc, #756]	; (8001634 <mipi_config+0x318>)
 800133e:	f002 f972 	bl	8003626 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8001342:	2396      	movs	r3, #150	; 0x96
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	23f0      	movs	r3, #240	; 0xf0
 8001348:	2215      	movs	r2, #21
 800134a:	2100      	movs	r1, #0
 800134c:	48b9      	ldr	r0, [pc, #740]	; (8001634 <mipi_config+0x318>)
 800134e:	f002 f96a 	bl	8003626 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = { 0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33 };
 8001352:	4ab9      	ldr	r2, [pc, #740]	; (8001638 <mipi_config+0x31c>)
 8001354:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135c:	6018      	str	r0, [r3, #0]
 800135e:	3304      	adds	r3, #4
 8001360:	8019      	strh	r1, [r3, #0]
 8001362:	3302      	adds	r3, #2
 8001364:	0c0a      	lsrs	r2, r1, #16
 8001366:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8001368:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	23e7      	movs	r3, #231	; 0xe7
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2308      	movs	r3, #8
 8001374:	2239      	movs	r2, #57	; 0x39
 8001376:	2100      	movs	r1, #0
 8001378:	48ae      	ldr	r0, [pc, #696]	; (8001634 <mipi_config+0x318>)
 800137a:	f002 f976 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = { 0xC0, 0x68, 0xE0 };
 800137e:	4aaf      	ldr	r2, [pc, #700]	; (800163c <mipi_config+0x320>)
 8001380:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	4611      	mov	r1, r2
 8001388:	8019      	strh	r1, [r3, #0]
 800138a:	3302      	adds	r3, #2
 800138c:	0c12      	lsrs	r2, r2, #16
 800138e:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8001390:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	23a4      	movs	r3, #164	; 0xa4
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2304      	movs	r3, #4
 800139c:	2239      	movs	r2, #57	; 0x39
 800139e:	2100      	movs	r1, #0
 80013a0:	48a4      	ldr	r0, [pc, #656]	; (8001634 <mipi_config+0x318>)
 80013a2:	f002 f962 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = { 0x42, 0x05, 0x24, 0x03 };
 80013a6:	4ba6      	ldr	r3, [pc, #664]	; (8001640 <mipi_config+0x324>)
 80013a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 80013ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	23c3      	movs	r3, #195	; 0xc3
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2305      	movs	r3, #5
 80013b8:	2239      	movs	r2, #57	; 0x39
 80013ba:	2100      	movs	r1, #0
 80013bc:	489d      	ldr	r0, [pc, #628]	; (8001634 <mipi_config+0x318>)
 80013be:	f002 f954 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = { 0x42, 0x05, 0x24, 0x03 };
 80013c2:	4b9f      	ldr	r3, [pc, #636]	; (8001640 <mipi_config+0x324>)
 80013c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 80013c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	23c4      	movs	r3, #196	; 0xc4
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2305      	movs	r3, #5
 80013d4:	2239      	movs	r2, #57	; 0x39
 80013d6:	2100      	movs	r1, #0
 80013d8:	4896      	ldr	r0, [pc, #600]	; (8001634 <mipi_config+0x318>)
 80013da:	f002 f946 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 80013de:	4a99      	ldr	r2, [pc, #612]	; (8001644 <mipi_config+0x328>)
 80013e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80013e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 80013ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	23e5      	movs	r3, #229	; 0xe5
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	230d      	movs	r3, #13
 80013f6:	2239      	movs	r2, #57	; 0x39
 80013f8:	2100      	movs	r1, #0
 80013fa:	488e      	ldr	r0, [pc, #568]	; (8001634 <mipi_config+0x318>)
 80013fc:	f002 f935 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001400:	4a90      	ldr	r2, [pc, #576]	; (8001644 <mipi_config+0x328>)
 8001402:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001406:	ca07      	ldmia	r2, {r0, r1, r2}
 8001408:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 800140c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	23e6      	movs	r3, #230	; 0xe6
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	230d      	movs	r3, #13
 8001418:	2239      	movs	r2, #57	; 0x39
 800141a:	2100      	movs	r1, #0
 800141c:	4885      	ldr	r0, [pc, #532]	; (8001634 <mipi_config+0x318>)
 800141e:	f002 f924 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = { 0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22 };
 8001422:	4a89      	ldr	r2, [pc, #548]	; (8001648 <mipi_config+0x32c>)
 8001424:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001428:	e892 0003 	ldmia.w	r2, {r0, r1}
 800142c:	6018      	str	r0, [r3, #0]
 800142e:	3304      	adds	r3, #4
 8001430:	8019      	strh	r1, [r3, #0]
 8001432:	3302      	adds	r3, #2
 8001434:	0c0a      	lsrs	r2, r1, #16
 8001436:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 8001438:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	23ec      	movs	r3, #236	; 0xec
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2308      	movs	r3, #8
 8001444:	2239      	movs	r2, #57	; 0x39
 8001446:	2100      	movs	r1, #0
 8001448:	487a      	ldr	r0, [pc, #488]	; (8001634 <mipi_config+0x318>)
 800144a:	f002 f90e 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = { 0x88, 0x05, 0x0F, 0x18 };
 800144e:	4b7f      	ldr	r3, [pc, #508]	; (800164c <mipi_config+0x330>)
 8001450:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 8001452:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	23c1      	movs	r3, #193	; 0xc1
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2305      	movs	r3, #5
 800145e:	2239      	movs	r2, #57	; 0x39
 8001460:	2100      	movs	r1, #0
 8001462:	4874      	ldr	r0, [pc, #464]	; (8001634 <mipi_config+0x318>)
 8001464:	f002 f901 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = { 0x88, 0x05, 0x0F, 0x18 };
 8001468:	4b78      	ldr	r3, [pc, #480]	; (800164c <mipi_config+0x330>)
 800146a:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 800146c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	23c2      	movs	r3, #194	; 0xc2
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2305      	movs	r3, #5
 8001478:	2239      	movs	r2, #57	; 0x39
 800147a:	2100      	movs	r1, #0
 800147c:	486d      	ldr	r0, [pc, #436]	; (8001634 <mipi_config+0x318>)
 800147e:	f002 f8f4 	bl	800366a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 8001482:	2300      	movs	r3, #0
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2336      	movs	r3, #54	; 0x36
 8001488:	2215      	movs	r2, #21
 800148a:	2100      	movs	r1, #0
 800148c:	4869      	ldr	r0, [pc, #420]	; (8001634 <mipi_config+0x318>)
 800148e:	f002 f8ca 	bl	8003626 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 8001492:	2307      	movs	r3, #7
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	233a      	movs	r3, #58	; 0x3a
 8001498:	2215      	movs	r2, #21
 800149a:	2100      	movs	r1, #0
 800149c:	4865      	ldr	r0, [pc, #404]	; (8001634 <mipi_config+0x318>)
 800149e:	f002 f8c2 	bl	8003626 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 80014a2:	23be      	movs	r3, #190	; 0xbe
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	23c5      	movs	r3, #197	; 0xc5
 80014a8:	2215      	movs	r2, #21
 80014aa:	2100      	movs	r1, #0
 80014ac:	4861      	ldr	r0, [pc, #388]	; (8001634 <mipi_config+0x318>)
 80014ae:	f002 f8ba 	bl	8003626 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = { 0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55,
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <mipi_config+0x334>)
 80014b4:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80014b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ba:	c407      	stmia	r4!, {r0, r1, r2}
 80014bc:	8023      	strh	r3, [r4, #0]
			0x3D, 0x19, 0x18, 0x24, 0x27 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 80014be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	23e0      	movs	r3, #224	; 0xe0
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	230f      	movs	r3, #15
 80014ca:	2239      	movs	r2, #57	; 0x39
 80014cc:	2100      	movs	r1, #0
 80014ce:	4859      	ldr	r0, [pc, #356]	; (8001634 <mipi_config+0x318>)
 80014d0:	f002 f8cb 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = { 0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56,
 80014d4:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <mipi_config+0x338>)
 80014d6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80014da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014dc:	c407      	stmia	r4!, {r0, r1, r2}
 80014de:	8023      	strh	r3, [r4, #0]
			0x3E, 0x1A, 0x18, 0x24, 0x28 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 80014e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	23e1      	movs	r3, #225	; 0xe1
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	230f      	movs	r3, #15
 80014ec:	2239      	movs	r2, #57	; 0x39
 80014ee:	2100      	movs	r1, #0
 80014f0:	4850      	ldr	r0, [pc, #320]	; (8001634 <mipi_config+0x318>)
 80014f2:	f002 f8ba 	bl	800366a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 80014f6:	2310      	movs	r3, #16
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	23b2      	movs	r3, #178	; 0xb2
 80014fc:	2215      	movs	r2, #21
 80014fe:	2100      	movs	r1, #0
 8001500:	484c      	ldr	r0, [pc, #304]	; (8001634 <mipi_config+0x318>)
 8001502:	f002 f890 	bl	8003626 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 8001506:	2301      	movs	r3, #1
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	23b3      	movs	r3, #179	; 0xb3
 800150c:	2215      	movs	r2, #21
 800150e:	2100      	movs	r1, #0
 8001510:	4848      	ldr	r0, [pc, #288]	; (8001634 <mipi_config+0x318>)
 8001512:	f002 f888 	bl	8003626 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 8001516:	2301      	movs	r3, #1
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	23b4      	movs	r3, #180	; 0xb4
 800151c:	2215      	movs	r2, #21
 800151e:	2100      	movs	r1, #0
 8001520:	4844      	ldr	r0, [pc, #272]	; (8001634 <mipi_config+0x318>)
 8001522:	f002 f880 	bl	8003626 <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = { 0x27, 0x09 };
 8001526:	f640 1327 	movw	r3, #2343	; 0x927
 800152a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 800152e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	23b6      	movs	r3, #182	; 0xb6
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2303      	movs	r3, #3
 800153a:	2239      	movs	r2, #57	; 0x39
 800153c:	2100      	movs	r1, #0
 800153e:	483d      	ldr	r0, [pc, #244]	; (8001634 <mipi_config+0x318>)
 8001540:	f002 f893 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = { 0x00, 0x54, 0x00, 0x54 };
 8001544:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 8001548:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 800154a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	23b5      	movs	r3, #181	; 0xb5
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2305      	movs	r3, #5
 8001556:	2239      	movs	r2, #57	; 0x39
 8001558:	2100      	movs	r1, #0
 800155a:	4836      	ldr	r0, [pc, #216]	; (8001634 <mipi_config+0x318>)
 800155c:	f002 f885 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 8001560:	4a3d      	ldr	r2, [pc, #244]	; (8001658 <mipi_config+0x33c>)
 8001562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001566:	ca07      	ldmia	r2, {r0, r1, r2}
 8001568:	c303      	stmia	r3!, {r0, r1}
 800156a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 800156c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	23a5      	movs	r3, #165	; 0xa5
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	230a      	movs	r3, #10
 8001578:	2239      	movs	r2, #57	; 0x39
 800157a:	2100      	movs	r1, #0
 800157c:	482d      	ldr	r0, [pc, #180]	; (8001634 <mipi_config+0x318>)
 800157e:	f002 f874 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 8001582:	4a35      	ldr	r2, [pc, #212]	; (8001658 <mipi_config+0x33c>)
 8001584:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001588:	ca07      	ldmia	r2, {r0, r1, r2}
 800158a:	c303      	stmia	r3!, {r0, r1}
 800158c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 800158e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	23a6      	movs	r3, #166	; 0xa6
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	230a      	movs	r3, #10
 800159a:	2239      	movs	r2, #57	; 0x39
 800159c:	2100      	movs	r1, #0
 800159e:	4825      	ldr	r0, [pc, #148]	; (8001634 <mipi_config+0x318>)
 80015a0:	f002 f863 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = { 0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00 };
 80015a4:	4a2d      	ldr	r2, [pc, #180]	; (800165c <mipi_config+0x340>)
 80015a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ae:	6018      	str	r0, [r3, #0]
 80015b0:	3304      	adds	r3, #4
 80015b2:	8019      	strh	r1, [r3, #0]
 80015b4:	3302      	adds	r3, #2
 80015b6:	0c0a      	lsrs	r2, r1, #16
 80015b8:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 80015ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	23ba      	movs	r3, #186	; 0xba
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2308      	movs	r3, #8
 80015c6:	2239      	movs	r2, #57	; 0x39
 80015c8:	2100      	movs	r1, #0
 80015ca:	481a      	ldr	r0, [pc, #104]	; (8001634 <mipi_config+0x318>)
 80015cc:	f002 f84d 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 80015d0:	4a23      	ldr	r2, [pc, #140]	; (8001660 <mipi_config+0x344>)
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015da:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	23bb      	movs	r3, #187	; 0xbb
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2309      	movs	r3, #9
 80015ea:	2239      	movs	r2, #57	; 0x39
 80015ec:	2100      	movs	r1, #0
 80015ee:	4811      	ldr	r0, [pc, #68]	; (8001634 <mipi_config+0x318>)
 80015f0:	f002 f83b 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 80015f4:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <mipi_config+0x344>)
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015fe:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	23bc      	movs	r3, #188	; 0xbc
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2309      	movs	r3, #9
 800160e:	2239      	movs	r2, #57	; 0x39
 8001610:	2100      	movs	r1, #0
 8001612:	4808      	ldr	r0, [pc, #32]	; (8001634 <mipi_config+0x318>)
 8001614:	f002 f829 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = { 0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF,
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <mipi_config+0x348>)
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001620:	c303      	stmia	r3!, {r0, r1}
 8001622:	801a      	strh	r2, [r3, #0]
 8001624:	3302      	adds	r3, #2
 8001626:	0c12      	lsrs	r2, r2, #16
 8001628:	701a      	strb	r2, [r3, #0]
			0xFF, 0xF9 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	e01a      	b.n	8001668 <mipi_config+0x34c>
 8001632:	bf00      	nop
 8001634:	20000030 	.word	0x20000030
 8001638:	08008ca0 	.word	0x08008ca0
 800163c:	08008ca8 	.word	0x08008ca8
 8001640:	03240542 	.word	0x03240542
 8001644:	08008cac 	.word	0x08008cac
 8001648:	08008cb8 	.word	0x08008cb8
 800164c:	180f0588 	.word	0x180f0588
 8001650:	08008cc0 	.word	0x08008cc0
 8001654:	08008cd0 	.word	0x08008cd0
 8001658:	08008ce0 	.word	0x08008ce0
 800165c:	08008cec 	.word	0x08008cec
 8001660:	08008cf4 	.word	0x08008cf4
 8001664:	08008cfc 	.word	0x08008cfc
 8001668:	23bd      	movs	r3, #189	; 0xbd
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	230c      	movs	r3, #12
 800166e:	2239      	movs	r2, #57	; 0x39
 8001670:	2100      	movs	r1, #0
 8001672:	482d      	ldr	r0, [pc, #180]	; (8001728 <mipi_config+0x40c>)
 8001674:	f001 fff9 	bl	800366a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 8001678:	23c3      	movs	r3, #195	; 0xc3
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	23ed      	movs	r3, #237	; 0xed
 800167e:	2215      	movs	r2, #21
 8001680:	2100      	movs	r1, #0
 8001682:	4829      	ldr	r0, [pc, #164]	; (8001728 <mipi_config+0x40c>)
 8001684:	f001 ffcf 	bl	8003626 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = { 0x40, 0x0F, 0x00 };
 8001688:	4a28      	ldr	r2, [pc, #160]	; (800172c <mipi_config+0x410>)
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	4611      	mov	r1, r2
 8001692:	8019      	strh	r1, [r3, #0]
 8001694:	3302      	adds	r3, #2
 8001696:	0c12      	lsrs	r2, r2, #16
 8001698:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	23e4      	movs	r3, #228	; 0xe4
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2304      	movs	r3, #4
 80016a6:	2239      	movs	r2, #57	; 0x39
 80016a8:	2100      	movs	r1, #0
 80016aa:	481f      	ldr	r0, [pc, #124]	; (8001728 <mipi_config+0x40c>)
 80016ac:	f001 ffdd 	bl	800366a <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = { 0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25 };
 80016b0:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <mipi_config+0x414>)
 80016b2:	463b      	mov	r3, r7
 80016b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b6:	c303      	stmia	r3!, {r0, r1}
 80016b8:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 80016ba:	463b      	mov	r3, r7
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	23cc      	movs	r3, #204	; 0xcc
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	230a      	movs	r3, #10
 80016c4:	2239      	movs	r2, #57	; 0x39
 80016c6:	2100      	movs	r1, #0
 80016c8:	4817      	ldr	r0, [pc, #92]	; (8001728 <mipi_config+0x40c>)
 80016ca:	f001 ffce 	bl	800366a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80016ce:	2300      	movs	r3, #0
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2335      	movs	r3, #53	; 0x35
 80016d4:	2215      	movs	r2, #21
 80016d6:	2100      	movs	r1, #0
 80016d8:	4813      	ldr	r0, [pc, #76]	; (8001728 <mipi_config+0x40c>)
 80016da:	f001 ffa4 	bl	8003626 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f001 f850 	bl	8002784 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2311      	movs	r3, #17
 80016ea:	2205      	movs	r2, #5
 80016ec:	2100      	movs	r1, #0
 80016ee:	480e      	ldr	r0, [pc, #56]	; (8001728 <mipi_config+0x40c>)
 80016f0:	f001 ff99 	bl	8003626 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80016f4:	2078      	movs	r0, #120	; 0x78
 80016f6:	f001 f845 	bl	8002784 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 80016fa:	2300      	movs	r3, #0
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2329      	movs	r3, #41	; 0x29
 8001700:	2205      	movs	r2, #5
 8001702:	2100      	movs	r1, #0
 8001704:	4808      	ldr	r0, [pc, #32]	; (8001728 <mipi_config+0x40c>)
 8001706:	f001 ff8e 	bl	8003626 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800170a:	2078      	movs	r0, #120	; 0x78
 800170c:	f001 f83a 	bl	8002784 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2335      	movs	r3, #53	; 0x35
 8001716:	2215      	movs	r2, #21
 8001718:	2100      	movs	r1, #0
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <mipi_config+0x40c>)
 800171c:	f001 ff83 	bl	8003626 <HAL_DSI_ShortWrite>
}
 8001720:	bf00      	nop
 8001722:	37b4      	adds	r7, #180	; 0xb4
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	20000030 	.word	0x20000030
 800172c:	08008d08 	.word	0x08008d08
 8001730:	08008d0c 	.word	0x08008d0c

08001734 <SPI_master2slave>:
	{
		HAL_UART_Transmit(&huart4, &rev, 5, 1000);
	}
}

void SPI_master2slave(char * buf, char * frame_buf) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 1000);
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	2201      	movs	r2, #1
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4811      	ldr	r0, [pc, #68]	; (800178c <SPI_master2slave+0x58>)
 8001748:	f005 f8a3 	bl	8006892 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &buf[1], 1, 1000);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001754:	2201      	movs	r2, #1
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <SPI_master2slave+0x58>)
 8001758:	f005 f89b 	bl	8006892 <HAL_SPI_Transmit>
	for(int i=0; i< 6400; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e00b      	b.n	800177a <SPI_master2slave+0x46>
	{
		if (HAL_SPI_Transmit(&hspi1, &frame_buf[i], 1, 1000) == HAL_OK) {
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	18d1      	adds	r1, r2, r3
 8001768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176c:	2201      	movs	r2, #1
 800176e:	4807      	ldr	r0, [pc, #28]	; (800178c <SPI_master2slave+0x58>)
 8001770:	f005 f88f 	bl	8006892 <HAL_SPI_Transmit>
	for(int i=0; i< 6400; i++)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8001780:	dbef      	blt.n	8001762 <SPI_master2slave+0x2e>
			//HAL_UART_Transmit(&huart4, "SPI_master2slave", 16, 1000);
		}
	}
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000023c 	.word	0x2000023c

08001790 <Write_Registers_data>:

void Write_Registers_data() {
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
	uint8_t length[1] = { 0 };
 8001796:	2300      	movs	r3, #0
 8001798:	733b      	strb	r3, [r7, #12]
	uint8_t Register_Address[1] = { 0 };
 800179a:	2300      	movs	r3, #0
 800179c:	723b      	strb	r3, [r7, #8]
	uint8_t data[1] = { 0 };
 800179e:	2300      	movs	r3, #0
 80017a0:	713b      	strb	r3, [r7, #4]

	//HAL_SPI_Receive(&hspi3, (uint8_t*) length, 1, 1000);
	HAL_SPI_Receive(&hspi3, (uint8_t*) Register_Address, 1, 1000);
 80017a2:	f107 0108 	add.w	r1, r7, #8
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	2201      	movs	r2, #1
 80017ac:	4843      	ldr	r0, [pc, #268]	; (80018bc <Write_Registers_data+0x12c>)
 80017ae:	f005 f9e5 	bl	8006b7c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t*) data, 1, 1000);
 80017b2:	1d39      	adds	r1, r7, #4
 80017b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b8:	2201      	movs	r2, #1
 80017ba:	4840      	ldr	r0, [pc, #256]	; (80018bc <Write_Registers_data+0x12c>)
 80017bc:	f005 f9de 	bl	8006b7c <HAL_SPI_Receive>
	switch (Register_Address[0]) {
 80017c0:	7a3b      	ldrb	r3, [r7, #8]
 80017c2:	2b13      	cmp	r3, #19
 80017c4:	d875      	bhi.n	80018b2 <Write_Registers_data+0x122>
 80017c6:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <Write_Registers_data+0x3c>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	080018ad 	.word	0x080018ad
 80017d0:	080018ad 	.word	0x080018ad
 80017d4:	080018ad 	.word	0x080018ad
 80017d8:	080018ad 	.word	0x080018ad
 80017dc:	080018ad 	.word	0x080018ad
 80017e0:	080018ad 	.word	0x080018ad
 80017e4:	0800181d 	.word	0x0800181d
 80017e8:	080018ad 	.word	0x080018ad
 80017ec:	080018ad 	.word	0x080018ad
 80017f0:	080018ad 	.word	0x080018ad
 80017f4:	080018ad 	.word	0x080018ad
 80017f8:	080018ad 	.word	0x080018ad
 80017fc:	080018ad 	.word	0x080018ad
 8001800:	080018ad 	.word	0x080018ad
 8001804:	080018ad 	.word	0x080018ad
 8001808:	080018ad 	.word	0x080018ad
 800180c:	0800185b 	.word	0x0800185b
 8001810:	080018b3 	.word	0x080018b3
 8001814:	080018b3 	.word	0x080018b3
 8001818:	080018ad 	.word	0x080018ad
	case 4: //Vertical blanking (High byte)
		break;
	case 5: //Vertical blanking (Low byte)
		break;
	case 0x06: //Frame rate x 2 (Hz)
		HAL_UART_Transmit(&huart4, (uint8_t*)data, 1, 1000);
 800181c:	1d39      	adds	r1, r7, #4
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	2201      	movs	r2, #1
 8001824:	4826      	ldr	r0, [pc, #152]	; (80018c0 <Write_Registers_data+0x130>)
 8001826:	f006 fb53 	bl	8007ed0 <HAL_UART_Transmit>
		frame_rate=(uint32_t)data[0]*1000;
 800182a:	793b      	ldrb	r3, [r7, #4]
 800182c:	461a      	mov	r2, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <Write_Registers_data+0x134>)
 8001838:	6013      	str	r3, [r2, #0]
		HAL_SPI_Transmit(&hspi1, &Register_Address[0], 1, 1000);
 800183a:	f107 0108 	add.w	r1, r7, #8
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	2201      	movs	r2, #1
 8001844:	4820      	ldr	r0, [pc, #128]	; (80018c8 <Write_Registers_data+0x138>)
 8001846:	f005 f824 	bl	8006892 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, &data[0], 1, 1000);
 800184a:	1d39      	adds	r1, r7, #4
 800184c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001850:	2201      	movs	r2, #1
 8001852:	481d      	ldr	r0, [pc, #116]	; (80018c8 <Write_Registers_data+0x138>)
 8001854:	f005 f81d 	bl	8006892 <HAL_SPI_Transmit>
		break;
 8001858:	e02b      	b.n	80018b2 <Write_Registers_data+0x122>
	case 14: //Day of Version
		break;
	case 15: //Month of Version
		break;
	case 16: //Control A
		HAL_SPI_Receive_IT(&hspi3, data, 1);
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	4816      	ldr	r0, [pc, #88]	; (80018bc <Write_Registers_data+0x12c>)
 8001862:	f005 fce5 	bl	8007230 <HAL_SPI_Receive_IT>
		HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2101      	movs	r1, #1
 800186a:	2033      	movs	r0, #51	; 0x33
 800186c:	f001 f889 	bl	8002982 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001870:	2033      	movs	r0, #51	; 0x33
 8001872:	f001 f8a2 	bl	80029ba <HAL_NVIC_EnableIRQ>
		__HAL_SPI_ENABLE(&hspi3);
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <Write_Registers_data+0x12c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <Write_Registers_data+0x12c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001884:	601a      	str	r2, [r3, #0]

		switch (data[0] & 0b00000011) {
 8001886:	793b      	ldrb	r3, [r7, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b03      	cmp	r3, #3
 800188e:	d80f      	bhi.n	80018b0 <Write_Registers_data+0x120>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <Write_Registers_data+0x108>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018a9 	.word	0x080018a9
 80018a0:	080018a9 	.word	0x080018a9
 80018a4:	080018a9 	.word	0x080018a9
		case 0b00000000:  //Display content of fram buffer (0)
			break;
 80018a8:	bf00      	nop
		case 0b00000010:  //Display SPI input content
			break;
		case 0b00000011:  //Display Flash content
			break;
		}
		break;
 80018aa:	e001      	b.n	80018b0 <Write_Registers_data+0x120>
		break;
 80018ac:	bf00      	nop
 80018ae:	e000      	b.n	80018b2 <Write_Registers_data+0x122>
		break;
 80018b0:	bf00      	nop
	case 19: //Status
		break;
	}
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000304 	.word	0x20000304
 80018c0:	20000368 	.word	0x20000368
 80018c4:	20000004 	.word	0x20000004
 80018c8:	2000023c 	.word	0x2000023c

080018cc <LCD_PowerOn>:
		}
	}*/
}

static void LCD_PowerOn(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d6:	4808      	ldr	r0, [pc, #32]	; (80018f8 <LCD_PowerOn+0x2c>)
 80018d8:	f002 f936 	bl	8003b48 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 80018dc:	2014      	movs	r0, #20
 80018de:	f000 ff51 	bl	8002784 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <LCD_PowerOn+0x2c>)
 80018ea:	f002 f92d 	bl	8003b48 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 80018ee:	2078      	movs	r0, #120	; 0x78
 80018f0:	f000 ff48 	bl	8002784 <HAL_Delay>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	48001000 	.word	0x48001000

080018fc <HAL_GPIO_EXTI_Callback>:
	}
}

int button_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_12)
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800190c:	d159      	bne.n	80019c2 <HAL_GPIO_EXTI_Callback+0xc6>
	{
		button_count++;
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	4a2c      	ldr	r2, [pc, #176]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001916:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 8001918:	2064      	movs	r0, #100	; 0x64
 800191a:	f000 ff33 	bl	8002784 <HAL_Delay>
		for(int i=0; i<200; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e02d      	b.n	8001980 <HAL_GPIO_EXTI_Callback+0x84>
		{
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001928:	4828      	ldr	r0, [pc, #160]	; (80019cc <HAL_GPIO_EXTI_Callback+0xd0>)
 800192a:	f002 f8f5 	bl	8003b18 <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d11a      	bne.n	800196a <HAL_GPIO_EXTI_Callback+0x6e>
			{
				if(button_count<50 && play_mode==0)
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b31      	cmp	r3, #49	; 0x31
 800193a:	dc12      	bgt.n	8001962 <HAL_GPIO_EXTI_Callback+0x66>
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10e      	bne.n	8001962 <HAL_GPIO_EXTI_Callback+0x66>
				{
					if(static_flag==0)
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <HAL_GPIO_EXTI_Callback+0x58>
					{
						static_flag = 1;
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e006      	b.n	8001962 <HAL_GPIO_EXTI_Callback+0x66>
					}
					else if(static_flag==1)
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d102      	bne.n	8001962 <HAL_GPIO_EXTI_Callback+0x66>
					{
						static_flag = 0;
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
					}
				}
				button_count = 0;
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
				return;
 8001968:	e02b      	b.n	80019c2 <HAL_GPIO_EXTI_Callback+0xc6>
			}
			button_count++;
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xcc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3301      	adds	r3, #1
 8001970:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001972:	6013      	str	r3, [r2, #0]
			HAL_Delay(10);
 8001974:	200a      	movs	r0, #10
 8001976:	f000 ff05 	bl	8002784 <HAL_Delay>
		for(int i=0; i<200; i++)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3301      	adds	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2bc7      	cmp	r3, #199	; 0xc7
 8001984:	ddce      	ble.n	8001924 <HAL_GPIO_EXTI_Callback+0x28>
		}
		if(play_mode==1)
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d109      	bne.n	80019a2 <HAL_GPIO_EXTI_Callback+0xa6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001994:	4810      	ldr	r0, [pc, #64]	; (80019d8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001996:	f002 f8d7 	bl	8003b48 <HAL_GPIO_WritePin>
			play_mode = 0;
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	e00c      	b.n	80019bc <HAL_GPIO_EXTI_Callback+0xc0>
		}
		else if(play_mode==0)
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xd4>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d108      	bne.n	80019bc <HAL_GPIO_EXTI_Callback+0xc0>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80019b2:	f002 f8c9 	bl	8003b48 <HAL_GPIO_WritePin>
			play_mode = 1;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xd4>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
		}
		button_count = 0;
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xcc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
	}
}
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20009a04 	.word	0x20009a04
 80019cc:	48001000 	.word	0x48001000
 80019d0:	20004f00 	.word	0x20004f00
 80019d4:	20004f01 	.word	0x20004f01
 80019d8:	48000400 	.word	0x48000400

080019dc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	// USB command: Type and command
	switch (spi3_buf[0] & 0b11000000) {
 80019e4:	4ba6      	ldr	r3, [pc, #664]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019ec:	2bc0      	cmp	r3, #192	; 0xc0
 80019ee:	f000 81cd 	beq.w	8001d8c <HAL_SPI_RxCpltCallback+0x3b0>
 80019f2:	2bc0      	cmp	r3, #192	; 0xc0
 80019f4:	f300 81e2 	bgt.w	8001dbc <HAL_SPI_RxCpltCallback+0x3e0>
 80019f8:	2b80      	cmp	r3, #128	; 0x80
 80019fa:	f000 81bc 	beq.w	8001d76 <HAL_SPI_RxCpltCallback+0x39a>
 80019fe:	2b80      	cmp	r3, #128	; 0x80
 8001a00:	f300 81dc 	bgt.w	8001dbc <HAL_SPI_RxCpltCallback+0x3e0>
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_SPI_RxCpltCallback+0x34>
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	f000 8149 	beq.w	8001ca0 <HAL_SPI_RxCpltCallback+0x2c4>
 8001a0e:	e1d5      	b.n	8001dbc <HAL_SPI_RxCpltCallback+0x3e0>
	case 0b00000000:  //Chain SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 8001a10:	4b9b      	ldr	r3, [pc, #620]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a18:	2b38      	cmp	r3, #56	; 0x38
 8001a1a:	f200 81c8 	bhi.w	8001dae <HAL_SPI_RxCpltCallback+0x3d2>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <HAL_SPI_RxCpltCallback+0x48>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001b09 	.word	0x08001b09
 8001a28:	08001daf 	.word	0x08001daf
 8001a2c:	08001daf 	.word	0x08001daf
 8001a30:	08001daf 	.word	0x08001daf
 8001a34:	08001daf 	.word	0x08001daf
 8001a38:	08001daf 	.word	0x08001daf
 8001a3c:	08001daf 	.word	0x08001daf
 8001a40:	08001daf 	.word	0x08001daf
 8001a44:	08001bb3 	.word	0x08001bb3
 8001a48:	08001daf 	.word	0x08001daf
 8001a4c:	08001daf 	.word	0x08001daf
 8001a50:	08001daf 	.word	0x08001daf
 8001a54:	08001daf 	.word	0x08001daf
 8001a58:	08001daf 	.word	0x08001daf
 8001a5c:	08001daf 	.word	0x08001daf
 8001a60:	08001daf 	.word	0x08001daf
 8001a64:	08001c5b 	.word	0x08001c5b
 8001a68:	08001daf 	.word	0x08001daf
 8001a6c:	08001daf 	.word	0x08001daf
 8001a70:	08001daf 	.word	0x08001daf
 8001a74:	08001daf 	.word	0x08001daf
 8001a78:	08001daf 	.word	0x08001daf
 8001a7c:	08001daf 	.word	0x08001daf
 8001a80:	08001daf 	.word	0x08001daf
 8001a84:	08001c7d 	.word	0x08001c7d
 8001a88:	08001daf 	.word	0x08001daf
 8001a8c:	08001daf 	.word	0x08001daf
 8001a90:	08001daf 	.word	0x08001daf
 8001a94:	08001daf 	.word	0x08001daf
 8001a98:	08001daf 	.word	0x08001daf
 8001a9c:	08001daf 	.word	0x08001daf
 8001aa0:	08001daf 	.word	0x08001daf
 8001aa4:	08001c7d 	.word	0x08001c7d
 8001aa8:	08001daf 	.word	0x08001daf
 8001aac:	08001daf 	.word	0x08001daf
 8001ab0:	08001daf 	.word	0x08001daf
 8001ab4:	08001daf 	.word	0x08001daf
 8001ab8:	08001daf 	.word	0x08001daf
 8001abc:	08001daf 	.word	0x08001daf
 8001ac0:	08001daf 	.word	0x08001daf
 8001ac4:	08001c7d 	.word	0x08001c7d
 8001ac8:	08001daf 	.word	0x08001daf
 8001acc:	08001daf 	.word	0x08001daf
 8001ad0:	08001daf 	.word	0x08001daf
 8001ad4:	08001daf 	.word	0x08001daf
 8001ad8:	08001daf 	.word	0x08001daf
 8001adc:	08001daf 	.word	0x08001daf
 8001ae0:	08001daf 	.word	0x08001daf
 8001ae4:	08001c7d 	.word	0x08001c7d
 8001ae8:	08001daf 	.word	0x08001daf
 8001aec:	08001daf 	.word	0x08001daf
 8001af0:	08001daf 	.word	0x08001daf
 8001af4:	08001daf 	.word	0x08001daf
 8001af8:	08001daf 	.word	0x08001daf
 8001afc:	08001daf 	.word	0x08001daf
 8001b00:	08001daf 	.word	0x08001daf
 8001b04:	08001c7d 	.word	0x08001c7d
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi3_buf[0] & 0b00000111) {
 8001b08:	4b5d      	ldr	r3, [pc, #372]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d83f      	bhi.n	8001b94 <HAL_SPI_RxCpltCallback+0x1b8>
 8001b14:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <HAL_SPI_RxCpltCallback+0x140>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b47 	.word	0x08001b47
 8001b24:	08001b61 	.word	0x08001b61
 8001b28:	08001b7b 	.word	0x08001b7b
			case 0b00000000: //Command for DIP switch ID = 00
				if(BOARD_NUMBER==1)
 8001b2c:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <HAL_SPI_RxCpltCallback+0x2a8>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d13c      	bne.n	8001bae <HAL_SPI_RxCpltCallback+0x1d2>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b38:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b3c:	4952      	ldr	r1, [pc, #328]	; (8001c88 <HAL_SPI_RxCpltCallback+0x2ac>)
 8001b3e:	4853      	ldr	r0, [pc, #332]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001b40:	f005 f81c 	bl	8006b7c <HAL_SPI_Receive>
				}
				break;
 8001b44:	e033      	b.n	8001bae <HAL_SPI_RxCpltCallback+0x1d2>
			case 0b00000001: //Command for DIP switch ID = 01
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b4e:	4950      	ldr	r1, [pc, #320]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001b50:	484e      	ldr	r0, [pc, #312]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001b52:	f005 f813 	bl	8006b7c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001b56:	494e      	ldr	r1, [pc, #312]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001b58:	4849      	ldr	r0, [pc, #292]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001b5a:	f7ff fdeb 	bl	8001734 <SPI_master2slave>
				break;
 8001b5e:	e027      	b.n	8001bb0 <HAL_SPI_RxCpltCallback+0x1d4>
			case 0b00000010: //Command for DIP switch ID = 10
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b64:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b68:	4949      	ldr	r1, [pc, #292]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001b6a:	4848      	ldr	r0, [pc, #288]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001b6c:	f005 f806 	bl	8006b7c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001b70:	4947      	ldr	r1, [pc, #284]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001b72:	4843      	ldr	r0, [pc, #268]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001b74:	f7ff fdde 	bl	8001734 <SPI_master2slave>
				break;
 8001b78:	e01a      	b.n	8001bb0 <HAL_SPI_RxCpltCallback+0x1d4>
			case 0b00000011: //Command for DIP switch ID = 11
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b82:	4943      	ldr	r1, [pc, #268]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001b84:	4841      	ldr	r0, [pc, #260]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001b86:	f004 fff9 	bl	8006b7c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001b8a:	4941      	ldr	r1, [pc, #260]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001b8c:	483c      	ldr	r0, [pc, #240]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001b8e:	f7ff fdd1 	bl	8001734 <SPI_master2slave>
				break;
 8001b92:	e00d      	b.n	8001bb0 <HAL_SPI_RxCpltCallback+0x1d4>
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b98:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b9c:	493a      	ldr	r1, [pc, #232]	; (8001c88 <HAL_SPI_RxCpltCallback+0x2ac>)
 8001b9e:	483b      	ldr	r0, [pc, #236]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001ba0:	f004 ffec 	bl	8006b7c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_0);
 8001ba4:	4938      	ldr	r1, [pc, #224]	; (8001c88 <HAL_SPI_RxCpltCallback+0x2ac>)
 8001ba6:	4836      	ldr	r0, [pc, #216]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001ba8:	f7ff fdc4 	bl	8001734 <SPI_master2slave>
				break;
 8001bac:	e000      	b.n	8001bb0 <HAL_SPI_RxCpltCallback+0x1d4>
				break;
 8001bae:	bf00      	nop
			}
			break;
 8001bb0:	e065      	b.n	8001c7e <HAL_SPI_RxCpltCallback+0x2a2>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi3_buf[0] & 0b00000111) {
 8001bb2:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d83e      	bhi.n	8001c3c <HAL_SPI_RxCpltCallback+0x260>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <HAL_SPI_RxCpltCallback+0x1e8>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bd5 	.word	0x08001bd5
 8001bc8:	08001bef 	.word	0x08001bef
 8001bcc:	08001c09 	.word	0x08001c09
 8001bd0:	08001c23 	.word	0x08001c23
			case 0b00000000: //Command for DIP switch ID = 00
				if(BOARD_NUMBER==1)
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_SPI_RxCpltCallback+0x2a8>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d13c      	bne.n	8001c56 <HAL_SPI_RxCpltCallback+0x27a>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001be4:	492b      	ldr	r1, [pc, #172]	; (8001c94 <HAL_SPI_RxCpltCallback+0x2b8>)
 8001be6:	4829      	ldr	r0, [pc, #164]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001be8:	f004 ffc8 	bl	8006b7c <HAL_SPI_Receive>
				}
				break;
 8001bec:	e033      	b.n	8001c56 <HAL_SPI_RxCpltCallback+0x27a>
			case 0b00000001: //Command for DIP switch ID = 01
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001bf6:	4926      	ldr	r1, [pc, #152]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001bf8:	4824      	ldr	r0, [pc, #144]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001bfa:	f004 ffbf 	bl	8006b7c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001bfe:	4924      	ldr	r1, [pc, #144]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001c00:	481f      	ldr	r0, [pc, #124]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001c02:	f7ff fd97 	bl	8001734 <SPI_master2slave>
				break;
 8001c06:	e027      	b.n	8001c58 <HAL_SPI_RxCpltCallback+0x27c>
			case 0b00000010: //Command for DIP switch ID = 10
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c10:	491f      	ldr	r1, [pc, #124]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001c12:	481e      	ldr	r0, [pc, #120]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001c14:	f004 ffb2 	bl	8006b7c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001c18:	491d      	ldr	r1, [pc, #116]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001c1a:	4819      	ldr	r0, [pc, #100]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001c1c:	f7ff fd8a 	bl	8001734 <SPI_master2slave>
				break;
 8001c20:	e01a      	b.n	8001c58 <HAL_SPI_RxCpltCallback+0x27c>
			case 0b00000011: //Command for DIP switch ID = 11
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c2a:	4919      	ldr	r1, [pc, #100]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001c2c:	4817      	ldr	r0, [pc, #92]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001c2e:	f004 ffa5 	bl	8006b7c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001c32:	4917      	ldr	r1, [pc, #92]	; (8001c90 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001c34:	4812      	ldr	r0, [pc, #72]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001c36:	f7ff fd7d 	bl	8001734 <SPI_master2slave>
				break;
 8001c3a:	e00d      	b.n	8001c58 <HAL_SPI_RxCpltCallback+0x27c>
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c40:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c44:	4913      	ldr	r1, [pc, #76]	; (8001c94 <HAL_SPI_RxCpltCallback+0x2b8>)
 8001c46:	4811      	ldr	r0, [pc, #68]	; (8001c8c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001c48:	f004 ff98 	bl	8006b7c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_1);
 8001c4c:	4911      	ldr	r1, [pc, #68]	; (8001c94 <HAL_SPI_RxCpltCallback+0x2b8>)
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001c50:	f7ff fd70 	bl	8001734 <SPI_master2slave>
				break;
 8001c54:	e000      	b.n	8001c58 <HAL_SPI_RxCpltCallback+0x27c>
				break;
 8001c56:	bf00      	nop
			}
			break;
 8001c58:	e011      	b.n	8001c7e <HAL_SPI_RxCpltCallback+0x2a2>
		case 0b00010000: //Write Registers data
			HAL_SPI_Transmit(&hspi1, &spi3_buf[0], 1, 1000);
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <HAL_SPI_RxCpltCallback+0x2bc>)
 8001c64:	f004 fe15 	bl	8006892 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1, &spi3_buf[1], 1, 1000);
 8001c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	490b      	ldr	r1, [pc, #44]	; (8001c9c <HAL_SPI_RxCpltCallback+0x2c0>)
 8001c70:	4809      	ldr	r0, [pc, #36]	; (8001c98 <HAL_SPI_RxCpltCallback+0x2bc>)
 8001c72:	f004 fe0e 	bl	8006892 <HAL_SPI_Transmit>
			Write_Registers_data();
 8001c76:	f7ff fd8b 	bl	8001790 <Write_Registers_data>
			break;
 8001c7a:	e000      	b.n	8001c7e <HAL_SPI_RxCpltCallback+0x2a2>
		case 0b00011000: //Write partial content of frame buffer
			break;
 8001c7c:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 8001c7e:	e096      	b.n	8001dae <HAL_SPI_RxCpltCallback+0x3d2>
 8001c80:	200003fc 	.word	0x200003fc
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20001d00 	.word	0x20001d00
 8001c8c:	20000304 	.word	0x20000304
 8001c90:	20000400 	.word	0x20000400
 8001c94:	20003600 	.word	0x20003600
 8001c98:	2000023c 	.word	0x2000023c
 8001c9c:	200003fd 	.word	0x200003fd
	case 0b01000000:  //Master SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 8001ca0:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_SPI_RxCpltCallback+0x410>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ca8:	2b28      	cmp	r3, #40	; 0x28
 8001caa:	f200 8082 	bhi.w	8001db2 <HAL_SPI_RxCpltCallback+0x3d6>
 8001cae:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <HAL_SPI_RxCpltCallback+0x2d8>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001d59 	.word	0x08001d59
 8001cb8:	08001db3 	.word	0x08001db3
 8001cbc:	08001db3 	.word	0x08001db3
 8001cc0:	08001db3 	.word	0x08001db3
 8001cc4:	08001db3 	.word	0x08001db3
 8001cc8:	08001db3 	.word	0x08001db3
 8001ccc:	08001db3 	.word	0x08001db3
 8001cd0:	08001db3 	.word	0x08001db3
 8001cd4:	08001d73 	.word	0x08001d73
 8001cd8:	08001db3 	.word	0x08001db3
 8001cdc:	08001db3 	.word	0x08001db3
 8001ce0:	08001db3 	.word	0x08001db3
 8001ce4:	08001db3 	.word	0x08001db3
 8001ce8:	08001db3 	.word	0x08001db3
 8001cec:	08001db3 	.word	0x08001db3
 8001cf0:	08001db3 	.word	0x08001db3
 8001cf4:	08001d73 	.word	0x08001d73
 8001cf8:	08001db3 	.word	0x08001db3
 8001cfc:	08001db3 	.word	0x08001db3
 8001d00:	08001db3 	.word	0x08001db3
 8001d04:	08001db3 	.word	0x08001db3
 8001d08:	08001db3 	.word	0x08001db3
 8001d0c:	08001db3 	.word	0x08001db3
 8001d10:	08001db3 	.word	0x08001db3
 8001d14:	08001d73 	.word	0x08001d73
 8001d18:	08001db3 	.word	0x08001db3
 8001d1c:	08001db3 	.word	0x08001db3
 8001d20:	08001db3 	.word	0x08001db3
 8001d24:	08001db3 	.word	0x08001db3
 8001d28:	08001db3 	.word	0x08001db3
 8001d2c:	08001db3 	.word	0x08001db3
 8001d30:	08001db3 	.word	0x08001db3
 8001d34:	08001d73 	.word	0x08001d73
 8001d38:	08001db3 	.word	0x08001db3
 8001d3c:	08001db3 	.word	0x08001db3
 8001d40:	08001db3 	.word	0x08001db3
 8001d44:	08001db3 	.word	0x08001db3
 8001d48:	08001db3 	.word	0x08001db3
 8001d4c:	08001db3 	.word	0x08001db3
 8001d50:	08001db3 	.word	0x08001db3
 8001d54:	08001d73 	.word	0x08001d73
		case 0b00000000: //Start SPI write data
			HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d60:	4923      	ldr	r1, [pc, #140]	; (8001df0 <HAL_SPI_RxCpltCallback+0x414>)
 8001d62:	4824      	ldr	r0, [pc, #144]	; (8001df4 <HAL_SPI_RxCpltCallback+0x418>)
 8001d64:	f004 ff0a 	bl	8006b7c <HAL_SPI_Receive>
			SPI_master2slave(&spi3_buf, &frame_buf_0);
 8001d68:	4921      	ldr	r1, [pc, #132]	; (8001df0 <HAL_SPI_RxCpltCallback+0x414>)
 8001d6a:	4820      	ldr	r0, [pc, #128]	; (8001dec <HAL_SPI_RxCpltCallback+0x410>)
 8001d6c:	f7ff fce2 	bl	8001734 <SPI_master2slave>
			break;
 8001d70:	e000      	b.n	8001d74 <HAL_SPI_RxCpltCallback+0x398>
		case 0b00001000: //Continuous write SPI data
			break;
 8001d72:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001d74:	e01d      	b.n	8001db2 <HAL_SPI_RxCpltCallback+0x3d6>
	case 0b10000000:  //I2C command
		switch (spi3_buf[0] & 0b00111000) {
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_SPI_RxCpltCallback+0x410>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_SPI_RxCpltCallback+0x3ac>
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d117      	bne.n	8001db6 <HAL_SPI_RxCpltCallback+0x3da>
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001d86:	e000      	b.n	8001d8a <HAL_SPI_RxCpltCallback+0x3ae>
			break;
 8001d88:	bf00      	nop
		}
		break;
 8001d8a:	e014      	b.n	8001db6 <HAL_SPI_RxCpltCallback+0x3da>
	case 0b11000000:  //SPI flash function & Slave SPI
		switch (spi3_buf[0] & 0b00111000) {
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_SPI_RxCpltCallback+0x410>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d94:	2b20      	cmp	r3, #32
 8001d96:	d006      	beq.n	8001da6 <HAL_SPI_RxCpltCallback+0x3ca>
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	dc0e      	bgt.n	8001dba <HAL_SPI_RxCpltCallback+0x3de>
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d004      	beq.n	8001daa <HAL_SPI_RxCpltCallback+0x3ce>
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d10a      	bne.n	8001dba <HAL_SPI_RxCpltCallback+0x3de>
		case 0b00000000: //Write data to SPI flash
			break;
		case 0b00001000: //Read data from SPI flash
			break;
 8001da4:	e002      	b.n	8001dac <HAL_SPI_RxCpltCallback+0x3d0>
		case 0b00100000: //Display Data by Slave SPI
			break;
 8001da6:	bf00      	nop
 8001da8:	e007      	b.n	8001dba <HAL_SPI_RxCpltCallback+0x3de>
			break;
 8001daa:	bf00      	nop
		}
		break;
 8001dac:	e005      	b.n	8001dba <HAL_SPI_RxCpltCallback+0x3de>
		break;
 8001dae:	bf00      	nop
 8001db0:	e004      	b.n	8001dbc <HAL_SPI_RxCpltCallback+0x3e0>
		break;
 8001db2:	bf00      	nop
 8001db4:	e002      	b.n	8001dbc <HAL_SPI_RxCpltCallback+0x3e0>
		break;
 8001db6:	bf00      	nop
 8001db8:	e000      	b.n	8001dbc <HAL_SPI_RxCpltCallback+0x3e0>
		break;
 8001dba:	bf00      	nop
	}
	// USB command: ID
	switch (spi3_buf[0] & 0b00000111) {
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_SPI_RxCpltCallback+0x410>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d80b      	bhi.n	8001de0 <HAL_SPI_RxCpltCallback+0x404>
 8001dc8:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <HAL_SPI_RxCpltCallback+0x3f4>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001de1 	.word	0x08001de1
 8001dd8:	08001de1 	.word	0x08001de1
 8001ddc:	08001de1 	.word	0x08001de1
	case 0b00000010:  //Command for DIP switch ID = 10
		break;
	case 0b00000011:  //Command for DIP switch ID = 11
		break;
	default:  //Broadcast to every board
		break;
 8001de0:	bf00      	nop
	}
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200003fc 	.word	0x200003fc
 8001df0:	20001d00 	.word	0x20001d00
 8001df4:	20000304 	.word	0x20000304

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e00:	e7fe      	b.n	8001e00 <Error_Handler+0x8>
	...

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_MspInit+0x44>)
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_MspInit+0x44>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6613      	str	r3, [r2, #96]	; 0x60
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_MspInit+0x44>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_MspInit+0x44>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_MspInit+0x44>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_MspInit+0x44>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b0aa      	sub	sp, #168	; 0xa8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	229c      	movs	r2, #156	; 0x9c
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 fedf 	bl	8008c20 <memset>
  if(hdsi->Instance==DSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_DSI_MspInit+0x60>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001e6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001e70:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 feed 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8001e88:	f7ff ffb6 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_DSI_MspInit+0x64>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_DSI_MspInit+0x64>)
 8001e92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e96:	6613      	str	r3, [r2, #96]	; 0x60
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_DSI_MspInit+0x64>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001ea4:	bf00      	nop
 8001ea6:	37a8      	adds	r7, #168	; 0xa8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40016c00 	.word	0x40016c00
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0b2      	sub	sp, #200	; 0xc8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ecc:	f107 0318 	add.w	r3, r7, #24
 8001ed0:	229c      	movs	r2, #156	; 0x9c
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f006 fea3 	bl	8008c20 <memset>
  if(hi2c->Instance==I2C1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a42      	ldr	r2, [pc, #264]	; (8001fe8 <HAL_I2C_MspInit+0x134>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d13c      	bne.n	8001f5e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ee4:	2340      	movs	r3, #64	; 0x40
 8001ee6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eec:	f107 0318 	add.w	r3, r7, #24
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 feb3 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001efc:	f7ff ff7c 	bl	8001df8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	4a39      	ldr	r2, [pc, #228]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001f18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f20:	2312      	movs	r3, #18
 8001f22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f32:	2304      	movs	r3, #4
 8001f34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	482c      	ldr	r0, [pc, #176]	; (8001ff0 <HAL_I2C_MspInit+0x13c>)
 8001f40:	f001 fc58 	bl	80037f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	4a28      	ldr	r2, [pc, #160]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f5c:	e040      	b.n	8001fe0 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a24      	ldr	r2, [pc, #144]	; (8001ff4 <HAL_I2C_MspInit+0x140>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d13b      	bne.n	8001fe0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 fe71 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001f80:	f7ff ff3a 	bl	8001df8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f88:	4a18      	ldr	r2, [pc, #96]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001f9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <HAL_I2C_MspInit+0x13c>)
 8001fc4:	f001 fc16 	bl	80037f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001fce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_I2C_MspInit+0x138>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	37c8      	adds	r7, #200	; 0xc8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	48000400 	.word	0x48000400
 8001ff4:	40005800 	.word	0x40005800

08001ff8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0aa      	sub	sp, #168	; 0xa8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	229c      	movs	r2, #156	; 0x9c
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f006 fe09 	bl	8008c20 <memset>
  if(hltdc->Instance==LTDC)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_LTDC_MspInit+0x80>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d12a      	bne.n	800206e <HAL_LTDC_MspInit+0x76>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002018:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800201c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8002024:	2303      	movs	r3, #3
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8002028:	2301      	movs	r3, #1
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 800202c:	2308      	movs	r3, #8
 800202e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8002030:	2302      	movs	r3, #2
 8002032:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8002034:	2302      	movs	r3, #2
 8002036:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8002038:	2302      	movs	r3, #2
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 800203c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002040:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fe08 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_LTDC_MspInit+0x5e>
    {
      Error_Handler();
 8002052:	f7ff fed1 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_LTDC_MspInit+0x84>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_LTDC_MspInit+0x84>)
 800205c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002060:	6613      	str	r3, [r2, #96]	; 0x60
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_LTDC_MspInit+0x84>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002066:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	37a8      	adds	r7, #168	; 0xa8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40016800 	.word	0x40016800
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0b6      	sub	sp, #216	; 0xd8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209c:	229c      	movs	r2, #156	; 0x9c
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f006 fdbd 	bl	8008c20 <memset>
  if(hospi->Instance==OCTOSPI1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a74      	ldr	r2, [pc, #464]	; (800227c <HAL_OSPI_MspInit+0x1fc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d169      	bne.n	8002184 <HAL_OSPI_MspInit+0x104>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80020b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fdcb 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80020cc:	f7ff fe94 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80020d0:	4b6b      	ldr	r3, [pc, #428]	; (8002280 <HAL_OSPI_MspInit+0x200>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a6a      	ldr	r2, [pc, #424]	; (8002280 <HAL_OSPI_MspInit+0x200>)
 80020d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80020da:	4b69      	ldr	r3, [pc, #420]	; (8002280 <HAL_OSPI_MspInit+0x200>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10b      	bne.n	80020fa <HAL_OSPI_MspInit+0x7a>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80020e2:	4b68      	ldr	r3, [pc, #416]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	4a67      	ldr	r2, [pc, #412]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80020e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ee:	4b65      	ldr	r3, [pc, #404]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80020fa:	4b62      	ldr	r3, [pc, #392]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80020fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fe:	4a61      	ldr	r2, [pc, #388]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6513      	str	r3, [r2, #80]	; 0x50
 8002106:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 8002108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	623b      	str	r3, [r7, #32]
 8002110:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002112:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a5b      	ldr	r2, [pc, #364]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 8002118:	f043 0320 	orr.w	r3, r3, #32
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
    PF6     ------> OCTOSPIM_P1_IO3
    PF7     ------> OCTOSPIM_P1_IO2
    PF10     ------> OCTOSPIM_P1_CLK
    PF9     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800212a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800212e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002144:	230a      	movs	r3, #10
 8002146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800214a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800214e:	4619      	mov	r1, r3
 8002150:	484d      	ldr	r0, [pc, #308]	; (8002288 <HAL_OSPI_MspInit+0x208>)
 8002152:	f001 fb4f 	bl	80037f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8002170:	2303      	movs	r3, #3
 8002172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002176:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800217a:	4619      	mov	r1, r3
 800217c:	4842      	ldr	r0, [pc, #264]	; (8002288 <HAL_OSPI_MspInit+0x208>)
 800217e:	f001 fb39 	bl	80037f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8002182:	e077      	b.n	8002274 <HAL_OSPI_MspInit+0x1f4>
  else if(hospi->Instance==OCTOSPI2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a40      	ldr	r2, [pc, #256]	; (800228c <HAL_OSPI_MspInit+0x20c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d172      	bne.n	8002274 <HAL_OSPI_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800218e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800219a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fd5c 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_OSPI_MspInit+0x12e>
      Error_Handler();
 80021aa:	f7ff fe25 	bl	8001df8 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_OSPI_MspInit+0x200>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4a32      	ldr	r2, [pc, #200]	; (8002280 <HAL_OSPI_MspInit+0x200>)
 80021b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_OSPI_MspInit+0x200>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10b      	bne.n	80021d8 <HAL_OSPI_MspInit+0x158>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80021c0:	4b30      	ldr	r3, [pc, #192]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021cc:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80021d8:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80021da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021dc:	4a29      	ldr	r2, [pc, #164]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e2:	6513      	str	r3, [r2, #80]	; 0x50
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80021e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 800220e:	f043 0320 	orr.w	r3, r3, #32
 8002212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_OSPI_MspInit+0x204>)
 8002216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002220:	2308      	movs	r3, #8
 8002222:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 8002238:	230a      	movs	r3, #10
 800223a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002242:	4619      	mov	r1, r3
 8002244:	4812      	ldr	r0, [pc, #72]	; (8002290 <HAL_OSPI_MspInit+0x210>)
 8002246:	f001 fad5 	bl	80037f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4;
 800224a:	2313      	movs	r3, #19
 800224c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8002262:	2305      	movs	r3, #5
 8002264:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002268:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800226c:	4619      	mov	r1, r3
 800226e:	4806      	ldr	r0, [pc, #24]	; (8002288 <HAL_OSPI_MspInit+0x208>)
 8002270:	f001 fac0 	bl	80037f4 <HAL_GPIO_Init>
}
 8002274:	bf00      	nop
 8002276:	37d8      	adds	r7, #216	; 0xd8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	a0001000 	.word	0xa0001000
 8002280:	20009a08 	.word	0x20009a08
 8002284:	40021000 	.word	0x40021000
 8002288:	48001400 	.word	0x48001400
 800228c:	a0001400 	.word	0xa0001400
 8002290:	48000c00 	.word	0x48000c00

08002294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b092      	sub	sp, #72	; 0x48
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a84      	ldr	r2, [pc, #528]	; (80024c4 <HAL_SPI_MspInit+0x230>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d146      	bne.n	8002344 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b6:	4b84      	ldr	r3, [pc, #528]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	4a83      	ldr	r2, [pc, #524]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80022bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c0:	6613      	str	r3, [r2, #96]	; 0x60
 80022c2:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	4b7e      	ldr	r3, [pc, #504]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	4a7d      	ldr	r2, [pc, #500]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022da:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	4a77      	ldr	r2, [pc, #476]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f2:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 80022fe:	2338      	movs	r3, #56	; 0x38
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800230e:	2305      	movs	r3, #5
 8002310:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002312:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002316:	4619      	mov	r1, r3
 8002318:	486c      	ldr	r0, [pc, #432]	; (80024cc <HAL_SPI_MspInit+0x238>)
 800231a:	f001 fa6b 	bl	80037f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800231e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002330:	2305      	movs	r3, #5
 8002332:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002338:	4619      	mov	r1, r3
 800233a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233e:	f001 fa59 	bl	80037f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002342:	e0ba      	b.n	80024ba <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a61      	ldr	r2, [pc, #388]	; (80024d0 <HAL_SPI_MspInit+0x23c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d144      	bne.n	80023d8 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800234e:	4b5e      	ldr	r3, [pc, #376]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	4a5d      	ldr	r2, [pc, #372]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6593      	str	r3, [r2, #88]	; 0x58
 800235a:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002366:	4b58      	ldr	r3, [pc, #352]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	4a57      	ldr	r2, [pc, #348]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002372:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800237e:	4b52      	ldr	r3, [pc, #328]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	4a51      	ldr	r2, [pc, #324]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238a:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8002396:	2312      	movs	r3, #18
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a6:	2305      	movs	r3, #5
 80023a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ae:	4619      	mov	r1, r3
 80023b0:	4848      	ldr	r0, [pc, #288]	; (80024d4 <HAL_SPI_MspInit+0x240>)
 80023b2:	f001 fa1f 	bl	80037f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023b6:	2304      	movs	r3, #4
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023c6:	2305      	movs	r3, #5
 80023c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ce:	4619      	mov	r1, r3
 80023d0:	4841      	ldr	r0, [pc, #260]	; (80024d8 <HAL_SPI_MspInit+0x244>)
 80023d2:	f001 fa0f 	bl	80037f4 <HAL_GPIO_Init>
}
 80023d6:	e070      	b.n	80024ba <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a3f      	ldr	r2, [pc, #252]	; (80024dc <HAL_SPI_MspInit+0x248>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d16b      	bne.n	80024ba <HAL_SPI_MspInit+0x226>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023e2:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a38      	ldr	r2, [pc, #224]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80023e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fa:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	4a32      	ldr	r2, [pc, #200]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800242a:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_SPI_MspInit+0x234>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002442:	f002 fd23 	bl	8004e8c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002446:	2340      	movs	r3, #64	; 0x40
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002456:	2305      	movs	r3, #5
 8002458:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800245a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245e:	4619      	mov	r1, r3
 8002460:	481c      	ldr	r0, [pc, #112]	; (80024d4 <HAL_SPI_MspInit+0x240>)
 8002462:	f001 f9c7 	bl	80037f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002478:	2306      	movs	r3, #6
 800247a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002480:	4619      	mov	r1, r3
 8002482:	4815      	ldr	r0, [pc, #84]	; (80024d8 <HAL_SPI_MspInit+0x244>)
 8002484:	f001 f9b6 	bl	80037f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002488:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002496:	2303      	movs	r3, #3
 8002498:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800249a:	2306      	movs	r3, #6
 800249c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800249e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024a2:	4619      	mov	r1, r3
 80024a4:	480e      	ldr	r0, [pc, #56]	; (80024e0 <HAL_SPI_MspInit+0x24c>)
 80024a6:	f001 f9a5 	bl	80037f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2100      	movs	r1, #0
 80024ae:	2033      	movs	r0, #51	; 0x33
 80024b0:	f000 fa67 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80024b4:	2033      	movs	r0, #51	; 0x33
 80024b6:	f000 fa80 	bl	80029ba <HAL_NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3748      	adds	r7, #72	; 0x48
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40013000 	.word	0x40013000
 80024c8:	40021000 	.word	0x40021000
 80024cc:	48000400 	.word	0x48000400
 80024d0:	40003800 	.word	0x40003800
 80024d4:	48000c00 	.word	0x48000c00
 80024d8:	48000800 	.word	0x48000800
 80024dc:	40003c00 	.word	0x40003c00
 80024e0:	48001800 	.word	0x48001800

080024e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0b0      	sub	sp, #192	; 0xc0
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	229c      	movs	r2, #156	; 0x9c
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f006 fb8b 	bl	8008c20 <memset>
  if(huart->Instance==UART4)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <HAL_UART_MspInit+0xb0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d13b      	bne.n	800258c <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002514:	2308      	movs	r3, #8
 8002516:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002518:	2300      	movs	r3, #0
 800251a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	4618      	mov	r0, r3
 8002522:	f003 fb9b 	bl	8005c5c <HAL_RCCEx_PeriphCLKConfig>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800252c:	f7ff fc64 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_UART_MspInit+0xb4>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_UART_MspInit+0xb4>)
 8002536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800253a:	6593      	str	r3, [r2, #88]	; 0x58
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_UART_MspInit+0xb4>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_UART_MspInit+0xb4>)
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	4a12      	ldr	r2, [pc, #72]	; (8002598 <HAL_UART_MspInit+0xb4>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_UART_MspInit+0xb4>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002560:	2303      	movs	r3, #3
 8002562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002572:	2303      	movs	r3, #3
 8002574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002578:	2308      	movs	r3, #8
 800257a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002582:	4619      	mov	r1, r3
 8002584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002588:	f001 f934 	bl	80037f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800258c:	bf00      	nop
 800258e:	37c0      	adds	r7, #192	; 0xc0
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40004c00 	.word	0x40004c00
 8002598:	40021000 	.word	0x40021000

0800259c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <NMI_Handler+0x4>

080025a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <HardFault_Handler+0x4>

080025a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <MemManage_Handler+0x4>

080025ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <BusFault_Handler+0x4>

080025b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <UsageFault_Handler+0x4>

080025ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e8:	f000 f8ac 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80025f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025f8:	f001 fabe 	bl	8003b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}

08002600 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <SPI3_IRQHandler+0x10>)
 8002606:	f004 ff6f 	bl	80074e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000304 	.word	0x20000304

08002614 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <SystemInit+0x20>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <SystemInit+0x20>)
 8002620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002670 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800263c:	f7ff ffea 	bl	8002614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <LoopForever+0x6>)
  ldr r1, =_edata
 8002642:	490d      	ldr	r1, [pc, #52]	; (8002678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002644:	4a0d      	ldr	r2, [pc, #52]	; (800267c <LoopForever+0xe>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002658:	4c0a      	ldr	r4, [pc, #40]	; (8002684 <LoopForever+0x16>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002666:	f006 fae3 	bl	8008c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800266a:	f7fd ff45 	bl	80004f8 <main>

0800266e <LoopForever>:

LoopForever:
    b LoopForever
 800266e:	e7fe      	b.n	800266e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002670:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002678:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800267c:	08008db8 	.word	0x08008db8
  ldr r2, =_sbss
 8002680:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002684:	20009a10 	.word	0x20009a10

08002688 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002688:	e7fe      	b.n	8002688 <ADC1_IRQHandler>
	...

0800268c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_Init+0x3c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <HAL_Init+0x3c>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a2:	2003      	movs	r0, #3
 80026a4:	f000 f962 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026a8:	2002      	movs	r0, #2
 80026aa:	f000 f80f 	bl	80026cc <HAL_InitTick>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	71fb      	strb	r3, [r7, #7]
 80026b8:	e001      	b.n	80026be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026ba:	f7ff fba3 	bl	8001e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026be:	79fb      	ldrb	r3, [r7, #7]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40022000 	.word	0x40022000

080026cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026d8:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_InitTick+0x6c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d023      	beq.n	8002728 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_InitTick+0x70>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_InitTick+0x6c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f96d 	bl	80029d6 <HAL_SYSTICK_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10f      	bne.n	8002722 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b0f      	cmp	r3, #15
 8002706:	d809      	bhi.n	800271c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002708:	2200      	movs	r2, #0
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	f000 f937 	bl	8002982 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_InitTick+0x74>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e007      	b.n	800272c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e004      	b.n	800272c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000010 	.word	0x20000010
 800273c:	20000008 	.word	0x20000008
 8002740:	2000000c 	.word	0x2000000c

08002744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x20>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x24>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_IncTick+0x24>)
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000010 	.word	0x20000010
 8002768:	20009a0c 	.word	0x20009a0c

0800276c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_GetTick+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20009a0c 	.word	0x20009a0c

08002784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff ffee 	bl	800276c <HAL_GetTick>
 8002790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d005      	beq.n	80027aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_Delay+0x44>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027aa:	bf00      	nop
 80027ac:	f7ff ffde 	bl	800276c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d8f7      	bhi.n	80027ac <HAL_Delay+0x28>
  {
  }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000010 	.word	0x20000010

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4907      	ldr	r1, [pc, #28]	; (8002868 <__NVIC_EnableIRQ+0x38>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	; (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	; (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	; 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002938:	d301      	bcc.n	800293e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293a:	2301      	movs	r3, #1
 800293c:	e00f      	b.n	800295e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <SysTick_Config+0x40>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002946:	210f      	movs	r1, #15
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f7ff ff8e 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <SysTick_Config+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <SysTick_Config+0x40>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff29 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002994:	f7ff ff3e 	bl	8002814 <__NVIC_GetPriorityGrouping>
 8002998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff8e 	bl	80028c0 <NVIC_EncodePriority>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff5d 	bl	800286c <__NVIC_SetPriority>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff31 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffa2 	bl	8002928 <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d005      	beq.n	8002a12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e047      	b.n	8002aa2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 020e 	bic.w	r2, r2, #14
 8002a20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f003 021c 	and.w	r2, r3, #28
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f202 	lsl.w	r2, r1, r2
 8002a54:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a80:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
    }
  }
  return status;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	019a      	lsls	r2, r3, #6
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	431a      	orrs	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aec:	f7ff fe3e 	bl	800276c <HAL_GetTick>
 8002af0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002af2:	e009      	b.n	8002b08 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002af4:	f7ff fe3a 	bl	800276c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b02:	d901      	bls.n	8002b08 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e015      	b.n	8002b34 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ee      	beq.n	8002af4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	019a      	lsls	r2, r3, #6
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	ea42 0103 	orr.w	r1, r2, r3
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e10b      	b.n	8002d68 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7c5b      	ldrb	r3, [r3, #17]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff f976 	bl	8001e4c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2203      	movs	r2, #3
 8002b64:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002b7a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b8e:	f7ff fded 	bl	800276c <HAL_GetTick>
 8002b92:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002b94:	e009      	b.n	8002baa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002b96:	f7ff fde9 	bl	800276c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba4:	d901      	bls.n	8002baa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0de      	b.n	8002d68 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0ed      	beq.n	8002b96 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002bca:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002bce:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002be6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002bee:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7ff fdae 	bl	8002784 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c28:	f7ff fda0 	bl	800276c <HAL_GetTick>
 8002c2c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002c2e:	e009      	b.n	8002c44 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002c30:	f7ff fd9c 	bl	800276c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c3e:	d901      	bls.n	8002c44 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e091      	b.n	8002d68 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0ed      	beq.n	8002c30 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0206 	orr.w	r2, r2, #6
 8002c64:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0203 	bic.w	r2, r2, #3
 8002c78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0203 	bic.w	r2, r2, #3
 8002ca6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cce:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_DSI_Init+0x1b4>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	e000      	b.n	8002cf2 <HAL_DSI_Init+0x1b6>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_DSI_Init+0x234>)
 8002cf8:	fb03 f202 	mul.w	r2, r3, r2
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	409a      	lsls	r2, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d28:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	003d0900 	.word	0x003d0900

08002d74 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7c1b      	ldrb	r3, [r3, #16]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_DSI_ConfigErrorMonitor+0x16>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0ab      	b.n	8002ee2 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00b      	beq.n	8002dcc <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002dc4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002dc8:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002de6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0202 	orr.w	r2, r2, #2
 8002e22:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 020c 	orr.w	r2, r2, #12
 8002e40:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0210 	orr.w	r2, r2, #16
 8002e5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d009      	beq.n	8002e80 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0220 	orr.w	r2, r2, #32
 8002e7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8002ed6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7c1b      	ldrb	r3, [r3, #16]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_DSI_SetGenericVCID+0x16>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e016      	b.n	8002f32 <HAL_DSI_SetGenericVCID+0x44>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0203 	bic.w	r2, r2, #3
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7c1b      	ldrb	r3, [r3, #16]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_DSI_ConfigVideoMode+0x16>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e1f6      	b.n	8003342 <HAL_DSI_ConfigVideoMode+0x404>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0203 	bic.w	r2, r2, #3
 8002f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fb2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002fd4:	f023 031f 	bic.w	r3, r3, #31
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ffa:	f023 031f 	bic.w	r3, r3, #31
 8002ffe:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0203 	bic.w	r2, r2, #3
 8003020:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0207 	bic.w	r2, r2, #7
 8003042:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6959      	ldr	r1, [r3, #20]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	431a      	orrs	r2, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 020f 	bic.w	r2, r2, #15
 8003070:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6919      	ldr	r1, [r3, #16]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 020e 	bic.w	r2, r2, #14
 8003094:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	005a      	lsls	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d110      	bne.n	80030da <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c6:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6919      	ldr	r1, [r3, #16]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80030e8:	f023 030f 	bic.w	r3, r3, #15
 80030ec:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800310e:	f023 030f 	bic.w	r3, r3, #15
 8003112:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003134:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003138:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003180:	f023 0303 	bic.w	r3, r3, #3
 8003184:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031d0:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003214:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6999      	ldr	r1, [r3, #24]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699a      	ldr	r2, [r3, #24]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003238:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6999      	ldr	r1, [r3, #24]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800327c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7c1b      	ldrb	r3, [r3, #16]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_DSI_ConfigPhyTimer+0x16>
 8003360:	2302      	movs	r3, #2
 8003362:	e058      	b.n	8003416 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4293      	cmp	r3, r2
 8003374:	bf38      	it	cc
 8003376:	4613      	movcc	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800338a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80033b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80033f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7c1b      	ldrb	r3, [r3, #16]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003434:	2302      	movs	r3, #2
 8003436:	e0b4      	b.n	80035a2 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800344c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021a      	lsls	r2, r3, #8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	b292      	uxth	r2, r2
 800346e:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	041a      	lsls	r2, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	0c1b      	lsrs	r3, r3, #16
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800352c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699a      	ldr	r2, [r3, #24]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6a1a      	ldr	r2, [r3, #32]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7c1b      	ldrb	r3, [r3, #16]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_DSI_Start+0x14>
 80035be:	2302      	movs	r3, #2
 80035c0:	e02b      	b.n	800361a <HAL_DSI_Start+0x6c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0208 	orr.w	r2, r2, #8
 80035fe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b088      	sub	sp, #32
 800362a:	af02      	add	r7, sp, #8
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	7c1b      	ldrb	r3, [r3, #16]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_DSI_ShortWrite+0x1a>
 800363c:	2302      	movs	r3, #2
 800363e:	e010      	b.n	8003662 <HAL_DSI_ShortWrite+0x3c>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff fa44 	bl	8002ade <DSI_ShortWrite>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	741a      	strb	r2, [r3, #16]

  return status;
 8003660:	7dfb      	ldrb	r3, [r7, #23]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b08c      	sub	sp, #48	; 0x30
 800366e:	af02      	add	r7, sp, #8
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	7c1b      	ldrb	r3, [r3, #16]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_DSI_LongWrite+0x1e>
 8003684:	2302      	movs	r3, #2
 8003686:	e084      	b.n	8003792 <HAL_DSI_LongWrite+0x128>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800368e:	f7ff f86d 	bl	800276c <HAL_GetTick>
 8003692:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003694:	e00c      	b.n	80036b0 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003696:	f7ff f869 	bl	800276c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036a4:	d904      	bls.n	80036b0 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e070      	b.n	8003792 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0eb      	beq.n	8003696 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	bf28      	it	cs
 80036c8:	2303      	movcs	r3, #3
 80036ca:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80036cc:	2300      	movs	r3, #0
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	e00f      	b.n	80036f2 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	3301      	adds	r3, #1
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	3301      	adds	r3, #1
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	6a3a      	ldr	r2, [r7, #32]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3eb      	bcc.n	80036d2 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003712:	e028      	b.n	8003766 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	2b04      	cmp	r3, #4
 8003718:	bf28      	it	cs
 800371a:	2304      	movcs	r3, #4
 800371c:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003722:	2300      	movs	r3, #0
 8003724:	623b      	str	r3, [r7, #32]
 8003726:	e00e      	b.n	8003746 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	4413      	add	r3, r2
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	4313      	orrs	r3, r2
 800373e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	3301      	adds	r3, #1
 8003744:	623b      	str	r3, [r7, #32]
 8003746:	6a3a      	ldr	r2, [r7, #32]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	429a      	cmp	r2, r3
 800374c:	d3ec      	bcc.n	8003728 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1d3      	bne.n	8003714 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003774:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800377c:	b2db      	uxtb	r3, r3
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	f7ff f991 	bl	8002aac <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3728      	adds	r7, #40	; 0x28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	7c1b      	ldrb	r3, [r3, #16]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e01b      	b.n	80037e8 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80037c6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	065a      	lsls	r2, r3, #25
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003802:	e166      	b.n	8003ad2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8158 	beq.w	8003acc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d005      	beq.n	8003834 <HAL_GPIO_Init+0x40>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d130      	bne.n	8003896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800386a:	2201      	movs	r2, #1
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 0201 	and.w	r2, r3, #1
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d017      	beq.n	80038d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	2203      	movs	r2, #3
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d123      	bne.n	8003926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	08da      	lsrs	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3208      	adds	r2, #8
 80038e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	220f      	movs	r2, #15
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	08da      	lsrs	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3208      	adds	r2, #8
 8003920:	6939      	ldr	r1, [r7, #16]
 8003922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 0203 	and.w	r2, r3, #3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80b2 	beq.w	8003acc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003968:	4b61      	ldr	r3, [pc, #388]	; (8003af0 <HAL_GPIO_Init+0x2fc>)
 800396a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396c:	4a60      	ldr	r2, [pc, #384]	; (8003af0 <HAL_GPIO_Init+0x2fc>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6613      	str	r3, [r2, #96]	; 0x60
 8003974:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <HAL_GPIO_Init+0x2fc>)
 8003976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003980:	4a5c      	ldr	r2, [pc, #368]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	3302      	adds	r3, #2
 8003988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	220f      	movs	r2, #15
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039aa:	d02b      	beq.n	8003a04 <HAL_GPIO_Init+0x210>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_GPIO_Init+0x304>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d025      	beq.n	8003a00 <HAL_GPIO_Init+0x20c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a51      	ldr	r2, [pc, #324]	; (8003afc <HAL_GPIO_Init+0x308>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d01f      	beq.n	80039fc <HAL_GPIO_Init+0x208>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a50      	ldr	r2, [pc, #320]	; (8003b00 <HAL_GPIO_Init+0x30c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d019      	beq.n	80039f8 <HAL_GPIO_Init+0x204>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a4f      	ldr	r2, [pc, #316]	; (8003b04 <HAL_GPIO_Init+0x310>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_GPIO_Init+0x200>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a4e      	ldr	r2, [pc, #312]	; (8003b08 <HAL_GPIO_Init+0x314>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00d      	beq.n	80039f0 <HAL_GPIO_Init+0x1fc>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a4d      	ldr	r2, [pc, #308]	; (8003b0c <HAL_GPIO_Init+0x318>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <HAL_GPIO_Init+0x1f8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a4c      	ldr	r2, [pc, #304]	; (8003b10 <HAL_GPIO_Init+0x31c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_GPIO_Init+0x1f4>
 80039e4:	2307      	movs	r3, #7
 80039e6:	e00e      	b.n	8003a06 <HAL_GPIO_Init+0x212>
 80039e8:	2308      	movs	r3, #8
 80039ea:	e00c      	b.n	8003a06 <HAL_GPIO_Init+0x212>
 80039ec:	2306      	movs	r3, #6
 80039ee:	e00a      	b.n	8003a06 <HAL_GPIO_Init+0x212>
 80039f0:	2305      	movs	r3, #5
 80039f2:	e008      	b.n	8003a06 <HAL_GPIO_Init+0x212>
 80039f4:	2304      	movs	r3, #4
 80039f6:	e006      	b.n	8003a06 <HAL_GPIO_Init+0x212>
 80039f8:	2303      	movs	r3, #3
 80039fa:	e004      	b.n	8003a06 <HAL_GPIO_Init+0x212>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e002      	b.n	8003a06 <HAL_GPIO_Init+0x212>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_GPIO_Init+0x212>
 8003a04:	2300      	movs	r3, #0
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	f002 0203 	and.w	r2, r2, #3
 8003a0c:	0092      	lsls	r2, r2, #2
 8003a0e:	4093      	lsls	r3, r2
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a16:	4937      	ldr	r1, [pc, #220]	; (8003af4 <HAL_GPIO_Init+0x300>)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a24:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <HAL_GPIO_Init+0x320>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a48:	4a32      	ldr	r2, [pc, #200]	; (8003b14 <HAL_GPIO_Init+0x320>)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a4e:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <HAL_GPIO_Init+0x320>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a72:	4a28      	ldr	r2, [pc, #160]	; (8003b14 <HAL_GPIO_Init+0x320>)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <HAL_GPIO_Init+0x320>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_GPIO_Init+0x320>)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <HAL_GPIO_Init+0x320>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ac6:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <HAL_GPIO_Init+0x320>)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f ae91 	bne.w	8003804 <HAL_GPIO_Init+0x10>
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40010000 	.word	0x40010000
 8003af8:	48000400 	.word	0x48000400
 8003afc:	48000800 	.word	0x48000800
 8003b00:	48000c00 	.word	0x48000c00
 8003b04:	48001000 	.word	0x48001000
 8003b08:	48001400 	.word	0x48001400
 8003b0c:	48001800 	.word	0x48001800
 8003b10:	48001c00 	.word	0x48001c00
 8003b14:	40010400 	.word	0x40010400

08003b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e001      	b.n	8003b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b64:	e002      	b.n	8003b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b8e:	4a05      	ldr	r2, [pc, #20]	; (8003ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd feb0 	bl	80018fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e08d      	b.n	8003cd6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fe f970 	bl	8001eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	e006      	b.n	8003c30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d108      	bne.n	8003c4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e007      	b.n	8003c5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d138      	bne.n	8003d66 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e032      	b.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2224      	movs	r2, #36	; 0x24
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d30:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
  }
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d139      	bne.n	8003dfe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e033      	b.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2224      	movs	r2, #36	; 0x24
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0201 	orr.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0bf      	b.n	8003f9e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe f8e0 	bl	8001ff8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003e4e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6999      	ldr	r1, [r3, #24]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e64:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6899      	ldr	r1, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b4a      	ldr	r3, [pc, #296]	; (8003fa8 <HAL_LTDC_Init+0x19c>)
 8003e80:	400b      	ands	r3, r1
 8003e82:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6899      	ldr	r1, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68d9      	ldr	r1, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_LTDC_Init+0x19c>)
 8003eae:	400b      	ands	r3, r1
 8003eb0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68d9      	ldr	r1, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1a      	ldr	r2, [r3, #32]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6919      	ldr	r1, [r3, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <HAL_LTDC_Init+0x19c>)
 8003edc:	400b      	ands	r3, r1
 8003ede:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6919      	ldr	r1, [r3, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6959      	ldr	r1, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_LTDC_Init+0x19c>)
 8003f0a:	400b      	ands	r3, r1
 8003f0c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6959      	ldr	r1, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0206 	orr.w	r2, r2, #6
 8003f7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	f000f800 	.word	0xf000f800

08003fac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_LTDC_ConfigLayer+0x1a>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e02c      	b.n	8004020 <HAL_LTDC_ConfigLayer+0x74>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2134      	movs	r1, #52	; 0x34
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4614      	mov	r4, r2
 8003fea:	461d      	mov	r5, r3
 8003fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f811 	bl	8004028 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2201      	movs	r2, #1
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bdb0      	pop	{r4, r5, r7, pc}

08004028 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	4413      	add	r3, r2
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	01db      	lsls	r3, r3, #7
 8004054:	4413      	add	r3, r2
 8004056:	3384      	adds	r3, #132	; 0x84
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	4611      	mov	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	01d2      	lsls	r2, r2, #7
 8004064:	440a      	add	r2, r1
 8004066:	3284      	adds	r2, #132	; 0x84
 8004068:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800406c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800407e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004080:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4619      	mov	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	01db      	lsls	r3, r3, #7
 800408c:	440b      	add	r3, r1
 800408e:	3384      	adds	r3, #132	; 0x84
 8004090:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004096:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a6:	4413      	add	r3, r2
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	01db      	lsls	r3, r3, #7
 80040b6:	4413      	add	r3, r2
 80040b8:	3384      	adds	r3, #132	; 0x84
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	4611      	mov	r1, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	01d2      	lsls	r2, r2, #7
 80040c6:	440a      	add	r2, r1
 80040c8:	3284      	adds	r2, #132	; 0x84
 80040ca:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80040ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040de:	4413      	add	r3, r2
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4619      	mov	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	440b      	add	r3, r1
 80040ee:	3384      	adds	r3, #132	; 0x84
 80040f0:	4619      	mov	r1, r3
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	01db      	lsls	r3, r3, #7
 8004102:	4413      	add	r3, r2
 8004104:	3384      	adds	r3, #132	; 0x84
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	4611      	mov	r1, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	01d2      	lsls	r2, r2, #7
 8004112:	440a      	add	r2, r1
 8004114:	3284      	adds	r2, #132	; 0x84
 8004116:	f023 0307 	bic.w	r3, r3, #7
 800411a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	01db      	lsls	r3, r3, #7
 8004126:	4413      	add	r3, r2
 8004128:	3384      	adds	r3, #132	; 0x84
 800412a:	461a      	mov	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	01db      	lsls	r3, r3, #7
 8004158:	4413      	add	r3, r2
 800415a:	3384      	adds	r3, #132	; 0x84
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	01db      	lsls	r3, r3, #7
 8004168:	4413      	add	r3, r2
 800416a:	3384      	adds	r3, #132	; 0x84
 800416c:	461a      	mov	r2, r3
 800416e:	2300      	movs	r3, #0
 8004170:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004178:	461a      	mov	r2, r3
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	431a      	orrs	r2, r3
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4619      	mov	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	01db      	lsls	r3, r3, #7
 800418c:	440b      	add	r3, r1
 800418e:	3384      	adds	r3, #132	; 0x84
 8004190:	4619      	mov	r1, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	01db      	lsls	r3, r3, #7
 80041a2:	4413      	add	r3, r2
 80041a4:	3384      	adds	r3, #132	; 0x84
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	4611      	mov	r1, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	01d2      	lsls	r2, r2, #7
 80041b2:	440a      	add	r2, r1
 80041b4:	3284      	adds	r2, #132	; 0x84
 80041b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	01db      	lsls	r3, r3, #7
 80041c6:	4413      	add	r3, r2
 80041c8:	3384      	adds	r3, #132	; 0x84
 80041ca:	461a      	mov	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	01db      	lsls	r3, r3, #7
 80041dc:	4413      	add	r3, r2
 80041de:	3384      	adds	r3, #132	; 0x84
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	4611      	mov	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	01d2      	lsls	r2, r2, #7
 80041ec:	440a      	add	r2, r1
 80041ee:	3284      	adds	r2, #132	; 0x84
 80041f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041f4:	f023 0307 	bic.w	r3, r3, #7
 80041f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	6809      	ldr	r1, [r1, #0]
 8004206:	4608      	mov	r0, r1
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	01c9      	lsls	r1, r1, #7
 800420c:	4401      	add	r1, r0
 800420e:	3184      	adds	r1, #132	; 0x84
 8004210:	4313      	orrs	r3, r2
 8004212:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	01db      	lsls	r3, r3, #7
 800421e:	4413      	add	r3, r2
 8004220:	3384      	adds	r3, #132	; 0x84
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	01db      	lsls	r3, r3, #7
 800422e:	4413      	add	r3, r2
 8004230:	3384      	adds	r3, #132	; 0x84
 8004232:	461a      	mov	r2, r3
 8004234:	2300      	movs	r3, #0
 8004236:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	01db      	lsls	r3, r3, #7
 8004242:	4413      	add	r3, r2
 8004244:	3384      	adds	r3, #132	; 0x84
 8004246:	461a      	mov	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004256:	2304      	movs	r3, #4
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e01b      	b.n	8004294 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d102      	bne.n	800426a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004264:	2303      	movs	r3, #3
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e014      	b.n	8004294 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d00b      	beq.n	800428a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004276:	2b02      	cmp	r3, #2
 8004278:	d007      	beq.n	800428a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800427e:	2b03      	cmp	r3, #3
 8004280:	d003      	beq.n	800428a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004286:	2b07      	cmp	r3, #7
 8004288:	d102      	bne.n	8004290 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800428a:	2302      	movs	r3, #2
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	e001      	b.n	8004294 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004290:	2301      	movs	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	01db      	lsls	r3, r3, #7
 800429e:	4413      	add	r3, r2
 80042a0:	3384      	adds	r3, #132	; 0x84
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	4611      	mov	r1, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	01d2      	lsls	r2, r2, #7
 80042ae:	440a      	add	r2, r1
 80042b0:	3284      	adds	r2, #132	; 0x84
 80042b2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80042b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1acb      	subs	r3, r1, r3
 80042ce:	69f9      	ldr	r1, [r7, #28]
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	6809      	ldr	r1, [r1, #0]
 80042da:	4608      	mov	r0, r1
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	01c9      	lsls	r1, r1, #7
 80042e0:	4401      	add	r1, r0
 80042e2:	3184      	adds	r1, #132	; 0x84
 80042e4:	4313      	orrs	r3, r2
 80042e6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	01db      	lsls	r3, r3, #7
 80042f2:	4413      	add	r3, r2
 80042f4:	3384      	adds	r3, #132	; 0x84
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	4611      	mov	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	01d2      	lsls	r2, r2, #7
 8004302:	440a      	add	r2, r1
 8004304:	3284      	adds	r2, #132	; 0x84
 8004306:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800430a:	f023 0307 	bic.w	r3, r3, #7
 800430e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	01db      	lsls	r3, r3, #7
 800431a:	4413      	add	r3, r2
 800431c:	3384      	adds	r3, #132	; 0x84
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	01db      	lsls	r3, r3, #7
 8004330:	4413      	add	r3, r2
 8004332:	3384      	adds	r3, #132	; 0x84
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	4611      	mov	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	01d2      	lsls	r2, r2, #7
 8004340:	440a      	add	r2, r1
 8004342:	3284      	adds	r2, #132	; 0x84
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6013      	str	r3, [r2, #0]
}
 800434a:	bf00      	nop
 800434c:	3724      	adds	r7, #36	; 0x24
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af02      	add	r7, sp, #8
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7fe fa02 	bl	800276c <HAL_GetTick>
 8004368:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e092      	b.n	800449c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 808b 	bne.w	800449c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd fe7a 	bl	8002080 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800438c:	f241 3188 	movw	r1, #5000	; 0x1388
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f88b 	bl	80044ac <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	4b42      	ldr	r3, [pc, #264]	; (80044a8 <HAL_OSPI_Init+0x150>)
 800439e:	4013      	ands	r3, r2
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68d1      	ldr	r1, [r2, #12]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6912      	ldr	r2, [r2, #16]
 80043a8:	3a01      	subs	r2, #1
 80043aa:	0412      	lsls	r2, r2, #16
 80043ac:	4311      	orrs	r1, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6952      	ldr	r2, [r2, #20]
 80043b2:	3a01      	subs	r2, #1
 80043b4:	0212      	lsls	r2, r2, #8
 80043b6:	4311      	orrs	r1, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043bc:	4311      	orrs	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	69d2      	ldr	r2, [r2, #28]
 80043c2:	4311      	orrs	r1, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	0412      	lsls	r2, r2, #16
 80043d6:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	021a      	lsls	r2, r3, #8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2200      	movs	r2, #0
 80043fc:	2120      	movs	r1, #32
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fb98 	bl	8004b34 <OSPI_WaitFlagStateUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d146      	bne.n	800449c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004444:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d107      	bne.n	8004484 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0202 	orr.w	r2, r2, #2
 8004482:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800448c:	d103      	bne.n	8004496 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
 8004494:	e002      	b.n	800449c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	f8e0f8f4 	.word	0xf8e0f8f4

080044ac <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b092      	sub	sp, #72	; 0x48
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a08      	ldr	r2, [pc, #32]	; (800450c <HAL_OSPIM_Config+0x40>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d105      	bne.n	80044fa <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80044f8:	e004      	b.n	8004504 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80044fa:	2301      	movs	r3, #1
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004504:	2300      	movs	r3, #0
 8004506:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800450a:	e01f      	b.n	800454c <HAL_OSPIM_Config+0x80>
 800450c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004510:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004514:	3301      	adds	r3, #1
 8004516:	b2d8      	uxtb	r0, r3
 8004518:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800451c:	f107 0114 	add.w	r1, r7, #20
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	4619      	mov	r1, r3
 800452c:	f000 fb3a 	bl	8004ba4 <OSPIM_GetConfig>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2208      	movs	r2, #8
 8004540:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004546:	3301      	adds	r3, #1
 8004548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800454c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004550:	2b01      	cmp	r3, #1
 8004552:	d9dd      	bls.n	8004510 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004554:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004558:	2b00      	cmp	r3, #0
 800455a:	f040 82de 	bne.w	8004b1a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800455e:	4bc6      	ldr	r3, [pc, #792]	; (8004878 <HAL_OSPIM_Config+0x3ac>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800456a:	4bc3      	ldr	r3, [pc, #780]	; (8004878 <HAL_OSPIM_Config+0x3ac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4ac2      	ldr	r2, [pc, #776]	; (8004878 <HAL_OSPIM_Config+0x3ac>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004576:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004582:	4bbe      	ldr	r3, [pc, #760]	; (800487c <HAL_OSPIM_Config+0x3b0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800458e:	4bbb      	ldr	r3, [pc, #748]	; (800487c <HAL_OSPIM_Config+0x3b0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4aba      	ldr	r2, [pc, #744]	; (800487c <HAL_OSPIM_Config+0x3b0>)
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800459a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800459e:	f043 0302 	orr.w	r3, r3, #2
 80045a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80045a6:	49b6      	ldr	r1, [pc, #728]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 80045a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	3348      	adds	r3, #72	; 0x48
 80045b4:	443b      	add	r3, r7
 80045b6:	3b2c      	subs	r3, #44	; 0x2c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	48af      	ldr	r0, [pc, #700]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 80045c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	3348      	adds	r3, #72	; 0x48
 80045d0:	443b      	add	r3, r7
 80045d2:	3b2c      	subs	r3, #44	; 0x2c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4403      	add	r3, r0
 80045e0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80045e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	3348      	adds	r3, #72	; 0x48
 80045ee:	443b      	add	r3, r7
 80045f0:	3b34      	subs	r3, #52	; 0x34
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80a1 	beq.w	800473c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80045fa:	49a1      	ldr	r1, [pc, #644]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 80045fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	3348      	adds	r3, #72	; 0x48
 8004608:	443b      	add	r3, r7
 800460a:	3b34      	subs	r3, #52	; 0x34
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3b01      	subs	r3, #1
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	6859      	ldr	r1, [r3, #4]
 8004616:	489a      	ldr	r0, [pc, #616]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 8004618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	3348      	adds	r3, #72	; 0x48
 8004624:	443b      	add	r3, r7
 8004626:	3b34      	subs	r3, #52	; 0x34
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3b01      	subs	r3, #1
 800462c:	f021 0201 	bic.w	r2, r1, #1
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4403      	add	r3, r0
 8004634:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	3348      	adds	r3, #72	; 0x48
 8004642:	443b      	add	r3, r7
 8004644:	3b30      	subs	r3, #48	; 0x30
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01d      	beq.n	8004688 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800464c:	498c      	ldr	r1, [pc, #560]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 800464e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	3348      	adds	r3, #72	; 0x48
 800465a:	443b      	add	r3, r7
 800465c:	3b30      	subs	r3, #48	; 0x30
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3b01      	subs	r3, #1
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	4885      	ldr	r0, [pc, #532]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 800466a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	3348      	adds	r3, #72	; 0x48
 8004676:	443b      	add	r3, r7
 8004678:	3b30      	subs	r3, #48	; 0x30
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3b01      	subs	r3, #1
 800467e:	f021 0210 	bic.w	r2, r1, #16
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4403      	add	r3, r0
 8004686:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	3348      	adds	r3, #72	; 0x48
 8004694:	443b      	add	r3, r7
 8004696:	3b28      	subs	r3, #40	; 0x28
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d021      	beq.n	80046e2 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800469e:	4978      	ldr	r1, [pc, #480]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 80046a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	3348      	adds	r3, #72	; 0x48
 80046ac:	443b      	add	r3, r7
 80046ae:	3b28      	subs	r3, #40	; 0x28
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	4870      	ldr	r0, [pc, #448]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 80046c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	3348      	adds	r3, #72	; 0x48
 80046cc:	443b      	add	r3, r7
 80046ce:	3b28      	subs	r3, #40	; 0x28
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4403      	add	r3, r0
 80046e0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80046e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	3348      	adds	r3, #72	; 0x48
 80046ee:	443b      	add	r3, r7
 80046f0:	3b24      	subs	r3, #36	; 0x24
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d021      	beq.n	800473c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80046f8:	4961      	ldr	r1, [pc, #388]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 80046fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	3348      	adds	r3, #72	; 0x48
 8004706:	443b      	add	r3, r7
 8004708:	3b24      	subs	r3, #36	; 0x24
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3b01      	subs	r3, #1
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	6859      	ldr	r1, [r3, #4]
 8004718:	4859      	ldr	r0, [pc, #356]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 800471a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3348      	adds	r3, #72	; 0x48
 8004726:	443b      	add	r3, r7
 8004728:	3b24      	subs	r3, #36	; 0x24
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4403      	add	r3, r0
 800473a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	3348      	adds	r3, #72	; 0x48
 800474e:	443b      	add	r3, r7
 8004750:	3b34      	subs	r3, #52	; 0x34
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4299      	cmp	r1, r3
 8004756:	d038      	beq.n	80047ca <HAL_OSPIM_Config+0x2fe>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	3348      	adds	r3, #72	; 0x48
 800476a:	443b      	add	r3, r7
 800476c:	3b30      	subs	r3, #48	; 0x30
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4299      	cmp	r1, r3
 8004772:	d02a      	beq.n	80047ca <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6899      	ldr	r1, [r3, #8]
 8004778:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	3348      	adds	r3, #72	; 0x48
 8004786:	443b      	add	r3, r7
 8004788:	3b2c      	subs	r3, #44	; 0x2c
 800478a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800478c:	4299      	cmp	r1, r3
 800478e:	d01c      	beq.n	80047ca <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	68d9      	ldr	r1, [r3, #12]
 8004794:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	3348      	adds	r3, #72	; 0x48
 80047a2:	443b      	add	r3, r7
 80047a4:	3b28      	subs	r3, #40	; 0x28
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4299      	cmp	r1, r3
 80047aa:	d00e      	beq.n	80047ca <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6919      	ldr	r1, [r3, #16]
 80047b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	3348      	adds	r3, #72	; 0x48
 80047be:	443b      	add	r3, r7
 80047c0:	3b24      	subs	r3, #36	; 0x24
 80047c2:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80047c4:	4299      	cmp	r1, r3
 80047c6:	f040 80d3 	bne.w	8004970 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80047ca:	492d      	ldr	r1, [pc, #180]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 80047cc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	3348      	adds	r3, #72	; 0x48
 80047da:	443b      	add	r3, r7
 80047dc:	3b34      	subs	r3, #52	; 0x34
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	6859      	ldr	r1, [r3, #4]
 80047e8:	4825      	ldr	r0, [pc, #148]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 80047ea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	3348      	adds	r3, #72	; 0x48
 80047f8:	443b      	add	r3, r7
 80047fa:	3b34      	subs	r3, #52	; 0x34
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3b01      	subs	r3, #1
 8004800:	f021 0201 	bic.w	r2, r1, #1
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4403      	add	r3, r0
 8004808:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800480a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	3348      	adds	r3, #72	; 0x48
 8004818:	443b      	add	r3, r7
 800481a:	3b30      	subs	r3, #48	; 0x30
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01f      	beq.n	8004862 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004822:	4917      	ldr	r1, [pc, #92]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 8004824:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3348      	adds	r3, #72	; 0x48
 8004832:	443b      	add	r3, r7
 8004834:	3b30      	subs	r3, #48	; 0x30
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3b01      	subs	r3, #1
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	480f      	ldr	r0, [pc, #60]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 8004842:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	3348      	adds	r3, #72	; 0x48
 8004850:	443b      	add	r3, r7
 8004852:	3b30      	subs	r3, #48	; 0x30
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3b01      	subs	r3, #1
 8004858:	f021 0210 	bic.w	r2, r1, #16
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4403      	add	r3, r0
 8004860:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004862:	4907      	ldr	r1, [pc, #28]	; (8004880 <HAL_OSPIM_Config+0x3b4>)
 8004864:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	3348      	adds	r3, #72	; 0x48
 8004872:	443b      	add	r3, r7
 8004874:	3b2c      	subs	r3, #44	; 0x2c
 8004876:	e005      	b.n	8004884 <HAL_OSPIM_Config+0x3b8>
 8004878:	a0001000 	.word	0xa0001000
 800487c:	a0001400 	.word	0xa0001400
 8004880:	50061c00 	.word	0x50061c00
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3b01      	subs	r3, #1
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	6859      	ldr	r1, [r3, #4]
 800488e:	48a6      	ldr	r0, [pc, #664]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004890:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	3348      	adds	r3, #72	; 0x48
 800489e:	443b      	add	r3, r7
 80048a0:	3b2c      	subs	r3, #44	; 0x2c
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4403      	add	r3, r0
 80048ae:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80048b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	3348      	adds	r3, #72	; 0x48
 80048be:	443b      	add	r3, r7
 80048c0:	3b28      	subs	r3, #40	; 0x28
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d023      	beq.n	8004910 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80048c8:	4997      	ldr	r1, [pc, #604]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 80048ca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	3348      	adds	r3, #72	; 0x48
 80048d8:	443b      	add	r3, r7
 80048da:	3b28      	subs	r3, #40	; 0x28
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3b01      	subs	r3, #1
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	488f      	ldr	r0, [pc, #572]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 80048ec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	3348      	adds	r3, #72	; 0x48
 80048fa:	443b      	add	r3, r7
 80048fc:	3b28      	subs	r3, #40	; 0x28
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4403      	add	r3, r0
 800490e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004910:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	3348      	adds	r3, #72	; 0x48
 800491e:	443b      	add	r3, r7
 8004920:	3b24      	subs	r3, #36	; 0x24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d023      	beq.n	8004970 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004928:	497f      	ldr	r1, [pc, #508]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 800492a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	3348      	adds	r3, #72	; 0x48
 8004938:	443b      	add	r3, r7
 800493a:	3b24      	subs	r3, #36	; 0x24
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3b01      	subs	r3, #1
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	6859      	ldr	r1, [r3, #4]
 800494a:	4877      	ldr	r0, [pc, #476]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 800494c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	3348      	adds	r3, #72	; 0x48
 800495a:	443b      	add	r3, r7
 800495c:	3b24      	subs	r3, #36	; 0x24
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3b01      	subs	r3, #1
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4403      	add	r3, r0
 800496e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004970:	4a6d      	ldr	r2, [pc, #436]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	3b01      	subs	r3, #1
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004984:	025b      	lsls	r3, r3, #9
 8004986:	431a      	orrs	r2, r3
 8004988:	4967      	ldr	r1, [pc, #412]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	3b01      	subs	r3, #1
 8004990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800499a:	4a63      	ldr	r2, [pc, #396]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f023 0203 	bic.w	r2, r3, #3
 80049ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	431a      	orrs	r2, r3
 80049b2:	495d      	ldr	r1, [pc, #372]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d014      	beq.n	80049f6 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80049cc:	4a56      	ldr	r2, [pc, #344]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e0:	015b      	lsls	r3, r3, #5
 80049e2:	431a      	orrs	r2, r3
 80049e4:	4950      	ldr	r1, [pc, #320]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	f042 0210 	orr.w	r2, r2, #16
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d019      	beq.n	8004a36 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004a02:	4a49      	ldr	r2, [pc, #292]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	049b      	lsls	r3, r3, #18
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	4942      	ldr	r1, [pc, #264]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	605a      	str	r2, [r3, #4]
 8004a34:	e01c      	b.n	8004a70 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d018      	beq.n	8004a70 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004a3e:	4a3a      	ldr	r2, [pc, #232]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a56:	069b      	lsls	r3, r3, #26
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	4933      	ldr	r1, [pc, #204]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d019      	beq.n	8004ab0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a94:	049b      	lsls	r3, r3, #18
 8004a96:	431a      	orrs	r2, r3
 8004a98:	4923      	ldr	r1, [pc, #140]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	e01c      	b.n	8004aea <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d018      	beq.n	8004aea <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ab8:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad0:	069b      	lsls	r3, r3, #26
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	4914      	ldr	r1, [pc, #80]	; (8004b28 <HAL_OSPIM_Config+0x65c>)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004aea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_OSPIM_Config+0x660>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <HAL_OSPIM_Config+0x660>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004b02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <HAL_OSPIM_Config+0x664>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <HAL_OSPIM_Config+0x664>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004b1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3748      	adds	r7, #72	; 0x48
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	50061c00 	.word	0x50061c00
 8004b2c:	a0001000 	.word	0xa0001000
 8004b30:	a0001400 	.word	0xa0001400

08004b34 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004b44:	e01a      	b.n	8004b7c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d016      	beq.n	8004b7c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fd fe0d 	bl	800276c <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10b      	bne.n	8004b7c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	f043 0201 	orr.w	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e00e      	b.n	8004b9a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a1a      	ldr	r2, [r3, #32]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf14      	ite	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	2300      	moveq	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1d6      	bne.n	8004b46 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <OSPIM_GetConfig+0x26>
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d802      	bhi.n	8004bca <OSPIM_GetConfig+0x26>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	75fb      	strb	r3, [r7, #23]
 8004bce:	e08e      	b.n	8004cee <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2200      	movs	r2, #0
 8004be6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d101      	bne.n	8004bf8 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004bf4:	4b41      	ldr	r3, [pc, #260]	; (8004cfc <OSPIM_GetConfig+0x158>)
 8004bf6:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e074      	b.n	8004ce8 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004bfe:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <OSPIM_GetConfig+0x15c>)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4053      	eors	r3, r2
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4053      	eors	r3, r2
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4053      	eors	r3, r2
 8004c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d018      	beq.n	8004ca6 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4053      	eors	r3, r2
 8004c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d111      	bne.n	8004ca6 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	e005      	b.n	8004ca6 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d018      	beq.n	8004ce2 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4053      	eors	r3, r2
 8004cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d111      	bne.n	8004ce2 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	611a      	str	r2, [r3, #16]
 8004cd4:	e005      	b.n	8004ce2 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d987      	bls.n	8004bfe <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	04040222 	.word	0x04040222
 8004d00:	50061c00 	.word	0x50061c00

08004d04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d08:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d14:	d102      	bne.n	8004d1c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d1a:	e00b      	b.n	8004d34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004d1c:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2a:	d102      	bne.n	8004d32 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d30:	e000      	b.n	8004d34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d32:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40007000 	.word	0x40007000

08004d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d141      	bne.n	8004dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d52:	4b4b      	ldr	r3, [pc, #300]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5e:	d131      	bne.n	8004dc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d60:	4b47      	ldr	r3, [pc, #284]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d66:	4a46      	ldr	r2, [pc, #280]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d70:	4b43      	ldr	r3, [pc, #268]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d78:	4a41      	ldr	r2, [pc, #260]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d80:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2232      	movs	r2, #50	; 0x32
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	4a3f      	ldr	r2, [pc, #252]	; (8004e88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	0c9b      	lsrs	r3, r3, #18
 8004d92:	3301      	adds	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d96:	e002      	b.n	8004d9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d9e:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004daa:	d102      	bne.n	8004db2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f2      	bne.n	8004d98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004db2:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbe:	d158      	bne.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e057      	b.n	8004e74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dc4:	4b2e      	ldr	r3, [pc, #184]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dca:	4a2d      	ldr	r2, [pc, #180]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004dd4:	e04d      	b.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d141      	bne.n	8004e62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dde:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dea:	d131      	bne.n	8004e50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dec:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df2:	4a23      	ldr	r2, [pc, #140]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dfc:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e04:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2232      	movs	r2, #50	; 0x32
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	0c9b      	lsrs	r3, r3, #18
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e22:	e002      	b.n	8004e2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e36:	d102      	bne.n	8004e3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f2      	bne.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4a:	d112      	bne.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e011      	b.n	8004e74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e56:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e60:	e007      	b.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e6a:	4a05      	ldr	r2, [pc, #20]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	40007000 	.word	0x40007000
 8004e84:	20000008 	.word	0x20000008
 8004e88:	431bde83 	.word	0x431bde83

08004e8c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004e90:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e9a:	6053      	str	r3, [r2, #4]
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40007000 	.word	0x40007000

08004eac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	f000 bc08 	b.w	80056d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ec0:	4b96      	ldr	r3, [pc, #600]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eca:	4b94      	ldr	r3, [pc, #592]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80e4 	beq.w	80050aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x4c>
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	f040 808b 	bne.w	8005006 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	f040 8087 	bne.w	8005006 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ef8:	4b88      	ldr	r3, [pc, #544]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_OscConfig+0x64>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e3df      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1a      	ldr	r2, [r3, #32]
 8004f14:	4b81      	ldr	r3, [pc, #516]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <HAL_RCC_OscConfig+0x7e>
 8004f20:	4b7e      	ldr	r3, [pc, #504]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f28:	e005      	b.n	8004f36 <HAL_RCC_OscConfig+0x8a>
 8004f2a:	4b7c      	ldr	r3, [pc, #496]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d223      	bcs.n	8004f82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fdcc 	bl	8005adc <RCC_SetFlashLatencyFromMSIRange>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e3c0      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f4e:	4b73      	ldr	r3, [pc, #460]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a72      	ldr	r2, [pc, #456]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f54:	f043 0308 	orr.w	r3, r3, #8
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	4b70      	ldr	r3, [pc, #448]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	496d      	ldr	r1, [pc, #436]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f6c:	4b6b      	ldr	r3, [pc, #428]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	4968      	ldr	r1, [pc, #416]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	604b      	str	r3, [r1, #4]
 8004f80:	e025      	b.n	8004fce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f82:	4b66      	ldr	r3, [pc, #408]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a65      	ldr	r2, [pc, #404]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f88:	f043 0308 	orr.w	r3, r3, #8
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	4960      	ldr	r1, [pc, #384]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fa0:	4b5e      	ldr	r3, [pc, #376]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	495b      	ldr	r1, [pc, #364]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fd8c 	bl	8005adc <RCC_SetFlashLatencyFromMSIRange>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e380      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fce:	f000 fcc1 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	4b51      	ldr	r3, [pc, #324]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	4950      	ldr	r1, [pc, #320]	; (8005120 <HAL_RCC_OscConfig+0x274>)
 8004fe0:	5ccb      	ldrb	r3, [r1, r3]
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fea:	4a4e      	ldr	r2, [pc, #312]	; (8005124 <HAL_RCC_OscConfig+0x278>)
 8004fec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fee:	4b4e      	ldr	r3, [pc, #312]	; (8005128 <HAL_RCC_OscConfig+0x27c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd fb6a 	bl	80026cc <HAL_InitTick>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d052      	beq.n	80050a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	e364      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d032      	beq.n	8005074 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800500e:	4b43      	ldr	r3, [pc, #268]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a42      	ldr	r2, [pc, #264]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800501a:	f7fd fba7 	bl	800276c <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005022:	f7fd fba3 	bl	800276c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e34d      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005034:	4b39      	ldr	r3, [pc, #228]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005040:	4b36      	ldr	r3, [pc, #216]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a35      	ldr	r2, [pc, #212]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005046:	f043 0308 	orr.w	r3, r3, #8
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	4b33      	ldr	r3, [pc, #204]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	4930      	ldr	r1, [pc, #192]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800505e:	4b2f      	ldr	r3, [pc, #188]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	492b      	ldr	r1, [pc, #172]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800506e:	4313      	orrs	r3, r2
 8005070:	604b      	str	r3, [r1, #4]
 8005072:	e01a      	b.n	80050aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005074:	4b29      	ldr	r3, [pc, #164]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a28      	ldr	r2, [pc, #160]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005080:	f7fd fb74 	bl	800276c <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005088:	f7fd fb70 	bl	800276c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e31a      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_OscConfig+0x270>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f0      	bne.n	8005088 <HAL_RCC_OscConfig+0x1dc>
 80050a6:	e000      	b.n	80050aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d073      	beq.n	800519e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_OscConfig+0x21c>
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b0c      	cmp	r3, #12
 80050c0:	d10e      	bne.n	80050e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c8:	4b14      	ldr	r3, [pc, #80]	; (800511c <HAL_RCC_OscConfig+0x270>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d063      	beq.n	800519c <HAL_RCC_OscConfig+0x2f0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d15f      	bne.n	800519c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e2f7      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e8:	d106      	bne.n	80050f8 <HAL_RCC_OscConfig+0x24c>
 80050ea:	4b0c      	ldr	r3, [pc, #48]	; (800511c <HAL_RCC_OscConfig+0x270>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a0b      	ldr	r2, [pc, #44]	; (800511c <HAL_RCC_OscConfig+0x270>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e025      	b.n	8005144 <HAL_RCC_OscConfig+0x298>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005100:	d114      	bne.n	800512c <HAL_RCC_OscConfig+0x280>
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a05      	ldr	r2, [pc, #20]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	4b03      	ldr	r3, [pc, #12]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a02      	ldr	r2, [pc, #8]	; (800511c <HAL_RCC_OscConfig+0x270>)
 8005114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e013      	b.n	8005144 <HAL_RCC_OscConfig+0x298>
 800511c:	40021000 	.word	0x40021000
 8005120:	08008d38 	.word	0x08008d38
 8005124:	20000008 	.word	0x20000008
 8005128:	2000000c 	.word	0x2000000c
 800512c:	4ba0      	ldr	r3, [pc, #640]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a9f      	ldr	r2, [pc, #636]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b9d      	ldr	r3, [pc, #628]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a9c      	ldr	r2, [pc, #624]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800513e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fd fb0e 	bl	800276c <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005154:	f7fd fb0a 	bl	800276c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e2b4      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005166:	4b92      	ldr	r3, [pc, #584]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x2a8>
 8005172:	e014      	b.n	800519e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fd fafa 	bl	800276c <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fd faf6 	bl	800276c <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e2a0      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800518e:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x2d0>
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d060      	beq.n	800526c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_OscConfig+0x310>
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b0c      	cmp	r3, #12
 80051b4:	d119      	bne.n	80051ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d116      	bne.n	80051ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051bc:	4b7c      	ldr	r3, [pc, #496]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_RCC_OscConfig+0x328>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e27d      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b76      	ldr	r3, [pc, #472]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	4973      	ldr	r1, [pc, #460]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e8:	e040      	b.n	800526c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d023      	beq.n	800523a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f2:	4b6f      	ldr	r3, [pc, #444]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a6e      	ldr	r2, [pc, #440]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80051f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fe:	f7fd fab5 	bl	800276c <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005206:	f7fd fab1 	bl	800276c <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e25b      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005218:	4b65      	ldr	r3, [pc, #404]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005224:	4b62      	ldr	r3, [pc, #392]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	495f      	ldr	r1, [pc, #380]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
 8005238:	e018      	b.n	800526c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523a:	4b5d      	ldr	r3, [pc, #372]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a5c      	ldr	r2, [pc, #368]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fd fa91 	bl	800276c <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524e:	f7fd fa8d 	bl	800276c <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e237      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005260:	4b53      	ldr	r3, [pc, #332]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f0      	bne.n	800524e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d03c      	beq.n	80052f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01c      	beq.n	80052ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005280:	4b4b      	ldr	r3, [pc, #300]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005286:	4a4a      	ldr	r2, [pc, #296]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fd fa6c 	bl	800276c <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005298:	f7fd fa68 	bl	800276c <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e212      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052aa:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ef      	beq.n	8005298 <HAL_RCC_OscConfig+0x3ec>
 80052b8:	e01b      	b.n	80052f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ba:	4b3d      	ldr	r3, [pc, #244]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c0:	4a3b      	ldr	r2, [pc, #236]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fd fa4f 	bl	800276c <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d2:	f7fd fa4b 	bl	800276c <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e1f5      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052e4:	4b32      	ldr	r3, [pc, #200]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80052e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ef      	bne.n	80052d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80a6 	beq.w	800544c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005300:	2300      	movs	r3, #0
 8005302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005304:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005310:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531a:	6593      	str	r3, [r2, #88]	; 0x58
 800531c:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005328:	2301      	movs	r3, #1
 800532a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800532c:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <HAL_RCC_OscConfig+0x508>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d118      	bne.n	800536a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <HAL_RCC_OscConfig+0x508>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_RCC_OscConfig+0x508>)
 800533e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005344:	f7fd fa12 	bl	800276c <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534c:	f7fd fa0e 	bl	800276c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e1b8      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800535e:	4b15      	ldr	r3, [pc, #84]	; (80053b4 <HAL_RCC_OscConfig+0x508>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d108      	bne.n	8005384 <HAL_RCC_OscConfig+0x4d8>
 8005372:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005378:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005382:	e029      	b.n	80053d8 <HAL_RCC_OscConfig+0x52c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d115      	bne.n	80053b8 <HAL_RCC_OscConfig+0x50c>
 800538c:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 8005394:	f043 0304 	orr.w	r3, r3, #4
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	4a03      	ldr	r2, [pc, #12]	; (80053b0 <HAL_RCC_OscConfig+0x504>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ac:	e014      	b.n	80053d8 <HAL_RCC_OscConfig+0x52c>
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40007000 	.word	0x40007000
 80053b8:	4b9d      	ldr	r3, [pc, #628]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	4a9c      	ldr	r2, [pc, #624]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053c8:	4b99      	ldr	r3, [pc, #612]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	4a98      	ldr	r2, [pc, #608]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80053d0:	f023 0304 	bic.w	r3, r3, #4
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d016      	beq.n	800540e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fd f9c4 	bl	800276c <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e8:	f7fd f9c0 	bl	800276c <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e168      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053fe:	4b8c      	ldr	r3, [pc, #560]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0ed      	beq.n	80053e8 <HAL_RCC_OscConfig+0x53c>
 800540c:	e015      	b.n	800543a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540e:	f7fd f9ad 	bl	800276c <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005414:	e00a      	b.n	800542c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005416:	f7fd f9a9 	bl	800276c <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f241 3288 	movw	r2, #5000	; 0x1388
 8005424:	4293      	cmp	r3, r2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e151      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800542c:	4b80      	ldr	r3, [pc, #512]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ed      	bne.n	8005416 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800543a:	7ffb      	ldrb	r3, [r7, #31]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b7b      	ldr	r3, [pc, #492]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 8005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005444:	4a7a      	ldr	r2, [pc, #488]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d03c      	beq.n	80054d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01c      	beq.n	800549a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005460:	4b73      	ldr	r3, [pc, #460]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 8005462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005466:	4a72      	ldr	r2, [pc, #456]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005470:	f7fd f97c 	bl	800276c <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005478:	f7fd f978 	bl	800276c <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e122      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800548a:	4b69      	ldr	r3, [pc, #420]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 800548c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ef      	beq.n	8005478 <HAL_RCC_OscConfig+0x5cc>
 8005498:	e01b      	b.n	80054d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800549a:	4b65      	ldr	r3, [pc, #404]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 800549c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054a0:	4a63      	ldr	r2, [pc, #396]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054aa:	f7fd f95f 	bl	800276c <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054b2:	f7fd f95b 	bl	800276c <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e105      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054c4:	4b5a      	ldr	r3, [pc, #360]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80054c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1ef      	bne.n	80054b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80f9 	beq.w	80056ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	f040 80cf 	bne.w	8005684 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054e6:	4b52      	ldr	r3, [pc, #328]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f003 0203 	and.w	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d12c      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	3b01      	subs	r3, #1
 8005506:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d123      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d11b      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d113      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	3b01      	subs	r3, #1
 800553a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800553c:	429a      	cmp	r2, r3
 800553e:	d109      	bne.n	8005554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	3b01      	subs	r3, #1
 800554e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d071      	beq.n	8005638 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b0c      	cmp	r3, #12
 8005558:	d068      	beq.n	800562c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800555a:	4b35      	ldr	r3, [pc, #212]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005566:	4b32      	ldr	r3, [pc, #200]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e0ac      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005576:	4b2e      	ldr	r3, [pc, #184]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 800557c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005580:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005582:	f7fd f8f3 	bl	800276c <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558a:	f7fd f8ef 	bl	800276c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e099      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800559c:	4b24      	ldr	r3, [pc, #144]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f0      	bne.n	800558a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055a8:	4b21      	ldr	r3, [pc, #132]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	4b21      	ldr	r3, [pc, #132]	; (8005634 <HAL_RCC_OscConfig+0x788>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055b8:	3a01      	subs	r2, #1
 80055ba:	0112      	lsls	r2, r2, #4
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055c2:	0212      	lsls	r2, r2, #8
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055ca:	0852      	lsrs	r2, r2, #1
 80055cc:	3a01      	subs	r2, #1
 80055ce:	0552      	lsls	r2, r2, #21
 80055d0:	4311      	orrs	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055d6:	0852      	lsrs	r2, r2, #1
 80055d8:	3a01      	subs	r2, #1
 80055da:	0652      	lsls	r2, r2, #25
 80055dc:	4311      	orrs	r1, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055e2:	06d2      	lsls	r2, r2, #27
 80055e4:	430a      	orrs	r2, r1
 80055e6:	4912      	ldr	r1, [pc, #72]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80055f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055f8:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 80055fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005602:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005604:	f7fd f8b2 	bl	800276c <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560c:	f7fd f8ae 	bl	800276c <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e058      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561e:	4b04      	ldr	r3, [pc, #16]	; (8005630 <HAL_RCC_OscConfig+0x784>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800562a:	e050      	b.n	80056ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e04f      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
 8005630:	40021000 	.word	0x40021000
 8005634:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005638:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d144      	bne.n	80056ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005644:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a23      	ldr	r2, [pc, #140]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 800564a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800564e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005650:	4b21      	ldr	r3, [pc, #132]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4a20      	ldr	r2, [pc, #128]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800565a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800565c:	f7fd f886 	bl	800276c <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005664:	f7fd f882 	bl	800276c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e02c      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x7b8>
 8005682:	e024      	b.n	80056ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b0c      	cmp	r3, #12
 8005688:	d01f      	beq.n	80056ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a12      	ldr	r2, [pc, #72]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 8005690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7fd f869 	bl	800276c <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569e:	f7fd f865 	bl	800276c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e00f      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b0:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f0      	bne.n	800569e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	4905      	ldr	r1, [pc, #20]	; (80056d8 <HAL_RCC_OscConfig+0x82c>)
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_RCC_OscConfig+0x830>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	60cb      	str	r3, [r1, #12]
 80056c8:	e001      	b.n	80056ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40021000 	.word	0x40021000
 80056dc:	feeefffc 	.word	0xfeeefffc

080056e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e11d      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f8:	4b90      	ldr	r3, [pc, #576]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d910      	bls.n	8005728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b8d      	ldr	r3, [pc, #564]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 020f 	bic.w	r2, r3, #15
 800570e:	498b      	ldr	r1, [pc, #556]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005716:	4b89      	ldr	r3, [pc, #548]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e105      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d010      	beq.n	8005756 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	4b81      	ldr	r3, [pc, #516]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005740:	429a      	cmp	r2, r3
 8005742:	d908      	bls.n	8005756 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005744:	4b7e      	ldr	r3, [pc, #504]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	497b      	ldr	r1, [pc, #492]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d079      	beq.n	8005856 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b03      	cmp	r3, #3
 8005768:	d11e      	bne.n	80057a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576a:	4b75      	ldr	r3, [pc, #468]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e0dc      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800577a:	f000 fa09 	bl	8005b90 <RCC_GetSysClockFreqFromPLLSource>
 800577e:	4603      	mov	r3, r0
 8005780:	4a70      	ldr	r2, [pc, #448]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d946      	bls.n	8005814 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005786:	4b6e      	ldr	r3, [pc, #440]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d140      	bne.n	8005814 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005792:	4b6b      	ldr	r3, [pc, #428]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579a:	4a69      	ldr	r2, [pc, #420]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e035      	b.n	8005814 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057b0:	4b63      	ldr	r3, [pc, #396]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d115      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0b9      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057c8:	4b5d      	ldr	r3, [pc, #372]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0ad      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057d8:	4b59      	ldr	r3, [pc, #356]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0a5      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80057e8:	f000 f8b4 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 80057ec:	4603      	mov	r3, r0
 80057ee:	4a55      	ldr	r2, [pc, #340]	; (8005944 <HAL_RCC_ClockConfig+0x264>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d90f      	bls.n	8005814 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057f4:	4b52      	ldr	r3, [pc, #328]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005800:	4b4f      	ldr	r3, [pc, #316]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005808:	4a4d      	ldr	r2, [pc, #308]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800580a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005814:	4b4a      	ldr	r3, [pc, #296]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f023 0203 	bic.w	r2, r3, #3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	4947      	ldr	r1, [pc, #284]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005822:	4313      	orrs	r3, r2
 8005824:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005826:	f7fc ffa1 	bl	800276c <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582c:	e00a      	b.n	8005844 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800582e:	f7fc ff9d 	bl	800276c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	; 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e077      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005844:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 020c 	and.w	r2, r3, #12
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	429a      	cmp	r2, r3
 8005854:	d1eb      	bne.n	800582e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b80      	cmp	r3, #128	; 0x80
 800585a:	d105      	bne.n	8005868 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800585c:	4b38      	ldr	r3, [pc, #224]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4a37      	ldr	r2, [pc, #220]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005866:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d010      	beq.n	8005896 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	4b31      	ldr	r3, [pc, #196]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005880:	429a      	cmp	r2, r3
 8005882:	d208      	bcs.n	8005896 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005884:	4b2e      	ldr	r3, [pc, #184]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	492b      	ldr	r1, [pc, #172]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005892:	4313      	orrs	r3, r2
 8005894:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005896:	4b29      	ldr	r3, [pc, #164]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d210      	bcs.n	80058c6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a4:	4b25      	ldr	r3, [pc, #148]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f023 020f 	bic.w	r2, r3, #15
 80058ac:	4923      	ldr	r1, [pc, #140]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b4:	4b21      	ldr	r3, [pc, #132]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d001      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e036      	b.n	8005934 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d2:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	4918      	ldr	r1, [pc, #96]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058f0:	4b13      	ldr	r3, [pc, #76]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4910      	ldr	r1, [pc, #64]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005900:	4313      	orrs	r3, r2
 8005902:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005904:	f000 f826 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	490c      	ldr	r1, [pc, #48]	; (8005948 <HAL_RCC_ClockConfig+0x268>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <HAL_RCC_ClockConfig+0x26c>)
 8005922:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <HAL_RCC_ClockConfig+0x270>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7fc fecf 	bl	80026cc <HAL_InitTick>
 800592e:	4603      	mov	r3, r0
 8005930:	73fb      	strb	r3, [r7, #15]

  return status;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40022000 	.word	0x40022000
 8005940:	40021000 	.word	0x40021000
 8005944:	04c4b400 	.word	0x04c4b400
 8005948:	08008d38 	.word	0x08008d38
 800594c:	20000008 	.word	0x20000008
 8005950:	2000000c 	.word	0x2000000c

08005954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005962:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800596c:	4b3b      	ldr	r3, [pc, #236]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0x34>
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	2b0c      	cmp	r3, #12
 8005980:	d121      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d11e      	bne.n	80059c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005988:	4b34      	ldr	r3, [pc, #208]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005994:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e005      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059a4:	4b2d      	ldr	r3, [pc, #180]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059b0:	4a2b      	ldr	r2, [pc, #172]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10d      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059c4:	e00a      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d102      	bne.n	80059d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e004      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059d8:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80059da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	d134      	bne.n	8005a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059e2:	4b1e      	ldr	r3, [pc, #120]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d003      	beq.n	80059fa <HAL_RCC_GetSysClockFreq+0xa6>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d003      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0xac>
 80059f8:	e005      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80059fa:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80059fc:	617b      	str	r3, [r7, #20]
      break;
 80059fe:	e005      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a02:	617b      	str	r3, [r7, #20]
      break;
 8005a04:	e002      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	617b      	str	r3, [r7, #20]
      break;
 8005a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	3301      	adds	r3, #1
 8005a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a1a:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	fb03 f202 	mul.w	r2, r3, r2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a32:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	0e5b      	lsrs	r3, r3, #25
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	; 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	08008d50 	.word	0x08008d50
 8005a64:	00f42400 	.word	0x00f42400
 8005a68:	007a1200 	.word	0x007a1200

08005a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a72:	681b      	ldr	r3, [r3, #0]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000008 	.word	0x20000008

08005a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a88:	f7ff fff0 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	4904      	ldr	r1, [pc, #16]	; (8005aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a9a:	5ccb      	ldrb	r3, [r1, r3]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	08008d48 	.word	0x08008d48

08005ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ab4:	f7ff ffda 	bl	8005a6c <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	0adb      	lsrs	r3, r3, #11
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4904      	ldr	r1, [pc, #16]	; (8005ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	08008d48 	.word	0x08008d48

08005adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ae8:	4b27      	ldr	r3, [pc, #156]	; (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005af4:	f7ff f906 	bl	8004d04 <HAL_PWREx_GetVoltageRange>
 8005af8:	6178      	str	r0, [r7, #20]
 8005afa:	e014      	b.n	8005b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005afc:	4b22      	ldr	r3, [pc, #136]	; (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b00:	4a21      	ldr	r2, [pc, #132]	; (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b06:	6593      	str	r3, [r2, #88]	; 0x58
 8005b08:	4b1f      	ldr	r3, [pc, #124]	; (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b14:	f7ff f8f6 	bl	8004d04 <HAL_PWREx_GetVoltageRange>
 8005b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b1a:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1e:	4a1a      	ldr	r2, [pc, #104]	; (8005b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b2c:	d10b      	bne.n	8005b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d913      	bls.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2ba0      	cmp	r3, #160	; 0xa0
 8005b38:	d902      	bls.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	e00d      	b.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b40:	2301      	movs	r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
 8005b44:	e00a      	b.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4a:	d902      	bls.n	8005b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	e004      	b.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b70      	cmp	r3, #112	; 0x70
 8005b56:	d101      	bne.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b58:	2301      	movs	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f023 020f 	bic.w	r2, r3, #15
 8005b64:	4909      	ldr	r1, [pc, #36]	; (8005b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b6c:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d001      	beq.n	8005b7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	40022000 	.word	0x40022000

08005b90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b96:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b03      	cmp	r3, #3
 8005ba4:	d00b      	beq.n	8005bbe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d825      	bhi.n	8005bf8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d008      	beq.n	8005bc4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d11f      	bne.n	8005bf8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005bba:	613b      	str	r3, [r7, #16]
    break;
 8005bbc:	e01f      	b.n	8005bfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005bbe:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005bc0:	613b      	str	r3, [r7, #16]
    break;
 8005bc2:	e01c      	b.n	8005bfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bc4:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	e005      	b.n	8005bec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005bec:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf4:	613b      	str	r3, [r7, #16]
    break;
 8005bf6:	e002      	b.n	8005bfe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]
    break;
 8005bfc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	fb03 f202 	mul.w	r2, r3, r2
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c24:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	0e5b      	lsrs	r3, r3, #25
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	3301      	adds	r3, #1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005c3e:	683b      	ldr	r3, [r7, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	00f42400 	.word	0x00f42400
 8005c54:	007a1200 	.word	0x007a1200
 8005c58:	08008d50 	.word	0x08008d50

08005c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c64:	2300      	movs	r3, #0
 8005c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c68:	2300      	movs	r3, #0
 8005c6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d040      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d02a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c80:	2b80      	cmp	r3, #128	; 0x80
 8005c82:	d825      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c84:	2b60      	cmp	r3, #96	; 0x60
 8005c86:	d026      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c88:	2b60      	cmp	r3, #96	; 0x60
 8005c8a:	d821      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d006      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d81d      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d010      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005c9c:	e018      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c9e:	4b89      	ldr	r3, [pc, #548]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	4a88      	ldr	r2, [pc, #544]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005caa:	e015      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fb62 	bl	800637c <RCCEx_PLLSAI1_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cbc:	e00c      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3320      	adds	r3, #32
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fc4d 	bl	8006564 <RCCEx_PLLSAI2_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cce:	e003      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	74fb      	strb	r3, [r7, #19]
      break;
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cde:	4b79      	ldr	r3, [pc, #484]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ce4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cec:	4975      	ldr	r1, [pc, #468]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005cf4:	e001      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf6:	7cfb      	ldrb	r3, [r7, #19]
 8005cf8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d047      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d0e:	d030      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d14:	d82a      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d1a:	d02a      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d20:	d824      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d26:	d008      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d2c:	d81e      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d36:	d010      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d38:	e018      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d3a:	4b62      	ldr	r3, [pc, #392]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	4a61      	ldr	r2, [pc, #388]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d46:	e015      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fb14 	bl	800637c <RCCEx_PLLSAI1_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d58:	e00c      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3320      	adds	r3, #32
 8005d5e:	2100      	movs	r1, #0
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fbff 	bl	8006564 <RCCEx_PLLSAI2_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d6a:	e003      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	74fb      	strb	r3, [r7, #19]
      break;
 8005d70:	e000      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d7a:	4b52      	ldr	r3, [pc, #328]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	494e      	ldr	r1, [pc, #312]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005d90:	e001      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d92:	7cfb      	ldrb	r3, [r7, #19]
 8005d94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 809f 	beq.w	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005da4:	2300      	movs	r3, #0
 8005da6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005da8:	4b46      	ldr	r3, [pc, #280]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005db8:	2300      	movs	r3, #0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc2:	4a40      	ldr	r2, [pc, #256]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8005dca:	4b3e      	ldr	r3, [pc, #248]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	60bb      	str	r3, [r7, #8]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dda:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a3a      	ldr	r2, [pc, #232]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005de6:	f7fc fcc1 	bl	800276c <HAL_GetTick>
 8005dea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dec:	e009      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dee:	f7fc fcbd 	bl	800276c <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d902      	bls.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	74fb      	strb	r3, [r7, #19]
        break;
 8005e00:	e005      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e02:	4b31      	ldr	r3, [pc, #196]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0ef      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005e0e:	7cfb      	ldrb	r3, [r7, #19]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d15b      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e14:	4b2b      	ldr	r3, [pc, #172]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01f      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d019      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e3e:	4b21      	ldr	r3, [pc, #132]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e54:	4a1b      	ldr	r2, [pc, #108]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e5e:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d016      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fc fc7c 	bl	800276c <HAL_GetTick>
 8005e74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e76:	e00b      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e78:	f7fc fc78 	bl	800276c <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d902      	bls.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	74fb      	strb	r3, [r7, #19]
            break;
 8005e8e:	e006      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e90:	4b0c      	ldr	r3, [pc, #48]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0ec      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10c      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005eb4:	4903      	ldr	r1, [pc, #12]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ebe:	7cfb      	ldrb	r3, [r7, #19]
 8005ec0:	74bb      	strb	r3, [r7, #18]
 8005ec2:	e005      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
 8005ece:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ed0:	7c7b      	ldrb	r3, [r7, #17]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d105      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed6:	4ba0      	ldr	r3, [pc, #640]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eda:	4a9f      	ldr	r2, [pc, #636]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eee:	4b9a      	ldr	r3, [pc, #616]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef4:	f023 0203 	bic.w	r2, r3, #3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efc:	4996      	ldr	r1, [pc, #600]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f10:	4b91      	ldr	r3, [pc, #580]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f16:	f023 020c 	bic.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	498e      	ldr	r1, [pc, #568]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f32:	4b89      	ldr	r3, [pc, #548]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f40:	4985      	ldr	r1, [pc, #532]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f54:	4b80      	ldr	r3, [pc, #512]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f62:	497d      	ldr	r1, [pc, #500]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f76:	4b78      	ldr	r3, [pc, #480]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f84:	4974      	ldr	r1, [pc, #464]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f98:	4b6f      	ldr	r3, [pc, #444]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa6:	496c      	ldr	r1, [pc, #432]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fba:	4b67      	ldr	r3, [pc, #412]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc8:	4963      	ldr	r1, [pc, #396]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fdc:	4b5e      	ldr	r3, [pc, #376]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fea:	495b      	ldr	r1, [pc, #364]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ffe:	4b56      	ldr	r3, [pc, #344]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006004:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600c:	4952      	ldr	r1, [pc, #328]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006020:	4b4d      	ldr	r3, [pc, #308]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006026:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	494a      	ldr	r1, [pc, #296]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006030:	4313      	orrs	r3, r2
 8006032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006042:	4b45      	ldr	r3, [pc, #276]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006050:	4941      	ldr	r1, [pc, #260]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006064:	4b3c      	ldr	r3, [pc, #240]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800606a:	f023 0203 	bic.w	r2, r3, #3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006072:	4939      	ldr	r1, [pc, #228]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006074:	4313      	orrs	r3, r2
 8006076:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d028      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006086:	4b34      	ldr	r3, [pc, #208]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006094:	4930      	ldr	r1, [pc, #192]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a4:	d106      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a6:	4b2c      	ldr	r3, [pc, #176]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	4a2b      	ldr	r2, [pc, #172]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060b0:	60d3      	str	r3, [r2, #12]
 80060b2:	e011      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3304      	adds	r3, #4
 80060c2:	2101      	movs	r1, #1
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 f959 	bl	800637c <RCCEx_PLLSAI1_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d04d      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ec:	d108      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80060ee:	4b1a      	ldr	r3, [pc, #104]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060f4:	4a18      	ldr	r2, [pc, #96]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80060fe:	e012      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006100:	4b15      	ldr	r3, [pc, #84]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006106:	4a14      	ldr	r2, [pc, #80]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800610c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006110:	4b11      	ldr	r3, [pc, #68]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006116:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800611e:	490e      	ldr	r1, [pc, #56]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800612a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800612e:	d106      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4a08      	ldr	r2, [pc, #32]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800613a:	60d3      	str	r3, [r2, #12]
 800613c:	e020      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006146:	d109      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006148:	4b03      	ldr	r3, [pc, #12]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	4a02      	ldr	r2, [pc, #8]	; (8006158 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006152:	60d3      	str	r3, [r2, #12]
 8006154:	e014      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006156:	bf00      	nop
 8006158:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006160:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006164:	d10c      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	2101      	movs	r1, #1
 800616c:	4618      	mov	r0, r3
 800616e:	f000 f905 	bl	800637c <RCCEx_PLLSAI1_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006176:	7cfb      	ldrb	r3, [r7, #19]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800617c:	7cfb      	ldrb	r3, [r7, #19]
 800617e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d028      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800618c:	4b7a      	ldr	r3, [pc, #488]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619a:	4977      	ldr	r1, [pc, #476]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061aa:	d106      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ac:	4b72      	ldr	r3, [pc, #456]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4a71      	ldr	r2, [pc, #452]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061b6:	60d3      	str	r3, [r2, #12]
 80061b8:	e011      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061c2:	d10c      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	2101      	movs	r1, #1
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f8d6 	bl	800637c <RCCEx_PLLSAI1_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061d4:	7cfb      	ldrb	r3, [r7, #19]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80061da:	7cfb      	ldrb	r3, [r7, #19]
 80061dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01e      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061ea:	4b63      	ldr	r3, [pc, #396]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061fa:	495f      	ldr	r1, [pc, #380]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800620c:	d10c      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3304      	adds	r3, #4
 8006212:	2102      	movs	r1, #2
 8006214:	4618      	mov	r0, r3
 8006216:	f000 f8b1 	bl	800637c <RCCEx_PLLSAI1_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006224:	7cfb      	ldrb	r3, [r7, #19]
 8006226:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006234:	4b50      	ldr	r3, [pc, #320]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800623a:	f023 0204 	bic.w	r2, r3, #4
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006244:	494c      	ldr	r1, [pc, #304]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006258:	4b47      	ldr	r3, [pc, #284]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800625a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800625e:	f023 0218 	bic.w	r2, r3, #24
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006268:	4943      	ldr	r1, [pc, #268]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d035      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800627c:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a3d      	ldr	r2, [pc, #244]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006288:	f7fc fa70 	bl	800276c <HAL_GetTick>
 800628c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800628e:	e009      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006290:	f7fc fa6c 	bl	800276c <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d902      	bls.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	74fb      	strb	r3, [r7, #19]
        break;
 80062a2:	e005      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062a4:	4b34      	ldr	r3, [pc, #208]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ef      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80062b0:	7cfb      	ldrb	r3, [r7, #19]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d113      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80062b6:	4b30      	ldr	r3, [pc, #192]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c6:	492c      	ldr	r1, [pc, #176]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3320      	adds	r3, #32
 80062d2:	2102      	movs	r1, #2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 f945 	bl	8006564 <RCCEx_PLLSAI2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80062de:	7cfb      	ldrb	r3, [r7, #19]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80062e4:	7cfb      	ldrb	r3, [r7, #19]
 80062e6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01e      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80062f4:	4b20      	ldr	r3, [pc, #128]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006304:	491c      	ldr	r1, [pc, #112]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006316:	d10c      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3320      	adds	r3, #32
 800631c:	2101      	movs	r1, #1
 800631e:	4618      	mov	r0, r3
 8006320:	f000 f920 	bl	8006564 <RCCEx_PLLSAI2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006328:	7cfb      	ldrb	r3, [r7, #19]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800632e:	7cfb      	ldrb	r3, [r7, #19]
 8006330:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d017      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800633e:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006340:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800634e:	490a      	ldr	r1, [pc, #40]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800635c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006360:	d105      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006362:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	4a04      	ldr	r2, [pc, #16]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800636c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800636e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40021000 	.word	0x40021000

0800637c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800638a:	4b72      	ldr	r3, [pc, #456]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00e      	beq.n	80063b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006396:	4b6f      	ldr	r3, [pc, #444]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0203 	and.w	r2, r3, #3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d103      	bne.n	80063ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
       ||
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d142      	bne.n	8006434 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	73fb      	strb	r3, [r7, #15]
 80063b2:	e03f      	b.n	8006434 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d018      	beq.n	80063ee <RCCEx_PLLSAI1_Config+0x72>
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d825      	bhi.n	800640c <RCCEx_PLLSAI1_Config+0x90>
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d002      	beq.n	80063ca <RCCEx_PLLSAI1_Config+0x4e>
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d009      	beq.n	80063dc <RCCEx_PLLSAI1_Config+0x60>
 80063c8:	e020      	b.n	800640c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063ca:	4b62      	ldr	r3, [pc, #392]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d11d      	bne.n	8006412 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063da:	e01a      	b.n	8006412 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063dc:	4b5d      	ldr	r3, [pc, #372]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d116      	bne.n	8006416 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ec:	e013      	b.n	8006416 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063ee:	4b59      	ldr	r3, [pc, #356]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063fa:	4b56      	ldr	r3, [pc, #344]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800640a:	e006      	b.n	800641a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]
      break;
 8006410:	e004      	b.n	800641c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800641a:	bf00      	nop
    }

    if(status == HAL_OK)
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d108      	bne.n	8006434 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006422:	4b4c      	ldr	r3, [pc, #304]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f023 0203 	bic.w	r2, r3, #3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4949      	ldr	r1, [pc, #292]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006430:	4313      	orrs	r3, r2
 8006432:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 8086 	bne.w	8006548 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800643c:	4b45      	ldr	r3, [pc, #276]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a44      	ldr	r2, [pc, #272]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006448:	f7fc f990 	bl	800276c <HAL_GetTick>
 800644c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800644e:	e009      	b.n	8006464 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006450:	f7fc f98c 	bl	800276c <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d902      	bls.n	8006464 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	73fb      	strb	r3, [r7, #15]
        break;
 8006462:	e005      	b.n	8006470 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006464:	4b3b      	ldr	r3, [pc, #236]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1ef      	bne.n	8006450 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d168      	bne.n	8006548 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d113      	bne.n	80064a4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800647c:	4b35      	ldr	r3, [pc, #212]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	4b35      	ldr	r3, [pc, #212]	; (8006558 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006482:	4013      	ands	r3, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6892      	ldr	r2, [r2, #8]
 8006488:	0211      	lsls	r1, r2, #8
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68d2      	ldr	r2, [r2, #12]
 800648e:	06d2      	lsls	r2, r2, #27
 8006490:	4311      	orrs	r1, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6852      	ldr	r2, [r2, #4]
 8006496:	3a01      	subs	r2, #1
 8006498:	0112      	lsls	r2, r2, #4
 800649a:	430a      	orrs	r2, r1
 800649c:	492d      	ldr	r1, [pc, #180]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	610b      	str	r3, [r1, #16]
 80064a2:	e02d      	b.n	8006500 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d115      	bne.n	80064d6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064aa:	4b2a      	ldr	r3, [pc, #168]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	4b2b      	ldr	r3, [pc, #172]	; (800655c <RCCEx_PLLSAI1_Config+0x1e0>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6892      	ldr	r2, [r2, #8]
 80064b6:	0211      	lsls	r1, r2, #8
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6912      	ldr	r2, [r2, #16]
 80064bc:	0852      	lsrs	r2, r2, #1
 80064be:	3a01      	subs	r2, #1
 80064c0:	0552      	lsls	r2, r2, #21
 80064c2:	4311      	orrs	r1, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6852      	ldr	r2, [r2, #4]
 80064c8:	3a01      	subs	r2, #1
 80064ca:	0112      	lsls	r2, r2, #4
 80064cc:	430a      	orrs	r2, r1
 80064ce:	4921      	ldr	r1, [pc, #132]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	610b      	str	r3, [r1, #16]
 80064d4:	e014      	b.n	8006500 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064d6:	4b1f      	ldr	r3, [pc, #124]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	4b21      	ldr	r3, [pc, #132]	; (8006560 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064dc:	4013      	ands	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6892      	ldr	r2, [r2, #8]
 80064e2:	0211      	lsls	r1, r2, #8
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6952      	ldr	r2, [r2, #20]
 80064e8:	0852      	lsrs	r2, r2, #1
 80064ea:	3a01      	subs	r2, #1
 80064ec:	0652      	lsls	r2, r2, #25
 80064ee:	4311      	orrs	r1, r2
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6852      	ldr	r2, [r2, #4]
 80064f4:	3a01      	subs	r2, #1
 80064f6:	0112      	lsls	r2, r2, #4
 80064f8:	430a      	orrs	r2, r1
 80064fa:	4916      	ldr	r1, [pc, #88]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006500:	4b14      	ldr	r3, [pc, #80]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a13      	ldr	r2, [pc, #76]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800650a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650c:	f7fc f92e 	bl	800276c <HAL_GetTick>
 8006510:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006512:	e009      	b.n	8006528 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006514:	f7fc f92a 	bl	800276c <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d902      	bls.n	8006528 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	73fb      	strb	r3, [r7, #15]
          break;
 8006526:	e005      	b.n	8006534 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0ef      	beq.n	8006514 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	4904      	ldr	r1, [pc, #16]	; (8006554 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006544:	4313      	orrs	r3, r2
 8006546:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40021000 	.word	0x40021000
 8006558:	07ff800f 	.word	0x07ff800f
 800655c:	ff9f800f 	.word	0xff9f800f
 8006560:	f9ff800f 	.word	0xf9ff800f

08006564 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006572:	4b72      	ldr	r3, [pc, #456]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00e      	beq.n	800659c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800657e:	4b6f      	ldr	r3, [pc, #444]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f003 0203 	and.w	r2, r3, #3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d103      	bne.n	8006596 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
       ||
 8006592:	2b00      	cmp	r3, #0
 8006594:	d142      	bne.n	800661c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	73fb      	strb	r3, [r7, #15]
 800659a:	e03f      	b.n	800661c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d018      	beq.n	80065d6 <RCCEx_PLLSAI2_Config+0x72>
 80065a4:	2b03      	cmp	r3, #3
 80065a6:	d825      	bhi.n	80065f4 <RCCEx_PLLSAI2_Config+0x90>
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d002      	beq.n	80065b2 <RCCEx_PLLSAI2_Config+0x4e>
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d009      	beq.n	80065c4 <RCCEx_PLLSAI2_Config+0x60>
 80065b0:	e020      	b.n	80065f4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065b2:	4b62      	ldr	r3, [pc, #392]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d11d      	bne.n	80065fa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065c2:	e01a      	b.n	80065fa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065c4:	4b5d      	ldr	r3, [pc, #372]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d116      	bne.n	80065fe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065d4:	e013      	b.n	80065fe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065d6:	4b59      	ldr	r3, [pc, #356]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10f      	bne.n	8006602 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065e2:	4b56      	ldr	r3, [pc, #344]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d109      	bne.n	8006602 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065f2:	e006      	b.n	8006602 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
      break;
 80065f8:	e004      	b.n	8006604 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80065fa:	bf00      	nop
 80065fc:	e002      	b.n	8006604 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006602:	bf00      	nop
    }

    if(status == HAL_OK)
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d108      	bne.n	800661c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800660a:	4b4c      	ldr	r3, [pc, #304]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f023 0203 	bic.w	r2, r3, #3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4949      	ldr	r1, [pc, #292]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006618:	4313      	orrs	r3, r2
 800661a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800661c:	7bfb      	ldrb	r3, [r7, #15]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f040 8086 	bne.w	8006730 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006624:	4b45      	ldr	r3, [pc, #276]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a44      	ldr	r2, [pc, #272]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 800662a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800662e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006630:	f7fc f89c 	bl	800276c <HAL_GetTick>
 8006634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006636:	e009      	b.n	800664c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006638:	f7fc f898 	bl	800276c <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d902      	bls.n	800664c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	73fb      	strb	r3, [r7, #15]
        break;
 800664a:	e005      	b.n	8006658 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800664c:	4b3b      	ldr	r3, [pc, #236]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1ef      	bne.n	8006638 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d168      	bne.n	8006730 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d113      	bne.n	800668c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006664:	4b35      	ldr	r3, [pc, #212]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006666:	695a      	ldr	r2, [r3, #20]
 8006668:	4b35      	ldr	r3, [pc, #212]	; (8006740 <RCCEx_PLLSAI2_Config+0x1dc>)
 800666a:	4013      	ands	r3, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6892      	ldr	r2, [r2, #8]
 8006670:	0211      	lsls	r1, r2, #8
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68d2      	ldr	r2, [r2, #12]
 8006676:	06d2      	lsls	r2, r2, #27
 8006678:	4311      	orrs	r1, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6852      	ldr	r2, [r2, #4]
 800667e:	3a01      	subs	r2, #1
 8006680:	0112      	lsls	r2, r2, #4
 8006682:	430a      	orrs	r2, r1
 8006684:	492d      	ldr	r1, [pc, #180]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006686:	4313      	orrs	r3, r2
 8006688:	614b      	str	r3, [r1, #20]
 800668a:	e02d      	b.n	80066e8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d115      	bne.n	80066be <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006692:	4b2a      	ldr	r3, [pc, #168]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006694:	695a      	ldr	r2, [r3, #20]
 8006696:	4b2b      	ldr	r3, [pc, #172]	; (8006744 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006698:	4013      	ands	r3, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6892      	ldr	r2, [r2, #8]
 800669e:	0211      	lsls	r1, r2, #8
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6912      	ldr	r2, [r2, #16]
 80066a4:	0852      	lsrs	r2, r2, #1
 80066a6:	3a01      	subs	r2, #1
 80066a8:	0552      	lsls	r2, r2, #21
 80066aa:	4311      	orrs	r1, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6852      	ldr	r2, [r2, #4]
 80066b0:	3a01      	subs	r2, #1
 80066b2:	0112      	lsls	r2, r2, #4
 80066b4:	430a      	orrs	r2, r1
 80066b6:	4921      	ldr	r1, [pc, #132]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	614b      	str	r3, [r1, #20]
 80066bc:	e014      	b.n	80066e8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066be:	4b1f      	ldr	r3, [pc, #124]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066c0:	695a      	ldr	r2, [r3, #20]
 80066c2:	4b21      	ldr	r3, [pc, #132]	; (8006748 <RCCEx_PLLSAI2_Config+0x1e4>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6892      	ldr	r2, [r2, #8]
 80066ca:	0211      	lsls	r1, r2, #8
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6952      	ldr	r2, [r2, #20]
 80066d0:	0852      	lsrs	r2, r2, #1
 80066d2:	3a01      	subs	r2, #1
 80066d4:	0652      	lsls	r2, r2, #25
 80066d6:	4311      	orrs	r1, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6852      	ldr	r2, [r2, #4]
 80066dc:	3a01      	subs	r2, #1
 80066de:	0112      	lsls	r2, r2, #4
 80066e0:	430a      	orrs	r2, r1
 80066e2:	4916      	ldr	r1, [pc, #88]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066e8:	4b14      	ldr	r3, [pc, #80]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a13      	ldr	r2, [pc, #76]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f4:	f7fc f83a 	bl	800276c <HAL_GetTick>
 80066f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066fa:	e009      	b.n	8006710 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066fc:	f7fc f836 	bl	800276c <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d902      	bls.n	8006710 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	73fb      	strb	r3, [r7, #15]
          break;
 800670e:	e005      	b.n	800671c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0ef      	beq.n	80066fc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	4904      	ldr	r1, [pc, #16]	; (800673c <RCCEx_PLLSAI2_Config+0x1d8>)
 800672c:	4313      	orrs	r3, r2
 800672e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40021000 	.word	0x40021000
 8006740:	07ff800f 	.word	0x07ff800f
 8006744:	ff9f800f 	.word	0xff9f800f
 8006748:	f9ff800f 	.word	0xf9ff800f

0800674c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e095      	b.n	800688a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	2b00      	cmp	r3, #0
 8006764:	d108      	bne.n	8006778 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800676e:	d009      	beq.n	8006784 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	61da      	str	r2, [r3, #28]
 8006776:	e005      	b.n	8006784 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fb fd78 	bl	8002294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067c4:	d902      	bls.n	80067cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	e002      	b.n	80067d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067da:	d007      	beq.n	80067ec <HAL_SPI_Init+0xa0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067e4:	d002      	beq.n	80067ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682e:	ea42 0103 	orr.w	r1, r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	0c1b      	lsrs	r3, r3, #16
 8006848:	f003 0204 	and.w	r2, r3, #4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	431a      	orrs	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006868:	ea42 0103 	orr.w	r1, r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b088      	sub	sp, #32
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	603b      	str	r3, [r7, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_SPI_Transmit+0x22>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e15f      	b.n	8006b74 <HAL_SPI_Transmit+0x2e2>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068bc:	f7fb ff56 	bl	800276c <HAL_GetTick>
 80068c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d002      	beq.n	80068d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068d2:	2302      	movs	r3, #2
 80068d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068d6:	e148      	b.n	8006b6a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_SPI_Transmit+0x52>
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068e8:	e13f      	b.n	8006b6a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2203      	movs	r2, #3
 80068ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	88fa      	ldrh	r2, [r7, #6]
 8006902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	88fa      	ldrh	r2, [r7, #6]
 8006908:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006934:	d10f      	bne.n	8006956 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006944:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006954:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d007      	beq.n	8006974 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006972:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800697c:	d94f      	bls.n	8006a1e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_SPI_Transmit+0xfa>
 8006986:	8afb      	ldrh	r3, [r7, #22]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d142      	bne.n	8006a12 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	881a      	ldrh	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	1c9a      	adds	r2, r3, #2
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069b0:	e02f      	b.n	8006a12 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d112      	bne.n	80069e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	881a      	ldrh	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	1c9a      	adds	r2, r3, #2
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069e4:	e015      	b.n	8006a12 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e6:	f7fb fec1 	bl	800276c <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d803      	bhi.n	80069fe <HAL_SPI_Transmit+0x16c>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fc:	d102      	bne.n	8006a04 <HAL_SPI_Transmit+0x172>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006a10:	e0ab      	b.n	8006b6a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1ca      	bne.n	80069b2 <HAL_SPI_Transmit+0x120>
 8006a1c:	e080      	b.n	8006b20 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <HAL_SPI_Transmit+0x19a>
 8006a26:	8afb      	ldrh	r3, [r7, #22]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d174      	bne.n	8006b16 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d912      	bls.n	8006a5c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	1c9a      	adds	r2, r3, #2
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b02      	subs	r3, #2
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a5a:	e05c      	b.n	8006b16 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	7812      	ldrb	r2, [r2, #0]
 8006a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a82:	e048      	b.n	8006b16 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d12b      	bne.n	8006aea <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d912      	bls.n	8006ac2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	881a      	ldrh	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	1c9a      	adds	r2, r3, #2
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b02      	subs	r3, #2
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ac0:	e029      	b.n	8006b16 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	7812      	ldrb	r2, [r2, #0]
 8006ace:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ae8:	e015      	b.n	8006b16 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aea:	f7fb fe3f 	bl	800276c <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d803      	bhi.n	8006b02 <HAL_SPI_Transmit+0x270>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d102      	bne.n	8006b08 <HAL_SPI_Transmit+0x276>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d106      	bne.n	8006b16 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006b14:	e029      	b.n	8006b6a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1b1      	bne.n	8006a84 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f001 f8cb 	bl	8007cc0 <SPI_EndRxTxTransaction>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	77fb      	strb	r3, [r7, #31]
 8006b60:	e003      	b.n	8006b6a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d002      	beq.n	8006ba2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ba0:	e11a      	b.n	8006dd8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006baa:	d112      	bne.n	8006bd2 <HAL_SPI_Receive+0x56>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10e      	bne.n	8006bd2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bbc:	88fa      	ldrh	r2, [r7, #6]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f90e 	bl	8006dea <HAL_SPI_TransmitReceive>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	e107      	b.n	8006de2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_SPI_Receive+0x64>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e100      	b.n	8006de2 <HAL_SPI_Receive+0x266>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006be8:	f7fb fdc0 	bl	800276c <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <HAL_SPI_Receive+0x7e>
 8006bf4:	88fb      	ldrh	r3, [r7, #6]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bfe:	e0eb      	b.n	8006dd8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2204      	movs	r2, #4
 8006c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c4a:	d908      	bls.n	8006c5e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c5a:	605a      	str	r2, [r3, #4]
 8006c5c:	e007      	b.n	8006c6e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c6c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c76:	d10f      	bne.n	8006c98 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d007      	beq.n	8006cb6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cbe:	d86f      	bhi.n	8006da0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cc0:	e034      	b.n	8006d2c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d117      	bne.n	8006d00 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f103 020c 	add.w	r2, r3, #12
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	7812      	ldrb	r2, [r2, #0]
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006cfe:	e015      	b.n	8006d2c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d00:	f7fb fd34 	bl	800276c <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d803      	bhi.n	8006d18 <HAL_SPI_Receive+0x19c>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d16:	d102      	bne.n	8006d1e <HAL_SPI_Receive+0x1a2>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d2a:	e055      	b.n	8006dd8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1c4      	bne.n	8006cc2 <HAL_SPI_Receive+0x146>
 8006d38:	e038      	b.n	8006dac <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d115      	bne.n	8006d74 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	b292      	uxth	r2, r2
 8006d54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	1c9a      	adds	r2, r3, #2
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d72:	e015      	b.n	8006da0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d74:	f7fb fcfa 	bl	800276c <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d803      	bhi.n	8006d8c <HAL_SPI_Receive+0x210>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8a:	d102      	bne.n	8006d92 <HAL_SPI_Receive+0x216>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d9e:	e01b      	b.n	8006dd8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1c6      	bne.n	8006d3a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 ff2d 	bl	8007c10 <SPI_EndRxTransaction>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
 8006dce:	e003      	b.n	8006dd8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b08a      	sub	sp, #40	; 0x28
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
 8006df6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_SPI_TransmitReceive+0x26>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e20a      	b.n	8007226 <HAL_SPI_TransmitReceive+0x43c>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e18:	f7fb fca8 	bl	800276c <HAL_GetTick>
 8006e1c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e24:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e2c:	887b      	ldrh	r3, [r7, #2]
 8006e2e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e30:	887b      	ldrh	r3, [r7, #2]
 8006e32:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e34:	7efb      	ldrb	r3, [r7, #27]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d00e      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x6e>
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e40:	d106      	bne.n	8006e50 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <HAL_SPI_TransmitReceive+0x66>
 8006e4a:	7efb      	ldrb	r3, [r7, #27]
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d003      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e56:	e1e0      	b.n	800721a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <HAL_SPI_TransmitReceive+0x80>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HAL_SPI_TransmitReceive+0x80>
 8006e64:	887b      	ldrh	r3, [r7, #2]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e70:	e1d3      	b.n	800721a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d003      	beq.n	8006e86 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2205      	movs	r2, #5
 8006e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	887a      	ldrh	r2, [r7, #2]
 8006e96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	887a      	ldrh	r2, [r7, #2]
 8006e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	887a      	ldrh	r2, [r7, #2]
 8006eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	887a      	ldrh	r2, [r7, #2]
 8006eb2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ec8:	d802      	bhi.n	8006ed0 <HAL_SPI_TransmitReceive+0xe6>
 8006eca:	8a3b      	ldrh	r3, [r7, #16]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d908      	bls.n	8006ee2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ede:	605a      	str	r2, [r3, #4]
 8006ee0:	e007      	b.n	8006ef2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ef0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d007      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f18:	f240 8081 	bls.w	800701e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <HAL_SPI_TransmitReceive+0x140>
 8006f24:	8a7b      	ldrh	r3, [r7, #18]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d16d      	bne.n	8007006 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2e:	881a      	ldrh	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	1c9a      	adds	r2, r3, #2
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f4e:	e05a      	b.n	8007006 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d11b      	bne.n	8006f96 <HAL_SPI_TransmitReceive+0x1ac>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d016      	beq.n	8006f96 <HAL_SPI_TransmitReceive+0x1ac>
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d113      	bne.n	8006f96 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	881a      	ldrh	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	1c9a      	adds	r2, r3, #2
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d11c      	bne.n	8006fde <HAL_SPI_TransmitReceive+0x1f4>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d016      	beq.n	8006fde <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	b292      	uxth	r2, r2
 8006fbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	1c9a      	adds	r2, r3, #2
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fde:	f7fb fbc5 	bl	800276c <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d80b      	bhi.n	8007006 <HAL_SPI_TransmitReceive+0x21c>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d007      	beq.n	8007006 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007004:	e109      	b.n	800721a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d19f      	bne.n	8006f50 <HAL_SPI_TransmitReceive+0x166>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d199      	bne.n	8006f50 <HAL_SPI_TransmitReceive+0x166>
 800701c:	e0e3      	b.n	80071e6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_SPI_TransmitReceive+0x244>
 8007026:	8a7b      	ldrh	r3, [r7, #18]
 8007028:	2b01      	cmp	r3, #1
 800702a:	f040 80cf 	bne.w	80071cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	d912      	bls.n	800705e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	881a      	ldrh	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	1c9a      	adds	r2, r3, #2
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b02      	subs	r3, #2
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800705c:	e0b6      	b.n	80071cc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	7812      	ldrb	r2, [r2, #0]
 800706a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007084:	e0a2      	b.n	80071cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d134      	bne.n	80070fe <HAL_SPI_TransmitReceive+0x314>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d02f      	beq.n	80070fe <HAL_SPI_TransmitReceive+0x314>
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d12c      	bne.n	80070fe <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d912      	bls.n	80070d4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	881a      	ldrh	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	1c9a      	adds	r2, r3, #2
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b02      	subs	r3, #2
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070d2:	e012      	b.n	80070fa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	3b01      	subs	r3, #1
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b01      	cmp	r3, #1
 800710a:	d148      	bne.n	800719e <HAL_SPI_TransmitReceive+0x3b4>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d042      	beq.n	800719e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b01      	cmp	r3, #1
 8007122:	d923      	bls.n	800716c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	b292      	uxth	r2, r2
 8007130:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	1c9a      	adds	r2, r3, #2
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b02      	subs	r3, #2
 8007146:	b29a      	uxth	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	d81f      	bhi.n	800719a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	e016      	b.n	800719a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f103 020c 	add.w	r2, r3, #12
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	7812      	ldrb	r2, [r2, #0]
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800719a:	2301      	movs	r3, #1
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800719e:	f7fb fae5 	bl	800276c <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d803      	bhi.n	80071b6 <HAL_SPI_TransmitReceive+0x3cc>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d102      	bne.n	80071bc <HAL_SPI_TransmitReceive+0x3d2>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d107      	bne.n	80071cc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80071ca:	e026      	b.n	800721a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f47f af57 	bne.w	8007086 <HAL_SPI_TransmitReceive+0x29c>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f47f af50 	bne.w	8007086 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 fd68 	bl	8007cc0 <SPI_EndRxTxTransaction>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007210:	e003      	b.n	800721a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007226:	4618      	mov	r0, r3
 8007228:	3728      	adds	r7, #40	; 0x28
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b01      	cmp	r3, #1
 800724c:	d002      	beq.n	8007254 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800724e:	2302      	movs	r3, #2
 8007250:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007252:	e092      	b.n	800737a <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d110      	bne.n	800727e <HAL_SPI_Receive_IT+0x4e>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007264:	d10b      	bne.n	800727e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2204      	movs	r2, #4
 800726a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f889 	bl	800738c <HAL_SPI_TransmitReceive_IT>
 800727a:	4603      	mov	r3, r0
 800727c:	e07e      	b.n	800737c <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_SPI_Receive_IT+0x5a>
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d102      	bne.n	8007290 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800728e:	e074      	b.n	800737a <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_SPI_Receive_IT+0x6e>
 800729a:	2302      	movs	r3, #2
 800729c:	e06e      	b.n	800737c <HAL_SPI_Receive_IT+0x14c>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2204      	movs	r2, #4
 80072aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072ea:	d90b      	bls.n	8007304 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072fa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a21      	ldr	r2, [pc, #132]	; (8007384 <HAL_SPI_Receive_IT+0x154>)
 8007300:	64da      	str	r2, [r3, #76]	; 0x4c
 8007302:	e00a      	b.n	800731a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007312:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4a1c      	ldr	r2, [pc, #112]	; (8007388 <HAL_SPI_Receive_IT+0x158>)
 8007318:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007322:	d10f      	bne.n	8007344 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007332:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007342:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d007      	beq.n	8007362 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007360:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007378:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800737a:	7dfb      	ldrb	r3, [r7, #23]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	08007989 	.word	0x08007989
 8007388:	08007939 	.word	0x08007939

0800738c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073a4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073ac:	7dbb      	ldrb	r3, [r7, #22]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d00d      	beq.n	80073ce <HAL_SPI_TransmitReceive_IT+0x42>
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b8:	d106      	bne.n	80073c8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <HAL_SPI_TransmitReceive_IT+0x3c>
 80073c2:	7dbb      	ldrb	r3, [r7, #22]
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d002      	beq.n	80073ce <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80073c8:	2302      	movs	r3, #2
 80073ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073cc:	e07d      	b.n	80074ca <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <HAL_SPI_TransmitReceive_IT+0x54>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <HAL_SPI_TransmitReceive_IT+0x54>
 80073da:	887b      	ldrh	r3, [r7, #2]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073e4:	e071      	b.n	80074ca <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_SPI_TransmitReceive_IT+0x68>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e06b      	b.n	80074cc <HAL_SPI_TransmitReceive_IT+0x140>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b04      	cmp	r3, #4
 8007406:	d003      	beq.n	8007410 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2205      	movs	r2, #5
 800740c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	887a      	ldrh	r2, [r7, #2]
 8007420:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	887a      	ldrh	r2, [r7, #2]
 8007426:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	887a      	ldrh	r2, [r7, #2]
 8007432:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	887a      	ldrh	r2, [r7, #2]
 800743a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007446:	d906      	bls.n	8007456 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a23      	ldr	r2, [pc, #140]	; (80074d8 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800744c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4a22      	ldr	r2, [pc, #136]	; (80074dc <HAL_SPI_TransmitReceive_IT+0x150>)
 8007452:	651a      	str	r2, [r3, #80]	; 0x50
 8007454:	e005      	b.n	8007462 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a21      	ldr	r2, [pc, #132]	; (80074e0 <HAL_SPI_TransmitReceive_IT+0x154>)
 800745a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4a21      	ldr	r2, [pc, #132]	; (80074e4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007460:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800746a:	d802      	bhi.n	8007472 <HAL_SPI_TransmitReceive_IT+0xe6>
 800746c:	887b      	ldrh	r3, [r7, #2]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d908      	bls.n	8007484 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007480:	605a      	str	r2, [r3, #4]
 8007482:	e007      	b.n	8007494 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007492:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d007      	beq.n	80074b2 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80074c8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	08007873 	.word	0x08007873
 80074dc:	080078d9 	.word	0x080078d9
 80074e0:	08007723 	.word	0x08007723
 80074e4:	080077e1 	.word	0x080077e1

080074e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10e      	bne.n	8007528 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d004      	beq.n	8007528 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
    return;
 8007526:	e0ce      	b.n	80076c6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <HAL_SPI_IRQHandler+0x5e>
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007538:	2b00      	cmp	r3, #0
 800753a:	d004      	beq.n	8007546 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
    return;
 8007544:	e0bf      	b.n	80076c6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <HAL_SPI_IRQHandler+0x7e>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d105      	bne.n	8007566 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80b0 	beq.w	80076c6 <HAL_SPI_IRQHandler+0x1de>
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80aa 	beq.w	80076c6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d023      	beq.n	80075c4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b03      	cmp	r3, #3
 8007586:	d011      	beq.n	80075ac <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758c:	f043 0204 	orr.w	r2, r3, #4
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	e00b      	b.n	80075c4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075ac:	2300      	movs	r3, #0
 80075ae:	613b      	str	r3, [r7, #16]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	693b      	ldr	r3, [r7, #16]
        return;
 80075c2:	e080      	b.n	80076c6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d014      	beq.n	80075f8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d2:	f043 0201 	orr.w	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00c      	beq.n	800761c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007606:	f043 0208 	orr.w	r2, r3, #8
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800760e:	2300      	movs	r3, #0
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007620:	2b00      	cmp	r3, #0
 8007622:	d04f      	beq.n	80076c4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007632:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d104      	bne.n	8007650 <HAL_SPI_IRQHandler+0x168>
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d034      	beq.n	80076ba <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0203 	bic.w	r2, r2, #3
 800765e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007664:	2b00      	cmp	r3, #0
 8007666:	d011      	beq.n	800768c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	4a17      	ldr	r2, [pc, #92]	; (80076cc <HAL_SPI_IRQHandler+0x1e4>)
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007674:	4618      	mov	r0, r3
 8007676:	f7fb f9ba 	bl	80029ee <HAL_DMA_Abort_IT>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007690:	2b00      	cmp	r3, #0
 8007692:	d016      	beq.n	80076c2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007698:	4a0c      	ldr	r2, [pc, #48]	; (80076cc <HAL_SPI_IRQHandler+0x1e4>)
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fb f9a4 	bl	80029ee <HAL_DMA_Abort_IT>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80076b8:	e003      	b.n	80076c2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f812 	bl	80076e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80076c0:	e000      	b.n	80076c4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80076c2:	bf00      	nop
    return;
 80076c4:	bf00      	nop
  }
}
 80076c6:	3720      	adds	r7, #32
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	080076f9 	.word	0x080076f9

080076d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7ff ffe5 	bl	80076e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b01      	cmp	r3, #1
 8007734:	d923      	bls.n	800777e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007740:	b292      	uxth	r2, r2
 8007742:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	1c9a      	adds	r2, r3, #2
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b02      	subs	r3, #2
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b01      	cmp	r3, #1
 800776a:	d11f      	bne.n	80077ac <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800777a:	605a      	str	r2, [r3, #4]
 800777c:	e016      	b.n	80077ac <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f103 020c 	add.w	r2, r3, #12
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10f      	bne.n	80077d8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80077c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d102      	bne.n	80077d8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 faba 	bl	8007d4c <SPI_CloseRxTx_ISR>
    }
  }
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d912      	bls.n	8007818 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	881a      	ldrh	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	1c9a      	adds	r2, r3, #2
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b02      	subs	r3, #2
 8007810:	b29a      	uxth	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007816:	e012      	b.n	800783e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	7812      	ldrb	r2, [r2, #0]
 8007824:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007834:	b29b      	uxth	r3, r3
 8007836:	3b01      	subs	r3, #1
 8007838:	b29a      	uxth	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007842:	b29b      	uxth	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d110      	bne.n	800786a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007856:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d102      	bne.n	800786a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fa71 	bl	8007d4c <SPI_CloseRxTx_ISR>
    }
  }
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68da      	ldr	r2, [r3, #12]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	b292      	uxth	r2, r2
 8007886:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	1c9a      	adds	r2, r3, #2
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10f      	bne.n	80078d0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d102      	bne.n	80078d0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa3e 	bl	8007d4c <SPI_CloseRxTx_ISR>
    }
  }
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	881a      	ldrh	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	1c9a      	adds	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29a      	uxth	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d110      	bne.n	8007930 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800791c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d102      	bne.n	8007930 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa0e 	bl	8007d4c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f103 020c 	add.w	r2, r3, #12
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d102      	bne.n	8007980 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa28 	bl	8007dd0 <SPI_CloseRx_ISR>
  }
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	b292      	uxth	r2, r2
 800799c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	1c9a      	adds	r2, r3, #2
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa02 	bl	8007dd0 <SPI_CloseRx_ISR>
  }
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079e4:	f7fa fec2 	bl	800276c <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	1a9b      	subs	r3, r3, r2
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4413      	add	r3, r2
 80079f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079f4:	f7fa feba 	bl	800276c <HAL_GetTick>
 80079f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079fa:	4b39      	ldr	r3, [pc, #228]	; (8007ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	015b      	lsls	r3, r3, #5
 8007a00:	0d1b      	lsrs	r3, r3, #20
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	fb02 f303 	mul.w	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a0a:	e054      	b.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d050      	beq.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a14:	f7fa feaa 	bl	800276c <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d902      	bls.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d13d      	bne.n	8007aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a42:	d111      	bne.n	8007a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4c:	d004      	beq.n	8007a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a56:	d107      	bne.n	8007a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a70:	d10f      	bne.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e017      	b.n	8007ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2301      	moveq	r3, #1
 8007ac8:	2300      	movne	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d19b      	bne.n	8007a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3720      	adds	r7, #32
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000008 	.word	0x20000008

08007ae4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	; 0x28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007af6:	f7fa fe39 	bl	800276c <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	1a9b      	subs	r3, r3, r2
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	4413      	add	r3, r2
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007b06:	f7fa fe31 	bl	800276c <HAL_GetTick>
 8007b0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b14:	4b3d      	ldr	r3, [pc, #244]	; (8007c0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	00da      	lsls	r2, r3, #3
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	0d1b      	lsrs	r3, r3, #20
 8007b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b26:	fb02 f303 	mul.w	r3, r2, r3
 8007b2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b2c:	e060      	b.n	8007bf0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b34:	d107      	bne.n	8007b46 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d104      	bne.n	8007b46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d050      	beq.n	8007bf0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b4e:	f7fa fe0d 	bl	800276c <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d902      	bls.n	8007b64 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d13d      	bne.n	8007be0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b7c:	d111      	bne.n	8007ba2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b86:	d004      	beq.n	8007b92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b90:	d107      	bne.n	8007ba2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007baa:	d10f      	bne.n	8007bcc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e010      	b.n	8007c02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689a      	ldr	r2, [r3, #8]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d196      	bne.n	8007b2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3728      	adds	r7, #40	; 0x28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000008 	.word	0x20000008

08007c10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c24:	d111      	bne.n	8007c4a <SPI_EndRxTransaction+0x3a>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c2e:	d004      	beq.n	8007c3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c38:	d107      	bne.n	8007c4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c48:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2200      	movs	r2, #0
 8007c52:	2180      	movs	r1, #128	; 0x80
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff febd 	bl	80079d4 <SPI_WaitFlagStateUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c64:	f043 0220 	orr.w	r2, r3, #32
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e023      	b.n	8007cb8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c78:	d11d      	bne.n	8007cb6 <SPI_EndRxTransaction+0xa6>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c82:	d004      	beq.n	8007c8e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c8c:	d113      	bne.n	8007cb6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff ff22 	bl	8007ae4 <SPI_WaitFifoStateUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007caa:	f043 0220 	orr.w	r2, r3, #32
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e000      	b.n	8007cb8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7ff ff03 	bl	8007ae4 <SPI_WaitFifoStateUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d007      	beq.n	8007cf4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce8:	f043 0220 	orr.w	r2, r3, #32
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e027      	b.n	8007d44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2180      	movs	r1, #128	; 0x80
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff fe68 	bl	80079d4 <SPI_WaitFlagStateUntilTimeout>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d007      	beq.n	8007d1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d0e:	f043 0220 	orr.w	r2, r3, #32
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e014      	b.n	8007d44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f7ff fedc 	bl	8007ae4 <SPI_WaitFifoStateUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e000      	b.n	8007d44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d54:	f7fa fd0a 	bl	800276c <HAL_GetTick>
 8007d58:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0220 	bic.w	r2, r2, #32
 8007d68:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	2164      	movs	r1, #100	; 0x64
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff ffa6 	bl	8007cc0 <SPI_EndRxTxTransaction>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7e:	f043 0220 	orr.w	r2, r3, #32
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d115      	bne.n	8007dba <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d107      	bne.n	8007daa <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7f9 fe1a 	bl	80019dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007da8:	e00e      	b.n	8007dc8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff fc8c 	bl	80076d0 <HAL_SPI_TxRxCpltCallback>
}
 8007db8:	e006      	b.n	8007dc8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff fc8e 	bl	80076e4 <HAL_SPI_ErrorCallback>
}
 8007dc8:	bf00      	nop
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007de6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007de8:	f7fa fcc0 	bl	800276c <HAL_GetTick>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	2164      	movs	r1, #100	; 0x64
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff ff0c 	bl	8007c10 <SPI_EndRxTransaction>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e02:	f043 0220 	orr.w	r2, r3, #32
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7f9 fdde 	bl	80019dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007e20:	e002      	b.n	8007e28 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff fc5e 	bl	80076e4 <HAL_SPI_ErrorCallback>
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e042      	b.n	8007ec8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7fa fb45 	bl	80024e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2224      	movs	r2, #36	; 0x24
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0201 	bic.w	r2, r2, #1
 8007e70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fbb4 	bl	80085e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f8b5 	bl	8007ff0 <UART_SetConfig>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e01b      	b.n	8007ec8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0201 	orr.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fc33 	bl	800872c <UART_CheckIdleState>
 8007ec6:	4603      	mov	r3, r0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08a      	sub	sp, #40	; 0x28
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d17c      	bne.n	8007fe4 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <HAL_UART_Transmit+0x26>
 8007ef0:	88fb      	ldrh	r3, [r7, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e075      	b.n	8007fe6 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2221      	movs	r2, #33	; 0x21
 8007f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f0a:	f7fa fc2f 	bl	800276c <HAL_GetTick>
 8007f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	88fa      	ldrh	r2, [r7, #6]
 8007f14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	88fa      	ldrh	r2, [r7, #6]
 8007f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f28:	d108      	bne.n	8007f3c <HAL_UART_Transmit+0x6c>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	e003      	b.n	8007f44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f44:	e031      	b.n	8007faa <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2180      	movs	r1, #128	; 0x80
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fc95 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e03e      	b.n	8007fe6 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10b      	bne.n	8007f86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	881a      	ldrh	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f7a:	b292      	uxth	r2, r2
 8007f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	3302      	adds	r3, #2
 8007f82:	61bb      	str	r3, [r7, #24]
 8007f84:	e008      	b.n	8007f98 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	b292      	uxth	r2, r2
 8007f90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	3301      	adds	r3, #1
 8007f96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1c7      	bne.n	8007f46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2140      	movs	r1, #64	; 0x40
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fc5d 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e006      	b.n	8007fe6 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e000      	b.n	8007fe6 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007fe4:	2302      	movs	r3, #2
  }
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ff4:	b08c      	sub	sp, #48	; 0x30
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	431a      	orrs	r2, r3
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	431a      	orrs	r2, r3
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	4313      	orrs	r3, r2
 8008016:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4baa      	ldr	r3, [pc, #680]	; (80082c8 <UART_SetConfig+0x2d8>)
 8008020:	4013      	ands	r3, r2
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	6812      	ldr	r2, [r2, #0]
 8008026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008028:	430b      	orrs	r3, r1
 800802a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a9f      	ldr	r2, [pc, #636]	; (80082cc <UART_SetConfig+0x2dc>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d004      	beq.n	800805c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008058:	4313      	orrs	r3, r2
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008066:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	6812      	ldr	r2, [r2, #0]
 800806e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008070:	430b      	orrs	r3, r1
 8008072:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	f023 010f 	bic.w	r1, r3, #15
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a90      	ldr	r2, [pc, #576]	; (80082d0 <UART_SetConfig+0x2e0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d125      	bne.n	80080e0 <UART_SetConfig+0xf0>
 8008094:	4b8f      	ldr	r3, [pc, #572]	; (80082d4 <UART_SetConfig+0x2e4>)
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d81a      	bhi.n	80080d8 <UART_SetConfig+0xe8>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <UART_SetConfig+0xb8>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080b9 	.word	0x080080b9
 80080ac:	080080c9 	.word	0x080080c9
 80080b0:	080080c1 	.word	0x080080c1
 80080b4:	080080d1 	.word	0x080080d1
 80080b8:	2301      	movs	r3, #1
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e116      	b.n	80082ee <UART_SetConfig+0x2fe>
 80080c0:	2302      	movs	r3, #2
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e112      	b.n	80082ee <UART_SetConfig+0x2fe>
 80080c8:	2304      	movs	r3, #4
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e10e      	b.n	80082ee <UART_SetConfig+0x2fe>
 80080d0:	2308      	movs	r3, #8
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d6:	e10a      	b.n	80082ee <UART_SetConfig+0x2fe>
 80080d8:	2310      	movs	r3, #16
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080de:	e106      	b.n	80082ee <UART_SetConfig+0x2fe>
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a7c      	ldr	r2, [pc, #496]	; (80082d8 <UART_SetConfig+0x2e8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d138      	bne.n	800815c <UART_SetConfig+0x16c>
 80080ea:	4b7a      	ldr	r3, [pc, #488]	; (80082d4 <UART_SetConfig+0x2e4>)
 80080ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f0:	f003 030c 	and.w	r3, r3, #12
 80080f4:	2b0c      	cmp	r3, #12
 80080f6:	d82d      	bhi.n	8008154 <UART_SetConfig+0x164>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <UART_SetConfig+0x110>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	08008135 	.word	0x08008135
 8008104:	08008155 	.word	0x08008155
 8008108:	08008155 	.word	0x08008155
 800810c:	08008155 	.word	0x08008155
 8008110:	08008145 	.word	0x08008145
 8008114:	08008155 	.word	0x08008155
 8008118:	08008155 	.word	0x08008155
 800811c:	08008155 	.word	0x08008155
 8008120:	0800813d 	.word	0x0800813d
 8008124:	08008155 	.word	0x08008155
 8008128:	08008155 	.word	0x08008155
 800812c:	08008155 	.word	0x08008155
 8008130:	0800814d 	.word	0x0800814d
 8008134:	2300      	movs	r3, #0
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813a:	e0d8      	b.n	80082ee <UART_SetConfig+0x2fe>
 800813c:	2302      	movs	r3, #2
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008142:	e0d4      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008144:	2304      	movs	r3, #4
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814a:	e0d0      	b.n	80082ee <UART_SetConfig+0x2fe>
 800814c:	2308      	movs	r3, #8
 800814e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008152:	e0cc      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008154:	2310      	movs	r3, #16
 8008156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800815a:	e0c8      	b.n	80082ee <UART_SetConfig+0x2fe>
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a5e      	ldr	r2, [pc, #376]	; (80082dc <UART_SetConfig+0x2ec>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d125      	bne.n	80081b2 <UART_SetConfig+0x1c2>
 8008166:	4b5b      	ldr	r3, [pc, #364]	; (80082d4 <UART_SetConfig+0x2e4>)
 8008168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008170:	2b30      	cmp	r3, #48	; 0x30
 8008172:	d016      	beq.n	80081a2 <UART_SetConfig+0x1b2>
 8008174:	2b30      	cmp	r3, #48	; 0x30
 8008176:	d818      	bhi.n	80081aa <UART_SetConfig+0x1ba>
 8008178:	2b20      	cmp	r3, #32
 800817a:	d00a      	beq.n	8008192 <UART_SetConfig+0x1a2>
 800817c:	2b20      	cmp	r3, #32
 800817e:	d814      	bhi.n	80081aa <UART_SetConfig+0x1ba>
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <UART_SetConfig+0x19a>
 8008184:	2b10      	cmp	r3, #16
 8008186:	d008      	beq.n	800819a <UART_SetConfig+0x1aa>
 8008188:	e00f      	b.n	80081aa <UART_SetConfig+0x1ba>
 800818a:	2300      	movs	r3, #0
 800818c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008190:	e0ad      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008192:	2302      	movs	r3, #2
 8008194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008198:	e0a9      	b.n	80082ee <UART_SetConfig+0x2fe>
 800819a:	2304      	movs	r3, #4
 800819c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a0:	e0a5      	b.n	80082ee <UART_SetConfig+0x2fe>
 80081a2:	2308      	movs	r3, #8
 80081a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a8:	e0a1      	b.n	80082ee <UART_SetConfig+0x2fe>
 80081aa:	2310      	movs	r3, #16
 80081ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b0:	e09d      	b.n	80082ee <UART_SetConfig+0x2fe>
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a4a      	ldr	r2, [pc, #296]	; (80082e0 <UART_SetConfig+0x2f0>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d125      	bne.n	8008208 <UART_SetConfig+0x218>
 80081bc:	4b45      	ldr	r3, [pc, #276]	; (80082d4 <UART_SetConfig+0x2e4>)
 80081be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081c6:	2bc0      	cmp	r3, #192	; 0xc0
 80081c8:	d016      	beq.n	80081f8 <UART_SetConfig+0x208>
 80081ca:	2bc0      	cmp	r3, #192	; 0xc0
 80081cc:	d818      	bhi.n	8008200 <UART_SetConfig+0x210>
 80081ce:	2b80      	cmp	r3, #128	; 0x80
 80081d0:	d00a      	beq.n	80081e8 <UART_SetConfig+0x1f8>
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d814      	bhi.n	8008200 <UART_SetConfig+0x210>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <UART_SetConfig+0x1f0>
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d008      	beq.n	80081f0 <UART_SetConfig+0x200>
 80081de:	e00f      	b.n	8008200 <UART_SetConfig+0x210>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e6:	e082      	b.n	80082ee <UART_SetConfig+0x2fe>
 80081e8:	2302      	movs	r3, #2
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ee:	e07e      	b.n	80082ee <UART_SetConfig+0x2fe>
 80081f0:	2304      	movs	r3, #4
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f6:	e07a      	b.n	80082ee <UART_SetConfig+0x2fe>
 80081f8:	2308      	movs	r3, #8
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fe:	e076      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008200:	2310      	movs	r3, #16
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e072      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a35      	ldr	r2, [pc, #212]	; (80082e4 <UART_SetConfig+0x2f4>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d12a      	bne.n	8008268 <UART_SetConfig+0x278>
 8008212:	4b30      	ldr	r3, [pc, #192]	; (80082d4 <UART_SetConfig+0x2e4>)
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800821c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008220:	d01a      	beq.n	8008258 <UART_SetConfig+0x268>
 8008222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008226:	d81b      	bhi.n	8008260 <UART_SetConfig+0x270>
 8008228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800822c:	d00c      	beq.n	8008248 <UART_SetConfig+0x258>
 800822e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008232:	d815      	bhi.n	8008260 <UART_SetConfig+0x270>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <UART_SetConfig+0x250>
 8008238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800823c:	d008      	beq.n	8008250 <UART_SetConfig+0x260>
 800823e:	e00f      	b.n	8008260 <UART_SetConfig+0x270>
 8008240:	2300      	movs	r3, #0
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008246:	e052      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008248:	2302      	movs	r3, #2
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e04e      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008250:	2304      	movs	r3, #4
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008256:	e04a      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008258:	2308      	movs	r3, #8
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825e:	e046      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008260:	2310      	movs	r3, #16
 8008262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008266:	e042      	b.n	80082ee <UART_SetConfig+0x2fe>
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a17      	ldr	r2, [pc, #92]	; (80082cc <UART_SetConfig+0x2dc>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d13a      	bne.n	80082e8 <UART_SetConfig+0x2f8>
 8008272:	4b18      	ldr	r3, [pc, #96]	; (80082d4 <UART_SetConfig+0x2e4>)
 8008274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800827c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008280:	d01a      	beq.n	80082b8 <UART_SetConfig+0x2c8>
 8008282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008286:	d81b      	bhi.n	80082c0 <UART_SetConfig+0x2d0>
 8008288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800828c:	d00c      	beq.n	80082a8 <UART_SetConfig+0x2b8>
 800828e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008292:	d815      	bhi.n	80082c0 <UART_SetConfig+0x2d0>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d003      	beq.n	80082a0 <UART_SetConfig+0x2b0>
 8008298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829c:	d008      	beq.n	80082b0 <UART_SetConfig+0x2c0>
 800829e:	e00f      	b.n	80082c0 <UART_SetConfig+0x2d0>
 80082a0:	2300      	movs	r3, #0
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a6:	e022      	b.n	80082ee <UART_SetConfig+0x2fe>
 80082a8:	2302      	movs	r3, #2
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ae:	e01e      	b.n	80082ee <UART_SetConfig+0x2fe>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b6:	e01a      	b.n	80082ee <UART_SetConfig+0x2fe>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082be:	e016      	b.n	80082ee <UART_SetConfig+0x2fe>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082c6:	e012      	b.n	80082ee <UART_SetConfig+0x2fe>
 80082c8:	cfff69f3 	.word	0xcfff69f3
 80082cc:	40008000 	.word	0x40008000
 80082d0:	40013800 	.word	0x40013800
 80082d4:	40021000 	.word	0x40021000
 80082d8:	40004400 	.word	0x40004400
 80082dc:	40004800 	.word	0x40004800
 80082e0:	40004c00 	.word	0x40004c00
 80082e4:	40005000 	.word	0x40005000
 80082e8:	2310      	movs	r3, #16
 80082ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4aae      	ldr	r2, [pc, #696]	; (80085ac <UART_SetConfig+0x5bc>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	f040 8097 	bne.w	8008428 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d823      	bhi.n	800834a <UART_SetConfig+0x35a>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <UART_SetConfig+0x318>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800832d 	.word	0x0800832d
 800830c:	0800834b 	.word	0x0800834b
 8008310:	08008335 	.word	0x08008335
 8008314:	0800834b 	.word	0x0800834b
 8008318:	0800833b 	.word	0x0800833b
 800831c:	0800834b 	.word	0x0800834b
 8008320:	0800834b 	.word	0x0800834b
 8008324:	0800834b 	.word	0x0800834b
 8008328:	08008343 	.word	0x08008343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800832c:	f7fd fbaa 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 8008330:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008332:	e010      	b.n	8008356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008334:	4b9e      	ldr	r3, [pc, #632]	; (80085b0 <UART_SetConfig+0x5c0>)
 8008336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008338:	e00d      	b.n	8008356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800833a:	f7fd fb0b 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 800833e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008340:	e009      	b.n	8008356 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008348:	e005      	b.n	8008356 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008354:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 8130 	beq.w	80085be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	4a94      	ldr	r2, [pc, #592]	; (80085b4 <UART_SetConfig+0x5c4>)
 8008364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008368:	461a      	mov	r2, r3
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008370:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	4613      	mov	r3, r2
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	4413      	add	r3, r2
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	429a      	cmp	r2, r3
 8008380:	d305      	bcc.n	800838e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	429a      	cmp	r2, r3
 800838c:	d903      	bls.n	8008396 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008394:	e113      	b.n	80085be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	2200      	movs	r2, #0
 800839a:	60bb      	str	r3, [r7, #8]
 800839c:	60fa      	str	r2, [r7, #12]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	4a84      	ldr	r2, [pc, #528]	; (80085b4 <UART_SetConfig+0x5c4>)
 80083a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2200      	movs	r2, #0
 80083ac:	603b      	str	r3, [r7, #0]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083b8:	f7f7 ff20 	bl	80001fc <__aeabi_uldivmod>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4610      	mov	r0, r2
 80083c2:	4619      	mov	r1, r3
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	f04f 0300 	mov.w	r3, #0
 80083cc:	020b      	lsls	r3, r1, #8
 80083ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083d2:	0202      	lsls	r2, r0, #8
 80083d4:	6979      	ldr	r1, [r7, #20]
 80083d6:	6849      	ldr	r1, [r1, #4]
 80083d8:	0849      	lsrs	r1, r1, #1
 80083da:	2000      	movs	r0, #0
 80083dc:	460c      	mov	r4, r1
 80083de:	4605      	mov	r5, r0
 80083e0:	eb12 0804 	adds.w	r8, r2, r4
 80083e4:	eb43 0905 	adc.w	r9, r3, r5
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	469a      	mov	sl, r3
 80083f0:	4693      	mov	fp, r2
 80083f2:	4652      	mov	r2, sl
 80083f4:	465b      	mov	r3, fp
 80083f6:	4640      	mov	r0, r8
 80083f8:	4649      	mov	r1, r9
 80083fa:	f7f7 feff 	bl	80001fc <__aeabi_uldivmod>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4613      	mov	r3, r2
 8008404:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800840c:	d308      	bcc.n	8008420 <UART_SetConfig+0x430>
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008414:	d204      	bcs.n	8008420 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6a3a      	ldr	r2, [r7, #32]
 800841c:	60da      	str	r2, [r3, #12]
 800841e:	e0ce      	b.n	80085be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008426:	e0ca      	b.n	80085be <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008430:	d166      	bne.n	8008500 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008436:	2b08      	cmp	r3, #8
 8008438:	d827      	bhi.n	800848a <UART_SetConfig+0x49a>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <UART_SetConfig+0x450>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008465 	.word	0x08008465
 8008444:	0800846d 	.word	0x0800846d
 8008448:	08008475 	.word	0x08008475
 800844c:	0800848b 	.word	0x0800848b
 8008450:	0800847b 	.word	0x0800847b
 8008454:	0800848b 	.word	0x0800848b
 8008458:	0800848b 	.word	0x0800848b
 800845c:	0800848b 	.word	0x0800848b
 8008460:	08008483 	.word	0x08008483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008464:	f7fd fb0e 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 8008468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800846a:	e014      	b.n	8008496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800846c:	f7fd fb20 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 8008470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008472:	e010      	b.n	8008496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008474:	4b4e      	ldr	r3, [pc, #312]	; (80085b0 <UART_SetConfig+0x5c0>)
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008478:	e00d      	b.n	8008496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800847a:	f7fd fa6b 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 800847e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008480:	e009      	b.n	8008496 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008488:	e005      	b.n	8008496 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8090 	beq.w	80085be <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	4a44      	ldr	r2, [pc, #272]	; (80085b4 <UART_SetConfig+0x5c4>)
 80084a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a8:	461a      	mov	r2, r3
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80084b0:	005a      	lsls	r2, r3, #1
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	085b      	lsrs	r3, r3, #1
 80084b8:	441a      	add	r2, r3
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	2b0f      	cmp	r3, #15
 80084c8:	d916      	bls.n	80084f8 <UART_SetConfig+0x508>
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084d0:	d212      	bcs.n	80084f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	f023 030f 	bic.w	r3, r3, #15
 80084da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	085b      	lsrs	r3, r3, #1
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	8bfb      	ldrh	r3, [r7, #30]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	8bfa      	ldrh	r2, [r7, #30]
 80084f4:	60da      	str	r2, [r3, #12]
 80084f6:	e062      	b.n	80085be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084fe:	e05e      	b.n	80085be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008500:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008504:	2b08      	cmp	r3, #8
 8008506:	d828      	bhi.n	800855a <UART_SetConfig+0x56a>
 8008508:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <UART_SetConfig+0x520>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	08008535 	.word	0x08008535
 8008514:	0800853d 	.word	0x0800853d
 8008518:	08008545 	.word	0x08008545
 800851c:	0800855b 	.word	0x0800855b
 8008520:	0800854b 	.word	0x0800854b
 8008524:	0800855b 	.word	0x0800855b
 8008528:	0800855b 	.word	0x0800855b
 800852c:	0800855b 	.word	0x0800855b
 8008530:	08008553 	.word	0x08008553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008534:	f7fd faa6 	bl	8005a84 <HAL_RCC_GetPCLK1Freq>
 8008538:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800853a:	e014      	b.n	8008566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800853c:	f7fd fab8 	bl	8005ab0 <HAL_RCC_GetPCLK2Freq>
 8008540:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008542:	e010      	b.n	8008566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008544:	4b1a      	ldr	r3, [pc, #104]	; (80085b0 <UART_SetConfig+0x5c0>)
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008548:	e00d      	b.n	8008566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800854a:	f7fd fa03 	bl	8005954 <HAL_RCC_GetSysClockFreq>
 800854e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008550:	e009      	b.n	8008566 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008558:	e005      	b.n	8008566 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008564:	bf00      	nop
    }

    if (pclk != 0U)
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	2b00      	cmp	r3, #0
 800856a:	d028      	beq.n	80085be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	4a10      	ldr	r2, [pc, #64]	; (80085b4 <UART_SetConfig+0x5c4>)
 8008572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008576:	461a      	mov	r2, r3
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	fbb3 f2f2 	udiv	r2, r3, r2
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	085b      	lsrs	r3, r3, #1
 8008584:	441a      	add	r2, r3
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	fbb2 f3f3 	udiv	r3, r2, r3
 800858e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	2b0f      	cmp	r3, #15
 8008594:	d910      	bls.n	80085b8 <UART_SetConfig+0x5c8>
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800859c:	d20c      	bcs.n	80085b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60da      	str	r2, [r3, #12]
 80085a8:	e009      	b.n	80085be <UART_SetConfig+0x5ce>
 80085aa:	bf00      	nop
 80085ac:	40008000 	.word	0x40008000
 80085b0:	00f42400 	.word	0x00f42400
 80085b4:	08008d80 	.word	0x08008d80
      }
      else
      {
        ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2200      	movs	r2, #0
 80085d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80085da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3730      	adds	r7, #48	; 0x30
 80085e2:	46bd      	mov	sp, r7
 80085e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080085e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	f003 0308 	and.w	r3, r3, #8
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d01a      	beq.n	80086fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e6:	d10a      	bne.n	80086fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	605a      	str	r2, [r3, #4]
  }
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b098      	sub	sp, #96	; 0x60
 8008730:	af02      	add	r7, sp, #8
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800873c:	f7fa f816 	bl	800276c <HAL_GetTick>
 8008740:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b08      	cmp	r3, #8
 800874e:	d12f      	bne.n	80087b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008758:	2200      	movs	r2, #0
 800875a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f88e 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d022      	beq.n	80087b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800877e:	653b      	str	r3, [r7, #80]	; 0x50
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008788:	647b      	str	r3, [r7, #68]	; 0x44
 800878a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800878e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e6      	bne.n	800876a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e063      	b.n	8008878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d149      	bne.n	8008852 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c6:	2200      	movs	r2, #0
 80087c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f857 	bl	8008880 <UART_WaitOnFlagUntilTimeout>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d03c      	beq.n	8008852 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	623b      	str	r3, [r7, #32]
   return(result);
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f6:	633b      	str	r3, [r7, #48]	; 0x30
 80087f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e6      	bne.n	80087d8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	60fb      	str	r3, [r7, #12]
   return(result);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	64bb      	str	r3, [r7, #72]	; 0x48
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800882a:	61fa      	str	r2, [r7, #28]
 800882c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	69b9      	ldr	r1, [r7, #24]
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	617b      	str	r3, [r7, #20]
   return(result);
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e5      	bne.n	800880a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e012      	b.n	8008878 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2220      	movs	r2, #32
 8008856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3758      	adds	r7, #88	; 0x58
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	4613      	mov	r3, r2
 800888e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008890:	e049      	b.n	8008926 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008898:	d045      	beq.n	8008926 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889a:	f7f9 ff67 	bl	800276c <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d302      	bcc.n	80088b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e048      	b.n	8008946 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d031      	beq.n	8008926 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	f003 0308 	and.w	r3, r3, #8
 80088cc:	2b08      	cmp	r3, #8
 80088ce:	d110      	bne.n	80088f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2208      	movs	r2, #8
 80088d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 f838 	bl	800894e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2208      	movs	r2, #8
 80088e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e029      	b.n	8008946 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008900:	d111      	bne.n	8008926 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800890a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 f81e 	bl	800894e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2220      	movs	r2, #32
 8008916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e00f      	b.n	8008946 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69da      	ldr	r2, [r3, #28]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4013      	ands	r3, r2
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	429a      	cmp	r2, r3
 8008934:	bf0c      	ite	eq
 8008936:	2301      	moveq	r3, #1
 8008938:	2300      	movne	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	461a      	mov	r2, r3
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	429a      	cmp	r2, r3
 8008942:	d0a6      	beq.n	8008892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800894e:	b480      	push	{r7}
 8008950:	b095      	sub	sp, #84	; 0x54
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800896a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008974:	643b      	str	r3, [r7, #64]	; 0x40
 8008976:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800897a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3308      	adds	r3, #8
 800898e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	61fb      	str	r3, [r7, #28]
   return(result);
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800899e:	f023 0301 	bic.w	r3, r3, #1
 80089a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b4:	e841 2300 	strex	r3, r2, [r1]
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e3      	bne.n	8008988 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d118      	bne.n	80089fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f023 0310 	bic.w	r3, r3, #16
 80089dc:	647b      	str	r3, [r7, #68]	; 0x44
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e6:	61bb      	str	r3, [r7, #24]
 80089e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	6979      	ldr	r1, [r7, #20]
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	613b      	str	r3, [r7, #16]
   return(result);
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e6      	bne.n	80089c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2220      	movs	r2, #32
 80089fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008a0e:	bf00      	nop
 8008a10:	3754      	adds	r7, #84	; 0x54
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b085      	sub	sp, #20
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d101      	bne.n	8008a30 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e027      	b.n	8008a80 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2224      	movs	r2, #36	; 0x24
 8008a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0201 	bic.w	r2, r2, #1
 8008a56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e02d      	b.n	8008b00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2224      	movs	r2, #36	; 0x24
 8008ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0201 	bic.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f84f 	bl	8008b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e02d      	b.n	8008b7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2224      	movs	r2, #36	; 0x24
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0201 	bic.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f811 	bl	8008b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d108      	bne.n	8008ba6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ba4:	e031      	b.n	8008c0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008baa:	2308      	movs	r3, #8
 8008bac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	0e5b      	lsrs	r3, r3, #25
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	0f5b      	lsrs	r3, r3, #29
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	7b3a      	ldrb	r2, [r7, #12]
 8008bd2:	4911      	ldr	r1, [pc, #68]	; (8008c18 <UARTEx_SetNbDataToProcess+0x94>)
 8008bd4:	5c8a      	ldrb	r2, [r1, r2]
 8008bd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bda:	7b3a      	ldrb	r2, [r7, #12]
 8008bdc:	490f      	ldr	r1, [pc, #60]	; (8008c1c <UARTEx_SetNbDataToProcess+0x98>)
 8008bde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008be0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	7b7a      	ldrb	r2, [r7, #13]
 8008bf0:	4909      	ldr	r1, [pc, #36]	; (8008c18 <UARTEx_SetNbDataToProcess+0x94>)
 8008bf2:	5c8a      	ldrb	r2, [r1, r2]
 8008bf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bf8:	7b7a      	ldrb	r2, [r7, #13]
 8008bfa:	4908      	ldr	r1, [pc, #32]	; (8008c1c <UARTEx_SetNbDataToProcess+0x98>)
 8008bfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	08008d98 	.word	0x08008d98
 8008c1c:	08008da0 	.word	0x08008da0

08008c20 <memset>:
 8008c20:	4402      	add	r2, r0
 8008c22:	4603      	mov	r3, r0
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d100      	bne.n	8008c2a <memset+0xa>
 8008c28:	4770      	bx	lr
 8008c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c2e:	e7f9      	b.n	8008c24 <memset+0x4>

08008c30 <__libc_init_array>:
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	4d0d      	ldr	r5, [pc, #52]	; (8008c68 <__libc_init_array+0x38>)
 8008c34:	4c0d      	ldr	r4, [pc, #52]	; (8008c6c <__libc_init_array+0x3c>)
 8008c36:	1b64      	subs	r4, r4, r5
 8008c38:	10a4      	asrs	r4, r4, #2
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	42a6      	cmp	r6, r4
 8008c3e:	d109      	bne.n	8008c54 <__libc_init_array+0x24>
 8008c40:	4d0b      	ldr	r5, [pc, #44]	; (8008c70 <__libc_init_array+0x40>)
 8008c42:	4c0c      	ldr	r4, [pc, #48]	; (8008c74 <__libc_init_array+0x44>)
 8008c44:	f000 f818 	bl	8008c78 <_init>
 8008c48:	1b64      	subs	r4, r4, r5
 8008c4a:	10a4      	asrs	r4, r4, #2
 8008c4c:	2600      	movs	r6, #0
 8008c4e:	42a6      	cmp	r6, r4
 8008c50:	d105      	bne.n	8008c5e <__libc_init_array+0x2e>
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c58:	4798      	blx	r3
 8008c5a:	3601      	adds	r6, #1
 8008c5c:	e7ee      	b.n	8008c3c <__libc_init_array+0xc>
 8008c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c62:	4798      	blx	r3
 8008c64:	3601      	adds	r6, #1
 8008c66:	e7f2      	b.n	8008c4e <__libc_init_array+0x1e>
 8008c68:	08008db0 	.word	0x08008db0
 8008c6c:	08008db0 	.word	0x08008db0
 8008c70:	08008db0 	.word	0x08008db0
 8008c74:	08008db4 	.word	0x08008db4

08008c78 <_init>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr

08008c84 <_fini>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	bf00      	nop
 8008c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8a:	bc08      	pop	{r3}
 8008c8c:	469e      	mov	lr, r3
 8008c8e:	4770      	bx	lr
