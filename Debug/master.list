
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f34  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080090f0  080090f0  000190f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ec  080091ec  00024b18  2**0
                  CONTENTS
  4 .ARM          00000008  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091f4  080091f4  00024b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004b18  20000000  080091fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067a8  20004b18  0800dd14  00024b18  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b2c0  0800dd14  0002b2c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024b18  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024b48  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a35  00000000  00000000  00024b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d5f  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00041320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001014  00000000  00000000  00042790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031a75  00000000  00000000  000437a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001add5  00000000  00000000  00075219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012afb3  00000000  00000000  0008ffee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057d4  00000000  00000000  001bafa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001c0778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20004b18 	.word	0x20004b18
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080090d8 	.word	0x080090d8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20004b1c 	.word	0x20004b1c
 80001f8:	080090d8 	.word	0x080090d8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f002 faf5 	bl	8002aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f985 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fd0f 	bl	8000f28 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050a:	f000 fabb 	bl	8000a84 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050e:	f000 faf9 	bl	8000b04 <MX_I2C2_Init>
  MX_OCTOSPI2_Init();
 8000512:	f000 fbb7 	bl	8000c84 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8000516:	f000 fc0b 	bl	8000d30 <MX_SPI1_Init>
  MX_SPI2_Init();
 800051a:	f000 fc47 	bl	8000dac <MX_SPI2_Init>
  MX_UART4_Init();
 800051e:	f000 fcb7 	bl	8000e90 <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 8000522:	f000 f9c3 	bl	80008ac <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000526:	f000 fb2d 	bl	8000b84 <MX_LTDC_Init>
  MX_SPI3_Init();
 800052a:	f000 fc79 	bl	8000e20 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 800052e:	f000 fe4b 	bl	80011c8 <mipi_config>
  HAL_UART_Transmit(&huart4, "master start", 12, 1000);
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	220c      	movs	r2, #12
 8000538:	4987      	ldr	r1, [pc, #540]	; (8000758 <main+0x260>)
 800053a:	4888      	ldr	r0, [pc, #544]	; (800075c <main+0x264>)
 800053c:	f007 fef8 	bl	8008330 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int frame_buf_count = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]

  	__HAL_SPI_ENABLE(&hspi1);
 8000544:	4b86      	ldr	r3, [pc, #536]	; (8000760 <main+0x268>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b85      	ldr	r3, [pc, #532]	; (8000760 <main+0x268>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000552:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi3);
 8000554:	4b83      	ldr	r3, [pc, #524]	; (8000764 <main+0x26c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4b82      	ldr	r3, [pc, #520]	; (8000764 <main+0x26c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000562:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 8000564:	2202      	movs	r2, #2
 8000566:	4980      	ldr	r1, [pc, #512]	; (8000768 <main+0x270>)
 8000568:	487e      	ldr	r0, [pc, #504]	; (8000764 <main+0x26c>)
 800056a:	f007 f891 	bl	8007690 <HAL_SPI_Receive_IT>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(play_mode_source == 0)
 800056e:	4b7f      	ldr	r3, [pc, #508]	; (800076c <main+0x274>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	f040 80a5 	bne.w	80006c2 <main+0x1ca>
		{
			if(play_mode == 0)
 8000578:	4b7d      	ldr	r3, [pc, #500]	; (8000770 <main+0x278>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d142      	bne.n	8000606 <main+0x10e>
			{
				read_flash_page(&frame_buf_flash, display_image_number);
 8000580:	4b7c      	ldr	r3, [pc, #496]	; (8000774 <main+0x27c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	487c      	ldr	r0, [pc, #496]	; (8000778 <main+0x280>)
 8000588:	f001 fdc4 	bl	8002114 <read_flash_page>
				frame_buf_count = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	e032      	b.n	80005fc <main+0x104>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+1];
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	3301      	adds	r3, #1
 800059a:	4a77      	ldr	r2, [pc, #476]	; (8000778 <main+0x280>)
 800059c:	5cd1      	ldrb	r1, [r2, r3]
 800059e:	4a77      	ldr	r2, [pc, #476]	; (800077c <main+0x284>)
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	4413      	add	r3, r2
 80005a4:	460a      	mov	r2, r1
 80005a6:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	3302      	adds	r3, #2
 80005ac:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 80005ae:	4a72      	ldr	r2, [pc, #456]	; (8000778 <main+0x280>)
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	4413      	add	r3, r2
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	4a71      	ldr	r2, [pc, #452]	; (800077c <main+0x284>)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4413      	add	r3, r2
 80005bc:	460a      	mov	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3304      	adds	r3, #4
 80005c4:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+2];
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	3302      	adds	r3, #2
 80005ca:	4a6b      	ldr	r2, [pc, #428]	; (8000778 <main+0x280>)
 80005cc:	5cd1      	ldrb	r1, [r2, r3]
 80005ce:	4a6b      	ldr	r2, [pc, #428]	; (800077c <main+0x284>)
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	4413      	add	r3, r2
 80005d4:	460a      	mov	r2, r1
 80005d6:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	3304      	adds	r3, #4
 80005dc:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+3];
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	3303      	adds	r3, #3
 80005e2:	4a65      	ldr	r2, [pc, #404]	; (8000778 <main+0x280>)
 80005e4:	5cd1      	ldrb	r1, [r2, r3]
 80005e6:	4a65      	ldr	r2, [pc, #404]	; (800077c <main+0x284>)
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	4413      	add	r3, r2
 80005ec:	460a      	mov	r2, r1
 80005ee:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3302      	adds	r3, #2
 80005f4:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	3304      	adds	r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000602:	dbc8      	blt.n	8000596 <main+0x9e>
 8000604:	e0fb      	b.n	80007fe <main+0x306>
				}
			}
			else if(play_mode == 1)
 8000606:	4b5a      	ldr	r3, [pc, #360]	; (8000770 <main+0x278>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	f040 80f7 	bne.w	80007fe <main+0x306>
			{
				for(int i=0; i<total_image_in_flash; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e04e      	b.n	80006b4 <main+0x1bc>
				{
					if(play_mode_source != 0) break;
 8000616:	4b55      	ldr	r3, [pc, #340]	; (800076c <main+0x274>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	f040 80ee 	bne.w	80007fc <main+0x304>
					read_flash_page(&frame_buf_flash, i);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	4854      	ldr	r0, [pc, #336]	; (8000778 <main+0x280>)
 8000628:	f001 fd74 	bl	8002114 <read_flash_page>
					frame_buf_count = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
					for (int i = 0; i < 6400;  i += 4)
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	e032      	b.n	800069c <main+0x1a4>
					{
						image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+1];
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	3301      	adds	r3, #1
 800063a:	4a4f      	ldr	r2, [pc, #316]	; (8000778 <main+0x280>)
 800063c:	5cd1      	ldrb	r1, [r2, r3]
 800063e:	4a4f      	ldr	r2, [pc, #316]	; (800077c <main+0x284>)
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	4413      	add	r3, r2
 8000644:	460a      	mov	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]
						frame_buf_count += 2;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3302      	adds	r3, #2
 800064c:	617b      	str	r3, [r7, #20]
						image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 800064e:	4a4a      	ldr	r2, [pc, #296]	; (8000778 <main+0x280>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4413      	add	r3, r2
 8000654:	7819      	ldrb	r1, [r3, #0]
 8000656:	4a49      	ldr	r2, [pc, #292]	; (800077c <main+0x284>)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
						frame_buf_count += 4;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	3304      	adds	r3, #4
 8000664:	617b      	str	r3, [r7, #20]
						image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+2];
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	3302      	adds	r3, #2
 800066a:	4a43      	ldr	r2, [pc, #268]	; (8000778 <main+0x280>)
 800066c:	5cd1      	ldrb	r1, [r2, r3]
 800066e:	4a43      	ldr	r2, [pc, #268]	; (800077c <main+0x284>)
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	460a      	mov	r2, r1
 8000676:	701a      	strb	r2, [r3, #0]
						frame_buf_count += 4;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3304      	adds	r3, #4
 800067c:	617b      	str	r3, [r7, #20]
						image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+3];
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	3303      	adds	r3, #3
 8000682:	4a3d      	ldr	r2, [pc, #244]	; (8000778 <main+0x280>)
 8000684:	5cd1      	ldrb	r1, [r2, r3]
 8000686:	4a3d      	ldr	r2, [pc, #244]	; (800077c <main+0x284>)
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	4413      	add	r3, r2
 800068c:	460a      	mov	r2, r1
 800068e:	701a      	strb	r2, [r3, #0]
						frame_buf_count += 2;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3302      	adds	r3, #2
 8000694:	617b      	str	r3, [r7, #20]
					for (int i = 0; i < 6400;  i += 4)
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	3304      	adds	r3, #4
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80006a2:	dbc8      	blt.n	8000636 <main+0x13e>
					}
					HAL_Delay(frame_rate);
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <main+0x288>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fa9b 	bl	8002be4 <HAL_Delay>
				for(int i=0; i<total_image_in_flash; i++)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <main+0x28c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4293      	cmp	r3, r2
 80006be:	dbaa      	blt.n	8000616 <main+0x11e>
 80006c0:	e09d      	b.n	80007fe <main+0x306>
				}
			}
		}
		else if(play_mode_source == 1)
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <main+0x274>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d13c      	bne.n	8000744 <main+0x24c>
		{
			frame_buf_count = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	e032      	b.n	800073a <main+0x242>
			{
				image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+1];
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a2b      	ldr	r2, [pc, #172]	; (8000788 <main+0x290>)
 80006da:	5cd1      	ldrb	r1, [r2, r3]
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <main+0x284>)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	4413      	add	r3, r2
 80006e2:	460a      	mov	r2, r1
 80006e4:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3302      	adds	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_0[i];
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <main+0x290>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	7819      	ldrb	r1, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <main+0x284>)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	4413      	add	r3, r2
 80006fa:	460a      	mov	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3304      	adds	r3, #4
 8000702:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+2];
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3302      	adds	r3, #2
 8000708:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <main+0x290>)
 800070a:	5cd1      	ldrb	r1, [r2, r3]
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <main+0x284>)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	4413      	add	r3, r2
 8000712:	460a      	mov	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3304      	adds	r3, #4
 800071a:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+3];
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3303      	adds	r3, #3
 8000720:	4a19      	ldr	r2, [pc, #100]	; (8000788 <main+0x290>)
 8000722:	5cd1      	ldrb	r1, [r2, r3]
 8000724:	4a15      	ldr	r2, [pc, #84]	; (800077c <main+0x284>)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4413      	add	r3, r2
 800072a:	460a      	mov	r2, r1
 800072c:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	3302      	adds	r3, #2
 8000732:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3304      	adds	r3, #4
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000740:	dbc8      	blt.n	80006d4 <main+0x1dc>
 8000742:	e05c      	b.n	80007fe <main+0x306>
			}
		}
		else if(play_mode_source == 2)
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <main+0x274>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d158      	bne.n	80007fe <main+0x306>
		{
			frame_buf_count = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 8000750:	2300      	movs	r3, #0
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	e04d      	b.n	80007f2 <main+0x2fa>
 8000756:	bf00      	nop
 8000758:	080090f0 	.word	0x080090f0
 800075c:	20004e1c 	.word	0x20004e1c
 8000760:	20004cf0 	.word	0x20004cf0
 8000764:	20004db8 	.word	0x20004db8
 8000768:	20004eb0 	.word	0x20004eb0
 800076c:	2000b2b5 	.word	0x2000b2b5
 8000770:	2000b2b4 	.word	0x2000b2b4
 8000774:	2000b2b6 	.word	0x2000b2b6
 8000778:	200099b4 	.word	0x200099b4
 800077c:	2000000c 	.word	0x2000000c
 8000780:	20000004 	.word	0x20000004
 8000784:	20000008 	.word	0x20000008
 8000788:	200067b4 	.word	0x200067b4
			{
				image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+1];
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <main+0x310>)
 8000792:	5cd1      	ldrb	r1, [r2, r3]
 8000794:	4a1d      	ldr	r2, [pc, #116]	; (800080c <main+0x314>)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	4413      	add	r3, r2
 800079a:	460a      	mov	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3302      	adds	r3, #2
 80007a2:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_1[i];
 80007a4:	4a18      	ldr	r2, [pc, #96]	; (8000808 <main+0x310>)
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	4413      	add	r3, r2
 80007aa:	7819      	ldrb	r1, [r3, #0]
 80007ac:	4a17      	ldr	r2, [pc, #92]	; (800080c <main+0x314>)
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4413      	add	r3, r2
 80007b2:	460a      	mov	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3304      	adds	r3, #4
 80007ba:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+2];
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	3302      	adds	r3, #2
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <main+0x310>)
 80007c2:	5cd1      	ldrb	r1, [r2, r3]
 80007c4:	4a11      	ldr	r2, [pc, #68]	; (800080c <main+0x314>)
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	4413      	add	r3, r2
 80007ca:	460a      	mov	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3304      	adds	r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+3];
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	3303      	adds	r3, #3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <main+0x310>)
 80007da:	5cd1      	ldrb	r1, [r2, r3]
 80007dc:	4a0b      	ldr	r2, [pc, #44]	; (800080c <main+0x314>)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	4413      	add	r3, r2
 80007e2:	460a      	mov	r2, r1
 80007e4:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3302      	adds	r3, #2
 80007ea:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	3304      	adds	r3, #4
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80007f8:	dbc8      	blt.n	800078c <main+0x294>
 80007fa:	e000      	b.n	80007fe <main+0x306>
					if(play_mode_source != 0) break;
 80007fc:	bf00      	nop
			}
		}
		HAL_Delay(10);
 80007fe:	200a      	movs	r0, #10
 8000800:	f002 f9f0 	bl	8002be4 <HAL_Delay>
		if(play_mode_source == 0)
 8000804:	e6b3      	b.n	800056e <main+0x76>
 8000806:	bf00      	nop
 8000808:	200080b4 	.word	0x200080b4
 800080c:	2000000c 	.word	0x2000000c

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b096      	sub	sp, #88	; 0x58
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2244      	movs	r2, #68	; 0x44
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f008 fc2e 	bl	8009080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000832:	2000      	movs	r0, #0
 8000834:	f004 fcb6 	bl	80051a4 <HAL_PWREx_ControlVoltageScaling>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800083e:	f001 fd87 	bl	8002350 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000850:	2303      	movs	r3, #3
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000858:	231e      	movs	r3, #30
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000864:	2302      	movs	r3, #2
 8000866:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4618      	mov	r0, r3
 800086e:	f004 fd4d 	bl	800530c <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000878:	f001 fd6a 	bl	8002350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	2105      	movs	r1, #5
 8000894:	4618      	mov	r0, r3
 8000896:	f005 f953 	bl	8005b40 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a0:	f001 fd56 	bl	8002350 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3758      	adds	r7, #88	; 0x58
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0ae      	sub	sp, #184	; 0xb8
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008c2:	2224      	movs	r2, #36	; 0x24
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 fbda 	bl	8009080 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80008cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
 80008dc:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	226c      	movs	r2, #108	; 0x6c
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f008 fbcb 	bl	8009080 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80008ea:	4b64      	ldr	r3, [pc, #400]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 80008ec:	4a64      	ldr	r2, [pc, #400]	; (8000a80 <MX_DSIHOST_DSI_Init+0x1d4>)
 80008ee:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80008f0:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 80008f6:	4b61      	ldr	r3, [pc, #388]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80008fc:	4b5f      	ldr	r3, [pc, #380]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8000902:	2332      	movs	r3, #50	; 0x32
 8000904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000908:	2301      	movs	r3, #1
 800090a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 800090e:	2301      	movs	r3, #1
 8000910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000914:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000918:	4619      	mov	r1, r3
 800091a:	4858      	ldr	r0, [pc, #352]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 800091c:	f002 fb3e 	bl	8002f9c <HAL_DSI_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000926:	f001 fd13 	bl	8002350 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000960:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000964:	4619      	mov	r1, r3
 8000966:	4845      	ldr	r0, [pc, #276]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000968:	f002 ff8b 	bl	8003882 <HAL_DSI_ConfigHostTimeouts>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000972:	f001 fced 	bl	8002350 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000976:	2313      	movs	r3, #19
 8000978:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 800097a:	230f      	movs	r3, #15
 800097c:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 800097e:	2309      	movs	r3, #9
 8000980:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000982:	230a      	movs	r3, #10
 8000984:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000992:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000996:	4619      	mov	r1, r3
 8000998:	4838      	ldr	r0, [pc, #224]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 800099a:	f002 ff08 	bl	80037ae <HAL_DSI_ConfigPhyTimer>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 80009a4:	f001 fcd4 	bl	8002350 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80009a8:	f242 7110 	movw	r1, #10000	; 0x2710
 80009ac:	4833      	ldr	r0, [pc, #204]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 80009ae:	f003 f924 	bl	8003bfa <HAL_DSI_SetLowPowerRXFilter>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 80009b8:	f001 fcca 	bl	8002350 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	482f      	ldr	r0, [pc, #188]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 80009c0:	f002 fc08 	bl	80031d4 <HAL_DSI_ConfigErrorMonitor>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 80009ca:	f001 fcc1 	bl	8002350 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 80009d2:	2305      	movs	r3, #5
 80009d4:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 80009da:	2301      	movs	r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 80009de:	2350      	movs	r3, #80	; 0x50
 80009e0:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 80009f6:	23fc      	movs	r3, #252	; 0xfc
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 80009fa:	23fc      	movs	r3, #252	; 0xfc
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 80009fe:	f44f 7351 	mov.w	r3, #836	; 0x344
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 8000a04:	2308      	movs	r3, #8
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 8000a10:	2350      	movs	r3, #80	; 0x50
 8000a12:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a18:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000a1a:	231c      	movs	r3, #28
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000a1e:	2350      	movs	r3, #80	; 0x50
 8000a20:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a32:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3e:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a44:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a50:	f002 fca5 	bl	800339e <HAL_DSI_ConfigVideoMode>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000a5a:	f001 fc79 	bl	8002350 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a62:	f002 fc74 	bl	800334e <HAL_DSI_SetGenericVCID>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000a6c:	f001 fc70 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
	LCD_PowerOn();
 8000a70:	f000 fe7a 	bl	8001768 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	37b8      	adds	r7, #184	; 0xb8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20004b34 	.word	0x20004b34
 8000a80:	40016c00 	.word	0x40016c00

08000a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <MX_I2C1_Init+0x78>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000a90:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <MX_I2C1_Init+0x7c>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000ac0:	f003 faa2 	bl	8004008 <HAL_I2C_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aca:	f001 fc41 	bl	8002350 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000ad2:	f003 fb34 	bl	800413e <HAL_I2CEx_ConfigAnalogFilter>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000adc:	f001 fc38 	bl	8002350 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_I2C1_Init+0x74>)
 8000ae4:	f003 fb76 	bl	80041d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aee:	f001 fc2f 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20004b50 	.word	0x20004b50
 8000afc:	40005400 	.word	0x40005400
 8000b00:	307075b1 	.word	0x307075b1

08000b04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <MX_I2C2_Init+0x78>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <MX_I2C2_Init+0x7c>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b40:	f003 fa62 	bl	8004008 <HAL_I2C_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b4a:	f001 fc01 	bl	8002350 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b52:	f003 faf4 	bl	800413e <HAL_I2CEx_ConfigAnalogFilter>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b5c:	f001 fbf8 	bl	8002350 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_I2C2_Init+0x74>)
 8000b64:	f003 fb36 	bl	80041d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b6e:	f001 fbef 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20004ba4 	.word	0x20004ba4
 8000b7c:	40005800 	.word	0x40005800
 8000b80:	307075b1 	.word	0x307075b1

08000b84 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2234      	movs	r2, #52	; 0x34
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f008 fa75 	bl	8009080 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b96:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000b98:	4a38      	ldr	r2, [pc, #224]	; (8000c7c <MX_LTDC_Init+0xf8>)
 8000b9a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b9c:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ba2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000ba4:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000baa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bba:	22fb      	movs	r2, #251	; 0xfb
 8000bbc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bc6:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000bca:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bce:	220f      	movs	r2, #15
 8000bd0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 8000bd2:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bd4:	f240 2247 	movw	r2, #583	; 0x247
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bdc:	225f      	movs	r2, #95	; 0x5f
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000be2:	f240 3243 	movw	r2, #835	; 0x343
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bea:	2261      	movs	r2, #97	; 0x61
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bf0:	22ff      	movs	r2, #255	; 0xff
 8000bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000bf8:	22ff      	movs	r2, #255	; 0xff
 8000bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000c00:	22ff      	movs	r2, #255	; 0xff
 8000c02:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c06:	481c      	ldr	r0, [pc, #112]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000c08:	f003 fb30 	bl	800426c <HAL_LTDC_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000c12:	f001 fb9d 	bl	8002350 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 8000c1a:	2350      	movs	r3, #80	; 0x50
 8000c1c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 8000c22:	2350      	movs	r3, #80	; 0x50
 8000c24:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000c26:	2301      	movs	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c2a:	23ff      	movs	r3, #255	; 0xff
 8000c2c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c36:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_LTDC_Init+0xfc>)
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 8000c40:	2350      	movs	r3, #80	; 0x50
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 8000c44:	2350      	movs	r3, #80	; 0x50
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000c48:	23ff      	movs	r3, #255	; 0xff
 8000c4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000c4e:	23ff      	movs	r3, #255	; 0xff
 8000c50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000c54:	23ff      	movs	r3, #255	; 0xff
 8000c56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_LTDC_Init+0xf4>)
 8000c62:	f003 fbd3 	bl	800440c <HAL_LTDC_ConfigLayer>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000c6c:	f001 fb70 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3738      	adds	r7, #56	; 0x38
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20004bf8 	.word	0x20004bf8
 8000c7c:	40016800 	.word	0x40016800
 8000c80:	2000000c 	.word	0x2000000c

08000c84 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000c9a:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <MX_OCTOSPI2_Init+0xa4>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cb0:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 32;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000ccc:	2220      	movs	r2, #32
 8000cce:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000ce8:	480e      	ldr	r0, [pc, #56]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000cea:	f003 fd65 	bl	80047b8 <HAL_OSPI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_OCTOSPI2_Init+0x74>
  {
    Error_Handler();
 8000cf4:	f001 fb2c 	bl	8002350 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <MX_OCTOSPI2_Init+0xa8>)
 8000d02:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_OCTOSPI2_Init+0xa0>)
 8000d0e:	f003 fe0d 	bl	800492c <HAL_OSPIM_Config>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_OCTOSPI2_Init+0x98>
  {
    Error_Handler();
 8000d18:	f001 fb1a 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20004ca0 	.word	0x20004ca0
 8000d28:	a0001400 	.word	0xa0001400
 8000d2c:	00010002 	.word	0x00010002

08000d30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d36:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <MX_SPI1_Init+0x78>)
 8000d38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d66:	2220      	movs	r2, #32
 8000d68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d7e:	2207      	movs	r2, #7
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_SPI1_Init+0x74>)
 8000d90:	f005 ff0c 	bl	8006bac <HAL_SPI_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f001 fad9 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20004cf0 	.word	0x20004cf0
 8000da8:	40013000 	.word	0x40013000

08000dac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000db2:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <MX_SPI2_Init+0x70>)
 8000db4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000dc4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ddc:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000df2:	2207      	movs	r2, #7
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_SPI2_Init+0x6c>)
 8000e04:	f005 fed2 	bl	8006bac <HAL_SPI_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000e0e:	f001 fa9f 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20004d54 	.word	0x20004d54
 8000e1c:	40003800 	.word	0x40003800

08000e20 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e26:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <MX_SPI3_Init+0x6c>)
 8000e28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e3c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_SPI3_Init+0x68>)
 8000e76:	f005 fe99 	bl	8006bac <HAL_SPI_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000e80:	f001 fa66 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20004db8 	.word	0x20004db8
 8000e8c:	40003c00 	.word	0x40003c00

08000e90 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <MX_UART4_Init+0x90>)
 8000e96:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <MX_UART4_Init+0x94>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <MX_UART4_Init+0x90>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_UART4_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_UART4_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_UART4_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_UART4_Init+0x90>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_UART4_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_UART4_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_UART4_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_UART4_Init+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_UART4_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ed8:	4811      	ldr	r0, [pc, #68]	; (8000f20 <MX_UART4_Init+0x90>)
 8000eda:	f007 f9d9 	bl	8008290 <HAL_UART_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f001 fa34 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_UART4_Init+0x90>)
 8000eec:	f007 fffe 	bl	8008eec <HAL_UARTEx_SetTxFifoThreshold>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ef6:	f001 fa2b 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <MX_UART4_Init+0x90>)
 8000efe:	f008 f833 	bl	8008f68 <HAL_UARTEx_SetRxFifoThreshold>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f08:	f001 fa22 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_UART4_Init+0x90>)
 8000f0e:	f007 ffb4 	bl	8008e7a <HAL_UARTEx_DisableFifoMode>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f001 fa1a 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20004e1c 	.word	0x20004e1c
 8000f24:	40004c00 	.word	0x40004c00

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b9c      	ldr	r3, [pc, #624]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a9b      	ldr	r2, [pc, #620]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b99      	ldr	r3, [pc, #612]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
 8000f54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	4b96      	ldr	r3, [pc, #600]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a95      	ldr	r2, [pc, #596]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b93      	ldr	r3, [pc, #588]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b90      	ldr	r3, [pc, #576]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a8f      	ldr	r2, [pc, #572]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b8d      	ldr	r3, [pc, #564]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b8a      	ldr	r3, [pc, #552]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a89      	ldr	r2, [pc, #548]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b87      	ldr	r3, [pc, #540]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9e:	4b84      	ldr	r3, [pc, #528]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a83      	ldr	r2, [pc, #524]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b81      	ldr	r3, [pc, #516]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8000fb6:	f004 f999 	bl	80052ec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fba:	4b7d      	ldr	r3, [pc, #500]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a7c      	ldr	r2, [pc, #496]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b7a      	ldr	r3, [pc, #488]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0320 	and.w	r3, r3, #32
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	4b77      	ldr	r3, [pc, #476]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a76      	ldr	r2, [pc, #472]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b74      	ldr	r3, [pc, #464]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	4b71      	ldr	r3, [pc, #452]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a70      	ldr	r2, [pc, #448]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b6e      	ldr	r3, [pc, #440]	; (80011b0 <MX_GPIO_Init+0x288>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(flash_cs_GPIO_Port, flash_cs_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001008:	486a      	ldr	r0, [pc, #424]	; (80011b4 <MX_GPIO_Init+0x28c>)
 800100a:	f002 ffcd 	bl	8003fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, flash_mosi_Pin|flash_clk_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001014:	4868      	ldr	r0, [pc, #416]	; (80011b8 <MX_GPIO_Init+0x290>)
 8001016:	f002 ffc7 	bl	8003fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	21a0      	movs	r1, #160	; 0xa0
 800101e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001022:	f002 ffc1 	bl	8003fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102c:	4863      	ldr	r0, [pc, #396]	; (80011bc <MX_GPIO_Init+0x294>)
 800102e:	f002 ffbb 	bl	8003fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001038:	4861      	ldr	r0, [pc, #388]	; (80011c0 <MX_GPIO_Init+0x298>)
 800103a:	f002 ffb5 	bl	8003fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001044:	485d      	ldr	r0, [pc, #372]	; (80011bc <MX_GPIO_Init+0x294>)
 8001046:	f002 ffaf 	bl	8003fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : flash_cs_Pin */
  GPIO_InitStruct.Pin = flash_cs_Pin;
 800104a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(flash_cs_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4854      	ldr	r0, [pc, #336]	; (80011b4 <MX_GPIO_Init+0x28c>)
 8001064:	f002 fdf6 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : flash_mosi_Pin flash_clk_Pin */
  GPIO_InitStruct.Pin = flash_mosi_Pin|flash_clk_Pin;
 8001068:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	484d      	ldr	r0, [pc, #308]	; (80011b8 <MX_GPIO_Init+0x290>)
 8001082:	f002 fde7 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : flash_miso_Pin */
  GPIO_InitStruct.Pin = flash_miso_Pin;
 8001086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(flash_miso_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4847      	ldr	r0, [pc, #284]	; (80011b8 <MX_GPIO_Init+0x290>)
 800109c:	f002 fdda 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4843      	ldr	r0, [pc, #268]	; (80011c4 <MX_GPIO_Init+0x29c>)
 80010b6:	f002 fdcd 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80010ba:	2318      	movs	r3, #24
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f002 fdc0 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010d4:	23a0      	movs	r3, #160	; 0xa0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f002 fdb1 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010f2:	2310      	movs	r3, #16
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	482b      	ldr	r0, [pc, #172]	; (80011b4 <MX_GPIO_Init+0x28c>)
 8001106:	f002 fda5 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800110a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	4826      	ldr	r0, [pc, #152]	; (80011bc <MX_GPIO_Init+0x294>)
 8001124:	f002 fd96 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001128:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	481f      	ldr	r0, [pc, #124]	; (80011c0 <MX_GPIO_Init+0x298>)
 8001142:	f002 fd87 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001146:	2301      	movs	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	4819      	ldr	r0, [pc, #100]	; (80011c0 <MX_GPIO_Init+0x298>)
 800115a:	f002 fd7b 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001164:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116a:	2302      	movs	r3, #2
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <MX_GPIO_Init+0x294>)
 8001176:	f002 fd6d 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800117a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001184:	2301      	movs	r3, #1
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	480a      	ldr	r0, [pc, #40]	; (80011bc <MX_GPIO_Init+0x294>)
 8001194:	f002 fd5e 	bl	8003c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2103      	movs	r1, #3
 800119c:	2028      	movs	r0, #40	; 0x28
 800119e:	f001 fe20 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011a2:	2028      	movs	r0, #40	; 0x28
 80011a4:	f001 fe39 	bl	8002e1a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a8:	bf00      	nop
 80011aa:	3738      	adds	r7, #56	; 0x38
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48001400 	.word	0x48001400
 80011bc:	48001000 	.word	0x48001000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000c00 	.word	0x48000c00

080011c8 <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config() {
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b0af      	sub	sp, #188	; 0xbc
 80011cc:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK) {
 80011ce:	48c4      	ldr	r0, [pc, #784]	; (80014e0 <mipi_config+0x318>)
 80011d0:	f002 fc1d 	bl	8003a0e <HAL_DSI_Start>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <mipi_config+0x16>
		Error_Handler();
 80011da:	f001 f8b9 	bl	8002350 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 80011de:	23c3      	movs	r3, #195	; 0xc3
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	23f0      	movs	r3, #240	; 0xf0
 80011e4:	2215      	movs	r2, #21
 80011e6:	2100      	movs	r1, #0
 80011e8:	48bd      	ldr	r0, [pc, #756]	; (80014e0 <mipi_config+0x318>)
 80011ea:	f002 fc4c 	bl	8003a86 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 80011ee:	2396      	movs	r3, #150	; 0x96
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	23f0      	movs	r3, #240	; 0xf0
 80011f4:	2215      	movs	r2, #21
 80011f6:	2100      	movs	r1, #0
 80011f8:	48b9      	ldr	r0, [pc, #740]	; (80014e0 <mipi_config+0x318>)
 80011fa:	f002 fc44 	bl	8003a86 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = { 0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33 };
 80011fe:	4ab9      	ldr	r2, [pc, #740]	; (80014e4 <mipi_config+0x31c>)
 8001200:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001208:	6018      	str	r0, [r3, #0]
 800120a:	3304      	adds	r3, #4
 800120c:	8019      	strh	r1, [r3, #0]
 800120e:	3302      	adds	r3, #2
 8001210:	0c0a      	lsrs	r2, r1, #16
 8001212:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8001214:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	23e7      	movs	r3, #231	; 0xe7
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2308      	movs	r3, #8
 8001220:	2239      	movs	r2, #57	; 0x39
 8001222:	2100      	movs	r1, #0
 8001224:	48ae      	ldr	r0, [pc, #696]	; (80014e0 <mipi_config+0x318>)
 8001226:	f002 fc50 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = { 0xC0, 0x68, 0xE0 };
 800122a:	4aaf      	ldr	r2, [pc, #700]	; (80014e8 <mipi_config+0x320>)
 800122c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	4611      	mov	r1, r2
 8001234:	8019      	strh	r1, [r3, #0]
 8001236:	3302      	adds	r3, #2
 8001238:	0c12      	lsrs	r2, r2, #16
 800123a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 800123c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	23a4      	movs	r3, #164	; 0xa4
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2304      	movs	r3, #4
 8001248:	2239      	movs	r2, #57	; 0x39
 800124a:	2100      	movs	r1, #0
 800124c:	48a4      	ldr	r0, [pc, #656]	; (80014e0 <mipi_config+0x318>)
 800124e:	f002 fc3c 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = { 0x42, 0x05, 0x24, 0x03 };
 8001252:	4ba6      	ldr	r3, [pc, #664]	; (80014ec <mipi_config+0x324>)
 8001254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8001258:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	23c3      	movs	r3, #195	; 0xc3
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2305      	movs	r3, #5
 8001264:	2239      	movs	r2, #57	; 0x39
 8001266:	2100      	movs	r1, #0
 8001268:	489d      	ldr	r0, [pc, #628]	; (80014e0 <mipi_config+0x318>)
 800126a:	f002 fc2e 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = { 0x42, 0x05, 0x24, 0x03 };
 800126e:	4b9f      	ldr	r3, [pc, #636]	; (80014ec <mipi_config+0x324>)
 8001270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 8001274:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	23c4      	movs	r3, #196	; 0xc4
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2305      	movs	r3, #5
 8001280:	2239      	movs	r2, #57	; 0x39
 8001282:	2100      	movs	r1, #0
 8001284:	4896      	ldr	r0, [pc, #600]	; (80014e0 <mipi_config+0x318>)
 8001286:	f002 fc20 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 800128a:	4a99      	ldr	r2, [pc, #612]	; (80014f0 <mipi_config+0x328>)
 800128c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001290:	ca07      	ldmia	r2, {r0, r1, r2}
 8001292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 8001296:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	23e5      	movs	r3, #229	; 0xe5
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	230d      	movs	r3, #13
 80012a2:	2239      	movs	r2, #57	; 0x39
 80012a4:	2100      	movs	r1, #0
 80012a6:	488e      	ldr	r0, [pc, #568]	; (80014e0 <mipi_config+0x318>)
 80012a8:	f002 fc0f 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 80012ac:	4a90      	ldr	r2, [pc, #576]	; (80014f0 <mipi_config+0x328>)
 80012ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 80012b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	23e6      	movs	r3, #230	; 0xe6
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	230d      	movs	r3, #13
 80012c4:	2239      	movs	r2, #57	; 0x39
 80012c6:	2100      	movs	r1, #0
 80012c8:	4885      	ldr	r0, [pc, #532]	; (80014e0 <mipi_config+0x318>)
 80012ca:	f002 fbfe 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = { 0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22 };
 80012ce:	4a89      	ldr	r2, [pc, #548]	; (80014f4 <mipi_config+0x32c>)
 80012d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d8:	6018      	str	r0, [r3, #0]
 80012da:	3304      	adds	r3, #4
 80012dc:	8019      	strh	r1, [r3, #0]
 80012de:	3302      	adds	r3, #2
 80012e0:	0c0a      	lsrs	r2, r1, #16
 80012e2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 80012e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	23ec      	movs	r3, #236	; 0xec
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2308      	movs	r3, #8
 80012f0:	2239      	movs	r2, #57	; 0x39
 80012f2:	2100      	movs	r1, #0
 80012f4:	487a      	ldr	r0, [pc, #488]	; (80014e0 <mipi_config+0x318>)
 80012f6:	f002 fbe8 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80012fa:	4b7f      	ldr	r3, [pc, #508]	; (80014f8 <mipi_config+0x330>)
 80012fc:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 80012fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	23c1      	movs	r3, #193	; 0xc1
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2305      	movs	r3, #5
 800130a:	2239      	movs	r2, #57	; 0x39
 800130c:	2100      	movs	r1, #0
 800130e:	4874      	ldr	r0, [pc, #464]	; (80014e0 <mipi_config+0x318>)
 8001310:	f002 fbdb 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = { 0x88, 0x05, 0x0F, 0x18 };
 8001314:	4b78      	ldr	r3, [pc, #480]	; (80014f8 <mipi_config+0x330>)
 8001316:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 8001318:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	23c2      	movs	r3, #194	; 0xc2
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2305      	movs	r3, #5
 8001324:	2239      	movs	r2, #57	; 0x39
 8001326:	2100      	movs	r1, #0
 8001328:	486d      	ldr	r0, [pc, #436]	; (80014e0 <mipi_config+0x318>)
 800132a:	f002 fbce 	bl	8003aca <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 800132e:	2300      	movs	r3, #0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2336      	movs	r3, #54	; 0x36
 8001334:	2215      	movs	r2, #21
 8001336:	2100      	movs	r1, #0
 8001338:	4869      	ldr	r0, [pc, #420]	; (80014e0 <mipi_config+0x318>)
 800133a:	f002 fba4 	bl	8003a86 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 800133e:	2307      	movs	r3, #7
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	233a      	movs	r3, #58	; 0x3a
 8001344:	2215      	movs	r2, #21
 8001346:	2100      	movs	r1, #0
 8001348:	4865      	ldr	r0, [pc, #404]	; (80014e0 <mipi_config+0x318>)
 800134a:	f002 fb9c 	bl	8003a86 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 800134e:	23be      	movs	r3, #190	; 0xbe
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	23c5      	movs	r3, #197	; 0xc5
 8001354:	2215      	movs	r2, #21
 8001356:	2100      	movs	r1, #0
 8001358:	4861      	ldr	r0, [pc, #388]	; (80014e0 <mipi_config+0x318>)
 800135a:	f002 fb94 	bl	8003a86 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = { 0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55,
 800135e:	4b67      	ldr	r3, [pc, #412]	; (80014fc <mipi_config+0x334>)
 8001360:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001364:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001366:	c407      	stmia	r4!, {r0, r1, r2}
 8001368:	8023      	strh	r3, [r4, #0]
			0x3D, 0x19, 0x18, 0x24, 0x27 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 800136a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	23e0      	movs	r3, #224	; 0xe0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	230f      	movs	r3, #15
 8001376:	2239      	movs	r2, #57	; 0x39
 8001378:	2100      	movs	r1, #0
 800137a:	4859      	ldr	r0, [pc, #356]	; (80014e0 <mipi_config+0x318>)
 800137c:	f002 fba5 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = { 0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56,
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <mipi_config+0x338>)
 8001382:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001388:	c407      	stmia	r4!, {r0, r1, r2}
 800138a:	8023      	strh	r3, [r4, #0]
			0x3E, 0x1A, 0x18, 0x24, 0x28 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 800138c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	23e1      	movs	r3, #225	; 0xe1
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	230f      	movs	r3, #15
 8001398:	2239      	movs	r2, #57	; 0x39
 800139a:	2100      	movs	r1, #0
 800139c:	4850      	ldr	r0, [pc, #320]	; (80014e0 <mipi_config+0x318>)
 800139e:	f002 fb94 	bl	8003aca <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 80013a2:	2310      	movs	r3, #16
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	23b2      	movs	r3, #178	; 0xb2
 80013a8:	2215      	movs	r2, #21
 80013aa:	2100      	movs	r1, #0
 80013ac:	484c      	ldr	r0, [pc, #304]	; (80014e0 <mipi_config+0x318>)
 80013ae:	f002 fb6a 	bl	8003a86 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 80013b2:	2301      	movs	r3, #1
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	23b3      	movs	r3, #179	; 0xb3
 80013b8:	2215      	movs	r2, #21
 80013ba:	2100      	movs	r1, #0
 80013bc:	4848      	ldr	r0, [pc, #288]	; (80014e0 <mipi_config+0x318>)
 80013be:	f002 fb62 	bl	8003a86 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 80013c2:	2301      	movs	r3, #1
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	23b4      	movs	r3, #180	; 0xb4
 80013c8:	2215      	movs	r2, #21
 80013ca:	2100      	movs	r1, #0
 80013cc:	4844      	ldr	r0, [pc, #272]	; (80014e0 <mipi_config+0x318>)
 80013ce:	f002 fb5a 	bl	8003a86 <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = { 0x27, 0x09 };
 80013d2:	f640 1327 	movw	r3, #2343	; 0x927
 80013d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 80013da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	23b6      	movs	r3, #182	; 0xb6
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2303      	movs	r3, #3
 80013e6:	2239      	movs	r2, #57	; 0x39
 80013e8:	2100      	movs	r1, #0
 80013ea:	483d      	ldr	r0, [pc, #244]	; (80014e0 <mipi_config+0x318>)
 80013ec:	f002 fb6d 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = { 0x00, 0x54, 0x00, 0x54 };
 80013f0:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 80013f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 80013f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	23b5      	movs	r3, #181	; 0xb5
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2305      	movs	r3, #5
 8001402:	2239      	movs	r2, #57	; 0x39
 8001404:	2100      	movs	r1, #0
 8001406:	4836      	ldr	r0, [pc, #216]	; (80014e0 <mipi_config+0x318>)
 8001408:	f002 fb5f 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 800140c:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <mipi_config+0x33c>)
 800140e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001412:	ca07      	ldmia	r2, {r0, r1, r2}
 8001414:	c303      	stmia	r3!, {r0, r1}
 8001416:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 8001418:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	23a5      	movs	r3, #165	; 0xa5
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	230a      	movs	r3, #10
 8001424:	2239      	movs	r2, #57	; 0x39
 8001426:	2100      	movs	r1, #0
 8001428:	482d      	ldr	r0, [pc, #180]	; (80014e0 <mipi_config+0x318>)
 800142a:	f002 fb4e 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 800142e:	4a35      	ldr	r2, [pc, #212]	; (8001504 <mipi_config+0x33c>)
 8001430:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001434:	ca07      	ldmia	r2, {r0, r1, r2}
 8001436:	c303      	stmia	r3!, {r0, r1}
 8001438:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 800143a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	23a6      	movs	r3, #166	; 0xa6
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	230a      	movs	r3, #10
 8001446:	2239      	movs	r2, #57	; 0x39
 8001448:	2100      	movs	r1, #0
 800144a:	4825      	ldr	r0, [pc, #148]	; (80014e0 <mipi_config+0x318>)
 800144c:	f002 fb3d 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = { 0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00 };
 8001450:	4a2d      	ldr	r2, [pc, #180]	; (8001508 <mipi_config+0x340>)
 8001452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001456:	e892 0003 	ldmia.w	r2, {r0, r1}
 800145a:	6018      	str	r0, [r3, #0]
 800145c:	3304      	adds	r3, #4
 800145e:	8019      	strh	r1, [r3, #0]
 8001460:	3302      	adds	r3, #2
 8001462:	0c0a      	lsrs	r2, r1, #16
 8001464:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 8001466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	23ba      	movs	r3, #186	; 0xba
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2308      	movs	r3, #8
 8001472:	2239      	movs	r2, #57	; 0x39
 8001474:	2100      	movs	r1, #0
 8001476:	481a      	ldr	r0, [pc, #104]	; (80014e0 <mipi_config+0x318>)
 8001478:	f002 fb27 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 800147c:	4a23      	ldr	r2, [pc, #140]	; (800150c <mipi_config+0x344>)
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001486:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 800148a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	23bb      	movs	r3, #187	; 0xbb
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2309      	movs	r3, #9
 8001496:	2239      	movs	r2, #57	; 0x39
 8001498:	2100      	movs	r1, #0
 800149a:	4811      	ldr	r0, [pc, #68]	; (80014e0 <mipi_config+0x318>)
 800149c:	f002 fb15 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 80014a0:	4a1a      	ldr	r2, [pc, #104]	; (800150c <mipi_config+0x344>)
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014aa:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	23bc      	movs	r3, #188	; 0xbc
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2309      	movs	r3, #9
 80014ba:	2239      	movs	r2, #57	; 0x39
 80014bc:	2100      	movs	r1, #0
 80014be:	4808      	ldr	r0, [pc, #32]	; (80014e0 <mipi_config+0x318>)
 80014c0:	f002 fb03 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = { 0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF,
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <mipi_config+0x348>)
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80014cc:	c303      	stmia	r3!, {r0, r1}
 80014ce:	801a      	strh	r2, [r3, #0]
 80014d0:	3302      	adds	r3, #2
 80014d2:	0c12      	lsrs	r2, r2, #16
 80014d4:	701a      	strb	r2, [r3, #0]
			0xFF, 0xF9 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	e01a      	b.n	8001514 <mipi_config+0x34c>
 80014de:	bf00      	nop
 80014e0:	20004b34 	.word	0x20004b34
 80014e4:	08009100 	.word	0x08009100
 80014e8:	08009108 	.word	0x08009108
 80014ec:	03240542 	.word	0x03240542
 80014f0:	0800910c 	.word	0x0800910c
 80014f4:	08009118 	.word	0x08009118
 80014f8:	180f0588 	.word	0x180f0588
 80014fc:	08009120 	.word	0x08009120
 8001500:	08009130 	.word	0x08009130
 8001504:	08009140 	.word	0x08009140
 8001508:	0800914c 	.word	0x0800914c
 800150c:	08009154 	.word	0x08009154
 8001510:	0800915c 	.word	0x0800915c
 8001514:	23bd      	movs	r3, #189	; 0xbd
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	230c      	movs	r3, #12
 800151a:	2239      	movs	r2, #57	; 0x39
 800151c:	2100      	movs	r1, #0
 800151e:	482d      	ldr	r0, [pc, #180]	; (80015d4 <mipi_config+0x40c>)
 8001520:	f002 fad3 	bl	8003aca <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 8001524:	23c3      	movs	r3, #195	; 0xc3
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	23ed      	movs	r3, #237	; 0xed
 800152a:	2215      	movs	r2, #21
 800152c:	2100      	movs	r1, #0
 800152e:	4829      	ldr	r0, [pc, #164]	; (80015d4 <mipi_config+0x40c>)
 8001530:	f002 faa9 	bl	8003a86 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = { 0x40, 0x0F, 0x00 };
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <mipi_config+0x410>)
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	4611      	mov	r1, r2
 800153e:	8019      	strh	r1, [r3, #0]
 8001540:	3302      	adds	r3, #2
 8001542:	0c12      	lsrs	r2, r2, #16
 8001544:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	23e4      	movs	r3, #228	; 0xe4
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2304      	movs	r3, #4
 8001552:	2239      	movs	r2, #57	; 0x39
 8001554:	2100      	movs	r1, #0
 8001556:	481f      	ldr	r0, [pc, #124]	; (80015d4 <mipi_config+0x40c>)
 8001558:	f002 fab7 	bl	8003aca <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = { 0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25 };
 800155c:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <mipi_config+0x414>)
 800155e:	463b      	mov	r3, r7
 8001560:	ca07      	ldmia	r2, {r0, r1, r2}
 8001562:	c303      	stmia	r3!, {r0, r1}
 8001564:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 8001566:	463b      	mov	r3, r7
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	23cc      	movs	r3, #204	; 0xcc
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	230a      	movs	r3, #10
 8001570:	2239      	movs	r2, #57	; 0x39
 8001572:	2100      	movs	r1, #0
 8001574:	4817      	ldr	r0, [pc, #92]	; (80015d4 <mipi_config+0x40c>)
 8001576:	f002 faa8 	bl	8003aca <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800157a:	2300      	movs	r3, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2335      	movs	r3, #53	; 0x35
 8001580:	2215      	movs	r2, #21
 8001582:	2100      	movs	r1, #0
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <mipi_config+0x40c>)
 8001586:	f002 fa7e 	bl	8003a86 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 800158a:	2000      	movs	r0, #0
 800158c:	f001 fb2a 	bl	8002be4 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2311      	movs	r3, #17
 8001596:	2205      	movs	r2, #5
 8001598:	2100      	movs	r1, #0
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <mipi_config+0x40c>)
 800159c:	f002 fa73 	bl	8003a86 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80015a0:	2078      	movs	r0, #120	; 0x78
 80015a2:	f001 fb1f 	bl	8002be4 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 80015a6:	2300      	movs	r3, #0
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2329      	movs	r3, #41	; 0x29
 80015ac:	2205      	movs	r2, #5
 80015ae:	2100      	movs	r1, #0
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <mipi_config+0x40c>)
 80015b2:	f002 fa68 	bl	8003a86 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80015b6:	2078      	movs	r0, #120	; 0x78
 80015b8:	f001 fb14 	bl	8002be4 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2335      	movs	r3, #53	; 0x35
 80015c2:	2215      	movs	r2, #21
 80015c4:	2100      	movs	r1, #0
 80015c6:	4803      	ldr	r0, [pc, #12]	; (80015d4 <mipi_config+0x40c>)
 80015c8:	f002 fa5d 	bl	8003a86 <HAL_DSI_ShortWrite>
}
 80015cc:	bf00      	nop
 80015ce:	37b4      	adds	r7, #180	; 0xb4
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	20004b34 	.word	0x20004b34
 80015d8:	08009168 	.word	0x08009168
 80015dc:	0800916c 	.word	0x0800916c

080015e0 <SPI_master2slave>:

void SPI_master2slave(char * buf, char * frame_buf, uint8_t image_flag) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	4613      	mov	r3, r2
 80015ec:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 1000);
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	2201      	movs	r2, #1
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <SPI_master2slave+0x60>)
 80015f8:	f005 fb7b 	bl	8006cf2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &buf[1], 1, 1000);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1c59      	adds	r1, r3, #1
 8001600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001604:	2201      	movs	r2, #1
 8001606:	480e      	ldr	r0, [pc, #56]	; (8001640 <SPI_master2slave+0x60>)
 8001608:	f005 fb73 	bl	8006cf2 <HAL_SPI_Transmit>
	if(image_flag == 1)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d112      	bne.n	8001638 <SPI_master2slave+0x58>
	{
		for(int i=0; i< 6400; i++)
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e00b      	b.n	8001630 <SPI_master2slave+0x50>
		{
			HAL_SPI_Transmit(&hspi1, &frame_buf[i], 1, 1000);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	18d1      	adds	r1, r2, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	2201      	movs	r2, #1
 8001624:	4806      	ldr	r0, [pc, #24]	; (8001640 <SPI_master2slave+0x60>)
 8001626:	f005 fb64 	bl	8006cf2 <HAL_SPI_Transmit>
		for(int i=0; i< 6400; i++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8001636:	dbef      	blt.n	8001618 <SPI_master2slave+0x38>
		}
	}
}
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20004cf0 	.word	0x20004cf0

08001644 <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = { 0 };
 800164e:	2300      	movs	r3, #0
 8001650:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = { 0 };
 8001652:	2300      	movs	r3, #0
 8001654:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t*) Register_Address, 1, 1000);
 8001656:	f107 010c 	add.w	r1, r7, #12
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	2201      	movs	r2, #1
 8001660:	483d      	ldr	r0, [pc, #244]	; (8001758 <Write_Registers_data+0x114>)
 8001662:	f005 fcbb 	bl	8006fdc <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t*) data, 1, 1000);
 8001666:	f107 0108 	add.w	r1, r7, #8
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	2201      	movs	r2, #1
 8001670:	4839      	ldr	r0, [pc, #228]	; (8001758 <Write_Registers_data+0x114>)
 8001672:	f005 fcb3 	bl	8006fdc <HAL_SPI_Receive>
	HAL_SPI_Transmit(&hspi1, &Register_Address[0], 1, 1000);
 8001676:	f107 010c 	add.w	r1, r7, #12
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	2201      	movs	r2, #1
 8001680:	4836      	ldr	r0, [pc, #216]	; (800175c <Write_Registers_data+0x118>)
 8001682:	f005 fb36 	bl	8006cf2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data[0], 1, 1000);
 8001686:	f107 0108 	add.w	r1, r7, #8
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	2201      	movs	r2, #1
 8001690:	4832      	ldr	r0, [pc, #200]	; (800175c <Write_Registers_data+0x118>)
 8001692:	f005 fb2e 	bl	8006cf2 <HAL_SPI_Transmit>
	if(do_flag == 1)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d158      	bne.n	800174e <Write_Registers_data+0x10a>
	{
		switch (Register_Address[0]) {
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	2b13      	cmp	r3, #19
 80016a0:	d855      	bhi.n	800174e <Write_Registers_data+0x10a>
 80016a2:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <Write_Registers_data+0x64>)
 80016a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a8:	08001749 	.word	0x08001749
 80016ac:	08001749 	.word	0x08001749
 80016b0:	08001749 	.word	0x08001749
 80016b4:	08001749 	.word	0x08001749
 80016b8:	08001749 	.word	0x08001749
 80016bc:	08001749 	.word	0x08001749
 80016c0:	080016f9 	.word	0x080016f9
 80016c4:	08001749 	.word	0x08001749
 80016c8:	08001749 	.word	0x08001749
 80016cc:	08001749 	.word	0x08001749
 80016d0:	08001749 	.word	0x08001749
 80016d4:	08001749 	.word	0x08001749
 80016d8:	08001749 	.word	0x08001749
 80016dc:	08001749 	.word	0x08001749
 80016e0:	08001749 	.word	0x08001749
 80016e4:	08001749 	.word	0x08001749
 80016e8:	0800170b 	.word	0x0800170b
 80016ec:	0800174f 	.word	0x0800174f
 80016f0:	0800174f 	.word	0x0800174f
 80016f4:	08001749 	.word	0x08001749
		case 4: //Vertical blanking (High byte)
			break;
		case 5: //Vertical blanking (Low byte)
			break;
		case 6: //Frame rate x 2 (Hz)
			frame_rate=(uint32_t)data[0]*1000;
 80016f8:	7a3b      	ldrb	r3, [r7, #8]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	4a16      	ldr	r2, [pc, #88]	; (8001760 <Write_Registers_data+0x11c>)
 8001706:	6013      	str	r3, [r2, #0]
			break;
 8001708:	e021      	b.n	800174e <Write_Registers_data+0x10a>
		case 14: //Day of Version
			break;
		case 15: //Month of Version
			break;
		case 16: //Control A
			switch (data[0] & 0b00000011) {
 800170a:	7a3b      	ldrb	r3, [r7, #8]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d81b      	bhi.n	800174c <Write_Registers_data+0x108>
 8001714:	a201      	add	r2, pc, #4	; (adr r2, 800171c <Write_Registers_data+0xd8>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	0800172d 	.word	0x0800172d
 8001720:	08001735 	.word	0x08001735
 8001724:	08001745 	.word	0x08001745
 8001728:	0800173d 	.word	0x0800173d
			case 0b00000000:  //Display content of frame buffer (0)
				play_mode_source = 1;
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <Write_Registers_data+0x120>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
				break;
 8001732:	e008      	b.n	8001746 <Write_Registers_data+0x102>
			case 0b00000001:  //Display content of frame buffer (1)
				play_mode_source = 2;
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <Write_Registers_data+0x120>)
 8001736:	2202      	movs	r2, #2
 8001738:	701a      	strb	r2, [r3, #0]
				break;
 800173a:	e004      	b.n	8001746 <Write_Registers_data+0x102>
			case 0b00000010:  //Display SPI input content
				break;
			case 0b00000011:  //Display Flash content
				play_mode_source = 0;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <Write_Registers_data+0x120>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
				break;
 8001742:	e000      	b.n	8001746 <Write_Registers_data+0x102>
				break;
 8001744:	bf00      	nop
			}
			break;
 8001746:	e001      	b.n	800174c <Write_Registers_data+0x108>
			break;
 8001748:	bf00      	nop
 800174a:	e000      	b.n	800174e <Write_Registers_data+0x10a>
			break;
 800174c:	bf00      	nop
		case 19: //Status
			break;
		}
	}
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20004db8 	.word	0x20004db8
 800175c:	20004cf0 	.word	0x20004cf0
 8001760:	20000004 	.word	0x20000004
 8001764:	2000b2b5 	.word	0x2000b2b5

08001768 <LCD_PowerOn>:
		}
	}*/
}

static void LCD_PowerOn(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <LCD_PowerOn+0x2c>)
 8001774:	f002 fc18 	bl	8003fa8 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 8001778:	2014      	movs	r0, #20
 800177a:	f001 fa33 	bl	8002be4 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <LCD_PowerOn+0x2c>)
 8001786:	f002 fc0f 	bl	8003fa8 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 800178a:	2078      	movs	r0, #120	; 0x78
 800178c:	f001 fa2a 	bl	8002be4 <HAL_Delay>
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	48001000 	.word	0x48001000

08001798 <delay_us>:

void delay_us(int time)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	int i = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
	while (time--)
 80017a4:	e007      	b.n	80017b6 <delay_us+0x1e>
	{
		i = 13;
 80017a6:	230d      	movs	r3, #13
 80017a8:	60fb      	str	r3, [r7, #12]
		while (i--)
 80017aa:	bf00      	nop
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e5a      	subs	r2, r3, #1
 80017b0:	60fa      	str	r2, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1fa      	bne.n	80017ac <delay_us+0x14>
	while (time--)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f2      	bne.n	80017a6 <delay_us+0xe>
			;
	}
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <delay_100ns>:

void delay_100ns(int time)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	int i = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
	while (time--)
 80017da:	e007      	b.n	80017ec <delay_100ns+0x1e>
	{
		i = 1;
 80017dc:	2301      	movs	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
		while (i--)
 80017e0:	bf00      	nop
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	60fa      	str	r2, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1fa      	bne.n	80017e2 <delay_100ns+0x14>
	while (time--)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f2      	bne.n	80017dc <delay_100ns+0xe>
			;
	}
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_GPIO_EXTI_Callback>:

int button_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_12)
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001814:	d15b      	bne.n	80018ce <HAL_GPIO_EXTI_Callback+0xca>
	{
		button_count++;
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	4a2d      	ldr	r2, [pc, #180]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800181e:	6013      	str	r3, [r2, #0]
		delay_us(50000);
 8001820:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001824:	f7ff ffb8 	bl	8001798 <delay_us>
		for(int i=0; i<200; i++)
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e02e      	b.n	800188c <HAL_GPIO_EXTI_Callback+0x88>
		{
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == GPIO_PIN_RESET)
 800182e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001832:	4829      	ldr	r0, [pc, #164]	; (80018d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001834:	f002 fba0 	bl	8003f78 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d11a      	bne.n	8001874 <HAL_GPIO_EXTI_Callback+0x70>
			{
				if(button_count<50 && play_mode==0)
 800183e:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b31      	cmp	r3, #49	; 0x31
 8001844:	dc12      	bgt.n	800186c <HAL_GPIO_EXTI_Callback+0x68>
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10e      	bne.n	800186c <HAL_GPIO_EXTI_Callback+0x68>
				{
					display_image_number++;
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001858:	701a      	strb	r2, [r3, #0]
					if(display_image_number >= total_image_in_flash)
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d302      	bcc.n	800186c <HAL_GPIO_EXTI_Callback+0x68>
						display_image_number = 0;
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
				}
				button_count = 0;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
				return;
 8001872:	e02c      	b.n	80018ce <HAL_GPIO_EXTI_Callback+0xca>
			}
			button_count++;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	4a16      	ldr	r2, [pc, #88]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800187c:	6013      	str	r3, [r2, #0]
			delay_us(10000);
 800187e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001882:	f7ff ff89 	bl	8001798 <delay_us>
		for(int i=0; i<200; i++)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2bc7      	cmp	r3, #199	; 0xc7
 8001890:	ddcd      	ble.n	800182e <HAL_GPIO_EXTI_Callback+0x2a>
		}
		if(play_mode==1)
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d109      	bne.n	80018ae <HAL_GPIO_EXTI_Callback+0xaa>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a0:	4811      	ldr	r0, [pc, #68]	; (80018e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80018a2:	f002 fb81 	bl	8003fa8 <HAL_GPIO_WritePin>
			play_mode = 0;
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	e00c      	b.n	80018c8 <HAL_GPIO_EXTI_Callback+0xc4>
		}
		else if(play_mode==0)
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d108      	bne.n	80018c8 <HAL_GPIO_EXTI_Callback+0xc4>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80018be:	f002 fb73 	bl	8003fa8 <HAL_GPIO_WritePin>
			play_mode = 1;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
		}
		button_count = 0;
 80018c8:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
	}
}
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000b2b8 	.word	0x2000b2b8
 80018d8:	48001000 	.word	0x48001000
 80018dc:	2000b2b4 	.word	0x2000b2b4
 80018e0:	2000b2b6 	.word	0x2000b2b6
 80018e4:	20000008 	.word	0x20000008
 80018e8:	48000400 	.word	0x48000400

080018ec <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	// USB command: Type and command
	switch (spi3_buf[0] & 0b11000000) {
 80018f4:	4bbc      	ldr	r3, [pc, #752]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018fc:	2bc0      	cmp	r3, #192	; 0xc0
 80018fe:	f000 81e9 	beq.w	8001cd4 <HAL_SPI_RxCpltCallback+0x3e8>
 8001902:	2bc0      	cmp	r3, #192	; 0xc0
 8001904:	f300 82ff 	bgt.w	8001f06 <HAL_SPI_RxCpltCallback+0x61a>
 8001908:	2b80      	cmp	r3, #128	; 0x80
 800190a:	f000 81d7 	beq.w	8001cbc <HAL_SPI_RxCpltCallback+0x3d0>
 800190e:	2b80      	cmp	r3, #128	; 0x80
 8001910:	f300 82f9 	bgt.w	8001f06 <HAL_SPI_RxCpltCallback+0x61a>
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_SPI_RxCpltCallback+0x34>
 8001918:	2b40      	cmp	r3, #64	; 0x40
 800191a:	f000 8171 	beq.w	8001c00 <HAL_SPI_RxCpltCallback+0x314>
 800191e:	e2f2      	b.n	8001f06 <HAL_SPI_RxCpltCallback+0x61a>
	case 0b00000000:  //Chain SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 8001920:	4bb1      	ldr	r3, [pc, #708]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001928:	2b38      	cmp	r3, #56	; 0x38
 800192a:	f200 82db 	bhi.w	8001ee4 <HAL_SPI_RxCpltCallback+0x5f8>
 800192e:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <HAL_SPI_RxCpltCallback+0x48>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	08001a19 	.word	0x08001a19
 8001938:	08001ee5 	.word	0x08001ee5
 800193c:	08001ee5 	.word	0x08001ee5
 8001940:	08001ee5 	.word	0x08001ee5
 8001944:	08001ee5 	.word	0x08001ee5
 8001948:	08001ee5 	.word	0x08001ee5
 800194c:	08001ee5 	.word	0x08001ee5
 8001950:	08001ee5 	.word	0x08001ee5
 8001954:	08001acb 	.word	0x08001acb
 8001958:	08001ee5 	.word	0x08001ee5
 800195c:	08001ee5 	.word	0x08001ee5
 8001960:	08001ee5 	.word	0x08001ee5
 8001964:	08001ee5 	.word	0x08001ee5
 8001968:	08001ee5 	.word	0x08001ee5
 800196c:	08001ee5 	.word	0x08001ee5
 8001970:	08001ee5 	.word	0x08001ee5
 8001974:	08001b7b 	.word	0x08001b7b
 8001978:	08001ee5 	.word	0x08001ee5
 800197c:	08001ee5 	.word	0x08001ee5
 8001980:	08001ee5 	.word	0x08001ee5
 8001984:	08001ee5 	.word	0x08001ee5
 8001988:	08001ee5 	.word	0x08001ee5
 800198c:	08001ee5 	.word	0x08001ee5
 8001990:	08001ee5 	.word	0x08001ee5
 8001994:	08001be3 	.word	0x08001be3
 8001998:	08001ee5 	.word	0x08001ee5
 800199c:	08001ee5 	.word	0x08001ee5
 80019a0:	08001ee5 	.word	0x08001ee5
 80019a4:	08001ee5 	.word	0x08001ee5
 80019a8:	08001ee5 	.word	0x08001ee5
 80019ac:	08001ee5 	.word	0x08001ee5
 80019b0:	08001ee5 	.word	0x08001ee5
 80019b4:	08001be3 	.word	0x08001be3
 80019b8:	08001ee5 	.word	0x08001ee5
 80019bc:	08001ee5 	.word	0x08001ee5
 80019c0:	08001ee5 	.word	0x08001ee5
 80019c4:	08001ee5 	.word	0x08001ee5
 80019c8:	08001ee5 	.word	0x08001ee5
 80019cc:	08001ee5 	.word	0x08001ee5
 80019d0:	08001ee5 	.word	0x08001ee5
 80019d4:	08001be3 	.word	0x08001be3
 80019d8:	08001ee5 	.word	0x08001ee5
 80019dc:	08001ee5 	.word	0x08001ee5
 80019e0:	08001ee5 	.word	0x08001ee5
 80019e4:	08001ee5 	.word	0x08001ee5
 80019e8:	08001ee5 	.word	0x08001ee5
 80019ec:	08001ee5 	.word	0x08001ee5
 80019f0:	08001ee5 	.word	0x08001ee5
 80019f4:	08001be3 	.word	0x08001be3
 80019f8:	08001ee5 	.word	0x08001ee5
 80019fc:	08001ee5 	.word	0x08001ee5
 8001a00:	08001ee5 	.word	0x08001ee5
 8001a04:	08001ee5 	.word	0x08001ee5
 8001a08:	08001ee5 	.word	0x08001ee5
 8001a0c:	08001ee5 	.word	0x08001ee5
 8001a10:	08001ee5 	.word	0x08001ee5
 8001a14:	08001be3 	.word	0x08001be3
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi3_buf[0] & 0b00000111) {
 8001a18:	4b73      	ldr	r3, [pc, #460]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d842      	bhi.n	8001aaa <HAL_SPI_RxCpltCallback+0x1be>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <HAL_SPI_RxCpltCallback+0x140>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a57 	.word	0x08001a57
 8001a34:	08001a73 	.word	0x08001a73
 8001a38:	08001a8f 	.word	0x08001a8f
			case 0b00000000: //Command for DIP switch ID = 00
				if(BOARD_NUMBER==1)
 8001a3c:	4b6b      	ldr	r3, [pc, #428]	; (8001bec <HAL_SPI_RxCpltCallback+0x300>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d140      	bne.n	8001ac6 <HAL_SPI_RxCpltCallback+0x1da>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a48:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a4c:	4968      	ldr	r1, [pc, #416]	; (8001bf0 <HAL_SPI_RxCpltCallback+0x304>)
 8001a4e:	4869      	ldr	r0, [pc, #420]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001a50:	f005 fac4 	bl	8006fdc <HAL_SPI_Receive>
				}
				break;
 8001a54:	e037      	b.n	8001ac6 <HAL_SPI_RxCpltCallback+0x1da>
			case 0b00000001: //Command for DIP switch ID = 01
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a5e:	4966      	ldr	r1, [pc, #408]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001a60:	4864      	ldr	r0, [pc, #400]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001a62:	f005 fabb 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001a66:	2201      	movs	r2, #1
 8001a68:	4963      	ldr	r1, [pc, #396]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001a6a:	485f      	ldr	r0, [pc, #380]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001a6c:	f7ff fdb8 	bl	80015e0 <SPI_master2slave>
				break;
 8001a70:	e02a      	b.n	8001ac8 <HAL_SPI_RxCpltCallback+0x1dc>
			case 0b00000010: //Command for DIP switch ID = 10
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a7a:	495f      	ldr	r1, [pc, #380]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001a7c:	485d      	ldr	r0, [pc, #372]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001a7e:	f005 faad 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001a82:	2201      	movs	r2, #1
 8001a84:	495c      	ldr	r1, [pc, #368]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001a86:	4858      	ldr	r0, [pc, #352]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001a88:	f7ff fdaa 	bl	80015e0 <SPI_master2slave>
				break;
 8001a8c:	e01c      	b.n	8001ac8 <HAL_SPI_RxCpltCallback+0x1dc>
			case 0b00000011: //Command for DIP switch ID = 11
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a96:	4958      	ldr	r1, [pc, #352]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001a98:	4856      	ldr	r0, [pc, #344]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001a9a:	f005 fa9f 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4955      	ldr	r1, [pc, #340]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001aa2:	4851      	ldr	r0, [pc, #324]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001aa4:	f7ff fd9c 	bl	80015e0 <SPI_master2slave>
				break;
 8001aa8:	e00e      	b.n	8001ac8 <HAL_SPI_RxCpltCallback+0x1dc>
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ab2:	494f      	ldr	r1, [pc, #316]	; (8001bf0 <HAL_SPI_RxCpltCallback+0x304>)
 8001ab4:	484f      	ldr	r0, [pc, #316]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001ab6:	f005 fa91 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_0, 1);
 8001aba:	2201      	movs	r2, #1
 8001abc:	494c      	ldr	r1, [pc, #304]	; (8001bf0 <HAL_SPI_RxCpltCallback+0x304>)
 8001abe:	484a      	ldr	r0, [pc, #296]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001ac0:	f7ff fd8e 	bl	80015e0 <SPI_master2slave>
				break;
 8001ac4:	e000      	b.n	8001ac8 <HAL_SPI_RxCpltCallback+0x1dc>
				break;
 8001ac6:	bf00      	nop
			}
			break;
 8001ac8:	e08c      	b.n	8001be4 <HAL_SPI_RxCpltCallback+0x2f8>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi3_buf[0] & 0b00000111) {
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d841      	bhi.n	8001b5a <HAL_SPI_RxCpltCallback+0x26e>
 8001ad6:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <HAL_SPI_RxCpltCallback+0x1f0>)
 8001ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001adc:	08001aed 	.word	0x08001aed
 8001ae0:	08001b07 	.word	0x08001b07
 8001ae4:	08001b23 	.word	0x08001b23
 8001ae8:	08001b3f 	.word	0x08001b3f
			case 0b00000000: //Command for DIP switch ID = 00
				if(BOARD_NUMBER==1)
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_SPI_RxCpltCallback+0x300>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d140      	bne.n	8001b76 <HAL_SPI_RxCpltCallback+0x28a>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001afc:	493f      	ldr	r1, [pc, #252]	; (8001bfc <HAL_SPI_RxCpltCallback+0x310>)
 8001afe:	483d      	ldr	r0, [pc, #244]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001b00:	f005 fa6c 	bl	8006fdc <HAL_SPI_Receive>
				}
				break;
 8001b04:	e037      	b.n	8001b76 <HAL_SPI_RxCpltCallback+0x28a>
			case 0b00000001: //Command for DIP switch ID = 01
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b0e:	493a      	ldr	r1, [pc, #232]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b10:	4838      	ldr	r0, [pc, #224]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001b12:	f005 fa63 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001b16:	2201      	movs	r2, #1
 8001b18:	4937      	ldr	r1, [pc, #220]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b1a:	4833      	ldr	r0, [pc, #204]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001b1c:	f7ff fd60 	bl	80015e0 <SPI_master2slave>
				break;
 8001b20:	e02a      	b.n	8001b78 <HAL_SPI_RxCpltCallback+0x28c>
			case 0b00000010: //Command for DIP switch ID = 10
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b2a:	4933      	ldr	r1, [pc, #204]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b2c:	4831      	ldr	r0, [pc, #196]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001b2e:	f005 fa55 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	4930      	ldr	r1, [pc, #192]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b36:	482c      	ldr	r0, [pc, #176]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001b38:	f7ff fd52 	bl	80015e0 <SPI_master2slave>
				break;
 8001b3c:	e01c      	b.n	8001b78 <HAL_SPI_RxCpltCallback+0x28c>
			case 0b00000011: //Command for DIP switch ID = 11
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b46:	492c      	ldr	r1, [pc, #176]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b48:	482a      	ldr	r0, [pc, #168]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001b4a:	f005 fa47 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4929      	ldr	r1, [pc, #164]	; (8001bf8 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b52:	4825      	ldr	r0, [pc, #148]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001b54:	f7ff fd44 	bl	80015e0 <SPI_master2slave>
				break;
 8001b58:	e00e      	b.n	8001b78 <HAL_SPI_RxCpltCallback+0x28c>
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b62:	4926      	ldr	r1, [pc, #152]	; (8001bfc <HAL_SPI_RxCpltCallback+0x310>)
 8001b64:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <HAL_SPI_RxCpltCallback+0x308>)
 8001b66:	f005 fa39 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_1, 1);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4923      	ldr	r1, [pc, #140]	; (8001bfc <HAL_SPI_RxCpltCallback+0x310>)
 8001b6e:	481e      	ldr	r0, [pc, #120]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001b70:	f7ff fd36 	bl	80015e0 <SPI_master2slave>
				break;
 8001b74:	e000      	b.n	8001b78 <HAL_SPI_RxCpltCallback+0x28c>
				break;
 8001b76:	bf00      	nop
			}
			break;
 8001b78:	e034      	b.n	8001be4 <HAL_SPI_RxCpltCallback+0x2f8>
		case 0b00010000: //Write Registers data
			SPI_master2slave(&spi3_buf, NULL, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	481a      	ldr	r0, [pc, #104]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001b80:	f7ff fd2e 	bl	80015e0 <SPI_master2slave>
			switch (spi3_buf[0] & 0b00000111) {
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d823      	bhi.n	8001bd8 <HAL_SPI_RxCpltCallback+0x2ec>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <HAL_SPI_RxCpltCallback+0x2ac>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001bc1 	.word	0x08001bc1
 8001ba0:	08001bc9 	.word	0x08001bc9
 8001ba4:	08001bd1 	.word	0x08001bd1
			case 0b00000000: //Command for DIP switch ID = 00
				if(BOARD_NUMBER==1)
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_SPI_RxCpltCallback+0x300>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d103      	bne.n	8001bb8 <HAL_SPI_RxCpltCallback+0x2cc>
				{
					Write_Registers_data(1);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff fd47 	bl	8001644 <Write_Registers_data>
				}
				else
				{
					Write_Registers_data(0);
				}
				break;
 8001bb6:	e013      	b.n	8001be0 <HAL_SPI_RxCpltCallback+0x2f4>
					Write_Registers_data(0);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff fd43 	bl	8001644 <Write_Registers_data>
				break;
 8001bbe:	e00f      	b.n	8001be0 <HAL_SPI_RxCpltCallback+0x2f4>
			case 0b00000001: //Command for DIP switch ID = 01
				Write_Registers_data(0);
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fd3f 	bl	8001644 <Write_Registers_data>
				break;
 8001bc6:	e00b      	b.n	8001be0 <HAL_SPI_RxCpltCallback+0x2f4>
			case 0b00000010: //Command for DIP switch ID = 10
				Write_Registers_data(0);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff fd3b 	bl	8001644 <Write_Registers_data>
				break;
 8001bce:	e007      	b.n	8001be0 <HAL_SPI_RxCpltCallback+0x2f4>
			case 0b00000011: //Command for DIP switch ID = 11
				Write_Registers_data(0);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fd37 	bl	8001644 <Write_Registers_data>
				break;
 8001bd6:	e003      	b.n	8001be0 <HAL_SPI_RxCpltCallback+0x2f4>
			default: //Broadcast to every board
				Write_Registers_data(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7ff fd33 	bl	8001644 <Write_Registers_data>
				break;
 8001bde:	bf00      	nop
			}
			break;
 8001be0:	e000      	b.n	8001be4 <HAL_SPI_RxCpltCallback+0x2f8>
		case 0b00011000: //Write partial content of frame buffer
			break;
 8001be2:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 8001be4:	e17e      	b.n	8001ee4 <HAL_SPI_RxCpltCallback+0x5f8>
 8001be6:	bf00      	nop
 8001be8:	20004eb0 	.word	0x20004eb0
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	200067b4 	.word	0x200067b4
 8001bf4:	20004db8 	.word	0x20004db8
 8001bf8:	20004eb4 	.word	0x20004eb4
 8001bfc:	200080b4 	.word	0x200080b4
	case 0b01000000:  //Master SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 8001c00:	4bb9      	ldr	r3, [pc, #740]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c08:	2b28      	cmp	r3, #40	; 0x28
 8001c0a:	f200 8177 	bhi.w	8001efc <HAL_SPI_RxCpltCallback+0x610>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <HAL_SPI_RxCpltCallback+0x328>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001cb9 	.word	0x08001cb9
 8001c18:	08001efd 	.word	0x08001efd
 8001c1c:	08001efd 	.word	0x08001efd
 8001c20:	08001efd 	.word	0x08001efd
 8001c24:	08001efd 	.word	0x08001efd
 8001c28:	08001efd 	.word	0x08001efd
 8001c2c:	08001efd 	.word	0x08001efd
 8001c30:	08001efd 	.word	0x08001efd
 8001c34:	08001cb9 	.word	0x08001cb9
 8001c38:	08001efd 	.word	0x08001efd
 8001c3c:	08001efd 	.word	0x08001efd
 8001c40:	08001efd 	.word	0x08001efd
 8001c44:	08001efd 	.word	0x08001efd
 8001c48:	08001efd 	.word	0x08001efd
 8001c4c:	08001efd 	.word	0x08001efd
 8001c50:	08001efd 	.word	0x08001efd
 8001c54:	08001cb9 	.word	0x08001cb9
 8001c58:	08001efd 	.word	0x08001efd
 8001c5c:	08001efd 	.word	0x08001efd
 8001c60:	08001efd 	.word	0x08001efd
 8001c64:	08001efd 	.word	0x08001efd
 8001c68:	08001efd 	.word	0x08001efd
 8001c6c:	08001efd 	.word	0x08001efd
 8001c70:	08001efd 	.word	0x08001efd
 8001c74:	08001cb9 	.word	0x08001cb9
 8001c78:	08001efd 	.word	0x08001efd
 8001c7c:	08001efd 	.word	0x08001efd
 8001c80:	08001efd 	.word	0x08001efd
 8001c84:	08001efd 	.word	0x08001efd
 8001c88:	08001efd 	.word	0x08001efd
 8001c8c:	08001efd 	.word	0x08001efd
 8001c90:	08001efd 	.word	0x08001efd
 8001c94:	08001cb9 	.word	0x08001cb9
 8001c98:	08001efd 	.word	0x08001efd
 8001c9c:	08001efd 	.word	0x08001efd
 8001ca0:	08001efd 	.word	0x08001efd
 8001ca4:	08001efd 	.word	0x08001efd
 8001ca8:	08001efd 	.word	0x08001efd
 8001cac:	08001efd 	.word	0x08001efd
 8001cb0:	08001efd 	.word	0x08001efd
 8001cb4:	08001cb9 	.word	0x08001cb9
		case 0b00000000: //Start SPI write data
			break;
 8001cb8:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001cba:	e11f      	b.n	8001efc <HAL_SPI_RxCpltCallback+0x610>
	case 0b10000000:  //I2C command
		switch (spi3_buf[0] & 0b00111000) {
 8001cbc:	4b8a      	ldr	r3, [pc, #552]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_SPI_RxCpltCallback+0x3e4>
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	f040 8119 	bne.w	8001f00 <HAL_SPI_RxCpltCallback+0x614>
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001cce:	e000      	b.n	8001cd2 <HAL_SPI_RxCpltCallback+0x3e6>
			break;
 8001cd0:	bf00      	nop
		}
		break;
 8001cd2:	e115      	b.n	8001f00 <HAL_SPI_RxCpltCallback+0x614>
	case 0b11000000:  //SPI flash function & Slave SPI
		switch (spi3_buf[0] & 0b00111000) {
 8001cd4:	4b84      	ldr	r3, [pc, #528]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	f000 80ff 	beq.w	8001ee0 <HAL_SPI_RxCpltCallback+0x5f4>
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	f300 810e 	bgt.w	8001f04 <HAL_SPI_RxCpltCallback+0x618>
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_SPI_RxCpltCallback+0x406>
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d076      	beq.n	8001dde <HAL_SPI_RxCpltCallback+0x4f2>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001cf0:	e108      	b.n	8001f04 <HAL_SPI_RxCpltCallback+0x618>
			switch (spi3_buf[0] & 0b00000111) {
 8001cf2:	4b7d      	ldr	r3, [pc, #500]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d850      	bhi.n	8001da0 <HAL_SPI_RxCpltCallback+0x4b4>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <HAL_SPI_RxCpltCallback+0x418>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001d4d 	.word	0x08001d4d
 8001d0c:	08001d69 	.word	0x08001d69
 8001d10:	08001d85 	.word	0x08001d85
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d18:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d1c:	4973      	ldr	r1, [pc, #460]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001d1e:	4874      	ldr	r0, [pc, #464]	; (8001ef0 <HAL_SPI_RxCpltCallback+0x604>)
 8001d20:	f005 f95c 	bl	8006fdc <HAL_SPI_Receive>
				if(BOARD_NUMBER==1)
 8001d24:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <HAL_SPI_RxCpltCallback+0x608>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d156      	bne.n	8001dda <HAL_SPI_RxCpltCallback+0x4ee>
					erase_flash_sector(spi3_buf[1] - 1);
 8001d2c:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001d2e:	785b      	ldrb	r3, [r3, #1]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fa45 	bl	80021c4 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001d3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4619      	mov	r1, r3
 8001d44:	4869      	ldr	r0, [pc, #420]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001d46:	f000 f96b 	bl	8002020 <write_flash_page>
				break;
 8001d4a:	e046      	b.n	8001dda <HAL_SPI_RxCpltCallback+0x4ee>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d50:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d54:	4965      	ldr	r1, [pc, #404]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001d56:	4866      	ldr	r0, [pc, #408]	; (8001ef0 <HAL_SPI_RxCpltCallback+0x604>)
 8001d58:	f005 f940 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4963      	ldr	r1, [pc, #396]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001d60:	4861      	ldr	r0, [pc, #388]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001d62:	f7ff fc3d 	bl	80015e0 <SPI_master2slave>
				break;
 8001d66:	e039      	b.n	8001ddc <HAL_SPI_RxCpltCallback+0x4f0>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d70:	495e      	ldr	r1, [pc, #376]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001d72:	485f      	ldr	r0, [pc, #380]	; (8001ef0 <HAL_SPI_RxCpltCallback+0x604>)
 8001d74:	f005 f932 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	495c      	ldr	r1, [pc, #368]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001d7c:	485a      	ldr	r0, [pc, #360]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001d7e:	f7ff fc2f 	bl	80015e0 <SPI_master2slave>
				break;
 8001d82:	e02b      	b.n	8001ddc <HAL_SPI_RxCpltCallback+0x4f0>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d88:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d8c:	4957      	ldr	r1, [pc, #348]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001d8e:	4858      	ldr	r0, [pc, #352]	; (8001ef0 <HAL_SPI_RxCpltCallback+0x604>)
 8001d90:	f005 f924 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001d94:	2201      	movs	r2, #1
 8001d96:	4955      	ldr	r1, [pc, #340]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001d98:	4853      	ldr	r0, [pc, #332]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001d9a:	f7ff fc21 	bl	80015e0 <SPI_master2slave>
				break;
 8001d9e:	e01d      	b.n	8001ddc <HAL_SPI_RxCpltCallback+0x4f0>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001da8:	4950      	ldr	r1, [pc, #320]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001daa:	4851      	ldr	r0, [pc, #324]	; (8001ef0 <HAL_SPI_RxCpltCallback+0x604>)
 8001dac:	f005 f916 	bl	8006fdc <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001db0:	2201      	movs	r2, #1
 8001db2:	494e      	ldr	r1, [pc, #312]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001db4:	484c      	ldr	r0, [pc, #304]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001db6:	f7ff fc13 	bl	80015e0 <SPI_master2slave>
				erase_flash_sector(spi3_buf[1] - 1);
 8001dba:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f9fe 	bl	80021c4 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4846      	ldr	r0, [pc, #280]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001dd4:	f000 f924 	bl	8002020 <write_flash_page>
				break;
 8001dd8:	e000      	b.n	8001ddc <HAL_SPI_RxCpltCallback+0x4f0>
				break;
 8001dda:	bf00      	nop
			break;
 8001ddc:	e081      	b.n	8001ee2 <HAL_SPI_RxCpltCallback+0x5f6>
			switch (spi3_buf[0] & 0b00000111) {
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d842      	bhi.n	8001e70 <HAL_SPI_RxCpltCallback+0x584>
 8001dea:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <HAL_SPI_RxCpltCallback+0x504>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001e01 	.word	0x08001e01
 8001df4:	08001ed9 	.word	0x08001ed9
 8001df8:	08001ed9 	.word	0x08001ed9
 8001dfc:	08001ed9 	.word	0x08001ed9
				if(BOARD_NUMBER==1)
 8001e00:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <HAL_SPI_RxCpltCallback+0x608>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d169      	bne.n	8001edc <HAL_SPI_RxCpltCallback+0x5f0>
					if(spi3_buf[1]==0x00)
 8001e08:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001e0a:	785b      	ldrb	r3, [r3, #1]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11c      	bne.n	8001e4a <HAL_SPI_RxCpltCallback+0x55e>
						for(int i=0; i<total_image_in_flash; i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e012      	b.n	8001e3c <HAL_SPI_RxCpltCallback+0x550>
							reset_flash_software();
 8001e16:	f000 fa6d 	bl	80022f4 <reset_flash_software>
							read_flash_page(&frame_buf_tmp, i);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4832      	ldr	r0, [pc, #200]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001e22:	f000 f977 	bl	8002114 <read_flash_page>
							HAL_SPI_Transmit(&hspi3, &frame_buf_tmp, 6400, 1000);
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001e2e:	492f      	ldr	r1, [pc, #188]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001e30:	482f      	ldr	r0, [pc, #188]	; (8001ef0 <HAL_SPI_RxCpltCallback+0x604>)
 8001e32:	f004 ff5e 	bl	8006cf2 <HAL_SPI_Transmit>
						for(int i=0; i<total_image_in_flash; i++)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <HAL_SPI_RxCpltCallback+0x60c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4293      	cmp	r3, r2
 8001e46:	dbe6      	blt.n	8001e16 <HAL_SPI_RxCpltCallback+0x52a>
				break;
 8001e48:	e048      	b.n	8001edc <HAL_SPI_RxCpltCallback+0x5f0>
						reset_flash_software();
 8001e4a:	f000 fa53 	bl	80022f4 <reset_flash_software>
						read_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001e50:	785b      	ldrb	r3, [r3, #1]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4619      	mov	r1, r3
 8001e58:	4824      	ldr	r0, [pc, #144]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001e5a:	f000 f95b 	bl	8002114 <read_flash_page>
						HAL_SPI_Transmit(&hspi3, &frame_buf_tmp, 6400, 1000);
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001e66:	4921      	ldr	r1, [pc, #132]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001e68:	4821      	ldr	r0, [pc, #132]	; (8001ef0 <HAL_SPI_RxCpltCallback+0x604>)
 8001e6a:	f004 ff42 	bl	8006cf2 <HAL_SPI_Transmit>
				break;
 8001e6e:	e035      	b.n	8001edc <HAL_SPI_RxCpltCallback+0x5f0>
				if(spi3_buf[1]==0x00)
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d11c      	bne.n	8001eb2 <HAL_SPI_RxCpltCallback+0x5c6>
					for(int i=0; i<total_image_in_flash; i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	e012      	b.n	8001ea4 <HAL_SPI_RxCpltCallback+0x5b8>
						reset_flash_software();
 8001e7e:	f000 fa39 	bl	80022f4 <reset_flash_software>
						read_flash_page(&frame_buf_tmp, i);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	4818      	ldr	r0, [pc, #96]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001e8a:	f000 f943 	bl	8002114 <read_flash_page>
						HAL_SPI_Transmit(&hspi3, &frame_buf_tmp, 6400, 1000);
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001e96:	4915      	ldr	r1, [pc, #84]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001e98:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <HAL_SPI_RxCpltCallback+0x604>)
 8001e9a:	f004 ff2a 	bl	8006cf2 <HAL_SPI_Transmit>
					for(int i=0; i<total_image_in_flash; i++)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_SPI_RxCpltCallback+0x60c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	dbe6      	blt.n	8001e7e <HAL_SPI_RxCpltCallback+0x592>
				break;
 8001eb0:	e015      	b.n	8001ede <HAL_SPI_RxCpltCallback+0x5f2>
					reset_flash_software();
 8001eb2:	f000 fa1f 	bl	80022f4 <reset_flash_software>
					read_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_SPI_RxCpltCallback+0x5fc>)
 8001eb8:	785b      	ldrb	r3, [r3, #1]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480a      	ldr	r0, [pc, #40]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001ec2:	f000 f927 	bl	8002114 <read_flash_page>
					HAL_SPI_Transmit(&hspi3, &frame_buf_tmp, 6400, 1000);
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ece:	4907      	ldr	r1, [pc, #28]	; (8001eec <HAL_SPI_RxCpltCallback+0x600>)
 8001ed0:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <HAL_SPI_RxCpltCallback+0x604>)
 8001ed2:	f004 ff0e 	bl	8006cf2 <HAL_SPI_Transmit>
				break;
 8001ed6:	e002      	b.n	8001ede <HAL_SPI_RxCpltCallback+0x5f2>
				break;
 8001ed8:	bf00      	nop
 8001eda:	e002      	b.n	8001ee2 <HAL_SPI_RxCpltCallback+0x5f6>
				break;
 8001edc:	bf00      	nop
			break;
 8001ede:	e000      	b.n	8001ee2 <HAL_SPI_RxCpltCallback+0x5f6>
			break;
 8001ee0:	bf00      	nop
		break;
 8001ee2:	e00f      	b.n	8001f04 <HAL_SPI_RxCpltCallback+0x618>
		break;
 8001ee4:	bf00      	nop
 8001ee6:	e00e      	b.n	8001f06 <HAL_SPI_RxCpltCallback+0x61a>
 8001ee8:	20004eb0 	.word	0x20004eb0
 8001eec:	20004eb4 	.word	0x20004eb4
 8001ef0:	20004db8 	.word	0x20004db8
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000008 	.word	0x20000008
		break;
 8001efc:	bf00      	nop
 8001efe:	e002      	b.n	8001f06 <HAL_SPI_RxCpltCallback+0x61a>
		break;
 8001f00:	bf00      	nop
 8001f02:	e000      	b.n	8001f06 <HAL_SPI_RxCpltCallback+0x61a>
		break;
 8001f04:	bf00      	nop
	}
	// USB command: ID
	switch (spi3_buf[0] & 0b00000111) {
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_SPI_RxCpltCallback+0x650>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d80a      	bhi.n	8001f28 <HAL_SPI_RxCpltCallback+0x63c>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <HAL_SPI_RxCpltCallback+0x62c>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	08001f29 	.word	0x08001f29
 8001f20:	08001f29 	.word	0x08001f29
 8001f24:	08001f29 	.word	0x08001f29
	case 0b00000010:  //Command for DIP switch ID = 10
		break;
	case 0b00000011:  //Command for DIP switch ID = 11
		break;
	default:  //Broadcast to every board
		break;
 8001f28:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	4903      	ldr	r1, [pc, #12]	; (8001f3c <HAL_SPI_RxCpltCallback+0x650>)
 8001f2e:	4804      	ldr	r0, [pc, #16]	; (8001f40 <HAL_SPI_RxCpltCallback+0x654>)
 8001f30:	f005 fbae 	bl	8007690 <HAL_SPI_Receive_IT>
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20004eb0 	.word	0x20004eb0
 8001f40:	20004db8 	.word	0x20004db8

08001f44 <FLASH_WriteByte>:

void FLASH_WriteByte(uint8_t data) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--) {
 8001f4e:	2307      	movs	r3, #7
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e022      	b.n	8001f9a <FLASH_WriteByte+0x56>
        HAL_GPIO_WritePin(FLASH_MOSI_PORT, FLASH_MOSI_PIN, (data >> i) & 1);
 8001f54:	79fa      	ldrb	r2, [r7, #7]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	fa42 f303 	asr.w	r3, r2, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6a:	4810      	ldr	r0, [pc, #64]	; (8001fac <FLASH_WriteByte+0x68>)
 8001f6c:	f002 f81c 	bl	8003fa8 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f76:	480d      	ldr	r0, [pc, #52]	; (8001fac <FLASH_WriteByte+0x68>)
 8001f78:	f002 f816 	bl	8003fa8 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff fc26 	bl	80017ce <delay_100ns>
        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f88:	4808      	ldr	r0, [pc, #32]	; (8001fac <FLASH_WriteByte+0x68>)
 8001f8a:	f002 f80d 	bl	8003fa8 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7ff fc1d 	bl	80017ce <delay_100ns>
    for (int i = 7; i >= 0; i--) {
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dad9      	bge.n	8001f54 <FLASH_WriteByte+0x10>
    }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	48001400 	.word	0x48001400

08001fb0 <FLASH_ReadByte>:

uint8_t FLASH_ReadByte(void) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	71fb      	strb	r3, [r7, #7]

    for (int i = 7; i >= 0; i--) {
 8001fba:	2307      	movs	r3, #7
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	e024      	b.n	800200a <FLASH_ReadByte+0x5a>
        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc6:	4815      	ldr	r0, [pc, #84]	; (800201c <FLASH_ReadByte+0x6c>)
 8001fc8:	f001 ffee 	bl	8003fa8 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f7ff fbfe 	bl	80017ce <delay_100ns>
        data |= (HAL_GPIO_ReadPin(FLASH_MISO_PORT, FLASH_MISO_PIN) << i);
 8001fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd6:	4811      	ldr	r0, [pc, #68]	; (800201c <FLASH_ReadByte+0x6c>)
 8001fd8:	f001 ffce 	bl	8003f78 <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	b25a      	sxtb	r2, r3
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	71fb      	strb	r3, [r7, #7]
        HAL_GPIO_WritePin(FLASH_CLK_PORT,FLASH_CLK_PIN, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <FLASH_ReadByte+0x6c>)
 8001ffa:	f001 ffd5 	bl	8003fa8 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f7ff fbe5 	bl	80017ce <delay_100ns>
    for (int i = 7; i >= 0; i--) {
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	3b01      	subs	r3, #1
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	dad7      	bge.n	8001fc0 <FLASH_ReadByte+0x10>
    }

    return data;
 8002010:	79fb      	ldrb	r3, [r7, #7]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	48001400 	.word	0x48001400

08002020 <write_flash_page>:

void write_flash_page(uint8_t *data, uint8_t image_id)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id/8;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id%8;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]
	int count=0;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015b      	lsls	r3, r3, #5
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	e057      	b.n	80020f8 <write_flash_page+0xd8>
	{
		// enable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800204e:	4830      	ldr	r0, [pc, #192]	; (8002110 <write_flash_page+0xf0>)
 8002050:	f001 ffaa 	bl	8003fa8 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x06);
 8002054:	2006      	movs	r0, #6
 8002056:	f7ff ff75 	bl	8001f44 <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002060:	482b      	ldr	r0, [pc, #172]	; (8002110 <write_flash_page+0xf0>)
 8002062:	f001 ffa1 	bl	8003fa8 <HAL_GPIO_WritePin>

		// write data to flash page
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800206c:	4828      	ldr	r0, [pc, #160]	; (8002110 <write_flash_page+0xf0>)
 800206e:	f001 ff9b 	bl	8003fa8 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x02);
 8002072:	2002      	movs	r0, #2
 8002074:	f7ff ff66 	bl	8001f44 <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff61 	bl	8001f44 <FLASH_WriteByte>
		FLASH_WriteByte(i);
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff5c 	bl	8001f44 <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff ff59 	bl	8001f44 <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e00d      	b.n	80020b4 <write_flash_page+0x94>
		{
			FLASH_WriteByte(data[count*256+j]);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	461a      	mov	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	4413      	add	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff4b 	bl	8001f44 <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d9ee      	bls.n	8002098 <write_flash_page+0x78>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020c0:	4813      	ldr	r0, [pc, #76]	; (8002110 <write_flash_page+0xf0>)
 80020c2:	f001 ff71 	bl	8003fa8 <HAL_GPIO_WritePin>

		// disable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020cc:	4810      	ldr	r0, [pc, #64]	; (8002110 <write_flash_page+0xf0>)
 80020ce:	f001 ff6b 	bl	8003fa8 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x04);
 80020d2:	2004      	movs	r0, #4
 80020d4:	f7ff ff36 	bl	8001f44 <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80020d8:	2201      	movs	r2, #1
 80020da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <write_flash_page+0xf0>)
 80020e0:	f001 ff62 	bl	8003fa8 <HAL_GPIO_WritePin>
		delay_us(1000);
 80020e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e8:	f7ff fb56 	bl	8001798 <delay_us>
		count++;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	3301      	adds	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015b      	lsls	r3, r3, #5
 80020fc:	3319      	adds	r3, #25
 80020fe:	461a      	mov	r2, r3
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4293      	cmp	r3, r2
 8002104:	d3a0      	bcc.n	8002048 <write_flash_page+0x28>
	}
}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	48000800 	.word	0x48000800

08002114 <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id/8;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id%8;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]
	int count=0;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	015b      	lsls	r3, r3, #5
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	e035      	b.n	80021a8 <read_flash_page+0x94>
	{
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002142:	481f      	ldr	r0, [pc, #124]	; (80021c0 <read_flash_page+0xac>)
 8002144:	f001 ff30 	bl	8003fa8 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x03);
 8002148:	2003      	movs	r0, #3
 800214a:	f7ff fefb 	bl	8001f44 <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fef6 	bl	8001f44 <FLASH_WriteByte>
		FLASH_WriteByte(i);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fef1 	bl	8001f44 <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff feee 	bl	8001f44 <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e00d      	b.n	800218a <read_flash_page+0x76>
		{
			data[count*256+j] = FLASH_ReadByte();
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	461a      	mov	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	4413      	add	r3, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	18d4      	adds	r4, r2, r3
 800217c:	f7ff ff18 	bl	8001fb0 <FLASH_ReadByte>
 8002180:	4603      	mov	r3, r0
 8002182:	7023      	strb	r3, [r4, #0]
		for(uint32_t j=0; j<256; j++)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2bff      	cmp	r3, #255	; 0xff
 800218e:	d9ee      	bls.n	800216e <read_flash_page+0x5a>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002190:	2201      	movs	r2, #1
 8002192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002196:	480a      	ldr	r0, [pc, #40]	; (80021c0 <read_flash_page+0xac>)
 8002198:	f001 ff06 	bl	8003fa8 <HAL_GPIO_WritePin>
		count++;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3301      	adds	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015b      	lsls	r3, r3, #5
 80021ac:	3319      	adds	r3, #25
 80021ae:	461a      	mov	r2, r3
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d3c2      	bcc.n	800213c <read_flash_page+0x28>
	}
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	3724      	adds	r7, #36	; 0x24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}
 80021c0:	48000800 	.word	0x48000800

080021c4 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
	int image_id_H = image_id/8;
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	60fb      	str	r3, [r7, #12]
	int image_id_L = image_id%8;
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	60bb      	str	r3, [r7, #8]
	reset_flash_software();
 80021de:	f000 f889 	bl	80022f4 <reset_flash_software>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e8:	4841      	ldr	r0, [pc, #260]	; (80022f0 <erase_flash_sector+0x12c>)
 80021ea:	f001 fedd 	bl	8003fa8 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 80021ee:	2006      	movs	r0, #6
 80021f0:	f7ff fea8 	bl	8001f44 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021fa:	483d      	ldr	r0, [pc, #244]	; (80022f0 <erase_flash_sector+0x12c>)
 80021fc:	f001 fed4 	bl	8003fa8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002206:	483a      	ldr	r0, [pc, #232]	; (80022f0 <erase_flash_sector+0x12c>)
 8002208:	f001 fece 	bl	8003fa8 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 800220c:	2020      	movs	r0, #32
 800220e:	f7ff fe99 	bl	8001f44 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fe94 	bl	8001f44 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L*0x20);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	015b      	lsls	r3, r3, #5
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fe8d 	bl	8001f44 <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff fe8a 	bl	8001f44 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002236:	482e      	ldr	r0, [pc, #184]	; (80022f0 <erase_flash_sector+0x12c>)
 8002238:	f001 feb6 	bl	8003fa8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002242:	482b      	ldr	r0, [pc, #172]	; (80022f0 <erase_flash_sector+0x12c>)
 8002244:	f001 feb0 	bl	8003fa8 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 8002248:	2004      	movs	r0, #4
 800224a:	f7ff fe7b 	bl	8001f44 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002254:	4826      	ldr	r0, [pc, #152]	; (80022f0 <erase_flash_sector+0x12c>)
 8002256:	f001 fea7 	bl	8003fa8 <HAL_GPIO_WritePin>

	delay_us(30000);
 800225a:	f247 5030 	movw	r0, #30000	; 0x7530
 800225e:	f7ff fa9b 	bl	8001798 <delay_us>
	////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002268:	4821      	ldr	r0, [pc, #132]	; (80022f0 <erase_flash_sector+0x12c>)
 800226a:	f001 fe9d 	bl	8003fa8 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 800226e:	2006      	movs	r0, #6
 8002270:	f7ff fe68 	bl	8001f44 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002274:	2201      	movs	r2, #1
 8002276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800227a:	481d      	ldr	r0, [pc, #116]	; (80022f0 <erase_flash_sector+0x12c>)
 800227c:	f001 fe94 	bl	8003fa8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002286:	481a      	ldr	r0, [pc, #104]	; (80022f0 <erase_flash_sector+0x12c>)
 8002288:	f001 fe8e 	bl	8003fa8 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 800228c:	2020      	movs	r0, #32
 800228e:	f7ff fe59 	bl	8001f44 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fe54 	bl	8001f44 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L*0x20+0x10);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	015b      	lsls	r3, r3, #5
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3310      	adds	r3, #16
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fe4b 	bl	8001f44 <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff fe48 	bl	8001f44 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ba:	480d      	ldr	r0, [pc, #52]	; (80022f0 <erase_flash_sector+0x12c>)
 80022bc:	f001 fe74 	bl	8003fa8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c6:	480a      	ldr	r0, [pc, #40]	; (80022f0 <erase_flash_sector+0x12c>)
 80022c8:	f001 fe6e 	bl	8003fa8 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 80022cc:	2004      	movs	r0, #4
 80022ce:	f7ff fe39 	bl	8001f44 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d8:	4805      	ldr	r0, [pc, #20]	; (80022f0 <erase_flash_sector+0x12c>)
 80022da:	f001 fe65 	bl	8003fa8 <HAL_GPIO_WritePin>

	delay_us(30000);
 80022de:	f247 5030 	movw	r0, #30000	; 0x7530
 80022e2:	f7ff fa59 	bl	8001798 <delay_us>
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	48000800 	.word	0x48000800

080022f4 <reset_flash_software>:

void reset_flash_software()
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fe:	4813      	ldr	r0, [pc, #76]	; (800234c <reset_flash_software+0x58>)
 8002300:	f001 fe52 	bl	8003fa8 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x66);
 8002304:	2066      	movs	r0, #102	; 0x66
 8002306:	f7ff fe1d 	bl	8001f44 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002310:	480e      	ldr	r0, [pc, #56]	; (800234c <reset_flash_software+0x58>)
 8002312:	f001 fe49 	bl	8003fa8 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002316:	2001      	movs	r0, #1
 8002318:	f7ff fa59 	bl	80017ce <delay_100ns>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002322:	480a      	ldr	r0, [pc, #40]	; (800234c <reset_flash_software+0x58>)
 8002324:	f001 fe40 	bl	8003fa8 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x99);
 8002328:	2099      	movs	r0, #153	; 0x99
 800232a:	f7ff fe0b 	bl	8001f44 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <reset_flash_software+0x58>)
 8002336:	f001 fe37 	bl	8003fa8 <HAL_GPIO_WritePin>
	delay_100ns(1);
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff fa47 	bl	80017ce <delay_100ns>

	delay_us(1000);
 8002340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002344:	f7ff fa28 	bl	8001798 <delay_us>
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	48000800 	.word	0x48000800

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002358:	e7fe      	b.n	8002358 <Error_Handler+0x8>
	...

0800235c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_MspInit+0x44>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_MspInit+0x44>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6613      	str	r3, [r2, #96]	; 0x60
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <HAL_MspInit+0x44>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_MspInit+0x44>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_MspInit+0x44>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6593      	str	r3, [r2, #88]	; 0x58
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_MspInit+0x44>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b0aa      	sub	sp, #168	; 0xa8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	229c      	movs	r2, #156	; 0x9c
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f006 fe63 	bl	8009080 <memset>
  if(hdsi->Instance==DSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_DSI_MspInit+0x60>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d11b      	bne.n	80023fc <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80023c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80023c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 fe71 	bl	80060bc <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 80023e0:	f7ff ffb6 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_DSI_MspInit+0x64>)
 80023e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_DSI_MspInit+0x64>)
 80023ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023ee:	6613      	str	r3, [r2, #96]	; 0x60
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_DSI_MspInit+0x64>)
 80023f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80023fc:	bf00      	nop
 80023fe:	37a8      	adds	r7, #168	; 0xa8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40016c00 	.word	0x40016c00
 8002408:	40021000 	.word	0x40021000

0800240c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b0b2      	sub	sp, #200	; 0xc8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002424:	f107 0318 	add.w	r3, r7, #24
 8002428:	229c      	movs	r2, #156	; 0x9c
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f006 fe27 	bl	8009080 <memset>
  if(hi2c->Instance==I2C1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a42      	ldr	r2, [pc, #264]	; (8002540 <HAL_I2C_MspInit+0x134>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d13c      	bne.n	80024b6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800243c:	2340      	movs	r3, #64	; 0x40
 800243e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002440:	2300      	movs	r3, #0
 8002442:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002444:	f107 0318 	add.w	r3, r7, #24
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fe37 	bl	80060bc <HAL_RCCEx_PeriphCLKConfig>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002454:	f7ff ff7c 	bl	8002350 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <HAL_I2C_MspInit+0x138>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	4a39      	ldr	r2, [pc, #228]	; (8002544 <HAL_I2C_MspInit+0x138>)
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002464:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_I2C_MspInit+0x138>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002470:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002478:	2312      	movs	r3, #18
 800247a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800248a:	2304      	movs	r3, #4
 800248c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002490:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002494:	4619      	mov	r1, r3
 8002496:	482c      	ldr	r0, [pc, #176]	; (8002548 <HAL_I2C_MspInit+0x13c>)
 8002498:	f001 fbdc 	bl	8003c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <HAL_I2C_MspInit+0x138>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	4a28      	ldr	r2, [pc, #160]	; (8002544 <HAL_I2C_MspInit+0x138>)
 80024a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024a6:	6593      	str	r3, [r2, #88]	; 0x58
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_I2C_MspInit+0x138>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024b4:	e040      	b.n	8002538 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_I2C_MspInit+0x140>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d13b      	bne.n	8002538 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c8:	f107 0318 	add.w	r3, r7, #24
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fdf5 	bl	80060bc <HAL_RCCEx_PeriphCLKConfig>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80024d8:	f7ff ff3a 	bl	8002350 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_I2C_MspInit+0x138>)
 80024de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e0:	4a18      	ldr	r2, [pc, #96]	; (8002544 <HAL_I2C_MspInit+0x138>)
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_I2C_MspInit+0x138>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80024f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024fc:	2312      	movs	r3, #18
 80024fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800250e:	2304      	movs	r3, #4
 8002510:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002518:	4619      	mov	r1, r3
 800251a:	480b      	ldr	r0, [pc, #44]	; (8002548 <HAL_I2C_MspInit+0x13c>)
 800251c:	f001 fb9a 	bl	8003c54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_I2C_MspInit+0x138>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_I2C_MspInit+0x138>)
 8002526:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800252a:	6593      	str	r3, [r2, #88]	; 0x58
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_I2C_MspInit+0x138>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
}
 8002538:	bf00      	nop
 800253a:	37c8      	adds	r7, #200	; 0xc8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40005400 	.word	0x40005400
 8002544:	40021000 	.word	0x40021000
 8002548:	48000400 	.word	0x48000400
 800254c:	40005800 	.word	0x40005800

08002550 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0aa      	sub	sp, #168	; 0xa8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	229c      	movs	r2, #156	; 0x9c
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f006 fd8d 	bl	8009080 <memset>
  if(hltdc->Instance==LTDC)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_LTDC_MspInit+0x80>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d12b      	bne.n	80025c8 <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002570:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002574:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 8002576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800257a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 800257e:	2303      	movs	r3, #3
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8002582:	2301      	movs	r3, #1
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8002586:	2308      	movs	r3, #8
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 800258a:	2302      	movs	r3, #2
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 800258e:	2302      	movs	r3, #2
 8002590:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8002592:	2302      	movs	r3, #2
 8002594:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8002596:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fd8b 	bl	80060bc <HAL_RCCEx_PeriphCLKConfig>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 80025ac:	f7ff fed0 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <HAL_LTDC_MspInit+0x84>)
 80025b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b4:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <HAL_LTDC_MspInit+0x84>)
 80025b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ba:	6613      	str	r3, [r2, #96]	; 0x60
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_LTDC_MspInit+0x84>)
 80025be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80025c8:	bf00      	nop
 80025ca:	37a8      	adds	r7, #168	; 0xa8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40016800 	.word	0x40016800
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0b2      	sub	sp, #200	; 0xc8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	229c      	movs	r2, #156	; 0x9c
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f006 fd41 	bl	8009080 <memset>
  if(hospi->Instance==OCTOSPI2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_OSPI_MspInit+0x10c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d169      	bne.n	80026dc <HAL_OSPI_MspInit+0x104>

  /* USER CODE END OCTOSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fd4f 	bl	80060bc <HAL_RCCEx_PeriphCLKConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002624:	f7ff fe94 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	4a2e      	ldr	r2, [pc, #184]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 800262e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 8002636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 8002642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002644:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 8002646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264a:	6513      	str	r3, [r2, #80]	; 0x50
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 800264e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002658:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 8002676:	f043 0320 	orr.w	r3, r3, #32
 800267a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <HAL_OSPI_MspInit+0x110>)
 800267e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> OCTOSPIM_P2_NCS
    PF1     ------> OCTOSPIM_P2_IO1
    PF0     ------> OCTOSPIM_P2_IO0
    PF4     ------> OCTOSPIM_P2_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002688:	2308      	movs	r3, #8
 800268a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 80026a0:	230a      	movs	r3, #10
 80026a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026aa:	4619      	mov	r1, r3
 80026ac:	480f      	ldr	r0, [pc, #60]	; (80026ec <HAL_OSPI_MspInit+0x114>)
 80026ae:	f001 fad1 	bl	8003c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4;
 80026b2:	2313      	movs	r3, #19
 80026b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80026ca:	2305      	movs	r3, #5
 80026cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <HAL_OSPI_MspInit+0x118>)
 80026d8:	f001 fabc 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80026dc:	bf00      	nop
 80026de:	37c8      	adds	r7, #200	; 0xc8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	a0001400 	.word	0xa0001400
 80026e8:	40021000 	.word	0x40021000
 80026ec:	48000c00 	.word	0x48000c00
 80026f0:	48001400 	.word	0x48001400

080026f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b092      	sub	sp, #72	; 0x48
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a84      	ldr	r2, [pc, #528]	; (8002924 <HAL_SPI_MspInit+0x230>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d146      	bne.n	80027a4 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002716:	4b84      	ldr	r3, [pc, #528]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	4a83      	ldr	r2, [pc, #524]	; (8002928 <HAL_SPI_MspInit+0x234>)
 800271c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002720:	6613      	str	r3, [r2, #96]	; 0x60
 8002722:	4b81      	ldr	r3, [pc, #516]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	4b7e      	ldr	r3, [pc, #504]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	4a7d      	ldr	r2, [pc, #500]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273a:	4b7b      	ldr	r3, [pc, #492]	; (8002928 <HAL_SPI_MspInit+0x234>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	4b78      	ldr	r3, [pc, #480]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	4a77      	ldr	r2, [pc, #476]	; (8002928 <HAL_SPI_MspInit+0x234>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002752:	4b75      	ldr	r3, [pc, #468]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 800275e:	2338      	movs	r3, #56	; 0x38
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800276e:	2305      	movs	r3, #5
 8002770:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002772:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002776:	4619      	mov	r1, r3
 8002778:	486c      	ldr	r0, [pc, #432]	; (800292c <HAL_SPI_MspInit+0x238>)
 800277a:	f001 fa6b 	bl	8003c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800277e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002790:	2305      	movs	r3, #5
 8002792:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002794:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279e:	f001 fa59 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027a2:	e0ba      	b.n	800291a <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a61      	ldr	r2, [pc, #388]	; (8002930 <HAL_SPI_MspInit+0x23c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d144      	bne.n	8002838 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027ae:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <HAL_SPI_MspInit+0x234>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	4a5d      	ldr	r2, [pc, #372]	; (8002928 <HAL_SPI_MspInit+0x234>)
 80027b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b8:	6593      	str	r3, [r2, #88]	; 0x58
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <HAL_SPI_MspInit+0x234>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c6:	4b58      	ldr	r3, [pc, #352]	; (8002928 <HAL_SPI_MspInit+0x234>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	4a57      	ldr	r2, [pc, #348]	; (8002928 <HAL_SPI_MspInit+0x234>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d2:	4b55      	ldr	r3, [pc, #340]	; (8002928 <HAL_SPI_MspInit+0x234>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	623b      	str	r3, [r7, #32]
 80027dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027de:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_SPI_MspInit+0x234>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_SPI_MspInit+0x234>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ea:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_SPI_MspInit+0x234>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80027f6:	2312      	movs	r3, #18
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002806:	2305      	movs	r3, #5
 8002808:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800280a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800280e:	4619      	mov	r1, r3
 8002810:	4848      	ldr	r0, [pc, #288]	; (8002934 <HAL_SPI_MspInit+0x240>)
 8002812:	f001 fa1f 	bl	8003c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002816:	2304      	movs	r3, #4
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002826:	2305      	movs	r3, #5
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800282e:	4619      	mov	r1, r3
 8002830:	4841      	ldr	r0, [pc, #260]	; (8002938 <HAL_SPI_MspInit+0x244>)
 8002832:	f001 fa0f 	bl	8003c54 <HAL_GPIO_Init>
}
 8002836:	e070      	b.n	800291a <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a3f      	ldr	r2, [pc, #252]	; (800293c <HAL_SPI_MspInit+0x248>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d16b      	bne.n	800291a <HAL_SPI_MspInit+0x226>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	4a38      	ldr	r2, [pc, #224]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284c:	6593      	str	r3, [r2, #88]	; 0x58
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800285a:	4b33      	ldr	r3, [pc, #204]	; (8002928 <HAL_SPI_MspInit+0x234>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	4a32      	ldr	r2, [pc, #200]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	4a2c      	ldr	r2, [pc, #176]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_SPI_MspInit+0x234>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	4a26      	ldr	r2, [pc, #152]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_SPI_MspInit+0x234>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80028a2:	f002 fd23 	bl	80052ec <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 80028b6:	2305      	movs	r3, #5
 80028b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028be:	4619      	mov	r1, r3
 80028c0:	481c      	ldr	r0, [pc, #112]	; (8002934 <HAL_SPI_MspInit+0x240>)
 80028c2:	f001 f9c7 	bl	8003c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028d8:	2306      	movs	r3, #6
 80028da:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028e0:	4619      	mov	r1, r3
 80028e2:	4815      	ldr	r0, [pc, #84]	; (8002938 <HAL_SPI_MspInit+0x244>)
 80028e4:	f001 f9b6 	bl	8003c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80028e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028fa:	2306      	movs	r3, #6
 80028fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002902:	4619      	mov	r1, r3
 8002904:	480e      	ldr	r0, [pc, #56]	; (8002940 <HAL_SPI_MspInit+0x24c>)
 8002906:	f001 f9a5 	bl	8003c54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	2033      	movs	r0, #51	; 0x33
 8002910:	f000 fa67 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002914:	2033      	movs	r0, #51	; 0x33
 8002916:	f000 fa80 	bl	8002e1a <HAL_NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	3748      	adds	r7, #72	; 0x48
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40013000 	.word	0x40013000
 8002928:	40021000 	.word	0x40021000
 800292c:	48000400 	.word	0x48000400
 8002930:	40003800 	.word	0x40003800
 8002934:	48000c00 	.word	0x48000c00
 8002938:	48000800 	.word	0x48000800
 800293c:	40003c00 	.word	0x40003c00
 8002940:	48001800 	.word	0x48001800

08002944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0b0      	sub	sp, #192	; 0xc0
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	229c      	movs	r2, #156	; 0x9c
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f006 fb8b 	bl	8009080 <memset>
  if(huart->Instance==UART4)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <HAL_UART_MspInit+0xb0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d13b      	bne.n	80029ec <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002974:	2308      	movs	r3, #8
 8002976:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002978:	2300      	movs	r3, #0
 800297a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fb9b 	bl	80060bc <HAL_RCCEx_PeriphCLKConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800298c:	f7ff fce0 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 8002996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800299a:	6593      	str	r3, [r2, #88]	; 0x58
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_UART_MspInit+0xb4>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029c0:	2303      	movs	r3, #3
 80029c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d2:	2303      	movs	r3, #3
 80029d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029d8:	2308      	movs	r3, #8
 80029da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e8:	f001 f934 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80029ec:	bf00      	nop
 80029ee:	37c0      	adds	r7, #192	; 0xc0
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40004c00 	.word	0x40004c00
 80029f8:	40021000 	.word	0x40021000

080029fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <NMI_Handler+0x4>

08002a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a06:	e7fe      	b.n	8002a06 <HardFault_Handler+0x4>

08002a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <MemManage_Handler+0x4>

08002a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a12:	e7fe      	b.n	8002a12 <BusFault_Handler+0x4>

08002a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <UsageFault_Handler+0x4>

08002a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a48:	f000 f8ac 	bl	8002ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002a54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a58:	f001 fabe 	bl	8003fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <SPI3_IRQHandler+0x10>)
 8002a66:	f004 ff6f 	bl	8007948 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20004db8 	.word	0x20004db8

08002a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <SystemInit+0x20>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <SystemInit+0x20>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a9c:	f7ff ffea 	bl	8002a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002aa2:	490d      	ldr	r1, [pc, #52]	; (8002ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <LoopForever+0xe>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ab8:	4c0a      	ldr	r4, [pc, #40]	; (8002ae4 <LoopForever+0x16>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ac6:	f006 fae3 	bl	8009090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aca:	f7fd fd15 	bl	80004f8 <main>

08002ace <LoopForever>:

LoopForever:
    b LoopForever
 8002ace:	e7fe      	b.n	8002ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ad0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad8:	20004b18 	.word	0x20004b18
  ldr r2, =_sidata
 8002adc:	080091fc 	.word	0x080091fc
  ldr r2, =_sbss
 8002ae0:	20004b18 	.word	0x20004b18
  ldr r4, =_ebss
 8002ae4:	2000b2c0 	.word	0x2000b2c0

08002ae8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ae8:	e7fe      	b.n	8002ae8 <ADC1_IRQHandler>
	...

08002aec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <HAL_Init+0x3c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <HAL_Init+0x3c>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b02:	2003      	movs	r0, #3
 8002b04:	f000 f962 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b08:	2002      	movs	r0, #2
 8002b0a:	f000 f80f 	bl	8002b2c <HAL_InitTick>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	71fb      	strb	r3, [r7, #7]
 8002b18:	e001      	b.n	8002b1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b1a:	f7ff fc1f 	bl	800235c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40022000 	.word	0x40022000

08002b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_InitTick+0x6c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d023      	beq.n	8002b88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b40:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_InitTick+0x70>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_InitTick+0x6c>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f96d 	bl	8002e36 <HAL_SYSTICK_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10f      	bne.n	8002b82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d809      	bhi.n	8002b7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f000 f937 	bl	8002de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_InitTick+0x74>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e007      	b.n	8002b8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e004      	b.n	8002b8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	e001      	b.n	8002b8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20004b14 	.word	0x20004b14
 8002b9c:	20004b0c 	.word	0x20004b0c
 8002ba0:	20004b10 	.word	0x20004b10

08002ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_IncTick+0x20>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_IncTick+0x24>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <HAL_IncTick+0x24>)
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20004b14 	.word	0x20004b14
 8002bc8:	2000b2bc 	.word	0x2000b2bc

08002bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_GetTick+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	2000b2bc 	.word	0x2000b2bc

08002be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff ffee 	bl	8002bcc <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d005      	beq.n	8002c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_Delay+0x44>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0a:	bf00      	nop
 8002c0c:	f7ff ffde 	bl	8002bcc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d8f7      	bhi.n	8002c0c <HAL_Delay+0x28>
  {
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20004b14 	.word	0x20004b14

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	; (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff3e 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff31 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d005      	beq.n	8002e72 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	e047      	b.n	8002f02 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 020e 	bic.w	r2, r2, #14
 8002e80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f003 021c 	and.w	r2, r3, #28
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ebe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ee0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
    }
  }
  return status;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	019a      	lsls	r2, r3, #6
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	431a      	orrs	r2, r3
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f4c:	f7ff fe3e 	bl	8002bcc <HAL_GetTick>
 8002f50:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f52:	e009      	b.n	8002f68 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f54:	f7ff fe3a 	bl	8002bcc <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f62:	d901      	bls.n	8002f68 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e015      	b.n	8002f94 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ee      	beq.n	8002f54 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	019a      	lsls	r2, r3, #6
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	ea42 0103 	orr.w	r1, r2, r3
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	041a      	lsls	r2, r3, #16
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e10b      	b.n	80031c8 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7c5b      	ldrb	r3, [r3, #17]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff f9f2 	bl	80023a4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002fda:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fee:	f7ff fded 	bl	8002bcc <HAL_GetTick>
 8002ff2:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002ff4:	e009      	b.n	800300a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002ff6:	f7ff fde9 	bl	8002bcc <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003004:	d901      	bls.n	800300a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0de      	b.n	80031c8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ed      	beq.n	8002ff6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800302a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800302e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003046:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800304e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003082:	2001      	movs	r0, #1
 8003084:	f7ff fdae 	bl	8002be4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003088:	f7ff fda0 	bl	8002bcc <HAL_GetTick>
 800308c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800308e:	e009      	b.n	80030a4 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003090:	f7ff fd9c 	bl	8002bcc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309e:	d901      	bls.n	80030a4 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e091      	b.n	80031c8 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ed      	beq.n	8003090 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0206 	orr.w	r2, r2, #6
 80030c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0203 	bic.w	r2, r2, #3
 80030d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0203 	bic.w	r2, r2, #3
 8003106:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800312e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_DSI_Init+0x1b4>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	e000      	b.n	8003152 <HAL_DSI_Init+0x1b6>
 8003150:	2301      	movs	r3, #1
 8003152:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_DSI_Init+0x234>)
 8003158:	fb03 f202 	mul.w	r2, r3, r2
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	409a      	lsls	r2, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003188:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	430a      	orrs	r2, r1
 800319c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	003d0900 	.word	0x003d0900

080031d4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7c1b      	ldrb	r3, [r3, #16]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_DSI_ConfigErrorMonitor+0x16>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e0ab      	b.n	8003342 <HAL_DSI_ConfigErrorMonitor+0x16e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003224:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003228:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003246:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0202 	orr.w	r2, r2, #2
 8003282:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 020c 	orr.w	r2, r2, #12
 80032a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0210 	orr.w	r2, r2, #16
 80032be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d009      	beq.n	80032e0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0220 	orr.w	r2, r2, #32
 80032dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003318:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003336:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7c1b      	ldrb	r3, [r3, #16]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_DSI_SetGenericVCID+0x16>
 8003360:	2302      	movs	r3, #2
 8003362:	e016      	b.n	8003392 <HAL_DSI_SetGenericVCID+0x44>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0203 	bic.w	r2, r2, #3
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7c1b      	ldrb	r3, [r3, #16]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_DSI_ConfigVideoMode+0x16>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e1f6      	b.n	80037a2 <HAL_DSI_ConfigVideoMode+0x404>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0203 	bic.w	r2, r2, #3
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800340e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003412:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003434:	f023 031f 	bic.w	r3, r3, #31
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800345a:	f023 031f 	bic.w	r3, r3, #31
 800345e:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0203 	bic.w	r2, r2, #3
 8003480:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68d9      	ldr	r1, [r3, #12]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0207 	bic.w	r2, r2, #7
 80034a2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6959      	ldr	r1, [r3, #20]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 020f 	bic.w	r2, r2, #15
 80034d0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6919      	ldr	r1, [r3, #16]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 020e 	bic.w	r2, r2, #14
 80034f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	005a      	lsls	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b03      	cmp	r3, #3
 8003516:	d110      	bne.n	800353a <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003526:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6919      	ldr	r1, [r3, #16]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003548:	f023 030f 	bic.w	r3, r3, #15
 800354c:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800356e:	f023 030f 	bic.w	r3, r3, #15
 8003572:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003594:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003598:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035e0:	f023 0303 	bic.w	r3, r3, #3
 80035e4:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800362c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003630:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003652:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003674:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6999      	ldr	r1, [r3, #24]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003698:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6999      	ldr	r1, [r3, #24]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003786:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	7c1b      	ldrb	r3, [r3, #16]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_DSI_ConfigPhyTimer+0x16>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e058      	b.n	8003876 <HAL_DSI_ConfigPhyTimer+0xc8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4293      	cmp	r3, r2
 80037d4:	bf38      	it	cc
 80037d6:	4613      	movcc	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80037ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003818:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003852:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	021a      	lsls	r2, r3, #8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7c1b      	ldrb	r3, [r3, #16]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003894:	2302      	movs	r3, #2
 8003896:	e0b4      	b.n	8003a02 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80038ac:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6899      	ldr	r1, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	021a      	lsls	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	b292      	uxth	r2, r2
 80038ce:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	041a      	lsls	r2, r3, #16
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	0c1b      	lsrs	r3, r3, #16
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800398c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6a1a      	ldr	r2, [r3, #32]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7c1b      	ldrb	r3, [r3, #16]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_DSI_Start+0x14>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e02b      	b.n	8003a7a <HAL_DSI_Start+0x6c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0208 	orr.w	r2, r2, #8
 8003a5e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b088      	sub	sp, #32
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	7c1b      	ldrb	r3, [r3, #16]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_DSI_ShortWrite+0x1a>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e010      	b.n	8003ac2 <HAL_DSI_ShortWrite+0x3c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7ff fa44 	bl	8002f3e <DSI_ShortWrite>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	741a      	strb	r2, [r3, #16]

  return status;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b08c      	sub	sp, #48	; 0x30
 8003ace:	af02      	add	r7, sp, #8
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ada:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	7c1b      	ldrb	r3, [r3, #16]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_DSI_LongWrite+0x1e>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e084      	b.n	8003bf2 <HAL_DSI_LongWrite+0x128>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aee:	f7ff f86d 	bl	8002bcc <HAL_GetTick>
 8003af2:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003af4:	e00c      	b.n	8003b10 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003af6:	f7ff f869 	bl	8002bcc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b04:	d904      	bls.n	8003b10 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e070      	b.n	8003bf2 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0eb      	beq.n	8003af6 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	bf28      	it	cs
 8003b28:	2303      	movcs	r3, #3
 8003b2a:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	e00f      	b.n	8003b52 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	4413      	add	r3, r2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	6a3a      	ldr	r2, [r7, #32]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d3eb      	bcc.n	8003b32 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003b72:	e028      	b.n	8003bc6 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	bf28      	it	cs
 8003b7a:	2304      	movcs	r3, #4
 8003b7c:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003b82:	2300      	movs	r3, #0
 8003b84:	623b      	str	r3, [r7, #32]
 8003b86:	e00e      	b.n	8003ba6 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	6a3a      	ldr	r2, [r7, #32]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d3ec      	bcc.n	8003b88 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1d3      	bne.n	8003b74 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003bd4:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	f7ff f991 	bl	8002f0c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3728      	adds	r7, #40	; 0x28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	7c1b      	ldrb	r3, [r3, #16]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e01b      	b.n	8003c48 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003c26:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	065a      	lsls	r2, r3, #25
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c62:	e166      	b.n	8003f32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2101      	movs	r1, #1
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	4013      	ands	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8158 	beq.w	8003f2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d005      	beq.n	8003c94 <HAL_GPIO_Init+0x40>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d130      	bne.n	8003cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cca:	2201      	movs	r2, #1
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 0201 	and.w	r2, r3, #1
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d017      	beq.n	8003d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d123      	bne.n	8003d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	08da      	lsrs	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3208      	adds	r2, #8
 8003d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	220f      	movs	r2, #15
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	08da      	lsrs	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3208      	adds	r2, #8
 8003d80:	6939      	ldr	r1, [r7, #16]
 8003d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	2203      	movs	r2, #3
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0203 	and.w	r2, r3, #3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80b2 	beq.w	8003f2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc8:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <HAL_GPIO_Init+0x2fc>)
 8003dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dcc:	4a60      	ldr	r2, [pc, #384]	; (8003f50 <HAL_GPIO_Init+0x2fc>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8003dd4:	4b5e      	ldr	r3, [pc, #376]	; (8003f50 <HAL_GPIO_Init+0x2fc>)
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003de0:	4a5c      	ldr	r2, [pc, #368]	; (8003f54 <HAL_GPIO_Init+0x300>)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	3302      	adds	r3, #2
 8003de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	220f      	movs	r2, #15
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e0a:	d02b      	beq.n	8003e64 <HAL_GPIO_Init+0x210>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_GPIO_Init+0x304>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d025      	beq.n	8003e60 <HAL_GPIO_Init+0x20c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a51      	ldr	r2, [pc, #324]	; (8003f5c <HAL_GPIO_Init+0x308>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01f      	beq.n	8003e5c <HAL_GPIO_Init+0x208>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a50      	ldr	r2, [pc, #320]	; (8003f60 <HAL_GPIO_Init+0x30c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d019      	beq.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a4f      	ldr	r2, [pc, #316]	; (8003f64 <HAL_GPIO_Init+0x310>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_GPIO_Init+0x200>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a4e      	ldr	r2, [pc, #312]	; (8003f68 <HAL_GPIO_Init+0x314>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00d      	beq.n	8003e50 <HAL_GPIO_Init+0x1fc>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a4d      	ldr	r2, [pc, #308]	; (8003f6c <HAL_GPIO_Init+0x318>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <HAL_GPIO_Init+0x1f8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a4c      	ldr	r2, [pc, #304]	; (8003f70 <HAL_GPIO_Init+0x31c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_GPIO_Init+0x1f4>
 8003e44:	2307      	movs	r3, #7
 8003e46:	e00e      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e48:	2308      	movs	r3, #8
 8003e4a:	e00c      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	e00a      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e50:	2305      	movs	r3, #5
 8003e52:	e008      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e54:	2304      	movs	r3, #4
 8003e56:	e006      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e004      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e002      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_GPIO_Init+0x212>
 8003e64:	2300      	movs	r3, #0
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	f002 0203 	and.w	r2, r2, #3
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	4093      	lsls	r3, r2
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e76:	4937      	ldr	r1, [pc, #220]	; (8003f54 <HAL_GPIO_Init+0x300>)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ea8:	4a32      	ldr	r2, [pc, #200]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ed2:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ed8:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003efc:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_GPIO_Init+0x320>)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f ae91 	bne.w	8003c64 <HAL_GPIO_Init+0x10>
  }
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40010000 	.word	0x40010000
 8003f58:	48000400 	.word	0x48000400
 8003f5c:	48000800 	.word	0x48000800
 8003f60:	48000c00 	.word	0x48000c00
 8003f64:	48001000 	.word	0x48001000
 8003f68:	48001400 	.word	0x48001400
 8003f6c:	48001800 	.word	0x48001800
 8003f70:	48001c00 	.word	0x48001c00
 8003f74:	40010400 	.word	0x40010400

08003f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	887b      	ldrh	r3, [r7, #2]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
 8003f94:	e001      	b.n	8003f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	807b      	strh	r3, [r7, #2]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb8:	787b      	ldrb	r3, [r7, #1]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fc4:	e002      	b.n	8003fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd fc04 	bl	8001804 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40010400 	.word	0x40010400

08004008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e08d      	b.n	8004136 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fe f9ec 	bl	800240c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004058:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004068:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d107      	bne.n	8004082 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	e006      	b.n	8004090 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800408e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d108      	bne.n	80040aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	e007      	b.n	80040ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69d9      	ldr	r1, [r3, #28]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b20      	cmp	r3, #32
 8004152:	d138      	bne.n	80041c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800415e:	2302      	movs	r3, #2
 8004160:	e032      	b.n	80041c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2224      	movs	r2, #36	; 0x24
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004190:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d139      	bne.n	800425e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e033      	b.n	8004260 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004226:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0bf      	b.n	80043fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fe f95c 	bl	8002550 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80042ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6999      	ldr	r1, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6899      	ldr	r1, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <HAL_LTDC_Init+0x19c>)
 80042e0:	400b      	ands	r3, r1
 80042e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	041b      	lsls	r3, r3, #16
 80042ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6899      	ldr	r1, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68d9      	ldr	r1, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b3e      	ldr	r3, [pc, #248]	; (8004408 <HAL_LTDC_Init+0x19c>)
 800430e:	400b      	ands	r3, r1
 8004310:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68d9      	ldr	r1, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6919      	ldr	r1, [r3, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_LTDC_Init+0x19c>)
 800433c:	400b      	ands	r3, r1
 800433e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6919      	ldr	r1, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6959      	ldr	r1, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <HAL_LTDC_Init+0x19c>)
 800436a:	400b      	ands	r3, r1
 800436c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6959      	ldr	r1, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800439c:	041b      	lsls	r3, r3, #16
 800439e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80043ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0206 	orr.w	r2, r2, #6
 80043da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	f000f800 	.word	0xf000f800

0800440c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800440c:	b5b0      	push	{r4, r5, r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_LTDC_ConfigLayer+0x1a>
 8004422:	2302      	movs	r3, #2
 8004424:	e02c      	b.n	8004480 <HAL_LTDC_ConfigLayer+0x74>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2134      	movs	r1, #52	; 0x34
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	4413      	add	r3, r2
 8004442:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4614      	mov	r4, r2
 800444a:	461d      	mov	r5, r3
 800444c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f811 	bl	8004488 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bdb0      	pop	{r4, r5, r7, pc}

08004488 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	0c1b      	lsrs	r3, r3, #16
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	4413      	add	r3, r2
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	01db      	lsls	r3, r3, #7
 80044b4:	4413      	add	r3, r2
 80044b6:	3384      	adds	r3, #132	; 0x84
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	4611      	mov	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	01d2      	lsls	r2, r2, #7
 80044c4:	440a      	add	r2, r1
 80044c6:	3284      	adds	r2, #132	; 0x84
 80044c8:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80044cc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044de:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044e0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	01db      	lsls	r3, r3, #7
 80044ec:	440b      	add	r3, r1
 80044ee:	3384      	adds	r3, #132	; 0x84
 80044f0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044f6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004506:	4413      	add	r3, r2
 8004508:	041b      	lsls	r3, r3, #16
 800450a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	01db      	lsls	r3, r3, #7
 8004516:	4413      	add	r3, r2
 8004518:	3384      	adds	r3, #132	; 0x84
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	4611      	mov	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	01d2      	lsls	r2, r2, #7
 8004526:	440a      	add	r2, r1
 8004528:	3284      	adds	r2, #132	; 0x84
 800452a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800452e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800453e:	4413      	add	r3, r2
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4619      	mov	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	01db      	lsls	r3, r3, #7
 800454c:	440b      	add	r3, r1
 800454e:	3384      	adds	r3, #132	; 0x84
 8004550:	4619      	mov	r1, r3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4313      	orrs	r3, r2
 8004556:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	01db      	lsls	r3, r3, #7
 8004562:	4413      	add	r3, r2
 8004564:	3384      	adds	r3, #132	; 0x84
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	4611      	mov	r1, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	01d2      	lsls	r2, r2, #7
 8004572:	440a      	add	r2, r1
 8004574:	3284      	adds	r2, #132	; 0x84
 8004576:	f023 0307 	bic.w	r3, r3, #7
 800457a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	01db      	lsls	r3, r3, #7
 8004586:	4413      	add	r3, r2
 8004588:	3384      	adds	r3, #132	; 0x84
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	01db      	lsls	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	3384      	adds	r3, #132	; 0x84
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	01db      	lsls	r3, r3, #7
 80045c8:	4413      	add	r3, r2
 80045ca:	3384      	adds	r3, #132	; 0x84
 80045cc:	461a      	mov	r2, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045d8:	461a      	mov	r2, r3
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	431a      	orrs	r2, r3
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4619      	mov	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	01db      	lsls	r3, r3, #7
 80045ec:	440b      	add	r3, r1
 80045ee:	3384      	adds	r3, #132	; 0x84
 80045f0:	4619      	mov	r1, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	01db      	lsls	r3, r3, #7
 8004602:	4413      	add	r3, r2
 8004604:	3384      	adds	r3, #132	; 0x84
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	4611      	mov	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	01d2      	lsls	r2, r2, #7
 8004612:	440a      	add	r2, r1
 8004614:	3284      	adds	r2, #132	; 0x84
 8004616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800461a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	01db      	lsls	r3, r3, #7
 8004626:	4413      	add	r3, r2
 8004628:	3384      	adds	r3, #132	; 0x84
 800462a:	461a      	mov	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	01db      	lsls	r3, r3, #7
 800463c:	4413      	add	r3, r2
 800463e:	3384      	adds	r3, #132	; 0x84
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	4611      	mov	r1, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	01d2      	lsls	r2, r2, #7
 800464c:	440a      	add	r2, r1
 800464e:	3284      	adds	r2, #132	; 0x84
 8004650:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004654:	f023 0307 	bic.w	r3, r3, #7
 8004658:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	6809      	ldr	r1, [r1, #0]
 8004666:	4608      	mov	r0, r1
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	01c9      	lsls	r1, r1, #7
 800466c:	4401      	add	r1, r0
 800466e:	3184      	adds	r1, #132	; 0x84
 8004670:	4313      	orrs	r3, r2
 8004672:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	01db      	lsls	r3, r3, #7
 800467e:	4413      	add	r3, r2
 8004680:	3384      	adds	r3, #132	; 0x84
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	01db      	lsls	r3, r3, #7
 800468e:	4413      	add	r3, r2
 8004690:	3384      	adds	r3, #132	; 0x84
 8004692:	461a      	mov	r2, r3
 8004694:	2300      	movs	r3, #0
 8004696:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	01db      	lsls	r3, r3, #7
 80046a2:	4413      	add	r3, r2
 80046a4:	3384      	adds	r3, #132	; 0x84
 80046a6:	461a      	mov	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80046b6:	2304      	movs	r3, #4
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	e01b      	b.n	80046f4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80046c4:	2303      	movs	r3, #3
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e014      	b.n	80046f4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d00b      	beq.n	80046ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d007      	beq.n	80046ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d003      	beq.n	80046ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046e6:	2b07      	cmp	r3, #7
 80046e8:	d102      	bne.n	80046f0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80046ea:	2302      	movs	r3, #2
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e001      	b.n	80046f4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80046f0:	2301      	movs	r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	01db      	lsls	r3, r3, #7
 80046fe:	4413      	add	r3, r2
 8004700:	3384      	adds	r3, #132	; 0x84
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	4611      	mov	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	01d2      	lsls	r2, r2, #7
 800470e:	440a      	add	r2, r1
 8004710:	3284      	adds	r2, #132	; 0x84
 8004712:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004716:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	1acb      	subs	r3, r1, r3
 800472e:	69f9      	ldr	r1, [r7, #28]
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004736:	68f9      	ldr	r1, [r7, #12]
 8004738:	6809      	ldr	r1, [r1, #0]
 800473a:	4608      	mov	r0, r1
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	01c9      	lsls	r1, r1, #7
 8004740:	4401      	add	r1, r0
 8004742:	3184      	adds	r1, #132	; 0x84
 8004744:	4313      	orrs	r3, r2
 8004746:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	01db      	lsls	r3, r3, #7
 8004752:	4413      	add	r3, r2
 8004754:	3384      	adds	r3, #132	; 0x84
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	4611      	mov	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	01d2      	lsls	r2, r2, #7
 8004762:	440a      	add	r2, r1
 8004764:	3284      	adds	r2, #132	; 0x84
 8004766:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	01db      	lsls	r3, r3, #7
 800477a:	4413      	add	r3, r2
 800477c:	3384      	adds	r3, #132	; 0x84
 800477e:	461a      	mov	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	4413      	add	r3, r2
 8004792:	3384      	adds	r3, #132	; 0x84
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	4611      	mov	r1, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	01d2      	lsls	r2, r2, #7
 80047a0:	440a      	add	r2, r1
 80047a2:	3284      	adds	r2, #132	; 0x84
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6013      	str	r3, [r2, #0]
}
 80047aa:	bf00      	nop
 80047ac:	3724      	adds	r7, #36	; 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af02      	add	r7, sp, #8
 80047be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80047c4:	f7fe fa02 	bl	8002bcc <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e092      	b.n	80048fc <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 808b 	bne.w	80048fc <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fd fef6 	bl	80025d8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80047ec:	f241 3188 	movw	r1, #5000	; 0x1388
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f88b 	bl	800490c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	4b42      	ldr	r3, [pc, #264]	; (8004908 <HAL_OSPI_Init+0x150>)
 80047fe:	4013      	ands	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68d1      	ldr	r1, [r2, #12]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6912      	ldr	r2, [r2, #16]
 8004808:	3a01      	subs	r2, #1
 800480a:	0412      	lsls	r2, r2, #16
 800480c:	4311      	orrs	r1, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6952      	ldr	r2, [r2, #20]
 8004812:	3a01      	subs	r2, #1
 8004814:	0212      	lsls	r2, r2, #8
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	69d2      	ldr	r2, [r2, #28]
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	430b      	orrs	r3, r1
 800482a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0412      	lsls	r2, r2, #16
 8004836:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	3b01      	subs	r3, #1
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2200      	movs	r2, #0
 800485c:	2120      	movs	r1, #32
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fb98 	bl	8004f94 <OSPI_WaitFlagStateUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d146      	bne.n	80048fc <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	1e5a      	subs	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048a4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d107      	bne.n	80048e4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0202 	orr.w	r2, r2, #2
 80048e2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048ec:	d103      	bne.n	80048f6 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44
 80048f4:	e002      	b.n	80048fc <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	f8e0f8f4 	.word	0xf8e0f8f4

0800490c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b092      	sub	sp, #72	; 0x48
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <HAL_OSPIM_Config+0x40>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d105      	bne.n	800495a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004958:	e004      	b.n	8004964 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800495a:	2301      	movs	r3, #1
 800495c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004964:	2300      	movs	r3, #0
 8004966:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800496a:	e01f      	b.n	80049ac <HAL_OSPIM_Config+0x80>
 800496c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004970:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004974:	3301      	adds	r3, #1
 8004976:	b2d8      	uxtb	r0, r3
 8004978:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800497c:	f107 0114 	add.w	r1, r7, #20
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	4619      	mov	r1, r3
 800498c:	f000 fb3a 	bl	8005004 <OSPIM_GetConfig>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2208      	movs	r2, #8
 80049a0:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80049a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049a6:	3301      	adds	r3, #1
 80049a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80049ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d9dd      	bls.n	8004970 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80049b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 82de 	bne.w	8004f7a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80049be:	4bc6      	ldr	r3, [pc, #792]	; (8004cd8 <HAL_OSPIM_Config+0x3ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80049ca:	4bc3      	ldr	r3, [pc, #780]	; (8004cd8 <HAL_OSPIM_Config+0x3ac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4ac2      	ldr	r2, [pc, #776]	; (8004cd8 <HAL_OSPIM_Config+0x3ac>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80049d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80049e2:	4bbe      	ldr	r3, [pc, #760]	; (8004cdc <HAL_OSPIM_Config+0x3b0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80049ee:	4bbb      	ldr	r3, [pc, #748]	; (8004cdc <HAL_OSPIM_Config+0x3b0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4aba      	ldr	r2, [pc, #744]	; (8004cdc <HAL_OSPIM_Config+0x3b0>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80049fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049fe:	f043 0302 	orr.w	r3, r3, #2
 8004a02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004a06:	49b6      	ldr	r1, [pc, #728]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	3348      	adds	r3, #72	; 0x48
 8004a14:	443b      	add	r3, r7
 8004a16:	3b2c      	subs	r3, #44	; 0x2c
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	48af      	ldr	r0, [pc, #700]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004a24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	3348      	adds	r3, #72	; 0x48
 8004a30:	443b      	add	r3, r7
 8004a32:	3b2c      	subs	r3, #44	; 0x2c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4403      	add	r3, r0
 8004a40:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	3348      	adds	r3, #72	; 0x48
 8004a4e:	443b      	add	r3, r7
 8004a50:	3b34      	subs	r3, #52	; 0x34
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80a1 	beq.w	8004b9c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004a5a:	49a1      	ldr	r1, [pc, #644]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004a5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	3348      	adds	r3, #72	; 0x48
 8004a68:	443b      	add	r3, r7
 8004a6a:	3b34      	subs	r3, #52	; 0x34
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	489a      	ldr	r0, [pc, #616]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004a78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	3348      	adds	r3, #72	; 0x48
 8004a84:	443b      	add	r3, r7
 8004a86:	3b34      	subs	r3, #52	; 0x34
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	f021 0201 	bic.w	r2, r1, #1
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4403      	add	r3, r0
 8004a94:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	3348      	adds	r3, #72	; 0x48
 8004aa2:	443b      	add	r3, r7
 8004aa4:	3b30      	subs	r3, #48	; 0x30
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01d      	beq.n	8004ae8 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004aac:	498c      	ldr	r1, [pc, #560]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	3348      	adds	r3, #72	; 0x48
 8004aba:	443b      	add	r3, r7
 8004abc:	3b30      	subs	r3, #48	; 0x30
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	4885      	ldr	r0, [pc, #532]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	3348      	adds	r3, #72	; 0x48
 8004ad6:	443b      	add	r3, r7
 8004ad8:	3b30      	subs	r3, #48	; 0x30
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	f021 0210 	bic.w	r2, r1, #16
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4403      	add	r3, r0
 8004ae6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004ae8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	3348      	adds	r3, #72	; 0x48
 8004af4:	443b      	add	r3, r7
 8004af6:	3b28      	subs	r3, #40	; 0x28
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d021      	beq.n	8004b42 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004afe:	4978      	ldr	r1, [pc, #480]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	3348      	adds	r3, #72	; 0x48
 8004b0c:	443b      	add	r3, r7
 8004b0e:	3b28      	subs	r3, #40	; 0x28
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	6859      	ldr	r1, [r3, #4]
 8004b1e:	4870      	ldr	r0, [pc, #448]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	3348      	adds	r3, #72	; 0x48
 8004b2c:	443b      	add	r3, r7
 8004b2e:	3b28      	subs	r3, #40	; 0x28
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4403      	add	r3, r0
 8004b40:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	3348      	adds	r3, #72	; 0x48
 8004b4e:	443b      	add	r3, r7
 8004b50:	3b24      	subs	r3, #36	; 0x24
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d021      	beq.n	8004b9c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004b58:	4961      	ldr	r1, [pc, #388]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004b5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	3348      	adds	r3, #72	; 0x48
 8004b66:	443b      	add	r3, r7
 8004b68:	3b24      	subs	r3, #36	; 0x24
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	4859      	ldr	r0, [pc, #356]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	3348      	adds	r3, #72	; 0x48
 8004b86:	443b      	add	r3, r7
 8004b88:	3b24      	subs	r3, #36	; 0x24
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4403      	add	r3, r0
 8004b9a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6819      	ldr	r1, [r3, #0]
 8004ba0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	3348      	adds	r3, #72	; 0x48
 8004bae:	443b      	add	r3, r7
 8004bb0:	3b34      	subs	r3, #52	; 0x34
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	d038      	beq.n	8004c2a <HAL_OSPIM_Config+0x2fe>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	6859      	ldr	r1, [r3, #4]
 8004bbc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	3348      	adds	r3, #72	; 0x48
 8004bca:	443b      	add	r3, r7
 8004bcc:	3b30      	subs	r3, #48	; 0x30
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4299      	cmp	r1, r3
 8004bd2:	d02a      	beq.n	8004c2a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	6899      	ldr	r1, [r3, #8]
 8004bd8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	3348      	adds	r3, #72	; 0x48
 8004be6:	443b      	add	r3, r7
 8004be8:	3b2c      	subs	r3, #44	; 0x2c
 8004bea:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004bec:	4299      	cmp	r1, r3
 8004bee:	d01c      	beq.n	8004c2a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	68d9      	ldr	r1, [r3, #12]
 8004bf4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	3348      	adds	r3, #72	; 0x48
 8004c02:	443b      	add	r3, r7
 8004c04:	3b28      	subs	r3, #40	; 0x28
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d00e      	beq.n	8004c2a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6919      	ldr	r1, [r3, #16]
 8004c10:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	3348      	adds	r3, #72	; 0x48
 8004c1e:	443b      	add	r3, r7
 8004c20:	3b24      	subs	r3, #36	; 0x24
 8004c22:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004c24:	4299      	cmp	r1, r3
 8004c26:	f040 80d3 	bne.w	8004dd0 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004c2a:	492d      	ldr	r1, [pc, #180]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004c2c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	3348      	adds	r3, #72	; 0x48
 8004c3a:	443b      	add	r3, r7
 8004c3c:	3b34      	subs	r3, #52	; 0x34
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	4825      	ldr	r0, [pc, #148]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004c4a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	3348      	adds	r3, #72	; 0x48
 8004c58:	443b      	add	r3, r7
 8004c5a:	3b34      	subs	r3, #52	; 0x34
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	f021 0201 	bic.w	r2, r1, #1
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4403      	add	r3, r0
 8004c68:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004c6a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	3348      	adds	r3, #72	; 0x48
 8004c78:	443b      	add	r3, r7
 8004c7a:	3b30      	subs	r3, #48	; 0x30
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01f      	beq.n	8004cc2 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004c82:	4917      	ldr	r1, [pc, #92]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004c84:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	3348      	adds	r3, #72	; 0x48
 8004c92:	443b      	add	r3, r7
 8004c94:	3b30      	subs	r3, #48	; 0x30
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	6859      	ldr	r1, [r3, #4]
 8004ca0:	480f      	ldr	r0, [pc, #60]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004ca2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	3348      	adds	r3, #72	; 0x48
 8004cb0:	443b      	add	r3, r7
 8004cb2:	3b30      	subs	r3, #48	; 0x30
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	f021 0210 	bic.w	r2, r1, #16
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4403      	add	r3, r0
 8004cc0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004cc2:	4907      	ldr	r1, [pc, #28]	; (8004ce0 <HAL_OSPIM_Config+0x3b4>)
 8004cc4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	3348      	adds	r3, #72	; 0x48
 8004cd2:	443b      	add	r3, r7
 8004cd4:	3b2c      	subs	r3, #44	; 0x2c
 8004cd6:	e005      	b.n	8004ce4 <HAL_OSPIM_Config+0x3b8>
 8004cd8:	a0001000 	.word	0xa0001000
 8004cdc:	a0001400 	.word	0xa0001400
 8004ce0:	50061c00 	.word	0x50061c00
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	48a6      	ldr	r0, [pc, #664]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004cf0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	3348      	adds	r3, #72	; 0x48
 8004cfe:	443b      	add	r3, r7
 8004d00:	3b2c      	subs	r3, #44	; 0x2c
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4403      	add	r3, r0
 8004d0e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d10:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	3348      	adds	r3, #72	; 0x48
 8004d1e:	443b      	add	r3, r7
 8004d20:	3b28      	subs	r3, #40	; 0x28
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d023      	beq.n	8004d70 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d28:	4997      	ldr	r1, [pc, #604]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004d2a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	3348      	adds	r3, #72	; 0x48
 8004d38:	443b      	add	r3, r7
 8004d3a:	3b28      	subs	r3, #40	; 0x28
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	488f      	ldr	r0, [pc, #572]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004d4c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	3348      	adds	r3, #72	; 0x48
 8004d5a:	443b      	add	r3, r7
 8004d5c:	3b28      	subs	r3, #40	; 0x28
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4403      	add	r3, r0
 8004d6e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d70:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	3348      	adds	r3, #72	; 0x48
 8004d7e:	443b      	add	r3, r7
 8004d80:	3b24      	subs	r3, #36	; 0x24
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d023      	beq.n	8004dd0 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d88:	497f      	ldr	r1, [pc, #508]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004d8a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	3348      	adds	r3, #72	; 0x48
 8004d98:	443b      	add	r3, r7
 8004d9a:	3b24      	subs	r3, #36	; 0x24
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	6859      	ldr	r1, [r3, #4]
 8004daa:	4877      	ldr	r0, [pc, #476]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004dac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	3348      	adds	r3, #72	; 0x48
 8004dba:	443b      	add	r3, r7
 8004dbc:	3b24      	subs	r3, #36	; 0x24
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4403      	add	r3, r0
 8004dce:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004dd0:	4a6d      	ldr	r2, [pc, #436]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de4:	025b      	lsls	r3, r3, #9
 8004de6:	431a      	orrs	r2, r3
 8004de8:	4967      	ldr	r1, [pc, #412]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004dfa:	4a63      	ldr	r2, [pc, #396]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f023 0203 	bic.w	r2, r3, #3
 8004e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	431a      	orrs	r2, r3
 8004e12:	495d      	ldr	r1, [pc, #372]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d014      	beq.n	8004e56 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004e2c:	4a56      	ldr	r2, [pc, #344]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e40:	015b      	lsls	r3, r3, #5
 8004e42:	431a      	orrs	r2, r3
 8004e44:	4950      	ldr	r1, [pc, #320]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	f042 0210 	orr.w	r2, r2, #16
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d019      	beq.n	8004e96 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e62:	4a49      	ldr	r2, [pc, #292]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7a:	049b      	lsls	r3, r3, #18
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	4942      	ldr	r1, [pc, #264]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	e01c      	b.n	8004ed0 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e9e:	4a3a      	ldr	r2, [pc, #232]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb6:	069b      	lsls	r3, r3, #26
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	4933      	ldr	r1, [pc, #204]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d019      	beq.n	8004f10 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004edc:	4a2a      	ldr	r2, [pc, #168]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef4:	049b      	lsls	r3, r3, #18
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	4923      	ldr	r1, [pc, #140]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	e01c      	b.n	8004f4a <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d018      	beq.n	8004f4a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f18:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f30:	069b      	lsls	r3, r3, #26
 8004f32:	431a      	orrs	r2, r3
 8004f34:	4914      	ldr	r1, [pc, #80]	; (8004f88 <HAL_OSPIM_Config+0x65c>)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004f4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_OSPIM_Config+0x660>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a0c      	ldr	r2, [pc, #48]	; (8004f8c <HAL_OSPIM_Config+0x660>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004f62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004f6e:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <HAL_OSPIM_Config+0x664>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a07      	ldr	r2, [pc, #28]	; (8004f90 <HAL_OSPIM_Config+0x664>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004f7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3748      	adds	r7, #72	; 0x48
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	50061c00 	.word	0x50061c00
 8004f8c:	a0001000 	.word	0xa0001000
 8004f90:	a0001400 	.word	0xa0001400

08004f94 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004fa4:	e01a      	b.n	8004fdc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d016      	beq.n	8004fdc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fd fe0d 	bl	8002bcc <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fca:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd0:	f043 0201 	orr.w	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e00e      	b.n	8004ffa <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf14      	ite	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	2300      	moveq	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d1d6      	bne.n	8004fa6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	6039      	str	r1, [r7, #0]
 800500e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <OSPIM_GetConfig+0x26>
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d802      	bhi.n	800502a <OSPIM_GetConfig+0x26>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
 800502e:	e08e      	b.n	800514e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2200      	movs	r2, #0
 800503a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d101      	bne.n	8005058 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005054:	4b41      	ldr	r3, [pc, #260]	; (800515c <OSPIM_GetConfig+0x158>)
 8005056:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e074      	b.n	8005148 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800505e:	4a40      	ldr	r2, [pc, #256]	; (8005160 <OSPIM_GetConfig+0x15c>)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4053      	eors	r3, r2
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4053      	eors	r3, r2
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d103      	bne.n	80050aa <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4053      	eors	r3, r2
 80050ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d103      	bne.n	80050ca <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d018      	beq.n	8005106 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4053      	eors	r3, r2
 80050da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d111      	bne.n	8005106 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3301      	adds	r3, #1
 80050f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e005      	b.n	8005106 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3301      	adds	r3, #1
 80050fe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d018      	beq.n	8005142 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4053      	eors	r3, r2
 8005116:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d111      	bne.n	8005142 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	611a      	str	r2, [r3, #16]
 8005134:	e005      	b.n	8005142 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3301      	adds	r3, #1
 800513a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d987      	bls.n	800505e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005150:	4618      	mov	r0, r3
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	04040222 	.word	0x04040222
 8005160:	50061c00 	.word	0x50061c00

08005164 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005168:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005174:	d102      	bne.n	800517c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517a:	e00b      	b.n	8005194 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800517c:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800517e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518a:	d102      	bne.n	8005192 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800518c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005190:	e000      	b.n	8005194 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005192:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005194:	4618      	mov	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40007000 	.word	0x40007000

080051a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d141      	bne.n	8005236 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051b2:	4b4b      	ldr	r3, [pc, #300]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051be:	d131      	bne.n	8005224 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051c0:	4b47      	ldr	r3, [pc, #284]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c6:	4a46      	ldr	r2, [pc, #280]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051d0:	4b43      	ldr	r3, [pc, #268]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051d8:	4a41      	ldr	r2, [pc, #260]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80051e0:	4b40      	ldr	r3, [pc, #256]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2232      	movs	r2, #50	; 0x32
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	4a3f      	ldr	r2, [pc, #252]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	0c9b      	lsrs	r3, r3, #18
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051f6:	e002      	b.n	80051fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051fe:	4b38      	ldr	r3, [pc, #224]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520a:	d102      	bne.n	8005212 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f2      	bne.n	80051f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005212:	4b33      	ldr	r3, [pc, #204]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521e:	d158      	bne.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e057      	b.n	80052d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005224:	4b2e      	ldr	r3, [pc, #184]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522a:	4a2d      	ldr	r2, [pc, #180]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005234:	e04d      	b.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523c:	d141      	bne.n	80052c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800523e:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524a:	d131      	bne.n	80052b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800524c:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005252:	4a23      	ldr	r2, [pc, #140]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800525c:	4b20      	ldr	r3, [pc, #128]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005264:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800526a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2232      	movs	r2, #50	; 0x32
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	0c9b      	lsrs	r3, r3, #18
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005282:	e002      	b.n	800528a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3b01      	subs	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800528a:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005296:	d102      	bne.n	800529e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f2      	bne.n	8005284 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052aa:	d112      	bne.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e011      	b.n	80052d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b6:	4a0a      	ldr	r2, [pc, #40]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052c0:	e007      	b.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052ca:	4a05      	ldr	r2, [pc, #20]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40007000 	.word	0x40007000
 80052e4:	20004b0c 	.word	0x20004b0c
 80052e8:	431bde83 	.word	0x431bde83

080052ec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4a04      	ldr	r2, [pc, #16]	; (8005308 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052fa:	6053      	str	r3, [r2, #4]
}
 80052fc:	bf00      	nop
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40007000 	.word	0x40007000

0800530c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f000 bc08 	b.w	8005b30 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005320:	4b96      	ldr	r3, [pc, #600]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 030c 	and.w	r3, r3, #12
 8005328:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800532a:	4b94      	ldr	r3, [pc, #592]	; (800557c <HAL_RCC_OscConfig+0x270>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80e4 	beq.w	800550a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_RCC_OscConfig+0x4c>
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b0c      	cmp	r3, #12
 800534c:	f040 808b 	bne.w	8005466 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b01      	cmp	r3, #1
 8005354:	f040 8087 	bne.w	8005466 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005358:	4b88      	ldr	r3, [pc, #544]	; (800557c <HAL_RCC_OscConfig+0x270>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_OscConfig+0x64>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e3df      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	4b81      	ldr	r3, [pc, #516]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d004      	beq.n	800538a <HAL_RCC_OscConfig+0x7e>
 8005380:	4b7e      	ldr	r3, [pc, #504]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005388:	e005      	b.n	8005396 <HAL_RCC_OscConfig+0x8a>
 800538a:	4b7c      	ldr	r3, [pc, #496]	; (800557c <HAL_RCC_OscConfig+0x270>)
 800538c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005396:	4293      	cmp	r3, r2
 8005398:	d223      	bcs.n	80053e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fdcc 	bl	8005f3c <RCC_SetFlashLatencyFromMSIRange>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e3c0      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ae:	4b73      	ldr	r3, [pc, #460]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a72      	ldr	r2, [pc, #456]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053b4:	f043 0308 	orr.w	r3, r3, #8
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b70      	ldr	r3, [pc, #448]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	496d      	ldr	r1, [pc, #436]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053cc:	4b6b      	ldr	r3, [pc, #428]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	4968      	ldr	r1, [pc, #416]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	604b      	str	r3, [r1, #4]
 80053e0:	e025      	b.n	800542e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053e2:	4b66      	ldr	r3, [pc, #408]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a65      	ldr	r2, [pc, #404]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053e8:	f043 0308 	orr.w	r3, r3, #8
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4b63      	ldr	r3, [pc, #396]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	4960      	ldr	r1, [pc, #384]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005400:	4b5e      	ldr	r3, [pc, #376]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	495b      	ldr	r1, [pc, #364]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005410:	4313      	orrs	r3, r2
 8005412:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fd8c 	bl	8005f3c <RCC_SetFlashLatencyFromMSIRange>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e380      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800542e:	f000 fcc1 	bl	8005db4 <HAL_RCC_GetSysClockFreq>
 8005432:	4602      	mov	r2, r0
 8005434:	4b51      	ldr	r3, [pc, #324]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	4950      	ldr	r1, [pc, #320]	; (8005580 <HAL_RCC_OscConfig+0x274>)
 8005440:	5ccb      	ldrb	r3, [r1, r3]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	4a4e      	ldr	r2, [pc, #312]	; (8005584 <HAL_RCC_OscConfig+0x278>)
 800544c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800544e:	4b4e      	ldr	r3, [pc, #312]	; (8005588 <HAL_RCC_OscConfig+0x27c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fd fb6a 	bl	8002b2c <HAL_InitTick>
 8005458:	4603      	mov	r3, r0
 800545a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d052      	beq.n	8005508 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	e364      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d032      	beq.n	80054d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800546e:	4b43      	ldr	r3, [pc, #268]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a42      	ldr	r2, [pc, #264]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800547a:	f7fd fba7 	bl	8002bcc <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005482:	f7fd fba3 	bl	8002bcc <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e34d      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005494:	4b39      	ldr	r3, [pc, #228]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0f0      	beq.n	8005482 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054a0:	4b36      	ldr	r3, [pc, #216]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a35      	ldr	r2, [pc, #212]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054a6:	f043 0308 	orr.w	r3, r3, #8
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	4b33      	ldr	r3, [pc, #204]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	4930      	ldr	r1, [pc, #192]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054be:	4b2f      	ldr	r3, [pc, #188]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	492b      	ldr	r1, [pc, #172]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	604b      	str	r3, [r1, #4]
 80054d2:	e01a      	b.n	800550a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054d4:	4b29      	ldr	r3, [pc, #164]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a28      	ldr	r2, [pc, #160]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054e0:	f7fd fb74 	bl	8002bcc <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054e8:	f7fd fb70 	bl	8002bcc <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e31a      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054fa:	4b20      	ldr	r3, [pc, #128]	; (800557c <HAL_RCC_OscConfig+0x270>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x1dc>
 8005506:	e000      	b.n	800550a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d073      	beq.n	80055fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d005      	beq.n	8005528 <HAL_RCC_OscConfig+0x21c>
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d10e      	bne.n	8005540 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d10b      	bne.n	8005540 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005528:	4b14      	ldr	r3, [pc, #80]	; (800557c <HAL_RCC_OscConfig+0x270>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d063      	beq.n	80055fc <HAL_RCC_OscConfig+0x2f0>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d15f      	bne.n	80055fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e2f7      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005548:	d106      	bne.n	8005558 <HAL_RCC_OscConfig+0x24c>
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <HAL_RCC_OscConfig+0x270>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a0b      	ldr	r2, [pc, #44]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e025      	b.n	80055a4 <HAL_RCC_OscConfig+0x298>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005560:	d114      	bne.n	800558c <HAL_RCC_OscConfig+0x280>
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a05      	ldr	r2, [pc, #20]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b03      	ldr	r3, [pc, #12]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a02      	ldr	r2, [pc, #8]	; (800557c <HAL_RCC_OscConfig+0x270>)
 8005574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e013      	b.n	80055a4 <HAL_RCC_OscConfig+0x298>
 800557c:	40021000 	.word	0x40021000
 8005580:	0800917c 	.word	0x0800917c
 8005584:	20004b0c 	.word	0x20004b0c
 8005588:	20004b10 	.word	0x20004b10
 800558c:	4ba0      	ldr	r3, [pc, #640]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a9f      	ldr	r2, [pc, #636]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b9d      	ldr	r3, [pc, #628]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a9c      	ldr	r2, [pc, #624]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 800559e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fd fb0e 	bl	8002bcc <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fd fb0a 	bl	8002bcc <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e2b4      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c6:	4b92      	ldr	r3, [pc, #584]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x2a8>
 80055d2:	e014      	b.n	80055fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fd fafa 	bl	8002bcc <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055dc:	f7fd faf6 	bl	8002bcc <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	; 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e2a0      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ee:	4b88      	ldr	r3, [pc, #544]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x2d0>
 80055fa:	e000      	b.n	80055fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d060      	beq.n	80056cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b04      	cmp	r3, #4
 800560e:	d005      	beq.n	800561c <HAL_RCC_OscConfig+0x310>
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b0c      	cmp	r3, #12
 8005614:	d119      	bne.n	800564a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d116      	bne.n	800564a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800561c:	4b7c      	ldr	r3, [pc, #496]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_OscConfig+0x328>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e27d      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005634:	4b76      	ldr	r3, [pc, #472]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	061b      	lsls	r3, r3, #24
 8005642:	4973      	ldr	r1, [pc, #460]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005644:	4313      	orrs	r3, r2
 8005646:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005648:	e040      	b.n	80056cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d023      	beq.n	800569a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005652:	4b6f      	ldr	r3, [pc, #444]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a6e      	ldr	r2, [pc, #440]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fd fab5 	bl	8002bcc <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005666:	f7fd fab1 	bl	8002bcc <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e25b      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005678:	4b65      	ldr	r3, [pc, #404]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005684:	4b62      	ldr	r3, [pc, #392]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	061b      	lsls	r3, r3, #24
 8005692:	495f      	ldr	r1, [pc, #380]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005694:	4313      	orrs	r3, r2
 8005696:	604b      	str	r3, [r1, #4]
 8005698:	e018      	b.n	80056cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800569a:	4b5d      	ldr	r3, [pc, #372]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a5c      	ldr	r2, [pc, #368]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80056a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fd fa91 	bl	8002bcc <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ae:	f7fd fa8d 	bl	8002bcc <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e237      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c0:	4b53      	ldr	r3, [pc, #332]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f0      	bne.n	80056ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d03c      	beq.n	8005752 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01c      	beq.n	800571a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e0:	4b4b      	ldr	r3, [pc, #300]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80056e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e6:	4a4a      	ldr	r2, [pc, #296]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7fd fa6c 	bl	8002bcc <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f8:	f7fd fa68 	bl	8002bcc <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e212      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800570a:	4b41      	ldr	r3, [pc, #260]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 800570c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ef      	beq.n	80056f8 <HAL_RCC_OscConfig+0x3ec>
 8005718:	e01b      	b.n	8005752 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800571a:	4b3d      	ldr	r3, [pc, #244]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 800571c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005720:	4a3b      	ldr	r2, [pc, #236]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572a:	f7fd fa4f 	bl	8002bcc <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005732:	f7fd fa4b 	bl	8002bcc <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e1f5      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005744:	4b32      	ldr	r3, [pc, #200]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1ef      	bne.n	8005732 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80a6 	beq.w	80058ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005760:	2300      	movs	r3, #0
 8005762:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005764:	4b2a      	ldr	r3, [pc, #168]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10d      	bne.n	800578c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005770:	4b27      	ldr	r3, [pc, #156]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	4a26      	ldr	r2, [pc, #152]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577a:	6593      	str	r3, [r2, #88]	; 0x58
 800577c:	4b24      	ldr	r3, [pc, #144]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 800577e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005788:	2301      	movs	r3, #1
 800578a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800578c:	4b21      	ldr	r3, [pc, #132]	; (8005814 <HAL_RCC_OscConfig+0x508>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d118      	bne.n	80057ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005798:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <HAL_RCC_OscConfig+0x508>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <HAL_RCC_OscConfig+0x508>)
 800579e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a4:	f7fd fa12 	bl	8002bcc <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ac:	f7fd fa0e 	bl	8002bcc <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e1b8      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057be:	4b15      	ldr	r3, [pc, #84]	; (8005814 <HAL_RCC_OscConfig+0x508>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d108      	bne.n	80057e4 <HAL_RCC_OscConfig+0x4d8>
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	4a0d      	ldr	r2, [pc, #52]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057e2:	e029      	b.n	8005838 <HAL_RCC_OscConfig+0x52c>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b05      	cmp	r3, #5
 80057ea:	d115      	bne.n	8005818 <HAL_RCC_OscConfig+0x50c>
 80057ec:	4b08      	ldr	r3, [pc, #32]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	4a07      	ldr	r2, [pc, #28]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80057f4:	f043 0304 	orr.w	r3, r3, #4
 80057f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	4a03      	ldr	r2, [pc, #12]	; (8005810 <HAL_RCC_OscConfig+0x504>)
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800580c:	e014      	b.n	8005838 <HAL_RCC_OscConfig+0x52c>
 800580e:	bf00      	nop
 8005810:	40021000 	.word	0x40021000
 8005814:	40007000 	.word	0x40007000
 8005818:	4b9d      	ldr	r3, [pc, #628]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	4a9c      	ldr	r2, [pc, #624]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005828:	4b99      	ldr	r3, [pc, #612]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	4a98      	ldr	r2, [pc, #608]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d016      	beq.n	800586e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005840:	f7fd f9c4 	bl	8002bcc <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005846:	e00a      	b.n	800585e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005848:	f7fd f9c0 	bl	8002bcc <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e168      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585e:	4b8c      	ldr	r3, [pc, #560]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ed      	beq.n	8005848 <HAL_RCC_OscConfig+0x53c>
 800586c:	e015      	b.n	800589a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586e:	f7fd f9ad 	bl	8002bcc <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005874:	e00a      	b.n	800588c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fd f9a9 	bl	8002bcc <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	; 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e151      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800588c:	4b80      	ldr	r3, [pc, #512]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1ed      	bne.n	8005876 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800589a:	7ffb      	ldrb	r3, [r7, #31]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d105      	bne.n	80058ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a0:	4b7b      	ldr	r3, [pc, #492]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	4a7a      	ldr	r2, [pc, #488]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80058a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d03c      	beq.n	8005932 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d01c      	beq.n	80058fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058c0:	4b73      	ldr	r3, [pc, #460]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80058c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058c6:	4a72      	ldr	r2, [pc, #456]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d0:	f7fd f97c 	bl	8002bcc <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058d8:	f7fd f978 	bl	8002bcc <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e122      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058ea:	4b69      	ldr	r3, [pc, #420]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80058ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0ef      	beq.n	80058d8 <HAL_RCC_OscConfig+0x5cc>
 80058f8:	e01b      	b.n	8005932 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058fa:	4b65      	ldr	r3, [pc, #404]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80058fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005900:	4a63      	ldr	r2, [pc, #396]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590a:	f7fd f95f 	bl	8002bcc <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005912:	f7fd f95b 	bl	8002bcc <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e105      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005924:	4b5a      	ldr	r3, [pc, #360]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1ef      	bne.n	8005912 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 80f9 	beq.w	8005b2e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	2b02      	cmp	r3, #2
 8005942:	f040 80cf 	bne.w	8005ae4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005946:	4b52      	ldr	r3, [pc, #328]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f003 0203 	and.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	429a      	cmp	r2, r3
 8005958:	d12c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	3b01      	subs	r3, #1
 8005966:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005968:	429a      	cmp	r2, r3
 800596a:	d123      	bne.n	80059b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005978:	429a      	cmp	r2, r3
 800597a:	d11b      	bne.n	80059b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d113      	bne.n	80059b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	3b01      	subs	r3, #1
 800599a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800599c:	429a      	cmp	r2, r3
 800599e:	d109      	bne.n	80059b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	3b01      	subs	r3, #1
 80059ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d071      	beq.n	8005a98 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b0c      	cmp	r3, #12
 80059b8:	d068      	beq.n	8005a8c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059ba:	4b35      	ldr	r3, [pc, #212]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d105      	bne.n	80059d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80059c6:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0ac      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80059dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059e2:	f7fd f8f3 	bl	8002bcc <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fd f8ef 	bl	8002bcc <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e099      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fc:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f0      	bne.n	80059ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a08:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <HAL_RCC_OscConfig+0x788>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a18:	3a01      	subs	r2, #1
 8005a1a:	0112      	lsls	r2, r2, #4
 8005a1c:	4311      	orrs	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a22:	0212      	lsls	r2, r2, #8
 8005a24:	4311      	orrs	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a2a:	0852      	lsrs	r2, r2, #1
 8005a2c:	3a01      	subs	r2, #1
 8005a2e:	0552      	lsls	r2, r2, #21
 8005a30:	4311      	orrs	r1, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a36:	0852      	lsrs	r2, r2, #1
 8005a38:	3a01      	subs	r2, #1
 8005a3a:	0652      	lsls	r2, r2, #25
 8005a3c:	4311      	orrs	r1, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a42:	06d2      	lsls	r2, r2, #27
 8005a44:	430a      	orrs	r2, r1
 8005a46:	4912      	ldr	r1, [pc, #72]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0f      	ldr	r2, [pc, #60]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4a0c      	ldr	r2, [pc, #48]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a64:	f7fd f8b2 	bl	8002bcc <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6c:	f7fd f8ae 	bl	8002bcc <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e058      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a7e:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <HAL_RCC_OscConfig+0x784>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a8a:	e050      	b.n	8005b2e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e04f      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
 8005a90:	40021000 	.word	0x40021000
 8005a94:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a98:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d144      	bne.n	8005b2e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005aa4:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a23      	ldr	r2, [pc, #140]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ab0:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a20      	ldr	r2, [pc, #128]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005abc:	f7fd f886 	bl	8002bcc <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fd f882 	bl	8002bcc <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e02c      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad6:	4b18      	ldr	r3, [pc, #96]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x7b8>
 8005ae2:	e024      	b.n	8005b2e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b0c      	cmp	r3, #12
 8005ae8:	d01f      	beq.n	8005b2a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a12      	ldr	r2, [pc, #72]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af6:	f7fd f869 	bl	8002bcc <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afe:	f7fd f865 	bl	8002bcc <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e00f      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f0      	bne.n	8005afe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	4905      	ldr	r1, [pc, #20]	; (8005b38 <HAL_RCC_OscConfig+0x82c>)
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_OscConfig+0x830>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60cb      	str	r3, [r1, #12]
 8005b28:	e001      	b.n	8005b2e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	feeefffc 	.word	0xfeeefffc

08005b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e11d      	b.n	8005d94 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b58:	4b90      	ldr	r3, [pc, #576]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d910      	bls.n	8005b88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b8d      	ldr	r3, [pc, #564]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 020f 	bic.w	r2, r3, #15
 8005b6e:	498b      	ldr	r1, [pc, #556]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b89      	ldr	r3, [pc, #548]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e105      	b.n	8005d94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	4b81      	ldr	r3, [pc, #516]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d908      	bls.n	8005bb6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba4:	4b7e      	ldr	r3, [pc, #504]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	497b      	ldr	r1, [pc, #492]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d079      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d11e      	bne.n	8005c08 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bca:	4b75      	ldr	r3, [pc, #468]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e0dc      	b.n	8005d94 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005bda:	f000 fa09 	bl	8005ff0 <RCC_GetSysClockFreqFromPLLSource>
 8005bde:	4603      	mov	r3, r0
 8005be0:	4a70      	ldr	r2, [pc, #448]	; (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d946      	bls.n	8005c74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005be6:	4b6e      	ldr	r3, [pc, #440]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d140      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bf2:	4b6b      	ldr	r3, [pc, #428]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfa:	4a69      	ldr	r2, [pc, #420]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e035      	b.n	8005c74 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c10:	4b63      	ldr	r3, [pc, #396]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d115      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0b9      	b.n	8005d94 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c28:	4b5d      	ldr	r3, [pc, #372]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0ad      	b.n	8005d94 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c38:	4b59      	ldr	r3, [pc, #356]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0a5      	b.n	8005d94 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005c48:	f000 f8b4 	bl	8005db4 <HAL_RCC_GetSysClockFreq>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	4a55      	ldr	r2, [pc, #340]	; (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d90f      	bls.n	8005c74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c54:	4b52      	ldr	r3, [pc, #328]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d109      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c60:	4b4f      	ldr	r3, [pc, #316]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c68:	4a4d      	ldr	r2, [pc, #308]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c74:	4b4a      	ldr	r3, [pc, #296]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 0203 	bic.w	r2, r3, #3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	4947      	ldr	r1, [pc, #284]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c86:	f7fc ffa1 	bl	8002bcc <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8e:	f7fc ff9d 	bl	8002bcc <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e077      	b.n	8005d94 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca4:	4b3e      	ldr	r3, [pc, #248]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 020c 	and.w	r2, r3, #12
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d1eb      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d105      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cbc:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4a37      	ldr	r2, [pc, #220]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d010      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d208      	bcs.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce4:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	492b      	ldr	r1, [pc, #172]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf6:	4b29      	ldr	r3, [pc, #164]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d210      	bcs.n	8005d26 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d04:	4b25      	ldr	r3, [pc, #148]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f023 020f 	bic.w	r2, r3, #15
 8005d0c:	4923      	ldr	r1, [pc, #140]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d14:	4b21      	ldr	r3, [pc, #132]	; (8005d9c <HAL_RCC_ClockConfig+0x25c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d001      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e036      	b.n	8005d94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d32:	4b1b      	ldr	r3, [pc, #108]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	4918      	ldr	r1, [pc, #96]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d009      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d50:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4910      	ldr	r1, [pc, #64]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d64:	f000 f826 	bl	8005db4 <HAL_RCC_GetSysClockFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	091b      	lsrs	r3, r3, #4
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	490c      	ldr	r1, [pc, #48]	; (8005da8 <HAL_RCC_ClockConfig+0x268>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	f003 031f 	and.w	r3, r3, #31
 8005d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d80:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <HAL_RCC_ClockConfig+0x26c>)
 8005d82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <HAL_RCC_ClockConfig+0x270>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fc fecf 	bl	8002b2c <HAL_InitTick>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	73fb      	strb	r3, [r7, #15]

  return status;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40022000 	.word	0x40022000
 8005da0:	40021000 	.word	0x40021000
 8005da4:	04c4b400 	.word	0x04c4b400
 8005da8:	0800917c 	.word	0x0800917c
 8005dac:	20004b0c 	.word	0x20004b0c
 8005db0:	20004b10 	.word	0x20004b10

08005db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b089      	sub	sp, #36	; 0x24
 8005db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc2:	4b3e      	ldr	r3, [pc, #248]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
 8005dca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dcc:	4b3b      	ldr	r3, [pc, #236]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b0c      	cmp	r3, #12
 8005de0:	d121      	bne.n	8005e26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d11e      	bne.n	8005e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005de8:	4b34      	ldr	r3, [pc, #208]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005df4:	4b31      	ldr	r3, [pc, #196]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8005df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	e005      	b.n	8005e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e04:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e10:	4a2b      	ldr	r2, [pc, #172]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10d      	bne.n	8005e3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e24:	e00a      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d102      	bne.n	8005e32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e2c:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	e004      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d101      	bne.n	8005e3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e38:	4b23      	ldr	r3, [pc, #140]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	d134      	bne.n	8005eac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e42:	4b1e      	ldr	r3, [pc, #120]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d003      	beq.n	8005e5a <HAL_RCC_GetSysClockFreq+0xa6>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d003      	beq.n	8005e60 <HAL_RCC_GetSysClockFreq+0xac>
 8005e58:	e005      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e5a:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e5c:	617b      	str	r3, [r7, #20]
      break;
 8005e5e:	e005      	b.n	8005e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e60:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e62:	617b      	str	r3, [r7, #20]
      break;
 8005e64:	e002      	b.n	8005e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	617b      	str	r3, [r7, #20]
      break;
 8005e6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e6c:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	3301      	adds	r3, #1
 8005e78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e7a:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	fb03 f202 	mul.w	r2, r3, r2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e92:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	0e5b      	lsrs	r3, r3, #25
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005eac:	69bb      	ldr	r3, [r7, #24]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3724      	adds	r7, #36	; 0x24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	08009194 	.word	0x08009194
 8005ec4:	00f42400 	.word	0x00f42400
 8005ec8:	007a1200 	.word	0x007a1200

08005ecc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ed0:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	20004b0c 	.word	0x20004b0c

08005ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ee8:	f7ff fff0 	bl	8005ecc <HAL_RCC_GetHCLKFreq>
 8005eec:	4602      	mov	r2, r0
 8005eee:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	0a1b      	lsrs	r3, r3, #8
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	4904      	ldr	r1, [pc, #16]	; (8005f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005efa:	5ccb      	ldrb	r3, [r1, r3]
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	0800918c 	.word	0x0800918c

08005f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f14:	f7ff ffda 	bl	8005ecc <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0adb      	lsrs	r3, r3, #11
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4904      	ldr	r1, [pc, #16]	; (8005f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000
 8005f38:	0800918c 	.word	0x0800918c

08005f3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f48:	4b27      	ldr	r3, [pc, #156]	; (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f54:	f7ff f906 	bl	8005164 <HAL_PWREx_GetVoltageRange>
 8005f58:	6178      	str	r0, [r7, #20]
 8005f5a:	e014      	b.n	8005f86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f5c:	4b22      	ldr	r3, [pc, #136]	; (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f60:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f66:	6593      	str	r3, [r2, #88]	; 0x58
 8005f68:	4b1f      	ldr	r3, [pc, #124]	; (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f74:	f7ff f8f6 	bl	8005164 <HAL_PWREx_GetVoltageRange>
 8005f78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7e:	4a1a      	ldr	r2, [pc, #104]	; (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8c:	d10b      	bne.n	8005fa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b80      	cmp	r3, #128	; 0x80
 8005f92:	d913      	bls.n	8005fbc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2ba0      	cmp	r3, #160	; 0xa0
 8005f98:	d902      	bls.n	8005fa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	e00d      	b.n	8005fbc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	e00a      	b.n	8005fbc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8005faa:	d902      	bls.n	8005fb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005fac:	2302      	movs	r3, #2
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	e004      	b.n	8005fbc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b70      	cmp	r3, #112	; 0x70
 8005fb6:	d101      	bne.n	8005fbc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fb8:	2301      	movs	r3, #1
 8005fba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f023 020f 	bic.w	r2, r3, #15
 8005fc4:	4909      	ldr	r1, [pc, #36]	; (8005fec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d001      	beq.n	8005fde <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40022000 	.word	0x40022000

08005ff0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ff6:	4b2d      	ldr	r3, [pc, #180]	; (80060ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b03      	cmp	r3, #3
 8006004:	d00b      	beq.n	800601e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b03      	cmp	r3, #3
 800600a:	d825      	bhi.n	8006058 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d008      	beq.n	8006024 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d11f      	bne.n	8006058 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006018:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800601a:	613b      	str	r3, [r7, #16]
    break;
 800601c:	e01f      	b.n	800605e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800601e:	4b25      	ldr	r3, [pc, #148]	; (80060b4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006020:	613b      	str	r3, [r7, #16]
    break;
 8006022:	e01c      	b.n	800605e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006024:	4b21      	ldr	r3, [pc, #132]	; (80060ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d107      	bne.n	8006040 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006030:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e005      	b.n	800604c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006040:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800604c:	4a1a      	ldr	r2, [pc, #104]	; (80060b8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006054:	613b      	str	r3, [r7, #16]
    break;
 8006056:	e002      	b.n	800605e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]
    break;
 800605c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800605e:	4b13      	ldr	r3, [pc, #76]	; (80060ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	091b      	lsrs	r3, r3, #4
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	3301      	adds	r3, #1
 800606a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800606c:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	fb03 f202 	mul.w	r2, r3, r2
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006084:	4b09      	ldr	r3, [pc, #36]	; (80060ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	0e5b      	lsrs	r3, r3, #25
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	3301      	adds	r3, #1
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800609e:	683b      	ldr	r3, [r7, #0]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	40021000 	.word	0x40021000
 80060b0:	00f42400 	.word	0x00f42400
 80060b4:	007a1200 	.word	0x007a1200
 80060b8:	08009194 	.word	0x08009194

080060bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060c4:	2300      	movs	r3, #0
 80060c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060c8:	2300      	movs	r3, #0
 80060ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d040      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d02a      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060e0:	2b80      	cmp	r3, #128	; 0x80
 80060e2:	d825      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80060e4:	2b60      	cmp	r3, #96	; 0x60
 80060e6:	d026      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060e8:	2b60      	cmp	r3, #96	; 0x60
 80060ea:	d821      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d006      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x42>
 80060f0:	2b40      	cmp	r3, #64	; 0x40
 80060f2:	d81d      	bhi.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x50>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d010      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80060fc:	e018      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060fe:	4b89      	ldr	r3, [pc, #548]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	4a88      	ldr	r2, [pc, #544]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006108:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800610a:	e015      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	2100      	movs	r1, #0
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fb62 	bl	80067dc <RCCEx_PLLSAI1_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800611c:	e00c      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3320      	adds	r3, #32
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fc4d 	bl	80069c4 <RCCEx_PLLSAI2_Config>
 800612a:	4603      	mov	r3, r0
 800612c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612e:	e003      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	74fb      	strb	r3, [r7, #19]
      break;
 8006134:	e000      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006138:	7cfb      	ldrb	r3, [r7, #19]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800613e:	4b79      	ldr	r3, [pc, #484]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006140:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006144:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800614c:	4975      	ldr	r1, [pc, #468]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006154:	e001      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006156:	7cfb      	ldrb	r3, [r7, #19]
 8006158:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d047      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616e:	d030      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	d82a      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617a:	d02a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800617c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006180:	d824      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006186:	d008      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618c:	d81e      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006196:	d010      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006198:	e018      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800619a:	4b62      	ldr	r3, [pc, #392]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	4a61      	ldr	r2, [pc, #388]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061a6:	e015      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3304      	adds	r3, #4
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fb14 	bl	80067dc <RCCEx_PLLSAI1_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061b8:	e00c      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3320      	adds	r3, #32
 80061be:	2100      	movs	r1, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fbff 	bl	80069c4 <RCCEx_PLLSAI2_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061ca:	e003      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	74fb      	strb	r3, [r7, #19]
      break;
 80061d0:	e000      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80061d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d4:	7cfb      	ldrb	r3, [r7, #19]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10b      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061da:	4b52      	ldr	r3, [pc, #328]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e8:	494e      	ldr	r1, [pc, #312]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80061f0:	e001      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f2:	7cfb      	ldrb	r3, [r7, #19]
 80061f4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 809f 	beq.w	8006342 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006204:	2300      	movs	r3, #0
 8006206:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006208:	4b46      	ldr	r3, [pc, #280]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006218:	2300      	movs	r3, #0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00d      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621e:	4b41      	ldr	r3, [pc, #260]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006222:	4a40      	ldr	r2, [pc, #256]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006228:	6593      	str	r3, [r2, #88]	; 0x58
 800622a:	4b3e      	ldr	r3, [pc, #248]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800622c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006236:	2301      	movs	r3, #1
 8006238:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800623a:	4b3b      	ldr	r3, [pc, #236]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a3a      	ldr	r2, [pc, #232]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006244:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006246:	f7fc fcc1 	bl	8002bcc <HAL_GetTick>
 800624a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800624c:	e009      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624e:	f7fc fcbd 	bl	8002bcc <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d902      	bls.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	74fb      	strb	r3, [r7, #19]
        break;
 8006260:	e005      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006262:	4b31      	ldr	r3, [pc, #196]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0ef      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800626e:	7cfb      	ldrb	r3, [r7, #19]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d15b      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006274:	4b2b      	ldr	r3, [pc, #172]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01f      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	429a      	cmp	r2, r3
 8006290:	d019      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006292:	4b24      	ldr	r3, [pc, #144]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800629e:	4b21      	ldr	r3, [pc, #132]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a4:	4a1f      	ldr	r2, [pc, #124]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062ae:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062be:	4a19      	ldr	r2, [pc, #100]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d016      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d0:	f7fc fc7c 	bl	8002bcc <HAL_GetTick>
 80062d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d6:	e00b      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d8:	f7fc fc78 	bl	8002bcc <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d902      	bls.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	74fb      	strb	r3, [r7, #19]
            break;
 80062ee:	e006      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0ec      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80062fe:	7cfb      	ldrb	r3, [r7, #19]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10c      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006314:	4903      	ldr	r1, [pc, #12]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800631c:	e008      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800631e:	7cfb      	ldrb	r3, [r7, #19]
 8006320:	74bb      	strb	r3, [r7, #18]
 8006322:	e005      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006324:	40021000 	.word	0x40021000
 8006328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632c:	7cfb      	ldrb	r3, [r7, #19]
 800632e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006330:	7c7b      	ldrb	r3, [r7, #17]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d105      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006336:	4ba0      	ldr	r3, [pc, #640]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633a:	4a9f      	ldr	r2, [pc, #636]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800633c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006340:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800634e:	4b9a      	ldr	r3, [pc, #616]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f023 0203 	bic.w	r2, r3, #3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635c:	4996      	ldr	r1, [pc, #600]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006370:	4b91      	ldr	r3, [pc, #580]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006376:	f023 020c 	bic.w	r2, r3, #12
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	498e      	ldr	r1, [pc, #568]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006392:	4b89      	ldr	r3, [pc, #548]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006398:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a0:	4985      	ldr	r1, [pc, #532]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b4:	4b80      	ldr	r3, [pc, #512]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c2:	497d      	ldr	r1, [pc, #500]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063d6:	4b78      	ldr	r3, [pc, #480]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e4:	4974      	ldr	r1, [pc, #464]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063f8:	4b6f      	ldr	r3, [pc, #444]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006406:	496c      	ldr	r1, [pc, #432]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800641a:	4b67      	ldr	r3, [pc, #412]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006420:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006428:	4963      	ldr	r1, [pc, #396]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800643c:	4b5e      	ldr	r3, [pc, #376]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006442:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644a:	495b      	ldr	r1, [pc, #364]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800645e:	4b56      	ldr	r3, [pc, #344]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006464:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646c:	4952      	ldr	r1, [pc, #328]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006480:	4b4d      	ldr	r3, [pc, #308]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006486:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648e:	494a      	ldr	r1, [pc, #296]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064a2:	4b45      	ldr	r3, [pc, #276]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b0:	4941      	ldr	r1, [pc, #260]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064c4:	4b3c      	ldr	r3, [pc, #240]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ca:	f023 0203 	bic.w	r2, r3, #3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d2:	4939      	ldr	r1, [pc, #228]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d028      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064e6:	4b34      	ldr	r3, [pc, #208]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f4:	4930      	ldr	r1, [pc, #192]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006504:	d106      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006506:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a2b      	ldr	r2, [pc, #172]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800650c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006510:	60d3      	str	r3, [r2, #12]
 8006512:	e011      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800651c:	d10c      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3304      	adds	r3, #4
 8006522:	2101      	movs	r1, #1
 8006524:	4618      	mov	r0, r3
 8006526:	f000 f959 	bl	80067dc <RCCEx_PLLSAI1_Config>
 800652a:	4603      	mov	r3, r0
 800652c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800652e:	7cfb      	ldrb	r3, [r7, #19]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006534:	7cfb      	ldrb	r3, [r7, #19]
 8006536:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d04d      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800654c:	d108      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800654e:	4b1a      	ldr	r3, [pc, #104]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006554:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800655a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800655e:	e012      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006560:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006566:	4a14      	ldr	r2, [pc, #80]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800656c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006570:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800657e:	490e      	ldr	r1, [pc, #56]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800658a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800658e:	d106      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800659a:	60d3      	str	r3, [r2, #12]
 800659c:	e020      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a6:	d109      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4a02      	ldr	r2, [pc, #8]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b2:	60d3      	str	r3, [r2, #12]
 80065b4:	e014      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
 80065ca:	2101      	movs	r1, #1
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 f905 	bl	80067dc <RCCEx_PLLSAI1_Config>
 80065d2:	4603      	mov	r3, r0
 80065d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065d6:	7cfb      	ldrb	r3, [r7, #19]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80065dc:	7cfb      	ldrb	r3, [r7, #19]
 80065de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d028      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065ec:	4b7a      	ldr	r3, [pc, #488]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065fa:	4977      	ldr	r1, [pc, #476]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800660a:	d106      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800660c:	4b72      	ldr	r3, [pc, #456]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	4a71      	ldr	r2, [pc, #452]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006616:	60d3      	str	r3, [r2, #12]
 8006618:	e011      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800661e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006622:	d10c      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3304      	adds	r3, #4
 8006628:	2101      	movs	r1, #1
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f8d6 	bl	80067dc <RCCEx_PLLSAI1_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006634:	7cfb      	ldrb	r3, [r7, #19]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800663a:	7cfb      	ldrb	r3, [r7, #19]
 800663c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01e      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800664a:	4b63      	ldr	r3, [pc, #396]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006650:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665a:	495f      	ldr	r1, [pc, #380]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800666c:	d10c      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	2102      	movs	r1, #2
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f8b1 	bl	80067dc <RCCEx_PLLSAI1_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800667e:	7cfb      	ldrb	r3, [r7, #19]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006684:	7cfb      	ldrb	r3, [r7, #19]
 8006686:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006694:	4b50      	ldr	r3, [pc, #320]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800669a:	f023 0204 	bic.w	r2, r3, #4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a4:	494c      	ldr	r1, [pc, #304]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80066b8:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066be:	f023 0218 	bic.w	r2, r3, #24
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c8:	4943      	ldr	r1, [pc, #268]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d035      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066dc:	4b3e      	ldr	r3, [pc, #248]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a3d      	ldr	r2, [pc, #244]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e8:	f7fc fa70 	bl	8002bcc <HAL_GetTick>
 80066ec:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066ee:	e009      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066f0:	f7fc fa6c 	bl	8002bcc <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d902      	bls.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	74fb      	strb	r3, [r7, #19]
        break;
 8006702:	e005      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006704:	4b34      	ldr	r3, [pc, #208]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1ef      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006710:	7cfb      	ldrb	r3, [r7, #19]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d113      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006716:	4b30      	ldr	r3, [pc, #192]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006718:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800671c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006726:	492c      	ldr	r1, [pc, #176]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3320      	adds	r3, #32
 8006732:	2102      	movs	r1, #2
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f945 	bl	80069c4 <RCCEx_PLLSAI2_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800673e:	7cfb      	ldrb	r3, [r7, #19]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006744:	7cfb      	ldrb	r3, [r7, #19]
 8006746:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01e      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006754:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800675a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	491c      	ldr	r1, [pc, #112]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	d10c      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3320      	adds	r3, #32
 800677c:	2101      	movs	r1, #1
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f920 	bl	80069c4 <RCCEx_PLLSAI2_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006788:	7cfb      	ldrb	r3, [r7, #19]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800678e:	7cfb      	ldrb	r3, [r7, #19]
 8006790:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d017      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800679e:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ae:	490a      	ldr	r1, [pc, #40]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c0:	d105      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	4a04      	ldr	r2, [pc, #16]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067cc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40021000 	.word	0x40021000

080067dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067ea:	4b72      	ldr	r3, [pc, #456]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067f6:	4b6f      	ldr	r3, [pc, #444]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f003 0203 	and.w	r2, r3, #3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d103      	bne.n	800680e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
       ||
 800680a:	2b00      	cmp	r3, #0
 800680c:	d142      	bne.n	8006894 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
 8006812:	e03f      	b.n	8006894 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d018      	beq.n	800684e <RCCEx_PLLSAI1_Config+0x72>
 800681c:	2b03      	cmp	r3, #3
 800681e:	d825      	bhi.n	800686c <RCCEx_PLLSAI1_Config+0x90>
 8006820:	2b01      	cmp	r3, #1
 8006822:	d002      	beq.n	800682a <RCCEx_PLLSAI1_Config+0x4e>
 8006824:	2b02      	cmp	r3, #2
 8006826:	d009      	beq.n	800683c <RCCEx_PLLSAI1_Config+0x60>
 8006828:	e020      	b.n	800686c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800682a:	4b62      	ldr	r3, [pc, #392]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d11d      	bne.n	8006872 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800683a:	e01a      	b.n	8006872 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800683c:	4b5d      	ldr	r3, [pc, #372]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006844:	2b00      	cmp	r3, #0
 8006846:	d116      	bne.n	8006876 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800684c:	e013      	b.n	8006876 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800684e:	4b59      	ldr	r3, [pc, #356]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10f      	bne.n	800687a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800685a:	4b56      	ldr	r3, [pc, #344]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800686a:	e006      	b.n	800687a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	73fb      	strb	r3, [r7, #15]
      break;
 8006870:	e004      	b.n	800687c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006872:	bf00      	nop
 8006874:	e002      	b.n	800687c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006876:	bf00      	nop
 8006878:	e000      	b.n	800687c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800687a:	bf00      	nop
    }

    if(status == HAL_OK)
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d108      	bne.n	8006894 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006882:	4b4c      	ldr	r3, [pc, #304]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f023 0203 	bic.w	r2, r3, #3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4949      	ldr	r1, [pc, #292]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006890:	4313      	orrs	r3, r2
 8006892:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 8086 	bne.w	80069a8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800689c:	4b45      	ldr	r3, [pc, #276]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a44      	ldr	r2, [pc, #272]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a8:	f7fc f990 	bl	8002bcc <HAL_GetTick>
 80068ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068ae:	e009      	b.n	80068c4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068b0:	f7fc f98c 	bl	8002bcc <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d902      	bls.n	80068c4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	73fb      	strb	r3, [r7, #15]
        break;
 80068c2:	e005      	b.n	80068d0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068c4:	4b3b      	ldr	r3, [pc, #236]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ef      	bne.n	80068b0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d168      	bne.n	80069a8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d113      	bne.n	8006904 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068dc:	4b35      	ldr	r3, [pc, #212]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	4b35      	ldr	r3, [pc, #212]	; (80069b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6892      	ldr	r2, [r2, #8]
 80068e8:	0211      	lsls	r1, r2, #8
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	68d2      	ldr	r2, [r2, #12]
 80068ee:	06d2      	lsls	r2, r2, #27
 80068f0:	4311      	orrs	r1, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6852      	ldr	r2, [r2, #4]
 80068f6:	3a01      	subs	r2, #1
 80068f8:	0112      	lsls	r2, r2, #4
 80068fa:	430a      	orrs	r2, r1
 80068fc:	492d      	ldr	r1, [pc, #180]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	610b      	str	r3, [r1, #16]
 8006902:	e02d      	b.n	8006960 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d115      	bne.n	8006936 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800690a:	4b2a      	ldr	r3, [pc, #168]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006910:	4013      	ands	r3, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6892      	ldr	r2, [r2, #8]
 8006916:	0211      	lsls	r1, r2, #8
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6912      	ldr	r2, [r2, #16]
 800691c:	0852      	lsrs	r2, r2, #1
 800691e:	3a01      	subs	r2, #1
 8006920:	0552      	lsls	r2, r2, #21
 8006922:	4311      	orrs	r1, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6852      	ldr	r2, [r2, #4]
 8006928:	3a01      	subs	r2, #1
 800692a:	0112      	lsls	r2, r2, #4
 800692c:	430a      	orrs	r2, r1
 800692e:	4921      	ldr	r1, [pc, #132]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006930:	4313      	orrs	r3, r2
 8006932:	610b      	str	r3, [r1, #16]
 8006934:	e014      	b.n	8006960 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006936:	4b1f      	ldr	r3, [pc, #124]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	4b21      	ldr	r3, [pc, #132]	; (80069c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800693c:	4013      	ands	r3, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6892      	ldr	r2, [r2, #8]
 8006942:	0211      	lsls	r1, r2, #8
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6952      	ldr	r2, [r2, #20]
 8006948:	0852      	lsrs	r2, r2, #1
 800694a:	3a01      	subs	r2, #1
 800694c:	0652      	lsls	r2, r2, #25
 800694e:	4311      	orrs	r1, r2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6852      	ldr	r2, [r2, #4]
 8006954:	3a01      	subs	r2, #1
 8006956:	0112      	lsls	r2, r2, #4
 8006958:	430a      	orrs	r2, r1
 800695a:	4916      	ldr	r1, [pc, #88]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800695c:	4313      	orrs	r3, r2
 800695e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006960:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a13      	ldr	r2, [pc, #76]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800696a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fc f92e 	bl	8002bcc <HAL_GetTick>
 8006970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006972:	e009      	b.n	8006988 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006974:	f7fc f92a 	bl	8002bcc <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d902      	bls.n	8006988 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	73fb      	strb	r3, [r7, #15]
          break;
 8006986:	e005      	b.n	8006994 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0ef      	beq.n	8006974 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	4904      	ldr	r1, [pc, #16]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	40021000 	.word	0x40021000
 80069b8:	07ff800f 	.word	0x07ff800f
 80069bc:	ff9f800f 	.word	0xff9f800f
 80069c0:	f9ff800f 	.word	0xf9ff800f

080069c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069d2:	4b72      	ldr	r3, [pc, #456]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069de:	4b6f      	ldr	r3, [pc, #444]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0203 	and.w	r2, r3, #3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d103      	bne.n	80069f6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
       ||
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d142      	bne.n	8006a7c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]
 80069fa:	e03f      	b.n	8006a7c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d018      	beq.n	8006a36 <RCCEx_PLLSAI2_Config+0x72>
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d825      	bhi.n	8006a54 <RCCEx_PLLSAI2_Config+0x90>
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d002      	beq.n	8006a12 <RCCEx_PLLSAI2_Config+0x4e>
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d009      	beq.n	8006a24 <RCCEx_PLLSAI2_Config+0x60>
 8006a10:	e020      	b.n	8006a54 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a12:	4b62      	ldr	r3, [pc, #392]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d11d      	bne.n	8006a5a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a22:	e01a      	b.n	8006a5a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a24:	4b5d      	ldr	r3, [pc, #372]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d116      	bne.n	8006a5e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a34:	e013      	b.n	8006a5e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a36:	4b59      	ldr	r3, [pc, #356]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10f      	bne.n	8006a62 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a42:	4b56      	ldr	r3, [pc, #344]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a52:	e006      	b.n	8006a62 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
      break;
 8006a58:	e004      	b.n	8006a64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e002      	b.n	8006a64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e000      	b.n	8006a64 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d108      	bne.n	8006a7c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a6a:	4b4c      	ldr	r3, [pc, #304]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f023 0203 	bic.w	r2, r3, #3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4949      	ldr	r1, [pc, #292]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f040 8086 	bne.w	8006b90 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a84:	4b45      	ldr	r3, [pc, #276]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a44      	ldr	r2, [pc, #272]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a90:	f7fc f89c 	bl	8002bcc <HAL_GetTick>
 8006a94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a96:	e009      	b.n	8006aac <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a98:	f7fc f898 	bl	8002bcc <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d902      	bls.n	8006aac <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8006aaa:	e005      	b.n	8006ab8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006aac:	4b3b      	ldr	r3, [pc, #236]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1ef      	bne.n	8006a98 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d168      	bne.n	8006b90 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d113      	bne.n	8006aec <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ac4:	4b35      	ldr	r3, [pc, #212]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ac6:	695a      	ldr	r2, [r3, #20]
 8006ac8:	4b35      	ldr	r3, [pc, #212]	; (8006ba0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6892      	ldr	r2, [r2, #8]
 8006ad0:	0211      	lsls	r1, r2, #8
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	68d2      	ldr	r2, [r2, #12]
 8006ad6:	06d2      	lsls	r2, r2, #27
 8006ad8:	4311      	orrs	r1, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6852      	ldr	r2, [r2, #4]
 8006ade:	3a01      	subs	r2, #1
 8006ae0:	0112      	lsls	r2, r2, #4
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	492d      	ldr	r1, [pc, #180]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	614b      	str	r3, [r1, #20]
 8006aea:	e02d      	b.n	8006b48 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d115      	bne.n	8006b1e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006af2:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006af4:	695a      	ldr	r2, [r3, #20]
 8006af6:	4b2b      	ldr	r3, [pc, #172]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6892      	ldr	r2, [r2, #8]
 8006afe:	0211      	lsls	r1, r2, #8
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6912      	ldr	r2, [r2, #16]
 8006b04:	0852      	lsrs	r2, r2, #1
 8006b06:	3a01      	subs	r2, #1
 8006b08:	0552      	lsls	r2, r2, #21
 8006b0a:	4311      	orrs	r1, r2
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6852      	ldr	r2, [r2, #4]
 8006b10:	3a01      	subs	r2, #1
 8006b12:	0112      	lsls	r2, r2, #4
 8006b14:	430a      	orrs	r2, r1
 8006b16:	4921      	ldr	r1, [pc, #132]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	614b      	str	r3, [r1, #20]
 8006b1c:	e014      	b.n	8006b48 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b1e:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	4b21      	ldr	r3, [pc, #132]	; (8006ba8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6892      	ldr	r2, [r2, #8]
 8006b2a:	0211      	lsls	r1, r2, #8
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6952      	ldr	r2, [r2, #20]
 8006b30:	0852      	lsrs	r2, r2, #1
 8006b32:	3a01      	subs	r2, #1
 8006b34:	0652      	lsls	r2, r2, #25
 8006b36:	4311      	orrs	r1, r2
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6852      	ldr	r2, [r2, #4]
 8006b3c:	3a01      	subs	r2, #1
 8006b3e:	0112      	lsls	r2, r2, #4
 8006b40:	430a      	orrs	r2, r1
 8006b42:	4916      	ldr	r1, [pc, #88]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b48:	4b14      	ldr	r3, [pc, #80]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a13      	ldr	r2, [pc, #76]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b54:	f7fc f83a 	bl	8002bcc <HAL_GetTick>
 8006b58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b5a:	e009      	b.n	8006b70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b5c:	f7fc f836 	bl	8002bcc <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d902      	bls.n	8006b70 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	73fb      	strb	r3, [r7, #15]
          break;
 8006b6e:	e005      	b.n	8006b7c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ef      	beq.n	8006b5c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b82:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	4904      	ldr	r1, [pc, #16]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	07ff800f 	.word	0x07ff800f
 8006ba4:	ff9f800f 	.word	0xff9f800f
 8006ba8:	f9ff800f 	.word	0xf9ff800f

08006bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e095      	b.n	8006cea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d108      	bne.n	8006bd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bce:	d009      	beq.n	8006be4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	61da      	str	r2, [r3, #28]
 8006bd6:	e005      	b.n	8006be4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fb fd78 	bl	80026f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c24:	d902      	bls.n	8006c2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	e002      	b.n	8006c32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c3a:	d007      	beq.n	8006c4c <HAL_SPI_Init+0xa0>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c44:	d002      	beq.n	8006c4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8e:	ea42 0103 	orr.w	r1, r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	0c1b      	lsrs	r3, r3, #16
 8006ca8:	f003 0204 	and.w	r2, r3, #4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cba:	f003 0308 	and.w	r3, r3, #8
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cc8:	ea42 0103 	orr.w	r1, r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b088      	sub	sp, #32
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_SPI_Transmit+0x22>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e15f      	b.n	8006fd4 <HAL_SPI_Transmit+0x2e2>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d1c:	f7fb ff56 	bl	8002bcc <HAL_GetTick>
 8006d20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d002      	beq.n	8006d38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d32:	2302      	movs	r3, #2
 8006d34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d36:	e148      	b.n	8006fca <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_SPI_Transmit+0x52>
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d48:	e13f      	b.n	8006fca <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	88fa      	ldrh	r2, [r7, #6]
 8006d62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d94:	d10f      	bne.n	8006db6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d007      	beq.n	8006dd4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ddc:	d94f      	bls.n	8006e7e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <HAL_SPI_Transmit+0xfa>
 8006de6:	8afb      	ldrh	r3, [r7, #22]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d142      	bne.n	8006e72 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	881a      	ldrh	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	1c9a      	adds	r2, r3, #2
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e10:	e02f      	b.n	8006e72 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d112      	bne.n	8006e46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	881a      	ldrh	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	1c9a      	adds	r2, r3, #2
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e44:	e015      	b.n	8006e72 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e46:	f7fb fec1 	bl	8002bcc <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d803      	bhi.n	8006e5e <HAL_SPI_Transmit+0x16c>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d102      	bne.n	8006e64 <HAL_SPI_Transmit+0x172>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d106      	bne.n	8006e72 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006e70:	e0ab      	b.n	8006fca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1ca      	bne.n	8006e12 <HAL_SPI_Transmit+0x120>
 8006e7c:	e080      	b.n	8006f80 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <HAL_SPI_Transmit+0x19a>
 8006e86:	8afb      	ldrh	r3, [r7, #22]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d174      	bne.n	8006f76 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d912      	bls.n	8006ebc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	881a      	ldrh	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	1c9a      	adds	r2, r3, #2
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b02      	subs	r3, #2
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eba:	e05c      	b.n	8006f76 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	7812      	ldrb	r2, [r2, #0]
 8006ec8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ee2:	e048      	b.n	8006f76 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d12b      	bne.n	8006f4a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d912      	bls.n	8006f22 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	881a      	ldrh	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	1c9a      	adds	r2, r3, #2
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b02      	subs	r3, #2
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f20:	e029      	b.n	8006f76 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f48:	e015      	b.n	8006f76 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f4a:	f7fb fe3f 	bl	8002bcc <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d803      	bhi.n	8006f62 <HAL_SPI_Transmit+0x270>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d102      	bne.n	8006f68 <HAL_SPI_Transmit+0x276>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d106      	bne.n	8006f76 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006f74:	e029      	b.n	8006fca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1b1      	bne.n	8006ee4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f001 f8cb 	bl	8008120 <SPI_EndRxTxTransaction>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10a      	bne.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	77fb      	strb	r3, [r7, #31]
 8006fc0:	e003      	b.n	8006fca <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006fd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d002      	beq.n	8007002 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007000:	e11a      	b.n	8007238 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800700a:	d112      	bne.n	8007032 <HAL_SPI_Receive+0x56>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10e      	bne.n	8007032 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2204      	movs	r2, #4
 8007018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800701c:	88fa      	ldrh	r2, [r7, #6]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	4613      	mov	r3, r2
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f90e 	bl	800724a <HAL_SPI_TransmitReceive>
 800702e:	4603      	mov	r3, r0
 8007030:	e107      	b.n	8007242 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_SPI_Receive+0x64>
 800703c:	2302      	movs	r3, #2
 800703e:	e100      	b.n	8007242 <HAL_SPI_Receive+0x266>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007048:	f7fb fdc0 	bl	8002bcc <HAL_GetTick>
 800704c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_SPI_Receive+0x7e>
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800705e:	e0eb      	b.n	8007238 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2204      	movs	r2, #4
 8007064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070aa:	d908      	bls.n	80070be <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070ba:	605a      	str	r2, [r3, #4]
 80070bc:	e007      	b.n	80070ce <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070cc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d6:	d10f      	bne.n	80070f8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007102:	2b40      	cmp	r3, #64	; 0x40
 8007104:	d007      	beq.n	8007116 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007114:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800711e:	d86f      	bhi.n	8007200 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007120:	e034      	b.n	800718c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b01      	cmp	r3, #1
 800712e:	d117      	bne.n	8007160 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f103 020c 	add.w	r2, r3, #12
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713c:	7812      	ldrb	r2, [r2, #0]
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007152:	b29b      	uxth	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800715e:	e015      	b.n	800718c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007160:	f7fb fd34 	bl	8002bcc <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d803      	bhi.n	8007178 <HAL_SPI_Receive+0x19c>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007176:	d102      	bne.n	800717e <HAL_SPI_Receive+0x1a2>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800718a:	e055      	b.n	8007238 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1c4      	bne.n	8007122 <HAL_SPI_Receive+0x146>
 8007198:	e038      	b.n	800720c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d115      	bne.n	80071d4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	b292      	uxth	r2, r2
 80071b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	1c9a      	adds	r2, r3, #2
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80071d2:	e015      	b.n	8007200 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d4:	f7fb fcfa 	bl	8002bcc <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d803      	bhi.n	80071ec <HAL_SPI_Receive+0x210>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d102      	bne.n	80071f2 <HAL_SPI_Receive+0x216>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80071fe:	e01b      	b.n	8007238 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1c6      	bne.n	800719a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 ff2d 	bl	8008070 <SPI_EndRxTransaction>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	75fb      	strb	r3, [r7, #23]
 800722e:	e003      	b.n	8007238 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b08a      	sub	sp, #40	; 0x28
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007258:	2301      	movs	r3, #1
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_SPI_TransmitReceive+0x26>
 800726c:	2302      	movs	r3, #2
 800726e:	e20a      	b.n	8007686 <HAL_SPI_TransmitReceive+0x43c>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007278:	f7fb fca8 	bl	8002bcc <HAL_GetTick>
 800727c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007284:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800728c:	887b      	ldrh	r3, [r7, #2]
 800728e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007290:	887b      	ldrh	r3, [r7, #2]
 8007292:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007294:	7efb      	ldrb	r3, [r7, #27]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d00e      	beq.n	80072b8 <HAL_SPI_TransmitReceive+0x6e>
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072a0:	d106      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d102      	bne.n	80072b0 <HAL_SPI_TransmitReceive+0x66>
 80072aa:	7efb      	ldrb	r3, [r7, #27]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d003      	beq.n	80072b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80072b0:	2302      	movs	r3, #2
 80072b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80072b6:	e1e0      	b.n	800767a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <HAL_SPI_TransmitReceive+0x80>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <HAL_SPI_TransmitReceive+0x80>
 80072c4:	887b      	ldrh	r3, [r7, #2]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80072d0:	e1d3      	b.n	800767a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d003      	beq.n	80072e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2205      	movs	r2, #5
 80072e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	887a      	ldrh	r2, [r7, #2]
 80072f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	887a      	ldrh	r2, [r7, #2]
 80072fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	887a      	ldrh	r2, [r7, #2]
 800730c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	887a      	ldrh	r2, [r7, #2]
 8007312:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007328:	d802      	bhi.n	8007330 <HAL_SPI_TransmitReceive+0xe6>
 800732a:	8a3b      	ldrh	r3, [r7, #16]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d908      	bls.n	8007342 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800733e:	605a      	str	r2, [r3, #4]
 8007340:	e007      	b.n	8007352 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007350:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	d007      	beq.n	8007370 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007378:	f240 8081 	bls.w	800747e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <HAL_SPI_TransmitReceive+0x140>
 8007384:	8a7b      	ldrh	r3, [r7, #18]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d16d      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	881a      	ldrh	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	1c9a      	adds	r2, r3, #2
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ae:	e05a      	b.n	8007466 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d11b      	bne.n	80073f6 <HAL_SPI_TransmitReceive+0x1ac>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d016      	beq.n	80073f6 <HAL_SPI_TransmitReceive+0x1ac>
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d113      	bne.n	80073f6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	881a      	ldrh	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	1c9a      	adds	r2, r3, #2
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b01      	cmp	r3, #1
 8007402:	d11c      	bne.n	800743e <HAL_SPI_TransmitReceive+0x1f4>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d016      	beq.n	800743e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	b292      	uxth	r2, r2
 800741c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	1c9a      	adds	r2, r3, #2
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800742e:	b29b      	uxth	r3, r3
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800743a:	2301      	movs	r3, #1
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800743e:	f7fb fbc5 	bl	8002bcc <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744a:	429a      	cmp	r2, r3
 800744c:	d80b      	bhi.n	8007466 <HAL_SPI_TransmitReceive+0x21c>
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007454:	d007      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007464:	e109      	b.n	800767a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d19f      	bne.n	80073b0 <HAL_SPI_TransmitReceive+0x166>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d199      	bne.n	80073b0 <HAL_SPI_TransmitReceive+0x166>
 800747c:	e0e3      	b.n	8007646 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_SPI_TransmitReceive+0x244>
 8007486:	8a7b      	ldrh	r3, [r7, #18]
 8007488:	2b01      	cmp	r3, #1
 800748a:	f040 80cf 	bne.w	800762c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007492:	b29b      	uxth	r3, r3
 8007494:	2b01      	cmp	r3, #1
 8007496:	d912      	bls.n	80074be <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	881a      	ldrh	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	1c9a      	adds	r2, r3, #2
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b02      	subs	r3, #2
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074bc:	e0b6      	b.n	800762c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	330c      	adds	r3, #12
 80074c8:	7812      	ldrb	r2, [r2, #0]
 80074ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074da:	b29b      	uxth	r3, r3
 80074dc:	3b01      	subs	r3, #1
 80074de:	b29a      	uxth	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074e4:	e0a2      	b.n	800762c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d134      	bne.n	800755e <HAL_SPI_TransmitReceive+0x314>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d02f      	beq.n	800755e <HAL_SPI_TransmitReceive+0x314>
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2b01      	cmp	r3, #1
 8007502:	d12c      	bne.n	800755e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b01      	cmp	r3, #1
 800750c:	d912      	bls.n	8007534 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	881a      	ldrh	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	1c9a      	adds	r2, r3, #2
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b02      	subs	r3, #2
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007532:	e012      	b.n	800755a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	7812      	ldrb	r2, [r2, #0]
 8007540:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b01      	cmp	r3, #1
 800756a:	d148      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x3b4>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007572:	b29b      	uxth	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d042      	beq.n	80075fe <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b01      	cmp	r3, #1
 8007582:	d923      	bls.n	80075cc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	b292      	uxth	r2, r2
 8007590:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	1c9a      	adds	r2, r3, #2
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b02      	subs	r3, #2
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d81f      	bhi.n	80075fa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	e016      	b.n	80075fa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f103 020c 	add.w	r2, r3, #12
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	7812      	ldrb	r2, [r2, #0]
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075fa:	2301      	movs	r3, #1
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075fe:	f7fb fae5 	bl	8002bcc <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760a:	429a      	cmp	r2, r3
 800760c:	d803      	bhi.n	8007616 <HAL_SPI_TransmitReceive+0x3cc>
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d102      	bne.n	800761c <HAL_SPI_TransmitReceive+0x3d2>
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	2b00      	cmp	r3, #0
 800761a:	d107      	bne.n	800762c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800762a:	e026      	b.n	800767a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	f47f af57 	bne.w	80074e6 <HAL_SPI_TransmitReceive+0x29c>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	f47f af50 	bne.w	80074e6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fd68 	bl	8008120 <SPI_EndRxTxTransaction>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d005      	beq.n	8007662 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007670:	e003      	b.n	800767a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007686:	4618      	mov	r0, r3
 8007688:	3728      	adds	r7, #40	; 0x28
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	4613      	mov	r3, r2
 800769c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d002      	beq.n	80076b4 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80076ae:	2302      	movs	r3, #2
 80076b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076b2:	e092      	b.n	80077da <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d110      	bne.n	80076de <HAL_SPI_Receive_IT+0x4e>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076c4:	d10b      	bne.n	80076de <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2204      	movs	r2, #4
 80076ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	68b9      	ldr	r1, [r7, #8]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f889 	bl	80077ec <HAL_SPI_TransmitReceive_IT>
 80076da:	4603      	mov	r3, r0
 80076dc:	e07e      	b.n	80077dc <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <HAL_SPI_Receive_IT+0x5a>
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076ee:	e074      	b.n	80077da <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_SPI_Receive_IT+0x6e>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e06e      	b.n	80077dc <HAL_SPI_Receive_IT+0x14c>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2204      	movs	r2, #4
 800770a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	88fa      	ldrh	r2, [r7, #6]
 800771e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	88fa      	ldrh	r2, [r7, #6]
 8007726:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800774a:	d90b      	bls.n	8007764 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800775a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a21      	ldr	r2, [pc, #132]	; (80077e4 <HAL_SPI_Receive_IT+0x154>)
 8007760:	64da      	str	r2, [r3, #76]	; 0x4c
 8007762:	e00a      	b.n	800777a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007772:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4a1c      	ldr	r2, [pc, #112]	; (80077e8 <HAL_SPI_Receive_IT+0x158>)
 8007778:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007782:	d10f      	bne.n	80077a4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007792:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077a2:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d007      	beq.n	80077c2 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077c0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80077d8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	08007de9 	.word	0x08007de9
 80077e8:	08007d99 	.word	0x08007d99

080077ec <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007804:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800780c:	7dbb      	ldrb	r3, [r7, #22]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d00d      	beq.n	800782e <HAL_SPI_TransmitReceive_IT+0x42>
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007818:	d106      	bne.n	8007828 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <HAL_SPI_TransmitReceive_IT+0x3c>
 8007822:	7dbb      	ldrb	r3, [r7, #22]
 8007824:	2b04      	cmp	r3, #4
 8007826:	d002      	beq.n	800782e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8007828:	2302      	movs	r3, #2
 800782a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800782c:	e07d      	b.n	800792a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_SPI_TransmitReceive_IT+0x54>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <HAL_SPI_TransmitReceive_IT+0x54>
 800783a:	887b      	ldrh	r3, [r7, #2]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d102      	bne.n	8007846 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007844:	e071      	b.n	800792a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_SPI_TransmitReceive_IT+0x68>
 8007850:	2302      	movs	r3, #2
 8007852:	e06b      	b.n	800792c <HAL_SPI_TransmitReceive_IT+0x140>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b04      	cmp	r3, #4
 8007866:	d003      	beq.n	8007870 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2205      	movs	r2, #5
 800786c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	887a      	ldrh	r2, [r7, #2]
 8007880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	887a      	ldrh	r2, [r7, #2]
 8007886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	887a      	ldrh	r2, [r7, #2]
 8007892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	887a      	ldrh	r2, [r7, #2]
 800789a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078a6:	d906      	bls.n	80078b6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4a23      	ldr	r2, [pc, #140]	; (8007938 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80078ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4a22      	ldr	r2, [pc, #136]	; (800793c <HAL_SPI_TransmitReceive_IT+0x150>)
 80078b2:	651a      	str	r2, [r3, #80]	; 0x50
 80078b4:	e005      	b.n	80078c2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4a21      	ldr	r2, [pc, #132]	; (8007940 <HAL_SPI_TransmitReceive_IT+0x154>)
 80078ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4a21      	ldr	r2, [pc, #132]	; (8007944 <HAL_SPI_TransmitReceive_IT+0x158>)
 80078c0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078ca:	d802      	bhi.n	80078d2 <HAL_SPI_TransmitReceive_IT+0xe6>
 80078cc:	887b      	ldrh	r3, [r7, #2]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d908      	bls.n	80078e4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	e007      	b.n	80078f4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078f2:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d007      	beq.n	8007912 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007910:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007928:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800792a:	7dfb      	ldrb	r3, [r7, #23]
}
 800792c:	4618      	mov	r0, r3
 800792e:	371c      	adds	r7, #28
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	08007cd3 	.word	0x08007cd3
 800793c:	08007d39 	.word	0x08007d39
 8007940:	08007b83 	.word	0x08007b83
 8007944:	08007c41 	.word	0x08007c41

08007948 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10e      	bne.n	8007988 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007970:	2b00      	cmp	r3, #0
 8007972:	d009      	beq.n	8007988 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
    return;
 8007986:	e0ce      	b.n	8007b26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <HAL_SPI_IRQHandler+0x5e>
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
    return;
 80079a4:	e0bf      	b.n	8007b26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <HAL_SPI_IRQHandler+0x7e>
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d105      	bne.n	80079c6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 80b0 	beq.w	8007b26 <HAL_SPI_IRQHandler+0x1de>
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	f003 0320 	and.w	r3, r3, #32
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80aa 	beq.w	8007b26 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d023      	beq.n	8007a24 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d011      	beq.n	8007a0c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ec:	f043 0204 	orr.w	r2, r3, #4
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	e00b      	b.n	8007a24 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	613b      	str	r3, [r7, #16]
 8007a20:	693b      	ldr	r3, [r7, #16]
        return;
 8007a22:	e080      	b.n	8007b26 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d014      	beq.n	8007a58 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a32:	f043 0201 	orr.w	r2, r3, #1
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00c      	beq.n	8007a7c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a66:	f043 0208 	orr.w	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	60bb      	str	r3, [r7, #8]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d04f      	beq.n	8007b24 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a92:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d104      	bne.n	8007ab0 <HAL_SPI_IRQHandler+0x168>
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d034      	beq.n	8007b1a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0203 	bic.w	r2, r2, #3
 8007abe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d011      	beq.n	8007aec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007acc:	4a17      	ldr	r2, [pc, #92]	; (8007b2c <HAL_SPI_IRQHandler+0x1e4>)
 8007ace:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fb f9ba 	bl	8002e4e <HAL_DMA_Abort_IT>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d016      	beq.n	8007b22 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af8:	4a0c      	ldr	r2, [pc, #48]	; (8007b2c <HAL_SPI_IRQHandler+0x1e4>)
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fb f9a4 	bl	8002e4e <HAL_DMA_Abort_IT>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007b18:	e003      	b.n	8007b22 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f812 	bl	8007b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007b20:	e000      	b.n	8007b24 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007b22:	bf00      	nop
    return;
 8007b24:	bf00      	nop
  }
}
 8007b26:	3720      	adds	r7, #32
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	08007b59 	.word	0x08007b59

08007b30 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff ffe5 	bl	8007b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d923      	bls.n	8007bde <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	b292      	uxth	r2, r2
 8007ba2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	1c9a      	adds	r2, r3, #2
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b02      	subs	r3, #2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d11f      	bne.n	8007c0c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bda:	605a      	str	r2, [r3, #4]
 8007bdc:	e016      	b.n	8007c0c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f103 020c 	add.w	r2, r3, #12
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	7812      	ldrb	r2, [r2, #0]
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10f      	bne.n	8007c38 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c26:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d102      	bne.n	8007c38 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 faba 	bl	80081ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d912      	bls.n	8007c78 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	881a      	ldrh	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b02      	subs	r3, #2
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c76:	e012      	b.n	8007c9e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	330c      	adds	r3, #12
 8007c82:	7812      	ldrb	r2, [r2, #0]
 8007c84:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d110      	bne.n	8007cca <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cb6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fa71 	bl	80081ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	b292      	uxth	r2, r2
 8007ce6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	1c9a      	adds	r2, r3, #2
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10f      	bne.n	8007d30 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d102      	bne.n	8007d30 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa3e 	bl	80081ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	881a      	ldrh	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	1c9a      	adds	r2, r3, #2
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d110      	bne.n	8007d90 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d7c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa0e 	bl	80081ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f103 020c 	add.w	r2, r3, #12
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	7812      	ldrb	r2, [r2, #0]
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fa28 	bl	8008230 <SPI_CloseRx_ISR>
  }
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	b292      	uxth	r2, r2
 8007dfc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	1c9a      	adds	r2, r3, #2
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fa02 	bl	8008230 <SPI_CloseRx_ISR>
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	4613      	mov	r3, r2
 8007e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e44:	f7fa fec2 	bl	8002bcc <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	4413      	add	r3, r2
 8007e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e54:	f7fa feba 	bl	8002bcc <HAL_GetTick>
 8007e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e5a:	4b39      	ldr	r3, [pc, #228]	; (8007f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	015b      	lsls	r3, r3, #5
 8007e60:	0d1b      	lsrs	r3, r3, #20
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	fb02 f303 	mul.w	r3, r2, r3
 8007e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e6a:	e054      	b.n	8007f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e72:	d050      	beq.n	8007f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e74:	f7fa feaa 	bl	8002bcc <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d902      	bls.n	8007e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d13d      	bne.n	8007f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea2:	d111      	bne.n	8007ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eac:	d004      	beq.n	8007eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb6:	d107      	bne.n	8007ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ed0:	d10f      	bne.n	8007ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e017      	b.n	8007f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	bf0c      	ite	eq
 8007f26:	2301      	moveq	r3, #1
 8007f28:	2300      	movne	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d19b      	bne.n	8007e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3720      	adds	r7, #32
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20004b0c 	.word	0x20004b0c

08007f44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08a      	sub	sp, #40	; 0x28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f56:	f7fa fe39 	bl	8002bcc <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	1a9b      	subs	r3, r3, r2
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	4413      	add	r3, r2
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007f66:	f7fa fe31 	bl	8002bcc <HAL_GetTick>
 8007f6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	330c      	adds	r3, #12
 8007f72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f74:	4b3d      	ldr	r3, [pc, #244]	; (800806c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	00da      	lsls	r2, r3, #3
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	0d1b      	lsrs	r3, r3, #20
 8007f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
 8007f8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f8c:	e060      	b.n	8008050 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f94:	d107      	bne.n	8007fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d104      	bne.n	8007fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fac:	d050      	beq.n	8008050 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fae:	f7fa fe0d 	bl	8002bcc <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d902      	bls.n	8007fc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d13d      	bne.n	8008040 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fdc:	d111      	bne.n	8008002 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe6:	d004      	beq.n	8007ff2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff0:	d107      	bne.n	8008002 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008000:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800800a:	d10f      	bne.n	800802c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800802a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e010      	b.n	8008062 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	3b01      	subs	r3, #1
 800804e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	4013      	ands	r3, r2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d196      	bne.n	8007f8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3728      	adds	r7, #40	; 0x28
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20004b0c 	.word	0x20004b0c

08008070 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008084:	d111      	bne.n	80080aa <SPI_EndRxTransaction+0x3a>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800808e:	d004      	beq.n	800809a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008098:	d107      	bne.n	80080aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2200      	movs	r2, #0
 80080b2:	2180      	movs	r1, #128	; 0x80
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7ff febd 	bl	8007e34 <SPI_WaitFlagStateUntilTimeout>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d007      	beq.n	80080d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c4:	f043 0220 	orr.w	r2, r3, #32
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e023      	b.n	8008118 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080d8:	d11d      	bne.n	8008116 <SPI_EndRxTransaction+0xa6>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080e2:	d004      	beq.n	80080ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ec:	d113      	bne.n	8008116 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff ff22 	bl	8007f44 <SPI_WaitFifoStateUntilTimeout>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800810a:	f043 0220 	orr.w	r2, r3, #32
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e000      	b.n	8008118 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af02      	add	r7, sp, #8
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2200      	movs	r2, #0
 8008134:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f7ff ff03 	bl	8007f44 <SPI_WaitFifoStateUntilTimeout>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d007      	beq.n	8008154 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008148:	f043 0220 	orr.w	r2, r3, #32
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e027      	b.n	80081a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	2180      	movs	r1, #128	; 0x80
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff fe68 	bl	8007e34 <SPI_WaitFlagStateUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816e:	f043 0220 	orr.w	r2, r3, #32
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e014      	b.n	80081a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2200      	movs	r2, #0
 8008182:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7ff fedc 	bl	8007f44 <SPI_WaitFifoStateUntilTimeout>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d007      	beq.n	80081a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008196:	f043 0220 	orr.w	r2, r3, #32
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e000      	b.n	80081a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081b4:	f7fa fd0a 	bl	8002bcc <HAL_GetTick>
 80081b8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f022 0220 	bic.w	r2, r2, #32
 80081c8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	2164      	movs	r1, #100	; 0x64
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff ffa6 	bl	8008120 <SPI_EndRxTxTransaction>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d005      	beq.n	80081e6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081de:	f043 0220 	orr.w	r2, r3, #32
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d115      	bne.n	800821a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d107      	bne.n	800820a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7f9 fb72 	bl	80018ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008208:	e00e      	b.n	8008228 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fc8c 	bl	8007b30 <HAL_SPI_TxRxCpltCallback>
}
 8008218:	e006      	b.n	8008228 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff fc8e 	bl	8007b44 <HAL_SPI_ErrorCallback>
}
 8008228:	bf00      	nop
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008246:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008248:	f7fa fcc0 	bl	8002bcc <HAL_GetTick>
 800824c:	4603      	mov	r3, r0
 800824e:	461a      	mov	r2, r3
 8008250:	2164      	movs	r1, #100	; 0x64
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff ff0c 	bl	8008070 <SPI_EndRxTransaction>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008262:	f043 0220 	orr.w	r2, r3, #32
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008276:	2b00      	cmp	r3, #0
 8008278:	d103      	bne.n	8008282 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7f9 fb36 	bl	80018ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008280:	e002      	b.n	8008288 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fc5e 	bl	8007b44 <HAL_SPI_ErrorCallback>
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e042      	b.n	8008328 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d106      	bne.n	80082ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7fa fb45 	bl	8002944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2224      	movs	r2, #36	; 0x24
 80082be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0201 	bic.w	r2, r2, #1
 80082d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fbb4 	bl	8008a48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f8b5 	bl	8008450 <UART_SetConfig>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d101      	bne.n	80082f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e01b      	b.n	8008328 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800830e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f042 0201 	orr.w	r2, r2, #1
 800831e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fc33 	bl	8008b8c <UART_CheckIdleState>
 8008326:	4603      	mov	r3, r0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08a      	sub	sp, #40	; 0x28
 8008334:	af02      	add	r7, sp, #8
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	4613      	mov	r3, r2
 800833e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008346:	2b20      	cmp	r3, #32
 8008348:	d17c      	bne.n	8008444 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <HAL_UART_Transmit+0x26>
 8008350:	88fb      	ldrh	r3, [r7, #6]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e075      	b.n	8008446 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2221      	movs	r2, #33	; 0x21
 8008366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800836a:	f7fa fc2f 	bl	8002bcc <HAL_GetTick>
 800836e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	88fa      	ldrh	r2, [r7, #6]
 8008374:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008388:	d108      	bne.n	800839c <HAL_UART_Transmit+0x6c>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d104      	bne.n	800839c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008392:	2300      	movs	r3, #0
 8008394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	e003      	b.n	80083a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083a4:	e031      	b.n	800840a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2200      	movs	r2, #0
 80083ae:	2180      	movs	r1, #128	; 0x80
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 fc95 	bl	8008ce0 <UART_WaitOnFlagUntilTimeout>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2220      	movs	r2, #32
 80083c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e03e      	b.n	8008446 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10b      	bne.n	80083e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	881a      	ldrh	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083da:	b292      	uxth	r2, r2
 80083dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	3302      	adds	r3, #2
 80083e2:	61bb      	str	r3, [r7, #24]
 80083e4:	e008      	b.n	80083f8 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	781a      	ldrb	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	b292      	uxth	r2, r2
 80083f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	3301      	adds	r3, #1
 80083f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008410:	b29b      	uxth	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1c7      	bne.n	80083a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2200      	movs	r2, #0
 800841e:	2140      	movs	r1, #64	; 0x40
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fc5d 	bl	8008ce0 <UART_WaitOnFlagUntilTimeout>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e006      	b.n	8008446 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2220      	movs	r2, #32
 800843c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	e000      	b.n	8008446 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008444:	2302      	movs	r3, #2
  }
}
 8008446:	4618      	mov	r0, r3
 8008448:	3720      	adds	r7, #32
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008454:	b08c      	sub	sp, #48	; 0x30
 8008456:	af00      	add	r7, sp, #0
 8008458:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	431a      	orrs	r2, r3
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	431a      	orrs	r2, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	4313      	orrs	r3, r2
 8008476:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	4baa      	ldr	r3, [pc, #680]	; (8008728 <UART_SetConfig+0x2d8>)
 8008480:	4013      	ands	r3, r2
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008488:	430b      	orrs	r3, r1
 800848a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	430a      	orrs	r2, r1
 80084a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a9f      	ldr	r2, [pc, #636]	; (800872c <UART_SetConfig+0x2dc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d004      	beq.n	80084bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b8:	4313      	orrs	r3, r2
 80084ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80084c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	6812      	ldr	r2, [r2, #0]
 80084ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084d0:	430b      	orrs	r3, r1
 80084d2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	f023 010f 	bic.w	r1, r3, #15
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a90      	ldr	r2, [pc, #576]	; (8008730 <UART_SetConfig+0x2e0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d125      	bne.n	8008540 <UART_SetConfig+0xf0>
 80084f4:	4b8f      	ldr	r3, [pc, #572]	; (8008734 <UART_SetConfig+0x2e4>)
 80084f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d81a      	bhi.n	8008538 <UART_SetConfig+0xe8>
 8008502:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <UART_SetConfig+0xb8>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008519 	.word	0x08008519
 800850c:	08008529 	.word	0x08008529
 8008510:	08008521 	.word	0x08008521
 8008514:	08008531 	.word	0x08008531
 8008518:	2301      	movs	r3, #1
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800851e:	e116      	b.n	800874e <UART_SetConfig+0x2fe>
 8008520:	2302      	movs	r3, #2
 8008522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008526:	e112      	b.n	800874e <UART_SetConfig+0x2fe>
 8008528:	2304      	movs	r3, #4
 800852a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800852e:	e10e      	b.n	800874e <UART_SetConfig+0x2fe>
 8008530:	2308      	movs	r3, #8
 8008532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008536:	e10a      	b.n	800874e <UART_SetConfig+0x2fe>
 8008538:	2310      	movs	r3, #16
 800853a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800853e:	e106      	b.n	800874e <UART_SetConfig+0x2fe>
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a7c      	ldr	r2, [pc, #496]	; (8008738 <UART_SetConfig+0x2e8>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d138      	bne.n	80085bc <UART_SetConfig+0x16c>
 800854a:	4b7a      	ldr	r3, [pc, #488]	; (8008734 <UART_SetConfig+0x2e4>)
 800854c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008550:	f003 030c 	and.w	r3, r3, #12
 8008554:	2b0c      	cmp	r3, #12
 8008556:	d82d      	bhi.n	80085b4 <UART_SetConfig+0x164>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <UART_SetConfig+0x110>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	08008595 	.word	0x08008595
 8008564:	080085b5 	.word	0x080085b5
 8008568:	080085b5 	.word	0x080085b5
 800856c:	080085b5 	.word	0x080085b5
 8008570:	080085a5 	.word	0x080085a5
 8008574:	080085b5 	.word	0x080085b5
 8008578:	080085b5 	.word	0x080085b5
 800857c:	080085b5 	.word	0x080085b5
 8008580:	0800859d 	.word	0x0800859d
 8008584:	080085b5 	.word	0x080085b5
 8008588:	080085b5 	.word	0x080085b5
 800858c:	080085b5 	.word	0x080085b5
 8008590:	080085ad 	.word	0x080085ad
 8008594:	2300      	movs	r3, #0
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859a:	e0d8      	b.n	800874e <UART_SetConfig+0x2fe>
 800859c:	2302      	movs	r3, #2
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a2:	e0d4      	b.n	800874e <UART_SetConfig+0x2fe>
 80085a4:	2304      	movs	r3, #4
 80085a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085aa:	e0d0      	b.n	800874e <UART_SetConfig+0x2fe>
 80085ac:	2308      	movs	r3, #8
 80085ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b2:	e0cc      	b.n	800874e <UART_SetConfig+0x2fe>
 80085b4:	2310      	movs	r3, #16
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ba:	e0c8      	b.n	800874e <UART_SetConfig+0x2fe>
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a5e      	ldr	r2, [pc, #376]	; (800873c <UART_SetConfig+0x2ec>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d125      	bne.n	8008612 <UART_SetConfig+0x1c2>
 80085c6:	4b5b      	ldr	r3, [pc, #364]	; (8008734 <UART_SetConfig+0x2e4>)
 80085c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085d0:	2b30      	cmp	r3, #48	; 0x30
 80085d2:	d016      	beq.n	8008602 <UART_SetConfig+0x1b2>
 80085d4:	2b30      	cmp	r3, #48	; 0x30
 80085d6:	d818      	bhi.n	800860a <UART_SetConfig+0x1ba>
 80085d8:	2b20      	cmp	r3, #32
 80085da:	d00a      	beq.n	80085f2 <UART_SetConfig+0x1a2>
 80085dc:	2b20      	cmp	r3, #32
 80085de:	d814      	bhi.n	800860a <UART_SetConfig+0x1ba>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <UART_SetConfig+0x19a>
 80085e4:	2b10      	cmp	r3, #16
 80085e6:	d008      	beq.n	80085fa <UART_SetConfig+0x1aa>
 80085e8:	e00f      	b.n	800860a <UART_SetConfig+0x1ba>
 80085ea:	2300      	movs	r3, #0
 80085ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085f0:	e0ad      	b.n	800874e <UART_SetConfig+0x2fe>
 80085f2:	2302      	movs	r3, #2
 80085f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085f8:	e0a9      	b.n	800874e <UART_SetConfig+0x2fe>
 80085fa:	2304      	movs	r3, #4
 80085fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008600:	e0a5      	b.n	800874e <UART_SetConfig+0x2fe>
 8008602:	2308      	movs	r3, #8
 8008604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008608:	e0a1      	b.n	800874e <UART_SetConfig+0x2fe>
 800860a:	2310      	movs	r3, #16
 800860c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008610:	e09d      	b.n	800874e <UART_SetConfig+0x2fe>
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a4a      	ldr	r2, [pc, #296]	; (8008740 <UART_SetConfig+0x2f0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d125      	bne.n	8008668 <UART_SetConfig+0x218>
 800861c:	4b45      	ldr	r3, [pc, #276]	; (8008734 <UART_SetConfig+0x2e4>)
 800861e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008622:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008626:	2bc0      	cmp	r3, #192	; 0xc0
 8008628:	d016      	beq.n	8008658 <UART_SetConfig+0x208>
 800862a:	2bc0      	cmp	r3, #192	; 0xc0
 800862c:	d818      	bhi.n	8008660 <UART_SetConfig+0x210>
 800862e:	2b80      	cmp	r3, #128	; 0x80
 8008630:	d00a      	beq.n	8008648 <UART_SetConfig+0x1f8>
 8008632:	2b80      	cmp	r3, #128	; 0x80
 8008634:	d814      	bhi.n	8008660 <UART_SetConfig+0x210>
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <UART_SetConfig+0x1f0>
 800863a:	2b40      	cmp	r3, #64	; 0x40
 800863c:	d008      	beq.n	8008650 <UART_SetConfig+0x200>
 800863e:	e00f      	b.n	8008660 <UART_SetConfig+0x210>
 8008640:	2300      	movs	r3, #0
 8008642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008646:	e082      	b.n	800874e <UART_SetConfig+0x2fe>
 8008648:	2302      	movs	r3, #2
 800864a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864e:	e07e      	b.n	800874e <UART_SetConfig+0x2fe>
 8008650:	2304      	movs	r3, #4
 8008652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008656:	e07a      	b.n	800874e <UART_SetConfig+0x2fe>
 8008658:	2308      	movs	r3, #8
 800865a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865e:	e076      	b.n	800874e <UART_SetConfig+0x2fe>
 8008660:	2310      	movs	r3, #16
 8008662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008666:	e072      	b.n	800874e <UART_SetConfig+0x2fe>
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a35      	ldr	r2, [pc, #212]	; (8008744 <UART_SetConfig+0x2f4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d12a      	bne.n	80086c8 <UART_SetConfig+0x278>
 8008672:	4b30      	ldr	r3, [pc, #192]	; (8008734 <UART_SetConfig+0x2e4>)
 8008674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800867c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008680:	d01a      	beq.n	80086b8 <UART_SetConfig+0x268>
 8008682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008686:	d81b      	bhi.n	80086c0 <UART_SetConfig+0x270>
 8008688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800868c:	d00c      	beq.n	80086a8 <UART_SetConfig+0x258>
 800868e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008692:	d815      	bhi.n	80086c0 <UART_SetConfig+0x270>
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <UART_SetConfig+0x250>
 8008698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800869c:	d008      	beq.n	80086b0 <UART_SetConfig+0x260>
 800869e:	e00f      	b.n	80086c0 <UART_SetConfig+0x270>
 80086a0:	2300      	movs	r3, #0
 80086a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086a6:	e052      	b.n	800874e <UART_SetConfig+0x2fe>
 80086a8:	2302      	movs	r3, #2
 80086aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ae:	e04e      	b.n	800874e <UART_SetConfig+0x2fe>
 80086b0:	2304      	movs	r3, #4
 80086b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b6:	e04a      	b.n	800874e <UART_SetConfig+0x2fe>
 80086b8:	2308      	movs	r3, #8
 80086ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086be:	e046      	b.n	800874e <UART_SetConfig+0x2fe>
 80086c0:	2310      	movs	r3, #16
 80086c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c6:	e042      	b.n	800874e <UART_SetConfig+0x2fe>
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a17      	ldr	r2, [pc, #92]	; (800872c <UART_SetConfig+0x2dc>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d13a      	bne.n	8008748 <UART_SetConfig+0x2f8>
 80086d2:	4b18      	ldr	r3, [pc, #96]	; (8008734 <UART_SetConfig+0x2e4>)
 80086d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086e0:	d01a      	beq.n	8008718 <UART_SetConfig+0x2c8>
 80086e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086e6:	d81b      	bhi.n	8008720 <UART_SetConfig+0x2d0>
 80086e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ec:	d00c      	beq.n	8008708 <UART_SetConfig+0x2b8>
 80086ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086f2:	d815      	bhi.n	8008720 <UART_SetConfig+0x2d0>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d003      	beq.n	8008700 <UART_SetConfig+0x2b0>
 80086f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086fc:	d008      	beq.n	8008710 <UART_SetConfig+0x2c0>
 80086fe:	e00f      	b.n	8008720 <UART_SetConfig+0x2d0>
 8008700:	2300      	movs	r3, #0
 8008702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008706:	e022      	b.n	800874e <UART_SetConfig+0x2fe>
 8008708:	2302      	movs	r3, #2
 800870a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870e:	e01e      	b.n	800874e <UART_SetConfig+0x2fe>
 8008710:	2304      	movs	r3, #4
 8008712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008716:	e01a      	b.n	800874e <UART_SetConfig+0x2fe>
 8008718:	2308      	movs	r3, #8
 800871a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871e:	e016      	b.n	800874e <UART_SetConfig+0x2fe>
 8008720:	2310      	movs	r3, #16
 8008722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008726:	e012      	b.n	800874e <UART_SetConfig+0x2fe>
 8008728:	cfff69f3 	.word	0xcfff69f3
 800872c:	40008000 	.word	0x40008000
 8008730:	40013800 	.word	0x40013800
 8008734:	40021000 	.word	0x40021000
 8008738:	40004400 	.word	0x40004400
 800873c:	40004800 	.word	0x40004800
 8008740:	40004c00 	.word	0x40004c00
 8008744:	40005000 	.word	0x40005000
 8008748:	2310      	movs	r3, #16
 800874a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4aae      	ldr	r2, [pc, #696]	; (8008a0c <UART_SetConfig+0x5bc>)
 8008754:	4293      	cmp	r3, r2
 8008756:	f040 8097 	bne.w	8008888 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800875a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800875e:	2b08      	cmp	r3, #8
 8008760:	d823      	bhi.n	80087aa <UART_SetConfig+0x35a>
 8008762:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <UART_SetConfig+0x318>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	0800878d 	.word	0x0800878d
 800876c:	080087ab 	.word	0x080087ab
 8008770:	08008795 	.word	0x08008795
 8008774:	080087ab 	.word	0x080087ab
 8008778:	0800879b 	.word	0x0800879b
 800877c:	080087ab 	.word	0x080087ab
 8008780:	080087ab 	.word	0x080087ab
 8008784:	080087ab 	.word	0x080087ab
 8008788:	080087a3 	.word	0x080087a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800878c:	f7fd fbaa 	bl	8005ee4 <HAL_RCC_GetPCLK1Freq>
 8008790:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008792:	e010      	b.n	80087b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008794:	4b9e      	ldr	r3, [pc, #632]	; (8008a10 <UART_SetConfig+0x5c0>)
 8008796:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008798:	e00d      	b.n	80087b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800879a:	f7fd fb0b 	bl	8005db4 <HAL_RCC_GetSysClockFreq>
 800879e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087a0:	e009      	b.n	80087b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087a8:	e005      	b.n	80087b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 8130 	beq.w	8008a1e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	4a94      	ldr	r2, [pc, #592]	; (8008a14 <UART_SetConfig+0x5c4>)
 80087c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c8:	461a      	mov	r2, r3
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80087d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	4413      	add	r3, r2
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d305      	bcc.n	80087ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d903      	bls.n	80087f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087f4:	e113      	b.n	8008a1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	2200      	movs	r2, #0
 80087fa:	60bb      	str	r3, [r7, #8]
 80087fc:	60fa      	str	r2, [r7, #12]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	4a84      	ldr	r2, [pc, #528]	; (8008a14 <UART_SetConfig+0x5c4>)
 8008804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008808:	b29b      	uxth	r3, r3
 800880a:	2200      	movs	r2, #0
 800880c:	603b      	str	r3, [r7, #0]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008814:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008818:	f7f7 fcf0 	bl	80001fc <__aeabi_uldivmod>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4610      	mov	r0, r2
 8008822:	4619      	mov	r1, r3
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	020b      	lsls	r3, r1, #8
 800882e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008832:	0202      	lsls	r2, r0, #8
 8008834:	6979      	ldr	r1, [r7, #20]
 8008836:	6849      	ldr	r1, [r1, #4]
 8008838:	0849      	lsrs	r1, r1, #1
 800883a:	2000      	movs	r0, #0
 800883c:	460c      	mov	r4, r1
 800883e:	4605      	mov	r5, r0
 8008840:	eb12 0804 	adds.w	r8, r2, r4
 8008844:	eb43 0905 	adc.w	r9, r3, r5
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	469a      	mov	sl, r3
 8008850:	4693      	mov	fp, r2
 8008852:	4652      	mov	r2, sl
 8008854:	465b      	mov	r3, fp
 8008856:	4640      	mov	r0, r8
 8008858:	4649      	mov	r1, r9
 800885a:	f7f7 fccf 	bl	80001fc <__aeabi_uldivmod>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4613      	mov	r3, r2
 8008864:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800886c:	d308      	bcc.n	8008880 <UART_SetConfig+0x430>
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008874:	d204      	bcs.n	8008880 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6a3a      	ldr	r2, [r7, #32]
 800887c:	60da      	str	r2, [r3, #12]
 800887e:	e0ce      	b.n	8008a1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008886:	e0ca      	b.n	8008a1e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008890:	d166      	bne.n	8008960 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008896:	2b08      	cmp	r3, #8
 8008898:	d827      	bhi.n	80088ea <UART_SetConfig+0x49a>
 800889a:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <UART_SetConfig+0x450>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	080088c5 	.word	0x080088c5
 80088a4:	080088cd 	.word	0x080088cd
 80088a8:	080088d5 	.word	0x080088d5
 80088ac:	080088eb 	.word	0x080088eb
 80088b0:	080088db 	.word	0x080088db
 80088b4:	080088eb 	.word	0x080088eb
 80088b8:	080088eb 	.word	0x080088eb
 80088bc:	080088eb 	.word	0x080088eb
 80088c0:	080088e3 	.word	0x080088e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c4:	f7fd fb0e 	bl	8005ee4 <HAL_RCC_GetPCLK1Freq>
 80088c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ca:	e014      	b.n	80088f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088cc:	f7fd fb20 	bl	8005f10 <HAL_RCC_GetPCLK2Freq>
 80088d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088d2:	e010      	b.n	80088f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088d4:	4b4e      	ldr	r3, [pc, #312]	; (8008a10 <UART_SetConfig+0x5c0>)
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088d8:	e00d      	b.n	80088f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088da:	f7fd fa6b 	bl	8005db4 <HAL_RCC_GetSysClockFreq>
 80088de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088e0:	e009      	b.n	80088f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088e8:	e005      	b.n	80088f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8090 	beq.w	8008a1e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	4a44      	ldr	r2, [pc, #272]	; (8008a14 <UART_SetConfig+0x5c4>)
 8008904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008908:	461a      	mov	r2, r3
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008910:	005a      	lsls	r2, r3, #1
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	085b      	lsrs	r3, r3, #1
 8008918:	441a      	add	r2, r3
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008922:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d916      	bls.n	8008958 <UART_SetConfig+0x508>
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008930:	d212      	bcs.n	8008958 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	b29b      	uxth	r3, r3
 8008936:	f023 030f 	bic.w	r3, r3, #15
 800893a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	085b      	lsrs	r3, r3, #1
 8008940:	b29b      	uxth	r3, r3
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	b29a      	uxth	r2, r3
 8008948:	8bfb      	ldrh	r3, [r7, #30]
 800894a:	4313      	orrs	r3, r2
 800894c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	8bfa      	ldrh	r2, [r7, #30]
 8008954:	60da      	str	r2, [r3, #12]
 8008956:	e062      	b.n	8008a1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800895e:	e05e      	b.n	8008a1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008960:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008964:	2b08      	cmp	r3, #8
 8008966:	d828      	bhi.n	80089ba <UART_SetConfig+0x56a>
 8008968:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <UART_SetConfig+0x520>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	08008995 	.word	0x08008995
 8008974:	0800899d 	.word	0x0800899d
 8008978:	080089a5 	.word	0x080089a5
 800897c:	080089bb 	.word	0x080089bb
 8008980:	080089ab 	.word	0x080089ab
 8008984:	080089bb 	.word	0x080089bb
 8008988:	080089bb 	.word	0x080089bb
 800898c:	080089bb 	.word	0x080089bb
 8008990:	080089b3 	.word	0x080089b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008994:	f7fd faa6 	bl	8005ee4 <HAL_RCC_GetPCLK1Freq>
 8008998:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800899a:	e014      	b.n	80089c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800899c:	f7fd fab8 	bl	8005f10 <HAL_RCC_GetPCLK2Freq>
 80089a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089a2:	e010      	b.n	80089c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089a4:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <UART_SetConfig+0x5c0>)
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089a8:	e00d      	b.n	80089c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089aa:	f7fd fa03 	bl	8005db4 <HAL_RCC_GetSysClockFreq>
 80089ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089b0:	e009      	b.n	80089c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089b8:	e005      	b.n	80089c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089c4:	bf00      	nop
    }

    if (pclk != 0U)
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d028      	beq.n	8008a1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	4a10      	ldr	r2, [pc, #64]	; (8008a14 <UART_SetConfig+0x5c4>)
 80089d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d6:	461a      	mov	r2, r3
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	fbb3 f2f2 	udiv	r2, r3, r2
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	441a      	add	r2, r3
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	2b0f      	cmp	r3, #15
 80089f4:	d910      	bls.n	8008a18 <UART_SetConfig+0x5c8>
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089fc:	d20c      	bcs.n	8008a18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60da      	str	r2, [r3, #12]
 8008a08:	e009      	b.n	8008a1e <UART_SetConfig+0x5ce>
 8008a0a:	bf00      	nop
 8008a0c:	40008000 	.word	0x40008000
 8008a10:	00f42400 	.word	0x00f42400
 8008a14:	080091c4 	.word	0x080091c4
      }
      else
      {
        ret = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2200      	movs	r2, #0
 8008a32:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2200      	movs	r2, #0
 8008a38:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008a3a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3730      	adds	r7, #48	; 0x30
 8008a42:	46bd      	mov	sp, r7
 8008a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a54:	f003 0308 	and.w	r3, r3, #8
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00a      	beq.n	8008a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00a      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	f003 0310 	and.w	r3, r3, #16
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00a      	beq.n	8008afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d01a      	beq.n	8008b5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b46:	d10a      	bne.n	8008b5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00a      	beq.n	8008b80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	605a      	str	r2, [r3, #4]
  }
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b098      	sub	sp, #96	; 0x60
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b9c:	f7fa f816 	bl	8002bcc <HAL_GetTick>
 8008ba0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0308 	and.w	r3, r3, #8
 8008bac:	2b08      	cmp	r3, #8
 8008bae:	d12f      	bne.n	8008c10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f88e 	bl	8008ce0 <UART_WaitOnFlagUntilTimeout>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d022      	beq.n	8008c10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bde:	653b      	str	r3, [r7, #80]	; 0x50
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008be8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e6      	bne.n	8008bca <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e063      	b.n	8008cd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0304 	and.w	r3, r3, #4
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d149      	bne.n	8008cb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c26:	2200      	movs	r2, #0
 8008c28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f857 	bl	8008ce0 <UART_WaitOnFlagUntilTimeout>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d03c      	beq.n	8008cb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	e853 3f00 	ldrex	r3, [r3]
 8008c44:	623b      	str	r3, [r7, #32]
   return(result);
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c56:	633b      	str	r3, [r7, #48]	; 0x30
 8008c58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c5e:	e841 2300 	strex	r3, r2, [r1]
 8008c62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1e6      	bne.n	8008c38 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3308      	adds	r3, #8
 8008c70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c8a:	61fa      	str	r2, [r7, #28]
 8008c8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	69b9      	ldr	r1, [r7, #24]
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	617b      	str	r3, [r7, #20]
   return(result);
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e5      	bne.n	8008c6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e012      	b.n	8008cd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3758      	adds	r7, #88	; 0x58
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	4613      	mov	r3, r2
 8008cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cf0:	e049      	b.n	8008d86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf8:	d045      	beq.n	8008d86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cfa:	f7f9 ff67 	bl	8002bcc <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d302      	bcc.n	8008d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e048      	b.n	8008da6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 0304 	and.w	r3, r3, #4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d031      	beq.n	8008d86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	f003 0308 	and.w	r3, r3, #8
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d110      	bne.n	8008d52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2208      	movs	r2, #8
 8008d36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 f838 	bl	8008dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2208      	movs	r2, #8
 8008d42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e029      	b.n	8008da6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d60:	d111      	bne.n	8008d86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 f81e 	bl	8008dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2220      	movs	r2, #32
 8008d76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e00f      	b.n	8008da6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69da      	ldr	r2, [r3, #28]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	bf0c      	ite	eq
 8008d96:	2301      	moveq	r3, #1
 8008d98:	2300      	movne	r3, #0
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d0a6      	beq.n	8008cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b095      	sub	sp, #84	; 0x54
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbe:	e853 3f00 	ldrex	r3, [r3]
 8008dc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e6      	bne.n	8008db6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3308      	adds	r3, #8
 8008dee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	f023 0301 	bic.w	r3, r3, #1
 8008e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	3308      	adds	r3, #8
 8008e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e14:	e841 2300 	strex	r3, r2, [r1]
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e3      	bne.n	8008de8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d118      	bne.n	8008e5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	e853 3f00 	ldrex	r3, [r3]
 8008e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f023 0310 	bic.w	r3, r3, #16
 8008e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e46:	61bb      	str	r3, [r7, #24]
 8008e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4a:	6979      	ldr	r1, [r7, #20]
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	e841 2300 	strex	r3, r2, [r1]
 8008e52:	613b      	str	r3, [r7, #16]
   return(result);
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1e6      	bne.n	8008e28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008e6e:	bf00      	nop
 8008e70:	3754      	adds	r7, #84	; 0x54
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d101      	bne.n	8008e90 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e027      	b.n	8008ee0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2224      	movs	r2, #36	; 0x24
 8008e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0201 	bic.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ebe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d101      	bne.n	8008f04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f00:	2302      	movs	r3, #2
 8008f02:	e02d      	b.n	8008f60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2224      	movs	r2, #36	; 0x24
 8008f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 0201 	bic.w	r2, r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f84f 	bl	8008fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d101      	bne.n	8008f80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e02d      	b.n	8008fdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2224      	movs	r2, #36	; 0x24
 8008f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 0201 	bic.w	r2, r2, #1
 8008fa6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f811 	bl	8008fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d108      	bne.n	8009006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009004:	e031      	b.n	800906a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009006:	2308      	movs	r3, #8
 8009008:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800900a:	2308      	movs	r3, #8
 800900c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	0e5b      	lsrs	r3, r3, #25
 8009016:	b2db      	uxtb	r3, r3
 8009018:	f003 0307 	and.w	r3, r3, #7
 800901c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	0f5b      	lsrs	r3, r3, #29
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	7b3a      	ldrb	r2, [r7, #12]
 8009032:	4911      	ldr	r1, [pc, #68]	; (8009078 <UARTEx_SetNbDataToProcess+0x94>)
 8009034:	5c8a      	ldrb	r2, [r1, r2]
 8009036:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800903a:	7b3a      	ldrb	r2, [r7, #12]
 800903c:	490f      	ldr	r1, [pc, #60]	; (800907c <UARTEx_SetNbDataToProcess+0x98>)
 800903e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009040:	fb93 f3f2 	sdiv	r3, r3, r2
 8009044:	b29a      	uxth	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	7b7a      	ldrb	r2, [r7, #13]
 8009050:	4909      	ldr	r1, [pc, #36]	; (8009078 <UARTEx_SetNbDataToProcess+0x94>)
 8009052:	5c8a      	ldrb	r2, [r1, r2]
 8009054:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009058:	7b7a      	ldrb	r2, [r7, #13]
 800905a:	4908      	ldr	r1, [pc, #32]	; (800907c <UARTEx_SetNbDataToProcess+0x98>)
 800905c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800905e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009062:	b29a      	uxth	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800906a:	bf00      	nop
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	080091dc 	.word	0x080091dc
 800907c:	080091e4 	.word	0x080091e4

08009080 <memset>:
 8009080:	4402      	add	r2, r0
 8009082:	4603      	mov	r3, r0
 8009084:	4293      	cmp	r3, r2
 8009086:	d100      	bne.n	800908a <memset+0xa>
 8009088:	4770      	bx	lr
 800908a:	f803 1b01 	strb.w	r1, [r3], #1
 800908e:	e7f9      	b.n	8009084 <memset+0x4>

08009090 <__libc_init_array>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	4d0d      	ldr	r5, [pc, #52]	; (80090c8 <__libc_init_array+0x38>)
 8009094:	4c0d      	ldr	r4, [pc, #52]	; (80090cc <__libc_init_array+0x3c>)
 8009096:	1b64      	subs	r4, r4, r5
 8009098:	10a4      	asrs	r4, r4, #2
 800909a:	2600      	movs	r6, #0
 800909c:	42a6      	cmp	r6, r4
 800909e:	d109      	bne.n	80090b4 <__libc_init_array+0x24>
 80090a0:	4d0b      	ldr	r5, [pc, #44]	; (80090d0 <__libc_init_array+0x40>)
 80090a2:	4c0c      	ldr	r4, [pc, #48]	; (80090d4 <__libc_init_array+0x44>)
 80090a4:	f000 f818 	bl	80090d8 <_init>
 80090a8:	1b64      	subs	r4, r4, r5
 80090aa:	10a4      	asrs	r4, r4, #2
 80090ac:	2600      	movs	r6, #0
 80090ae:	42a6      	cmp	r6, r4
 80090b0:	d105      	bne.n	80090be <__libc_init_array+0x2e>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b8:	4798      	blx	r3
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7ee      	b.n	800909c <__libc_init_array+0xc>
 80090be:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c2:	4798      	blx	r3
 80090c4:	3601      	adds	r6, #1
 80090c6:	e7f2      	b.n	80090ae <__libc_init_array+0x1e>
 80090c8:	080091f4 	.word	0x080091f4
 80090cc:	080091f4 	.word	0x080091f4
 80090d0:	080091f4 	.word	0x080091f4
 80090d4:	080091f8 	.word	0x080091f8

080090d8 <_init>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	bf00      	nop
 80090dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090de:	bc08      	pop	{r3}
 80090e0:	469e      	mov	lr, r3
 80090e2:	4770      	bx	lr

080090e4 <_fini>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	bf00      	nop
 80090e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ea:	bc08      	pop	{r3}
 80090ec:	469e      	mov	lr, r3
 80090ee:	4770      	bx	lr
