
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d94  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08008f50  08008f50  00018f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009054  08009054  00024b18  2**0
                  CONTENTS
  4 .ARM          00000008  08009054  08009054  00019054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800905c  0800905c  00024b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800905c  0800905c  0001905c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009060  08009060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004b18  20000000  08009064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067a8  20004b18  0800db7c  00024b18  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b2c0  0800db7c  0002b2c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024b18  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024b48  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b53  00000000  00000000  00024b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d72  00000000  00000000  0003e6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00041450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100c  00000000  00000000  000428c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031a75  00000000  00000000  000438d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac41  00000000  00000000  00075349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012afa8  00000000  00000000  0008ff8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057f8  00000000  00000000  001baf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001c072c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20004b18 	.word	0x20004b18
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008f38 	.word	0x08008f38

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20004b1c 	.word	0x20004b1c
 80001f8:	08008f38 	.word	0x08008f38

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f002 fa25 	bl	800294c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f8ed 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fc77 	bl	8000df8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050a:	f000 fa23 	bl	8000954 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050e:	f000 fa61 	bl	80009d4 <MX_I2C2_Init>
  MX_OCTOSPI2_Init();
 8000512:	f000 fb1f 	bl	8000b54 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8000516:	f000 fb73 	bl	8000c00 <MX_SPI1_Init>
  MX_SPI2_Init();
 800051a:	f000 fbaf 	bl	8000c7c <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fbe7 	bl	8000cf0 <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fc1d 	bl	8000d60 <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 8000526:	f000 f929 	bl	800077c <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 800052a:	f000 fa93 	bl	8000a54 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 800052e:	f000 fdc3 	bl	80010b8 <mipi_config>
  HAL_UART_Transmit(&huart4, "master start", 12, 1000);
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	220c      	movs	r2, #12
 8000538:	495e      	ldr	r1, [pc, #376]	; (80006b4 <main+0x1bc>)
 800053a:	485f      	ldr	r0, [pc, #380]	; (80006b8 <main+0x1c0>)
 800053c:	f007 fe28 	bl	8008190 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int frame_buf_count = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]

  	__HAL_SPI_ENABLE(&hspi1);
 8000544:	4b5d      	ldr	r3, [pc, #372]	; (80006bc <main+0x1c4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b5c      	ldr	r3, [pc, #368]	; (80006bc <main+0x1c4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000552:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi3);
 8000554:	4b5a      	ldr	r3, [pc, #360]	; (80006c0 <main+0x1c8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	4b59      	ldr	r3, [pc, #356]	; (80006c0 <main+0x1c8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000562:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 8000564:	2202      	movs	r2, #2
 8000566:	4957      	ldr	r1, [pc, #348]	; (80006c4 <main+0x1cc>)
 8000568:	4855      	ldr	r0, [pc, #340]	; (80006c0 <main+0x1c8>)
 800056a:	f006 ffc1 	bl	80074f0 <HAL_SPI_Receive_IT>
			//HAL_Delay(1);
		}
		HAL_UART_Transmit(&huart4, "off ", 4, 1000);
		HAL_Delay(1000);*/

		if(play_mode == 0)
 800056e:	4b56      	ldr	r3, [pc, #344]	; (80006c8 <main+0x1d0>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d142      	bne.n	80005fc <main+0x104>
		{
			read_flash_page(&frame_buf_flash, display_image_number);
 8000576:	4b55      	ldr	r3, [pc, #340]	; (80006cc <main+0x1d4>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	4854      	ldr	r0, [pc, #336]	; (80006d0 <main+0x1d8>)
 800057e:	f001 fcf9 	bl	8001f74 <read_flash_page>
			frame_buf_count = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < 6400;  i += 4)
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	e032      	b.n	80005f2 <main+0xfa>
			{
				image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+1];
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	3301      	adds	r3, #1
 8000590:	4a4f      	ldr	r2, [pc, #316]	; (80006d0 <main+0x1d8>)
 8000592:	5cd1      	ldrb	r1, [r2, r3]
 8000594:	4a4f      	ldr	r2, [pc, #316]	; (80006d4 <main+0x1dc>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	460a      	mov	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3302      	adds	r3, #2
 80005a2:	60fb      	str	r3, [r7, #12]
				image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 80005a4:	4a4a      	ldr	r2, [pc, #296]	; (80006d0 <main+0x1d8>)
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4413      	add	r3, r2
 80005aa:	7819      	ldrb	r1, [r3, #0]
 80005ac:	4a49      	ldr	r2, [pc, #292]	; (80006d4 <main+0x1dc>)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4413      	add	r3, r2
 80005b2:	460a      	mov	r2, r1
 80005b4:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3304      	adds	r3, #4
 80005ba:	60fb      	str	r3, [r7, #12]
				image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+2];
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	3302      	adds	r3, #2
 80005c0:	4a43      	ldr	r2, [pc, #268]	; (80006d0 <main+0x1d8>)
 80005c2:	5cd1      	ldrb	r1, [r2, r3]
 80005c4:	4a43      	ldr	r2, [pc, #268]	; (80006d4 <main+0x1dc>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	460a      	mov	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3304      	adds	r3, #4
 80005d2:	60fb      	str	r3, [r7, #12]
				image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+3];
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	3303      	adds	r3, #3
 80005d8:	4a3d      	ldr	r2, [pc, #244]	; (80006d0 <main+0x1d8>)
 80005da:	5cd1      	ldrb	r1, [r2, r3]
 80005dc:	4a3d      	ldr	r2, [pc, #244]	; (80006d4 <main+0x1dc>)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4413      	add	r3, r2
 80005e2:	460a      	mov	r2, r1
 80005e4:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3302      	adds	r3, #2
 80005ea:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < 6400;  i += 4)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	3304      	adds	r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80005f8:	dbc8      	blt.n	800058c <main+0x94>
 80005fa:	e056      	b.n	80006aa <main+0x1b2>
			}
		}
		else if(play_mode == 1)
 80005fc:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <main+0x1d0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d152      	bne.n	80006aa <main+0x1b2>
		{
			for(int i=0; i<total_image_in_flash; i++)
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	e049      	b.n	800069e <main+0x1a6>
			{
				read_flash_page(&frame_buf_flash, i);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	482f      	ldr	r0, [pc, #188]	; (80006d0 <main+0x1d8>)
 8000612:	f001 fcaf 	bl	8001f74 <read_flash_page>
				frame_buf_count = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
				for (int i = 0; i < 6400;  i += 4)
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	e032      	b.n	8000686 <main+0x18e>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+1];
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <main+0x1d8>)
 8000626:	5cd1      	ldrb	r1, [r2, r3]
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <main+0x1dc>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	460a      	mov	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3302      	adds	r3, #2
 8000636:	60fb      	str	r3, [r7, #12]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 8000638:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <main+0x1d8>)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	4413      	add	r3, r2
 800063e:	7819      	ldrb	r1, [r3, #0]
 8000640:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <main+0x1dc>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	460a      	mov	r2, r1
 8000648:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3304      	adds	r3, #4
 800064e:	60fb      	str	r3, [r7, #12]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+2];
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	3302      	adds	r3, #2
 8000654:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <main+0x1d8>)
 8000656:	5cd1      	ldrb	r1, [r2, r3]
 8000658:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <main+0x1dc>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4413      	add	r3, r2
 800065e:	460a      	mov	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3304      	adds	r3, #4
 8000666:	60fb      	str	r3, [r7, #12]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+3];
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	3303      	adds	r3, #3
 800066c:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <main+0x1d8>)
 800066e:	5cd1      	ldrb	r1, [r2, r3]
 8000670:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <main+0x1dc>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4413      	add	r3, r2
 8000676:	460a      	mov	r2, r1
 8000678:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3302      	adds	r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
				for (int i = 0; i < 6400;  i += 4)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	3304      	adds	r3, #4
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800068c:	dbc8      	blt.n	8000620 <main+0x128>
				}
				HAL_Delay(frame_rate);
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <main+0x1e0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f002 f9d6 	bl	8002a44 <HAL_Delay>
			for(int i=0; i<total_image_in_flash; i++)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <main+0x1e4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4293      	cmp	r3, r2
 80006a8:	dbaf      	blt.n	800060a <main+0x112>
			}

		}
		HAL_Delay(10);
 80006aa:	200a      	movs	r0, #10
 80006ac:	f002 f9ca 	bl	8002a44 <HAL_Delay>
		if(play_mode == 0)
 80006b0:	e75d      	b.n	800056e <main+0x76>
 80006b2:	bf00      	nop
 80006b4:	08008f50 	.word	0x08008f50
 80006b8:	20004e1c 	.word	0x20004e1c
 80006bc:	20004cf0 	.word	0x20004cf0
 80006c0:	20004db8 	.word	0x20004db8
 80006c4:	20004eb0 	.word	0x20004eb0
 80006c8:	2000b2b4 	.word	0x2000b2b4
 80006cc:	2000b2b5 	.word	0x2000b2b5
 80006d0:	200099b4 	.word	0x200099b4
 80006d4:	2000000c 	.word	0x2000000c
 80006d8:	20000004 	.word	0x20000004
 80006dc:	20000008 	.word	0x20000008

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b096      	sub	sp, #88	; 0x58
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2244      	movs	r2, #68	; 0x44
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f008 fbf6 	bl	8008ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000702:	2000      	movs	r0, #0
 8000704:	f004 fc7e 	bl	8005004 <HAL_PWREx_ControlVoltageScaling>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800070e:	f001 fd4f 	bl	80021b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000720:	2303      	movs	r3, #3
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000728:	231e      	movs	r3, #30
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4618      	mov	r0, r3
 800073e:	f004 fd15 	bl	800516c <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000748:	f001 fd32 	bl	80021b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2303      	movs	r3, #3
 8000752:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	2105      	movs	r1, #5
 8000764:	4618      	mov	r0, r3
 8000766:	f005 f91b 	bl	80059a0 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000770:	f001 fd1e 	bl	80021b0 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3758      	adds	r7, #88	; 0x58
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b0ae      	sub	sp, #184	; 0xb8
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000782:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800078e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000792:	2224      	movs	r2, #36	; 0x24
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f008 fba2 	bl	8008ee0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800079c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	226c      	movs	r2, #108	; 0x6c
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f008 fb93 	bl	8008ee0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80007ba:	4b64      	ldr	r3, [pc, #400]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 80007bc:	4a64      	ldr	r2, [pc, #400]	; (8000950 <MX_DSIHOST_DSI_Init+0x1d4>)
 80007be:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80007c0:	4b62      	ldr	r3, [pc, #392]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 80007c6:	4b61      	ldr	r3, [pc, #388]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80007cc:	4b5f      	ldr	r3, [pc, #380]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 80007d2:	2332      	movs	r3, #50	; 0x32
 80007d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80007d8:	2301      	movs	r3, #1
 80007da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80007de:	2301      	movs	r3, #1
 80007e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80007e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007e8:	4619      	mov	r1, r3
 80007ea:	4858      	ldr	r0, [pc, #352]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 80007ec:	f002 fb06 	bl	8002dfc <HAL_DSI_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 80007f6:	f001 fcdb 	bl	80021b0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000830:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000834:	4619      	mov	r1, r3
 8000836:	4845      	ldr	r0, [pc, #276]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000838:	f002 ff53 	bl	80036e2 <HAL_DSI_ConfigHostTimeouts>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000842:	f001 fcb5 	bl	80021b0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000846:	2313      	movs	r3, #19
 8000848:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 800084a:	230f      	movs	r3, #15
 800084c:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 800084e:	2309      	movs	r3, #9
 8000850:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000852:	230a      	movs	r3, #10
 8000854:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000862:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000866:	4619      	mov	r1, r3
 8000868:	4838      	ldr	r0, [pc, #224]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 800086a:	f002 fed0 	bl	800360e <HAL_DSI_ConfigPhyTimer>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000874:	f001 fc9c 	bl	80021b0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000878:	f242 7110 	movw	r1, #10000	; 0x2710
 800087c:	4833      	ldr	r0, [pc, #204]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 800087e:	f003 f8ec 	bl	8003a5a <HAL_DSI_SetLowPowerRXFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000888:	f001 fc92 	bl	80021b0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	482f      	ldr	r0, [pc, #188]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000890:	f002 fbd0 	bl	8003034 <HAL_DSI_ConfigErrorMonitor>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 800089a:	f001 fc89 	bl	80021b0 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 80008a2:	2305      	movs	r3, #5
 80008a4:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 80008aa:	2301      	movs	r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 80008ae:	2350      	movs	r3, #80	; 0x50
 80008b0:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 80008c6:	23fc      	movs	r3, #252	; 0xfc
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 80008ca:	23fc      	movs	r3, #252	; 0xfc
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 80008ce:	f44f 7351 	mov.w	r3, #836	; 0x344
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 80008d4:	2308      	movs	r3, #8
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 80008d8:	2308      	movs	r3, #8
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 80008dc:	2308      	movs	r3, #8
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 80008e0:	2350      	movs	r3, #80	; 0x50
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 80008e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e8:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 80008ea:	231c      	movs	r3, #28
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 80008ee:	2350      	movs	r3, #80	; 0x50
 80008f0:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 80008f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f6:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 80008fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000902:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 800090a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090e:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000914:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	480b      	ldr	r0, [pc, #44]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000920:	f002 fc6d 	bl	80031fe <HAL_DSI_ConfigVideoMode>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 800092a:	f001 fc41 	bl	80021b0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_DSIHOST_DSI_Init+0x1d0>)
 8000932:	f002 fc3c 	bl	80031ae <HAL_DSI_SetGenericVCID>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 800093c:	f001 fc38 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
	LCD_PowerOn();
 8000940:	f000 fe92 	bl	8001668 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	37b8      	adds	r7, #184	; 0xb8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20004b34 	.word	0x20004b34
 8000950:	40016c00 	.word	0x40016c00

08000954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_I2C1_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <MX_I2C1_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <MX_I2C1_Init+0x7c>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_I2C1_Init+0x74>)
 800096c:	2201      	movs	r2, #1
 800096e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800098e:	480e      	ldr	r0, [pc, #56]	; (80009c8 <MX_I2C1_Init+0x74>)
 8000990:	f003 fa6a 	bl	8003e68 <HAL_I2C_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800099a:	f001 fc09 	bl	80021b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099e:	2100      	movs	r1, #0
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_I2C1_Init+0x74>)
 80009a2:	f003 fafc 	bl	8003f9e <HAL_I2CEx_ConfigAnalogFilter>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009ac:	f001 fc00 	bl	80021b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b0:	2100      	movs	r1, #0
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_I2C1_Init+0x74>)
 80009b4:	f003 fb3e 	bl	8004034 <HAL_I2CEx_ConfigDigitalFilter>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009be:	f001 fbf7 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20004b50 	.word	0x20004b50
 80009cc:	40005400 	.word	0x40005400
 80009d0:	307075b1 	.word	0x307075b1

080009d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_I2C2_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_I2C2_Init+0x7c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a10:	f003 fa2a 	bl	8003e68 <HAL_I2C_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f001 fbc9 	bl	80021b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a22:	f003 fabc 	bl	8003f9e <HAL_I2CEx_ConfigAnalogFilter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f001 fbc0 	bl	80021b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a34:	f003 fafe 	bl	8004034 <HAL_I2CEx_ConfigDigitalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f001 fbb7 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20004ba4 	.word	0x20004ba4
 8000a4c:	40005800 	.word	0x40005800
 8000a50:	307075b1 	.word	0x307075b1

08000a54 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2234      	movs	r2, #52	; 0x34
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f008 fa3d 	bl	8008ee0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a66:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000a68:	4a38      	ldr	r2, [pc, #224]	; (8000b4c <MX_LTDC_Init+0xf8>)
 8000a6a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000a6c:	4b36      	ldr	r3, [pc, #216]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a72:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000a74:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a7c:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000a8a:	22fb      	movs	r2, #251	; 0xfb
 8000a8c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000a96:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000a9a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000aa4:	f240 2247 	movw	r2, #583	; 0x247
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000aac:	225f      	movs	r2, #95	; 0x5f
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000ab2:	f240 3243 	movw	r2, #835	; 0x343
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000aba:	2261      	movs	r2, #97	; 0x61
 8000abc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000ac0:	22ff      	movs	r2, #255	; 0xff
 8000ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000ac8:	22ff      	movs	r2, #255	; 0xff
 8000aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000ad0:	22ff      	movs	r2, #255	; 0xff
 8000ad2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ad6:	481c      	ldr	r0, [pc, #112]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000ad8:	f003 faf8 	bl	80040cc <HAL_LTDC_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000ae2:	f001 fb65 	bl	80021b0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 8000aea:	2350      	movs	r3, #80	; 0x50
 8000aec:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 8000af2:	2350      	movs	r3, #80	; 0x50
 8000af4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000afa:	23ff      	movs	r3, #255	; 0xff
 8000afc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b06:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b08:	2305      	movs	r3, #5
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_LTDC_Init+0xfc>)
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 8000b10:	2350      	movs	r3, #80	; 0x50
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 8000b14:	2350      	movs	r3, #80	; 0x50
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000b18:	23ff      	movs	r3, #255	; 0xff
 8000b1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000b1e:	23ff      	movs	r3, #255	; 0xff
 8000b20:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000b24:	23ff      	movs	r3, #255	; 0xff
 8000b26:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_LTDC_Init+0xf4>)
 8000b32:	f003 fb9b 	bl	800426c <HAL_LTDC_ConfigLayer>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000b3c:	f001 fb38 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3738      	adds	r7, #56	; 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20004bf8 	.word	0x20004bf8
 8000b4c:	40016800 	.word	0x40016800
 8000b50:	2000000c 	.word	0x2000000c

08000b54 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000b6a:	4a23      	ldr	r2, [pc, #140]	; (8000bf8 <MX_OCTOSPI2_Init+0xa4>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b80:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000b84:	2220      	movs	r2, #32
 8000b86:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 32;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000b9c:	2220      	movs	r2, #32
 8000b9e:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000bb8:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000bba:	f003 fd2d 	bl	8004618 <HAL_OSPI_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_OCTOSPI2_Init+0x74>
  {
    Error_Handler();
 8000bc4:	f001 faf4 	bl	80021b0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_OCTOSPI2_Init+0xa8>)
 8000bd2:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_OCTOSPI2_Init+0xa0>)
 8000bde:	f003 fdd5 	bl	800478c <HAL_OSPIM_Config>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_OCTOSPI2_Init+0x98>
  {
    Error_Handler();
 8000be8:	f001 fae2 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20004ca0 	.word	0x20004ca0
 8000bf8:	a0001400 	.word	0xa0001400
 8000bfc:	00010002 	.word	0x00010002

08000c00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <MX_SPI1_Init+0x78>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c2e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c36:	2220      	movs	r2, #32
 8000c38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c4e:	2207      	movs	r2, #7
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c60:	f005 fed4 	bl	8006a0c <HAL_SPI_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c6a:	f001 faa1 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20004cf0 	.word	0x20004cf0
 8000c78:	40013000 	.word	0x40013000

08000c7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000c82:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <MX_SPI2_Init+0x70>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000c94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cac:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000cc2:	2207      	movs	r2, #7
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_SPI2_Init+0x6c>)
 8000cd4:	f005 fe9a 	bl	8006a0c <HAL_SPI_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000cde:	f001 fa67 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20004d54 	.word	0x20004d54
 8000cec:	40003800 	.word	0x40003800

08000cf0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000cf6:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <MX_SPI3_Init+0x6c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d08:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d0c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_SPI3_Init+0x68>)
 8000d46:	f005 fe61 	bl	8006a0c <HAL_SPI_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000d50:	f001 fa2e 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20004db8 	.word	0x20004db8
 8000d5c:	40003c00 	.word	0x40003c00

08000d60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d66:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <MX_UART4_Init+0x94>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_UART4_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_UART4_Init+0x90>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000da8:	4811      	ldr	r0, [pc, #68]	; (8000df0 <MX_UART4_Init+0x90>)
 8000daa:	f007 f9a1 	bl	80080f0 <HAL_UART_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000db4:	f001 f9fc 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db8:	2100      	movs	r1, #0
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_UART4_Init+0x90>)
 8000dbc:	f007 ffc6 	bl	8008d4c <HAL_UARTEx_SetTxFifoThreshold>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000dc6:	f001 f9f3 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4808      	ldr	r0, [pc, #32]	; (8000df0 <MX_UART4_Init+0x90>)
 8000dce:	f007 fffb 	bl	8008dc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000dd8:	f001 f9ea 	bl	80021b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_UART4_Init+0x90>)
 8000dde:	f007 ff7c 	bl	8008cda <HAL_UARTEx_DisableFifoMode>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000de8:	f001 f9e2 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20004e1c 	.word	0x20004e1c
 8000df4:	40004c00 	.word	0x40004c00

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4ba4      	ldr	r3, [pc, #656]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4aa3      	ldr	r2, [pc, #652]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4ba1      	ldr	r3, [pc, #644]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	4b9e      	ldr	r3, [pc, #632]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a9d      	ldr	r2, [pc, #628]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b9b      	ldr	r3, [pc, #620]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b98      	ldr	r3, [pc, #608]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a97      	ldr	r2, [pc, #604]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b95      	ldr	r3, [pc, #596]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b92      	ldr	r3, [pc, #584]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a91      	ldr	r2, [pc, #580]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b8f      	ldr	r3, [pc, #572]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6e:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a8b      	ldr	r2, [pc, #556]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b89      	ldr	r3, [pc, #548]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8000e86:	f004 f961 	bl	800514c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8a:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	4a84      	ldr	r2, [pc, #528]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e96:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea2:	4b7f      	ldr	r3, [pc, #508]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a7e      	ldr	r2, [pc, #504]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b7c      	ldr	r3, [pc, #496]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eba:	4b79      	ldr	r3, [pc, #484]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a78      	ldr	r2, [pc, #480]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <MX_GPIO_Init+0x2a8>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(flash_cs_GPIO_Port, flash_cs_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed8:	4872      	ldr	r0, [pc, #456]	; (80010a4 <MX_GPIO_Init+0x2ac>)
 8000eda:	f002 ff95 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, flash_mosi_Pin|flash_clk_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 418a 	mov.w	r1, #17664	; 0x4500
 8000ee4:	4870      	ldr	r0, [pc, #448]	; (80010a8 <MX_GPIO_Init+0x2b0>)
 8000ee6:	f002 ff8f 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	21a0      	movs	r1, #160	; 0xa0
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f002 ff89 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efc:	486b      	ldr	r0, [pc, #428]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000efe:	f002 ff83 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f08:	4869      	ldr	r0, [pc, #420]	; (80010b0 <MX_GPIO_Init+0x2b8>)
 8000f0a:	f002 ff7d 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f14:	4865      	ldr	r0, [pc, #404]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000f16:	f002 ff77 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : flash_cs_Pin */
  GPIO_InitStruct.Pin = flash_cs_Pin;
 8000f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(flash_cs_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f30:	4619      	mov	r1, r3
 8000f32:	485c      	ldr	r0, [pc, #368]	; (80010a4 <MX_GPIO_Init+0x2ac>)
 8000f34:	f002 fdbe 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : flash_mosi_Pin flash_clk_Pin */
  GPIO_InitStruct.Pin = flash_mosi_Pin|flash_clk_Pin;
 8000f38:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4855      	ldr	r0, [pc, #340]	; (80010a8 <MX_GPIO_Init+0x2b0>)
 8000f52:	f002 fdaf 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : flash_miso_Pin */
  GPIO_InitStruct.Pin = flash_miso_Pin;
 8000f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(flash_miso_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	484f      	ldr	r0, [pc, #316]	; (80010a8 <MX_GPIO_Init+0x2b0>)
 8000f6c:	f002 fda2 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	484b      	ldr	r0, [pc, #300]	; (80010b4 <MX_GPIO_Init+0x2bc>)
 8000f86:	f002 fd95 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8000f8a:	2318      	movs	r3, #24
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f002 fd88 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fa4:	23a0      	movs	r3, #160	; 0xa0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f002 fd79 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4833      	ldr	r0, [pc, #204]	; (80010a4 <MX_GPIO_Init+0x2ac>)
 8000fd6:	f002 fd6d 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	482e      	ldr	r0, [pc, #184]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8000ff4:	f002 fd5e 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ff8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	4827      	ldr	r0, [pc, #156]	; (80010b0 <MX_GPIO_Init+0x2b8>)
 8001012:	f002 fd4f 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001016:	2301      	movs	r3, #1
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	4821      	ldr	r0, [pc, #132]	; (80010b0 <MX_GPIO_Init+0x2b8>)
 800102a:	f002 fd43 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800102e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	4818      	ldr	r0, [pc, #96]	; (80010a8 <MX_GPIO_Init+0x2b0>)
 8001048:	f002 fd34 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001052:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001058:	2302      	movs	r3, #2
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4812      	ldr	r0, [pc, #72]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8001064:	f002 fd26 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001072:	2301      	movs	r3, #1
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <MX_GPIO_Init+0x2b4>)
 8001082:	f002 fd17 	bl	8003ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2103      	movs	r1, #3
 800108a:	2028      	movs	r0, #40	; 0x28
 800108c:	f001 fdd9 	bl	8002c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001090:	2028      	movs	r0, #40	; 0x28
 8001092:	f001 fdf2 	bl	8002c7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001096:	bf00      	nop
 8001098:	3738      	adds	r7, #56	; 0x38
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000800 	.word	0x48000800
 80010a8:	48001400 	.word	0x48001400
 80010ac:	48001000 	.word	0x48001000
 80010b0:	48000400 	.word	0x48000400
 80010b4:	48000c00 	.word	0x48000c00

080010b8 <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config() {
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b0af      	sub	sp, #188	; 0xbc
 80010bc:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK) {
 80010be:	48c4      	ldr	r0, [pc, #784]	; (80013d0 <mipi_config+0x318>)
 80010c0:	f002 fbd5 	bl	800386e <HAL_DSI_Start>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <mipi_config+0x16>
		Error_Handler();
 80010ca:	f001 f871 	bl	80021b0 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 80010ce:	23c3      	movs	r3, #195	; 0xc3
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	23f0      	movs	r3, #240	; 0xf0
 80010d4:	2215      	movs	r2, #21
 80010d6:	2100      	movs	r1, #0
 80010d8:	48bd      	ldr	r0, [pc, #756]	; (80013d0 <mipi_config+0x318>)
 80010da:	f002 fc04 	bl	80038e6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 80010de:	2396      	movs	r3, #150	; 0x96
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	23f0      	movs	r3, #240	; 0xf0
 80010e4:	2215      	movs	r2, #21
 80010e6:	2100      	movs	r1, #0
 80010e8:	48b9      	ldr	r0, [pc, #740]	; (80013d0 <mipi_config+0x318>)
 80010ea:	f002 fbfc 	bl	80038e6 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = { 0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33 };
 80010ee:	4ab9      	ldr	r2, [pc, #740]	; (80013d4 <mipi_config+0x31c>)
 80010f0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f8:	6018      	str	r0, [r3, #0]
 80010fa:	3304      	adds	r3, #4
 80010fc:	8019      	strh	r1, [r3, #0]
 80010fe:	3302      	adds	r3, #2
 8001100:	0c0a      	lsrs	r2, r1, #16
 8001102:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8001104:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	23e7      	movs	r3, #231	; 0xe7
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2308      	movs	r3, #8
 8001110:	2239      	movs	r2, #57	; 0x39
 8001112:	2100      	movs	r1, #0
 8001114:	48ae      	ldr	r0, [pc, #696]	; (80013d0 <mipi_config+0x318>)
 8001116:	f002 fc08 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = { 0xC0, 0x68, 0xE0 };
 800111a:	4aaf      	ldr	r2, [pc, #700]	; (80013d8 <mipi_config+0x320>)
 800111c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	4611      	mov	r1, r2
 8001124:	8019      	strh	r1, [r3, #0]
 8001126:	3302      	adds	r3, #2
 8001128:	0c12      	lsrs	r2, r2, #16
 800112a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 800112c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	23a4      	movs	r3, #164	; 0xa4
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2304      	movs	r3, #4
 8001138:	2239      	movs	r2, #57	; 0x39
 800113a:	2100      	movs	r1, #0
 800113c:	48a4      	ldr	r0, [pc, #656]	; (80013d0 <mipi_config+0x318>)
 800113e:	f002 fbf4 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = { 0x42, 0x05, 0x24, 0x03 };
 8001142:	4ba6      	ldr	r3, [pc, #664]	; (80013dc <mipi_config+0x324>)
 8001144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8001148:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	23c3      	movs	r3, #195	; 0xc3
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2305      	movs	r3, #5
 8001154:	2239      	movs	r2, #57	; 0x39
 8001156:	2100      	movs	r1, #0
 8001158:	489d      	ldr	r0, [pc, #628]	; (80013d0 <mipi_config+0x318>)
 800115a:	f002 fbe6 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = { 0x42, 0x05, 0x24, 0x03 };
 800115e:	4b9f      	ldr	r3, [pc, #636]	; (80013dc <mipi_config+0x324>)
 8001160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 8001164:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	23c4      	movs	r3, #196	; 0xc4
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2305      	movs	r3, #5
 8001170:	2239      	movs	r2, #57	; 0x39
 8001172:	2100      	movs	r1, #0
 8001174:	4896      	ldr	r0, [pc, #600]	; (80013d0 <mipi_config+0x318>)
 8001176:	f002 fbd8 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 800117a:	4a99      	ldr	r2, [pc, #612]	; (80013e0 <mipi_config+0x328>)
 800117c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001180:	ca07      	ldmia	r2, {r0, r1, r2}
 8001182:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 8001186:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	23e5      	movs	r3, #229	; 0xe5
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	230d      	movs	r3, #13
 8001192:	2239      	movs	r2, #57	; 0x39
 8001194:	2100      	movs	r1, #0
 8001196:	488e      	ldr	r0, [pc, #568]	; (80013d0 <mipi_config+0x318>)
 8001198:	f002 fbc7 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 800119c:	4a90      	ldr	r2, [pc, #576]	; (80013e0 <mipi_config+0x328>)
 800119e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 80011a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	23e6      	movs	r3, #230	; 0xe6
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	230d      	movs	r3, #13
 80011b4:	2239      	movs	r2, #57	; 0x39
 80011b6:	2100      	movs	r1, #0
 80011b8:	4885      	ldr	r0, [pc, #532]	; (80013d0 <mipi_config+0x318>)
 80011ba:	f002 fbb6 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = { 0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22 };
 80011be:	4a89      	ldr	r2, [pc, #548]	; (80013e4 <mipi_config+0x32c>)
 80011c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c8:	6018      	str	r0, [r3, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	8019      	strh	r1, [r3, #0]
 80011ce:	3302      	adds	r3, #2
 80011d0:	0c0a      	lsrs	r2, r1, #16
 80011d2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 80011d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	23ec      	movs	r3, #236	; 0xec
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2308      	movs	r3, #8
 80011e0:	2239      	movs	r2, #57	; 0x39
 80011e2:	2100      	movs	r1, #0
 80011e4:	487a      	ldr	r0, [pc, #488]	; (80013d0 <mipi_config+0x318>)
 80011e6:	f002 fba0 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80011ea:	4b7f      	ldr	r3, [pc, #508]	; (80013e8 <mipi_config+0x330>)
 80011ec:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 80011ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	23c1      	movs	r3, #193	; 0xc1
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2305      	movs	r3, #5
 80011fa:	2239      	movs	r2, #57	; 0x39
 80011fc:	2100      	movs	r1, #0
 80011fe:	4874      	ldr	r0, [pc, #464]	; (80013d0 <mipi_config+0x318>)
 8001200:	f002 fb93 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = { 0x88, 0x05, 0x0F, 0x18 };
 8001204:	4b78      	ldr	r3, [pc, #480]	; (80013e8 <mipi_config+0x330>)
 8001206:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 8001208:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	23c2      	movs	r3, #194	; 0xc2
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2305      	movs	r3, #5
 8001214:	2239      	movs	r2, #57	; 0x39
 8001216:	2100      	movs	r1, #0
 8001218:	486d      	ldr	r0, [pc, #436]	; (80013d0 <mipi_config+0x318>)
 800121a:	f002 fb86 	bl	800392a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 800121e:	2300      	movs	r3, #0
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2336      	movs	r3, #54	; 0x36
 8001224:	2215      	movs	r2, #21
 8001226:	2100      	movs	r1, #0
 8001228:	4869      	ldr	r0, [pc, #420]	; (80013d0 <mipi_config+0x318>)
 800122a:	f002 fb5c 	bl	80038e6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 800122e:	2307      	movs	r3, #7
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	233a      	movs	r3, #58	; 0x3a
 8001234:	2215      	movs	r2, #21
 8001236:	2100      	movs	r1, #0
 8001238:	4865      	ldr	r0, [pc, #404]	; (80013d0 <mipi_config+0x318>)
 800123a:	f002 fb54 	bl	80038e6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 800123e:	23be      	movs	r3, #190	; 0xbe
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	23c5      	movs	r3, #197	; 0xc5
 8001244:	2215      	movs	r2, #21
 8001246:	2100      	movs	r1, #0
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <mipi_config+0x318>)
 800124a:	f002 fb4c 	bl	80038e6 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = { 0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55,
 800124e:	4b67      	ldr	r3, [pc, #412]	; (80013ec <mipi_config+0x334>)
 8001250:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001254:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001256:	c407      	stmia	r4!, {r0, r1, r2}
 8001258:	8023      	strh	r3, [r4, #0]
			0x3D, 0x19, 0x18, 0x24, 0x27 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 800125a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	23e0      	movs	r3, #224	; 0xe0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	230f      	movs	r3, #15
 8001266:	2239      	movs	r2, #57	; 0x39
 8001268:	2100      	movs	r1, #0
 800126a:	4859      	ldr	r0, [pc, #356]	; (80013d0 <mipi_config+0x318>)
 800126c:	f002 fb5d 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = { 0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56,
 8001270:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <mipi_config+0x338>)
 8001272:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001278:	c407      	stmia	r4!, {r0, r1, r2}
 800127a:	8023      	strh	r3, [r4, #0]
			0x3E, 0x1A, 0x18, 0x24, 0x28 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 800127c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	23e1      	movs	r3, #225	; 0xe1
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	230f      	movs	r3, #15
 8001288:	2239      	movs	r2, #57	; 0x39
 800128a:	2100      	movs	r1, #0
 800128c:	4850      	ldr	r0, [pc, #320]	; (80013d0 <mipi_config+0x318>)
 800128e:	f002 fb4c 	bl	800392a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 8001292:	2310      	movs	r3, #16
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	23b2      	movs	r3, #178	; 0xb2
 8001298:	2215      	movs	r2, #21
 800129a:	2100      	movs	r1, #0
 800129c:	484c      	ldr	r0, [pc, #304]	; (80013d0 <mipi_config+0x318>)
 800129e:	f002 fb22 	bl	80038e6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 80012a2:	2301      	movs	r3, #1
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	23b3      	movs	r3, #179	; 0xb3
 80012a8:	2215      	movs	r2, #21
 80012aa:	2100      	movs	r1, #0
 80012ac:	4848      	ldr	r0, [pc, #288]	; (80013d0 <mipi_config+0x318>)
 80012ae:	f002 fb1a 	bl	80038e6 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 80012b2:	2301      	movs	r3, #1
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	23b4      	movs	r3, #180	; 0xb4
 80012b8:	2215      	movs	r2, #21
 80012ba:	2100      	movs	r1, #0
 80012bc:	4844      	ldr	r0, [pc, #272]	; (80013d0 <mipi_config+0x318>)
 80012be:	f002 fb12 	bl	80038e6 <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = { 0x27, 0x09 };
 80012c2:	f640 1327 	movw	r3, #2343	; 0x927
 80012c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 80012ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	23b6      	movs	r3, #182	; 0xb6
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2303      	movs	r3, #3
 80012d6:	2239      	movs	r2, #57	; 0x39
 80012d8:	2100      	movs	r1, #0
 80012da:	483d      	ldr	r0, [pc, #244]	; (80013d0 <mipi_config+0x318>)
 80012dc:	f002 fb25 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = { 0x00, 0x54, 0x00, 0x54 };
 80012e0:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 80012e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 80012e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	23b5      	movs	r3, #181	; 0xb5
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2305      	movs	r3, #5
 80012f2:	2239      	movs	r2, #57	; 0x39
 80012f4:	2100      	movs	r1, #0
 80012f6:	4836      	ldr	r0, [pc, #216]	; (80013d0 <mipi_config+0x318>)
 80012f8:	f002 fb17 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80012fc:	4a3d      	ldr	r2, [pc, #244]	; (80013f4 <mipi_config+0x33c>)
 80012fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001302:	ca07      	ldmia	r2, {r0, r1, r2}
 8001304:	c303      	stmia	r3!, {r0, r1}
 8001306:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 8001308:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	23a5      	movs	r3, #165	; 0xa5
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	230a      	movs	r3, #10
 8001314:	2239      	movs	r2, #57	; 0x39
 8001316:	2100      	movs	r1, #0
 8001318:	482d      	ldr	r0, [pc, #180]	; (80013d0 <mipi_config+0x318>)
 800131a:	f002 fb06 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 800131e:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <mipi_config+0x33c>)
 8001320:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001324:	ca07      	ldmia	r2, {r0, r1, r2}
 8001326:	c303      	stmia	r3!, {r0, r1}
 8001328:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 800132a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	23a6      	movs	r3, #166	; 0xa6
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	230a      	movs	r3, #10
 8001336:	2239      	movs	r2, #57	; 0x39
 8001338:	2100      	movs	r1, #0
 800133a:	4825      	ldr	r0, [pc, #148]	; (80013d0 <mipi_config+0x318>)
 800133c:	f002 faf5 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = { 0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00 };
 8001340:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <mipi_config+0x340>)
 8001342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800134a:	6018      	str	r0, [r3, #0]
 800134c:	3304      	adds	r3, #4
 800134e:	8019      	strh	r1, [r3, #0]
 8001350:	3302      	adds	r3, #2
 8001352:	0c0a      	lsrs	r2, r1, #16
 8001354:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 8001356:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	23ba      	movs	r3, #186	; 0xba
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2308      	movs	r3, #8
 8001362:	2239      	movs	r2, #57	; 0x39
 8001364:	2100      	movs	r1, #0
 8001366:	481a      	ldr	r0, [pc, #104]	; (80013d0 <mipi_config+0x318>)
 8001368:	f002 fadf 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 800136c:	4a23      	ldr	r2, [pc, #140]	; (80013fc <mipi_config+0x344>)
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001376:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	23bb      	movs	r3, #187	; 0xbb
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2309      	movs	r3, #9
 8001386:	2239      	movs	r2, #57	; 0x39
 8001388:	2100      	movs	r1, #0
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <mipi_config+0x318>)
 800138c:	f002 facd 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001390:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <mipi_config+0x344>)
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800139a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	23bc      	movs	r3, #188	; 0xbc
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2309      	movs	r3, #9
 80013aa:	2239      	movs	r2, #57	; 0x39
 80013ac:	2100      	movs	r1, #0
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <mipi_config+0x318>)
 80013b0:	f002 fabb 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = { 0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF,
 80013b4:	4a12      	ldr	r2, [pc, #72]	; (8001400 <mipi_config+0x348>)
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80013bc:	c303      	stmia	r3!, {r0, r1}
 80013be:	801a      	strh	r2, [r3, #0]
 80013c0:	3302      	adds	r3, #2
 80013c2:	0c12      	lsrs	r2, r2, #16
 80013c4:	701a      	strb	r2, [r3, #0]
			0xFF, 0xF9 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	e01a      	b.n	8001404 <mipi_config+0x34c>
 80013ce:	bf00      	nop
 80013d0:	20004b34 	.word	0x20004b34
 80013d4:	08008f60 	.word	0x08008f60
 80013d8:	08008f68 	.word	0x08008f68
 80013dc:	03240542 	.word	0x03240542
 80013e0:	08008f6c 	.word	0x08008f6c
 80013e4:	08008f78 	.word	0x08008f78
 80013e8:	180f0588 	.word	0x180f0588
 80013ec:	08008f80 	.word	0x08008f80
 80013f0:	08008f90 	.word	0x08008f90
 80013f4:	08008fa0 	.word	0x08008fa0
 80013f8:	08008fac 	.word	0x08008fac
 80013fc:	08008fb4 	.word	0x08008fb4
 8001400:	08008fbc 	.word	0x08008fbc
 8001404:	23bd      	movs	r3, #189	; 0xbd
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	230c      	movs	r3, #12
 800140a:	2239      	movs	r2, #57	; 0x39
 800140c:	2100      	movs	r1, #0
 800140e:	482d      	ldr	r0, [pc, #180]	; (80014c4 <mipi_config+0x40c>)
 8001410:	f002 fa8b 	bl	800392a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 8001414:	23c3      	movs	r3, #195	; 0xc3
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	23ed      	movs	r3, #237	; 0xed
 800141a:	2215      	movs	r2, #21
 800141c:	2100      	movs	r1, #0
 800141e:	4829      	ldr	r0, [pc, #164]	; (80014c4 <mipi_config+0x40c>)
 8001420:	f002 fa61 	bl	80038e6 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = { 0x40, 0x0F, 0x00 };
 8001424:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <mipi_config+0x410>)
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	4611      	mov	r1, r2
 800142e:	8019      	strh	r1, [r3, #0]
 8001430:	3302      	adds	r3, #2
 8001432:	0c12      	lsrs	r2, r2, #16
 8001434:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	23e4      	movs	r3, #228	; 0xe4
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2304      	movs	r3, #4
 8001442:	2239      	movs	r2, #57	; 0x39
 8001444:	2100      	movs	r1, #0
 8001446:	481f      	ldr	r0, [pc, #124]	; (80014c4 <mipi_config+0x40c>)
 8001448:	f002 fa6f 	bl	800392a <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = { 0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25 };
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <mipi_config+0x414>)
 800144e:	463b      	mov	r3, r7
 8001450:	ca07      	ldmia	r2, {r0, r1, r2}
 8001452:	c303      	stmia	r3!, {r0, r1}
 8001454:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 8001456:	463b      	mov	r3, r7
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	23cc      	movs	r3, #204	; 0xcc
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	230a      	movs	r3, #10
 8001460:	2239      	movs	r2, #57	; 0x39
 8001462:	2100      	movs	r1, #0
 8001464:	4817      	ldr	r0, [pc, #92]	; (80014c4 <mipi_config+0x40c>)
 8001466:	f002 fa60 	bl	800392a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800146a:	2300      	movs	r3, #0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2335      	movs	r3, #53	; 0x35
 8001470:	2215      	movs	r2, #21
 8001472:	2100      	movs	r1, #0
 8001474:	4813      	ldr	r0, [pc, #76]	; (80014c4 <mipi_config+0x40c>)
 8001476:	f002 fa36 	bl	80038e6 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 800147a:	2000      	movs	r0, #0
 800147c:	f001 fae2 	bl	8002a44 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001480:	2300      	movs	r3, #0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2311      	movs	r3, #17
 8001486:	2205      	movs	r2, #5
 8001488:	2100      	movs	r1, #0
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <mipi_config+0x40c>)
 800148c:	f002 fa2b 	bl	80038e6 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001490:	2078      	movs	r0, #120	; 0x78
 8001492:	f001 fad7 	bl	8002a44 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2329      	movs	r3, #41	; 0x29
 800149c:	2205      	movs	r2, #5
 800149e:	2100      	movs	r1, #0
 80014a0:	4808      	ldr	r0, [pc, #32]	; (80014c4 <mipi_config+0x40c>)
 80014a2:	f002 fa20 	bl	80038e6 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 80014a6:	2078      	movs	r0, #120	; 0x78
 80014a8:	f001 facc 	bl	8002a44 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2335      	movs	r3, #53	; 0x35
 80014b2:	2215      	movs	r2, #21
 80014b4:	2100      	movs	r1, #0
 80014b6:	4803      	ldr	r0, [pc, #12]	; (80014c4 <mipi_config+0x40c>)
 80014b8:	f002 fa15 	bl	80038e6 <HAL_DSI_ShortWrite>
}
 80014bc:	bf00      	nop
 80014be:	37b4      	adds	r7, #180	; 0xb4
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	20004b34 	.word	0x20004b34
 80014c8:	08008fc8 	.word	0x08008fc8
 80014cc:	08008fcc 	.word	0x08008fcc

080014d0 <SPI_master2slave>:
	{
		HAL_UART_Transmit(&huart4, &rev, 5, 1000);
	}
}

void SPI_master2slave(char * buf, char * frame_buf) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 1000);
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	2201      	movs	r2, #1
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <SPI_master2slave+0x58>)
 80014e4:	f005 fb35 	bl	8006b52 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &buf[1], 1, 1000);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	1c59      	adds	r1, r3, #1
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	2201      	movs	r2, #1
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <SPI_master2slave+0x58>)
 80014f4:	f005 fb2d 	bl	8006b52 <HAL_SPI_Transmit>
	for(int i=0; i< 6400; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e00b      	b.n	8001516 <SPI_master2slave+0x46>
	{
		if (HAL_SPI_Transmit(&hspi1, &frame_buf[i], 1, 1000) == HAL_OK) {
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	18d1      	adds	r1, r2, r3
 8001504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001508:	2201      	movs	r2, #1
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <SPI_master2slave+0x58>)
 800150c:	f005 fb21 	bl	8006b52 <HAL_SPI_Transmit>
	for(int i=0; i< 6400; i++)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800151c:	dbef      	blt.n	80014fe <SPI_master2slave+0x2e>
			//HAL_UART_Transmit(&huart4, "SPI_master2slave", 16, 1000);
		}
	}
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20004cf0 	.word	0x20004cf0

0800152c <Write_Registers_data>:

void Write_Registers_data() {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
	uint8_t length[1] = { 0 };
 8001532:	2300      	movs	r3, #0
 8001534:	733b      	strb	r3, [r7, #12]
	uint8_t Register_Address[1] = { 0 };
 8001536:	2300      	movs	r3, #0
 8001538:	723b      	strb	r3, [r7, #8]
	uint8_t data[1] = { 0 };
 800153a:	2300      	movs	r3, #0
 800153c:	713b      	strb	r3, [r7, #4]

	//HAL_SPI_Receive(&hspi3, (uint8_t*) length, 1, 1000);
	HAL_SPI_Receive(&hspi3, (uint8_t*) Register_Address, 1, 1000);
 800153e:	f107 0108 	add.w	r1, r7, #8
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	2201      	movs	r2, #1
 8001548:	4843      	ldr	r0, [pc, #268]	; (8001658 <Write_Registers_data+0x12c>)
 800154a:	f005 fc77 	bl	8006e3c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t*) data, 1, 1000);
 800154e:	1d39      	adds	r1, r7, #4
 8001550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001554:	2201      	movs	r2, #1
 8001556:	4840      	ldr	r0, [pc, #256]	; (8001658 <Write_Registers_data+0x12c>)
 8001558:	f005 fc70 	bl	8006e3c <HAL_SPI_Receive>
	switch (Register_Address[0]) {
 800155c:	7a3b      	ldrb	r3, [r7, #8]
 800155e:	2b13      	cmp	r3, #19
 8001560:	d875      	bhi.n	800164e <Write_Registers_data+0x122>
 8001562:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <Write_Registers_data+0x3c>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	08001649 	.word	0x08001649
 800156c:	08001649 	.word	0x08001649
 8001570:	08001649 	.word	0x08001649
 8001574:	08001649 	.word	0x08001649
 8001578:	08001649 	.word	0x08001649
 800157c:	08001649 	.word	0x08001649
 8001580:	080015b9 	.word	0x080015b9
 8001584:	08001649 	.word	0x08001649
 8001588:	08001649 	.word	0x08001649
 800158c:	08001649 	.word	0x08001649
 8001590:	08001649 	.word	0x08001649
 8001594:	08001649 	.word	0x08001649
 8001598:	08001649 	.word	0x08001649
 800159c:	08001649 	.word	0x08001649
 80015a0:	08001649 	.word	0x08001649
 80015a4:	08001649 	.word	0x08001649
 80015a8:	080015f7 	.word	0x080015f7
 80015ac:	0800164f 	.word	0x0800164f
 80015b0:	0800164f 	.word	0x0800164f
 80015b4:	08001649 	.word	0x08001649
	case 4: //Vertical blanking (High byte)
		break;
	case 5: //Vertical blanking (Low byte)
		break;
	case 0x06: //Frame rate x 2 (Hz)
		HAL_UART_Transmit(&huart4, (uint8_t*)data, 1, 1000);
 80015b8:	1d39      	adds	r1, r7, #4
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	2201      	movs	r2, #1
 80015c0:	4826      	ldr	r0, [pc, #152]	; (800165c <Write_Registers_data+0x130>)
 80015c2:	f006 fde5 	bl	8008190 <HAL_UART_Transmit>
		frame_rate=(uint32_t)data[0]*1000;
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	461a      	mov	r2, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <Write_Registers_data+0x134>)
 80015d4:	6013      	str	r3, [r2, #0]
		HAL_SPI_Transmit(&hspi1, &Register_Address[0], 1, 1000);
 80015d6:	f107 0108 	add.w	r1, r7, #8
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	2201      	movs	r2, #1
 80015e0:	4820      	ldr	r0, [pc, #128]	; (8001664 <Write_Registers_data+0x138>)
 80015e2:	f005 fab6 	bl	8006b52 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, &data[0], 1, 1000);
 80015e6:	1d39      	adds	r1, r7, #4
 80015e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ec:	2201      	movs	r2, #1
 80015ee:	481d      	ldr	r0, [pc, #116]	; (8001664 <Write_Registers_data+0x138>)
 80015f0:	f005 faaf 	bl	8006b52 <HAL_SPI_Transmit>
		break;
 80015f4:	e02b      	b.n	800164e <Write_Registers_data+0x122>
	case 14: //Day of Version
		break;
	case 15: //Month of Version
		break;
	case 16: //Control A
		HAL_SPI_Receive_IT(&hspi3, data, 1);
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	4816      	ldr	r0, [pc, #88]	; (8001658 <Write_Registers_data+0x12c>)
 80015fe:	f005 ff77 	bl	80074f0 <HAL_SPI_Receive_IT>
		HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2101      	movs	r1, #1
 8001606:	2033      	movs	r0, #51	; 0x33
 8001608:	f001 fb1b 	bl	8002c42 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800160c:	2033      	movs	r0, #51	; 0x33
 800160e:	f001 fb34 	bl	8002c7a <HAL_NVIC_EnableIRQ>
		__HAL_SPI_ENABLE(&hspi3);
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <Write_Registers_data+0x12c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <Write_Registers_data+0x12c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001620:	601a      	str	r2, [r3, #0]

		switch (data[0] & 0b00000011) {
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b03      	cmp	r3, #3
 800162a:	d80f      	bhi.n	800164c <Write_Registers_data+0x120>
 800162c:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <Write_Registers_data+0x108>)
 800162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001632:	bf00      	nop
 8001634:	08001645 	.word	0x08001645
 8001638:	08001645 	.word	0x08001645
 800163c:	08001645 	.word	0x08001645
 8001640:	08001645 	.word	0x08001645
		case 0b00000000:  //Display content of frame buffer (0)
			break;
 8001644:	bf00      	nop
		case 0b00000010:  //Display SPI input content
			break;
		case 0b00000011:  //Display Flash content
			break;
		}
		break;
 8001646:	e001      	b.n	800164c <Write_Registers_data+0x120>
		break;
 8001648:	bf00      	nop
 800164a:	e000      	b.n	800164e <Write_Registers_data+0x122>
		break;
 800164c:	bf00      	nop
	case 19: //Status
		break;
	}
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20004db8 	.word	0x20004db8
 800165c:	20004e1c 	.word	0x20004e1c
 8001660:	20000004 	.word	0x20000004
 8001664:	20004cf0 	.word	0x20004cf0

08001668 <LCD_PowerOn>:
		}
	}*/
}

static void LCD_PowerOn(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <LCD_PowerOn+0x2c>)
 8001674:	f002 fbc8 	bl	8003e08 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 8001678:	2014      	movs	r0, #20
 800167a:	f001 f9e3 	bl	8002a44 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <LCD_PowerOn+0x2c>)
 8001686:	f002 fbbf 	bl	8003e08 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 800168a:	2078      	movs	r0, #120	; 0x78
 800168c:	f001 f9da 	bl	8002a44 <HAL_Delay>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	48001000 	.word	0x48001000

08001698 <delay_us>:

void delay_us(int time)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	int i = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
	while (time--)
 80016a4:	e007      	b.n	80016b6 <delay_us+0x1e>
	{
		i = 13;
 80016a6:	230d      	movs	r3, #13
 80016a8:	60fb      	str	r3, [r7, #12]
		while (i--)
 80016aa:	bf00      	nop
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	60fa      	str	r2, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1fa      	bne.n	80016ac <delay_us+0x14>
	while (time--)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f2      	bne.n	80016a6 <delay_us+0xe>
			;
	}
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <delay_100ns>:

void delay_100ns(int time)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	int i = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
	while (time--)
 80016da:	e007      	b.n	80016ec <delay_100ns+0x1e>
	{
		i = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
		while (i--)
 80016e0:	bf00      	nop
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1e5a      	subs	r2, r3, #1
 80016e6:	60fa      	str	r2, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1fa      	bne.n	80016e2 <delay_100ns+0x14>
	while (time--)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1e5a      	subs	r2, r3, #1
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f2      	bne.n	80016dc <delay_100ns+0xe>
			;
	}
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_GPIO_EXTI_Callback>:

int button_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_12)
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001714:	d15b      	bne.n	80017ce <HAL_GPIO_EXTI_Callback+0xca>
	{
		button_count++;
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800171e:	6013      	str	r3, [r2, #0]
		delay_us(50000);
 8001720:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001724:	f7ff ffb8 	bl	8001698 <delay_us>
		for(int i=0; i<200; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e02e      	b.n	800178c <HAL_GPIO_EXTI_Callback+0x88>
		{
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == GPIO_PIN_RESET)
 800172e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001732:	4829      	ldr	r0, [pc, #164]	; (80017d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001734:	f002 fb50 	bl	8003dd8 <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d11a      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x70>
			{
				if(button_count<50 && play_mode==0)
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b31      	cmp	r3, #49	; 0x31
 8001744:	dc12      	bgt.n	800176c <HAL_GPIO_EXTI_Callback+0x68>
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10e      	bne.n	800176c <HAL_GPIO_EXTI_Callback+0x68>
				{
					display_image_number++;
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001758:	701a      	strb	r2, [r3, #0]
					if(display_image_number >= total_image_in_flash)
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d302      	bcc.n	800176c <HAL_GPIO_EXTI_Callback+0x68>
						display_image_number = 0;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
				}
				button_count = 0;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
				return;
 8001772:	e02c      	b.n	80017ce <HAL_GPIO_EXTI_Callback+0xca>
			}
			button_count++;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800177c:	6013      	str	r3, [r2, #0]
			delay_us(10000);
 800177e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001782:	f7ff ff89 	bl	8001698 <delay_us>
		for(int i=0; i<200; i++)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3301      	adds	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2bc7      	cmp	r3, #199	; 0xc7
 8001790:	ddcd      	ble.n	800172e <HAL_GPIO_EXTI_Callback+0x2a>
		}
		if(play_mode==1)
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d109      	bne.n	80017ae <HAL_GPIO_EXTI_Callback+0xaa>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a0:	4811      	ldr	r0, [pc, #68]	; (80017e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80017a2:	f002 fb31 	bl	8003e08 <HAL_GPIO_WritePin>
			play_mode = 0;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e00c      	b.n	80017c8 <HAL_GPIO_EXTI_Callback+0xc4>
		}
		else if(play_mode==0)
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d108      	bne.n	80017c8 <HAL_GPIO_EXTI_Callback+0xc4>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80017be:	f002 fb23 	bl	8003e08 <HAL_GPIO_WritePin>
			play_mode = 1;
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
		}
		button_count = 0;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
	}
}
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000b2b8 	.word	0x2000b2b8
 80017d8:	48001000 	.word	0x48001000
 80017dc:	2000b2b4 	.word	0x2000b2b4
 80017e0:	2000b2b5 	.word	0x2000b2b5
 80017e4:	20000008 	.word	0x20000008
 80017e8:	48000400 	.word	0x48000400

080017ec <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	// USB command: Type and command
	switch (spi3_buf[0] & 0b11000000) {
 80017f4:	4ba6      	ldr	r3, [pc, #664]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017fc:	2bc0      	cmp	r3, #192	; 0xc0
 80017fe:	f000 81ce 	beq.w	8001b9e <HAL_SPI_RxCpltCallback+0x3b2>
 8001802:	2bc0      	cmp	r3, #192	; 0xc0
 8001804:	f300 82a8 	bgt.w	8001d58 <HAL_SPI_RxCpltCallback+0x56c>
 8001808:	2b80      	cmp	r3, #128	; 0x80
 800180a:	f000 81bc 	beq.w	8001b86 <HAL_SPI_RxCpltCallback+0x39a>
 800180e:	2b80      	cmp	r3, #128	; 0x80
 8001810:	f300 82a2 	bgt.w	8001d58 <HAL_SPI_RxCpltCallback+0x56c>
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_SPI_RxCpltCallback+0x34>
 8001818:	2b40      	cmp	r3, #64	; 0x40
 800181a:	f000 8149 	beq.w	8001ab0 <HAL_SPI_RxCpltCallback+0x2c4>
 800181e:	e29b      	b.n	8001d58 <HAL_SPI_RxCpltCallback+0x56c>
	case 0b00000000:  //Chain SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 8001820:	4b9b      	ldr	r3, [pc, #620]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001828:	2b38      	cmp	r3, #56	; 0x38
 800182a:	f200 828e 	bhi.w	8001d4a <HAL_SPI_RxCpltCallback+0x55e>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <HAL_SPI_RxCpltCallback+0x48>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	08001919 	.word	0x08001919
 8001838:	08001d4b 	.word	0x08001d4b
 800183c:	08001d4b 	.word	0x08001d4b
 8001840:	08001d4b 	.word	0x08001d4b
 8001844:	08001d4b 	.word	0x08001d4b
 8001848:	08001d4b 	.word	0x08001d4b
 800184c:	08001d4b 	.word	0x08001d4b
 8001850:	08001d4b 	.word	0x08001d4b
 8001854:	080019c3 	.word	0x080019c3
 8001858:	08001d4b 	.word	0x08001d4b
 800185c:	08001d4b 	.word	0x08001d4b
 8001860:	08001d4b 	.word	0x08001d4b
 8001864:	08001d4b 	.word	0x08001d4b
 8001868:	08001d4b 	.word	0x08001d4b
 800186c:	08001d4b 	.word	0x08001d4b
 8001870:	08001d4b 	.word	0x08001d4b
 8001874:	08001a6b 	.word	0x08001a6b
 8001878:	08001d4b 	.word	0x08001d4b
 800187c:	08001d4b 	.word	0x08001d4b
 8001880:	08001d4b 	.word	0x08001d4b
 8001884:	08001d4b 	.word	0x08001d4b
 8001888:	08001d4b 	.word	0x08001d4b
 800188c:	08001d4b 	.word	0x08001d4b
 8001890:	08001d4b 	.word	0x08001d4b
 8001894:	08001a8d 	.word	0x08001a8d
 8001898:	08001d4b 	.word	0x08001d4b
 800189c:	08001d4b 	.word	0x08001d4b
 80018a0:	08001d4b 	.word	0x08001d4b
 80018a4:	08001d4b 	.word	0x08001d4b
 80018a8:	08001d4b 	.word	0x08001d4b
 80018ac:	08001d4b 	.word	0x08001d4b
 80018b0:	08001d4b 	.word	0x08001d4b
 80018b4:	08001a8d 	.word	0x08001a8d
 80018b8:	08001d4b 	.word	0x08001d4b
 80018bc:	08001d4b 	.word	0x08001d4b
 80018c0:	08001d4b 	.word	0x08001d4b
 80018c4:	08001d4b 	.word	0x08001d4b
 80018c8:	08001d4b 	.word	0x08001d4b
 80018cc:	08001d4b 	.word	0x08001d4b
 80018d0:	08001d4b 	.word	0x08001d4b
 80018d4:	08001a8d 	.word	0x08001a8d
 80018d8:	08001d4b 	.word	0x08001d4b
 80018dc:	08001d4b 	.word	0x08001d4b
 80018e0:	08001d4b 	.word	0x08001d4b
 80018e4:	08001d4b 	.word	0x08001d4b
 80018e8:	08001d4b 	.word	0x08001d4b
 80018ec:	08001d4b 	.word	0x08001d4b
 80018f0:	08001d4b 	.word	0x08001d4b
 80018f4:	08001a8d 	.word	0x08001a8d
 80018f8:	08001d4b 	.word	0x08001d4b
 80018fc:	08001d4b 	.word	0x08001d4b
 8001900:	08001d4b 	.word	0x08001d4b
 8001904:	08001d4b 	.word	0x08001d4b
 8001908:	08001d4b 	.word	0x08001d4b
 800190c:	08001d4b 	.word	0x08001d4b
 8001910:	08001d4b 	.word	0x08001d4b
 8001914:	08001a8d 	.word	0x08001a8d
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi3_buf[0] & 0b00000111) {
 8001918:	4b5d      	ldr	r3, [pc, #372]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	2b03      	cmp	r3, #3
 8001922:	d83f      	bhi.n	80019a4 <HAL_SPI_RxCpltCallback+0x1b8>
 8001924:	a201      	add	r2, pc, #4	; (adr r2, 800192c <HAL_SPI_RxCpltCallback+0x140>)
 8001926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192a:	bf00      	nop
 800192c:	0800193d 	.word	0x0800193d
 8001930:	08001957 	.word	0x08001957
 8001934:	08001971 	.word	0x08001971
 8001938:	0800198b 	.word	0x0800198b
			case 0b00000000: //Command for DIP switch ID = 00
				if(BOARD_NUMBER==1)
 800193c:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2a8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d13c      	bne.n	80019be <HAL_SPI_RxCpltCallback+0x1d2>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001948:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800194c:	4952      	ldr	r1, [pc, #328]	; (8001a98 <HAL_SPI_RxCpltCallback+0x2ac>)
 800194e:	4853      	ldr	r0, [pc, #332]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001950:	f005 fa74 	bl	8006e3c <HAL_SPI_Receive>
				}
				break;
 8001954:	e033      	b.n	80019be <HAL_SPI_RxCpltCallback+0x1d2>
			case 0b00000001: //Command for DIP switch ID = 01
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800195e:	4950      	ldr	r1, [pc, #320]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001960:	484e      	ldr	r0, [pc, #312]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001962:	f005 fa6b 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001966:	494e      	ldr	r1, [pc, #312]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001968:	4849      	ldr	r0, [pc, #292]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 800196a:	f7ff fdb1 	bl	80014d0 <SPI_master2slave>
				break;
 800196e:	e027      	b.n	80019c0 <HAL_SPI_RxCpltCallback+0x1d4>
			case 0b00000010: //Command for DIP switch ID = 10
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001974:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001978:	4949      	ldr	r1, [pc, #292]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 800197a:	4848      	ldr	r0, [pc, #288]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 800197c:	f005 fa5e 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001980:	4947      	ldr	r1, [pc, #284]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001982:	4843      	ldr	r0, [pc, #268]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001984:	f7ff fda4 	bl	80014d0 <SPI_master2slave>
				break;
 8001988:	e01a      	b.n	80019c0 <HAL_SPI_RxCpltCallback+0x1d4>
			case 0b00000011: //Command for DIP switch ID = 11
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 800198a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001992:	4943      	ldr	r1, [pc, #268]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001994:	4841      	ldr	r0, [pc, #260]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001996:	f005 fa51 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 800199a:	4941      	ldr	r1, [pc, #260]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 800199c:	483c      	ldr	r0, [pc, #240]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 800199e:	f7ff fd97 	bl	80014d0 <SPI_master2slave>
				break;
 80019a2:	e00d      	b.n	80019c0 <HAL_SPI_RxCpltCallback+0x1d4>
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 80019a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80019ac:	493a      	ldr	r1, [pc, #232]	; (8001a98 <HAL_SPI_RxCpltCallback+0x2ac>)
 80019ae:	483b      	ldr	r0, [pc, #236]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 80019b0:	f005 fa44 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_0);
 80019b4:	4938      	ldr	r1, [pc, #224]	; (8001a98 <HAL_SPI_RxCpltCallback+0x2ac>)
 80019b6:	4836      	ldr	r0, [pc, #216]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 80019b8:	f7ff fd8a 	bl	80014d0 <SPI_master2slave>
				break;
 80019bc:	e000      	b.n	80019c0 <HAL_SPI_RxCpltCallback+0x1d4>
				break;
 80019be:	bf00      	nop
			}
			break;
 80019c0:	e065      	b.n	8001a8e <HAL_SPI_RxCpltCallback+0x2a2>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi3_buf[0] & 0b00000111) {
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d83e      	bhi.n	8001a4c <HAL_SPI_RxCpltCallback+0x260>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <HAL_SPI_RxCpltCallback+0x1e8>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019ff 	.word	0x080019ff
 80019dc:	08001a19 	.word	0x08001a19
 80019e0:	08001a33 	.word	0x08001a33
			case 0b00000000: //Command for DIP switch ID = 00
				if(BOARD_NUMBER==1)
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_SPI_RxCpltCallback+0x2a8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d13c      	bne.n	8001a66 <HAL_SPI_RxCpltCallback+0x27a>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 80019ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80019f4:	492b      	ldr	r1, [pc, #172]	; (8001aa4 <HAL_SPI_RxCpltCallback+0x2b8>)
 80019f6:	4829      	ldr	r0, [pc, #164]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 80019f8:	f005 fa20 	bl	8006e3c <HAL_SPI_Receive>
				}
				break;
 80019fc:	e033      	b.n	8001a66 <HAL_SPI_RxCpltCallback+0x27a>
			case 0b00000001: //Command for DIP switch ID = 01
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a06:	4926      	ldr	r1, [pc, #152]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001a08:	4824      	ldr	r0, [pc, #144]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001a0a:	f005 fa17 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001a0e:	4924      	ldr	r1, [pc, #144]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001a10:	481f      	ldr	r0, [pc, #124]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001a12:	f7ff fd5d 	bl	80014d0 <SPI_master2slave>
				break;
 8001a16:	e027      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x27c>
			case 0b00000010: //Command for DIP switch ID = 10
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a20:	491f      	ldr	r1, [pc, #124]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001a22:	481e      	ldr	r0, [pc, #120]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001a24:	f005 fa0a 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001a28:	491d      	ldr	r1, [pc, #116]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001a2a:	4819      	ldr	r0, [pc, #100]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001a2c:	f7ff fd50 	bl	80014d0 <SPI_master2slave>
				break;
 8001a30:	e01a      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x27c>
			case 0b00000011: //Command for DIP switch ID = 11
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a3a:	4919      	ldr	r1, [pc, #100]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001a3c:	4817      	ldr	r0, [pc, #92]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001a3e:	f005 f9fd 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001a42:	4917      	ldr	r1, [pc, #92]	; (8001aa0 <HAL_SPI_RxCpltCallback+0x2b4>)
 8001a44:	4812      	ldr	r0, [pc, #72]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001a46:	f7ff fd43 	bl	80014d0 <SPI_master2slave>
				break;
 8001a4a:	e00d      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x27c>
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a50:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a54:	4913      	ldr	r1, [pc, #76]	; (8001aa4 <HAL_SPI_RxCpltCallback+0x2b8>)
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <HAL_SPI_RxCpltCallback+0x2b0>)
 8001a58:	f005 f9f0 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_1);
 8001a5c:	4911      	ldr	r1, [pc, #68]	; (8001aa4 <HAL_SPI_RxCpltCallback+0x2b8>)
 8001a5e:	480c      	ldr	r0, [pc, #48]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001a60:	f7ff fd36 	bl	80014d0 <SPI_master2slave>
				break;
 8001a64:	e000      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x27c>
				break;
 8001a66:	bf00      	nop
			}
			break;
 8001a68:	e011      	b.n	8001a8e <HAL_SPI_RxCpltCallback+0x2a2>
		case 0b00010000: //Write Registers data
			HAL_SPI_Transmit(&hspi1, &spi3_buf[0], 1, 1000);
 8001a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <HAL_SPI_RxCpltCallback+0x2a4>)
 8001a72:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <HAL_SPI_RxCpltCallback+0x2bc>)
 8001a74:	f005 f86d 	bl	8006b52 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi1, &spi3_buf[1], 1, 1000);
 8001a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	490b      	ldr	r1, [pc, #44]	; (8001aac <HAL_SPI_RxCpltCallback+0x2c0>)
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <HAL_SPI_RxCpltCallback+0x2bc>)
 8001a82:	f005 f866 	bl	8006b52 <HAL_SPI_Transmit>
			Write_Registers_data();
 8001a86:	f7ff fd51 	bl	800152c <Write_Registers_data>
			break;
 8001a8a:	e000      	b.n	8001a8e <HAL_SPI_RxCpltCallback+0x2a2>
		case 0b00011000: //Write partial content of frame buffer
			break;
 8001a8c:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 8001a8e:	e15c      	b.n	8001d4a <HAL_SPI_RxCpltCallback+0x55e>
 8001a90:	20004eb0 	.word	0x20004eb0
 8001a94:	20000000 	.word	0x20000000
 8001a98:	200067b4 	.word	0x200067b4
 8001a9c:	20004db8 	.word	0x20004db8
 8001aa0:	20004eb4 	.word	0x20004eb4
 8001aa4:	200080b4 	.word	0x200080b4
 8001aa8:	20004cf0 	.word	0x20004cf0
 8001aac:	20004eb1 	.word	0x20004eb1
	case 0b01000000:  //Master SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 8001ab0:	4bb7      	ldr	r3, [pc, #732]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ab8:	2b28      	cmp	r3, #40	; 0x28
 8001aba:	f200 8148 	bhi.w	8001d4e <HAL_SPI_RxCpltCallback+0x562>
 8001abe:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <HAL_SPI_RxCpltCallback+0x2d8>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001b69 	.word	0x08001b69
 8001ac8:	08001d4f 	.word	0x08001d4f
 8001acc:	08001d4f 	.word	0x08001d4f
 8001ad0:	08001d4f 	.word	0x08001d4f
 8001ad4:	08001d4f 	.word	0x08001d4f
 8001ad8:	08001d4f 	.word	0x08001d4f
 8001adc:	08001d4f 	.word	0x08001d4f
 8001ae0:	08001d4f 	.word	0x08001d4f
 8001ae4:	08001b83 	.word	0x08001b83
 8001ae8:	08001d4f 	.word	0x08001d4f
 8001aec:	08001d4f 	.word	0x08001d4f
 8001af0:	08001d4f 	.word	0x08001d4f
 8001af4:	08001d4f 	.word	0x08001d4f
 8001af8:	08001d4f 	.word	0x08001d4f
 8001afc:	08001d4f 	.word	0x08001d4f
 8001b00:	08001d4f 	.word	0x08001d4f
 8001b04:	08001b83 	.word	0x08001b83
 8001b08:	08001d4f 	.word	0x08001d4f
 8001b0c:	08001d4f 	.word	0x08001d4f
 8001b10:	08001d4f 	.word	0x08001d4f
 8001b14:	08001d4f 	.word	0x08001d4f
 8001b18:	08001d4f 	.word	0x08001d4f
 8001b1c:	08001d4f 	.word	0x08001d4f
 8001b20:	08001d4f 	.word	0x08001d4f
 8001b24:	08001b83 	.word	0x08001b83
 8001b28:	08001d4f 	.word	0x08001d4f
 8001b2c:	08001d4f 	.word	0x08001d4f
 8001b30:	08001d4f 	.word	0x08001d4f
 8001b34:	08001d4f 	.word	0x08001d4f
 8001b38:	08001d4f 	.word	0x08001d4f
 8001b3c:	08001d4f 	.word	0x08001d4f
 8001b40:	08001d4f 	.word	0x08001d4f
 8001b44:	08001b83 	.word	0x08001b83
 8001b48:	08001d4f 	.word	0x08001d4f
 8001b4c:	08001d4f 	.word	0x08001d4f
 8001b50:	08001d4f 	.word	0x08001d4f
 8001b54:	08001d4f 	.word	0x08001d4f
 8001b58:	08001d4f 	.word	0x08001d4f
 8001b5c:	08001d4f 	.word	0x08001d4f
 8001b60:	08001d4f 	.word	0x08001d4f
 8001b64:	08001b83 	.word	0x08001b83
		case 0b00000000: //Start SPI write data
			HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b70:	4988      	ldr	r1, [pc, #544]	; (8001d94 <HAL_SPI_RxCpltCallback+0x5a8>)
 8001b72:	4889      	ldr	r0, [pc, #548]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001b74:	f005 f962 	bl	8006e3c <HAL_SPI_Receive>
			SPI_master2slave(&spi3_buf, &frame_buf_0);
 8001b78:	4986      	ldr	r1, [pc, #536]	; (8001d94 <HAL_SPI_RxCpltCallback+0x5a8>)
 8001b7a:	4885      	ldr	r0, [pc, #532]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b7c:	f7ff fca8 	bl	80014d0 <SPI_master2slave>
			break;
 8001b80:	e000      	b.n	8001b84 <HAL_SPI_RxCpltCallback+0x398>
		case 0b00001000: //Continuous write SPI data
			break;
 8001b82:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001b84:	e0e3      	b.n	8001d4e <HAL_SPI_RxCpltCallback+0x562>
	case 0b10000000:  //I2C command
		switch (spi3_buf[0] & 0b00111000) {
 8001b86:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_SPI_RxCpltCallback+0x3ae>
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	f040 80dd 	bne.w	8001d52 <HAL_SPI_RxCpltCallback+0x566>
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001b98:	e000      	b.n	8001b9c <HAL_SPI_RxCpltCallback+0x3b0>
			break;
 8001b9a:	bf00      	nop
		}
		break;
 8001b9c:	e0d9      	b.n	8001d52 <HAL_SPI_RxCpltCallback+0x566>
	case 0b11000000:  //SPI flash function & Slave SPI
		switch (spi3_buf[0] & 0b00111000) {
 8001b9e:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	f000 80cd 	beq.w	8001d46 <HAL_SPI_RxCpltCallback+0x55a>
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	f300 80d2 	bgt.w	8001d56 <HAL_SPI_RxCpltCallback+0x56a>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_SPI_RxCpltCallback+0x3d0>
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d063      	beq.n	8001c82 <HAL_SPI_RxCpltCallback+0x496>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001bba:	e0cc      	b.n	8001d56 <HAL_SPI_RxCpltCallback+0x56a>
			switch (spi3_buf[0] & 0b00000111) {
 8001bbc:	4b74      	ldr	r3, [pc, #464]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d846      	bhi.n	8001c56 <HAL_SPI_RxCpltCallback+0x46a>
 8001bc8:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <HAL_SPI_RxCpltCallback+0x3e4>)
 8001bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bce:	bf00      	nop
 8001bd0:	08001be1 	.word	0x08001be1
 8001bd4:	08001c09 	.word	0x08001c09
 8001bd8:	08001c23 	.word	0x08001c23
 8001bdc:	08001c3d 	.word	0x08001c3d
				if(BOARD_NUMBER==1)
 8001be0:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <HAL_SPI_RxCpltCallback+0x5b0>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d14a      	bne.n	8001c7e <HAL_SPI_RxCpltCallback+0x492>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bec:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001bf0:	496b      	ldr	r1, [pc, #428]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001bf2:	4869      	ldr	r0, [pc, #420]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001bf4:	f005 f922 	bl	8006e3c <HAL_SPI_Receive>
					erase_flash_sector(0);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f000 fa13 	bl	8002024 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, 0);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4867      	ldr	r0, [pc, #412]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c02:	f000 f93d 	bl	8001e80 <write_flash_page>
				break;
 8001c06:	e03a      	b.n	8001c7e <HAL_SPI_RxCpltCallback+0x492>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c10:	4963      	ldr	r1, [pc, #396]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c12:	4861      	ldr	r0, [pc, #388]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001c14:	f005 f912 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001c18:	4961      	ldr	r1, [pc, #388]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c1a:	485d      	ldr	r0, [pc, #372]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c1c:	f7ff fc58 	bl	80014d0 <SPI_master2slave>
				break;
 8001c20:	e02e      	b.n	8001c80 <HAL_SPI_RxCpltCallback+0x494>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c2a:	495d      	ldr	r1, [pc, #372]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c2c:	485a      	ldr	r0, [pc, #360]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001c2e:	f005 f905 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001c32:	495b      	ldr	r1, [pc, #364]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c34:	4856      	ldr	r0, [pc, #344]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c36:	f7ff fc4b 	bl	80014d0 <SPI_master2slave>
				break;
 8001c3a:	e021      	b.n	8001c80 <HAL_SPI_RxCpltCallback+0x494>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c40:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c44:	4956      	ldr	r1, [pc, #344]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c46:	4854      	ldr	r0, [pc, #336]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001c48:	f005 f8f8 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001c4c:	4954      	ldr	r1, [pc, #336]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c4e:	4850      	ldr	r0, [pc, #320]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c50:	f7ff fc3e 	bl	80014d0 <SPI_master2slave>
				break;
 8001c54:	e014      	b.n	8001c80 <HAL_SPI_RxCpltCallback+0x494>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c5e:	4950      	ldr	r1, [pc, #320]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c60:	484d      	ldr	r0, [pc, #308]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001c62:	f005 f8eb 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001c66:	494e      	ldr	r1, [pc, #312]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c68:	4849      	ldr	r0, [pc, #292]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c6a:	f7ff fc31 	bl	80014d0 <SPI_master2slave>
				erase_flash_sector(0);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 f9d8 	bl	8002024 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, 0);
 8001c74:	2100      	movs	r1, #0
 8001c76:	484a      	ldr	r0, [pc, #296]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001c78:	f000 f902 	bl	8001e80 <write_flash_page>
				break;
 8001c7c:	e000      	b.n	8001c80 <HAL_SPI_RxCpltCallback+0x494>
				break;
 8001c7e:	bf00      	nop
			break;
 8001c80:	e062      	b.n	8001d48 <HAL_SPI_RxCpltCallback+0x55c>
			switch (spi3_buf[0] & 0b00000111) {
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d845      	bhi.n	8001d1a <HAL_SPI_RxCpltCallback+0x52e>
 8001c8e:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <HAL_SPI_RxCpltCallback+0x4a8>)
 8001c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c94:	08001ca5 	.word	0x08001ca5
 8001c98:	08001ccd 	.word	0x08001ccd
 8001c9c:	08001ce7 	.word	0x08001ce7
 8001ca0:	08001d01 	.word	0x08001d01
				if(BOARD_NUMBER==1)
 8001ca4:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_SPI_RxCpltCallback+0x5b0>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d14a      	bne.n	8001d42 <HAL_SPI_RxCpltCallback+0x556>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001cb4:	493a      	ldr	r1, [pc, #232]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001cb6:	4838      	ldr	r0, [pc, #224]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001cb8:	f005 f8c0 	bl	8006e3c <HAL_SPI_Receive>
					erase_flash_sector(1);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f000 f9b1 	bl	8002024 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, 1);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4836      	ldr	r0, [pc, #216]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001cc6:	f000 f8db 	bl	8001e80 <write_flash_page>
				break;
 8001cca:	e03a      	b.n	8001d42 <HAL_SPI_RxCpltCallback+0x556>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001cd4:	4932      	ldr	r1, [pc, #200]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001cd6:	4830      	ldr	r0, [pc, #192]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001cd8:	f005 f8b0 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001cdc:	4930      	ldr	r1, [pc, #192]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001cde:	482c      	ldr	r0, [pc, #176]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001ce0:	f7ff fbf6 	bl	80014d0 <SPI_master2slave>
				break;
 8001ce4:	e02e      	b.n	8001d44 <HAL_SPI_RxCpltCallback+0x558>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001cee:	492c      	ldr	r1, [pc, #176]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001cf0:	4829      	ldr	r0, [pc, #164]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001cf2:	f005 f8a3 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001cf6:	492a      	ldr	r1, [pc, #168]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001cf8:	4825      	ldr	r0, [pc, #148]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001cfa:	f7ff fbe9 	bl	80014d0 <SPI_master2slave>
				break;
 8001cfe:	e021      	b.n	8001d44 <HAL_SPI_RxCpltCallback+0x558>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d04:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d08:	4925      	ldr	r1, [pc, #148]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001d0a:	4823      	ldr	r0, [pc, #140]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001d0c:	f005 f896 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001d10:	4923      	ldr	r1, [pc, #140]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001d12:	481f      	ldr	r0, [pc, #124]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d14:	f7ff fbdc 	bl	80014d0 <SPI_master2slave>
				break;
 8001d18:	e014      	b.n	8001d44 <HAL_SPI_RxCpltCallback+0x558>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d22:	491f      	ldr	r1, [pc, #124]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001d24:	481c      	ldr	r0, [pc, #112]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001d26:	f005 f889 	bl	8006e3c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001d2a:	491d      	ldr	r1, [pc, #116]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001d2c:	4818      	ldr	r0, [pc, #96]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d2e:	f7ff fbcf 	bl	80014d0 <SPI_master2slave>
				erase_flash_sector(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f000 f976 	bl	8002024 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, 1);
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4819      	ldr	r0, [pc, #100]	; (8001da0 <HAL_SPI_RxCpltCallback+0x5b4>)
 8001d3c:	f000 f8a0 	bl	8001e80 <write_flash_page>
				break;
 8001d40:	e000      	b.n	8001d44 <HAL_SPI_RxCpltCallback+0x558>
				break;
 8001d42:	bf00      	nop
			break;
 8001d44:	e000      	b.n	8001d48 <HAL_SPI_RxCpltCallback+0x55c>
			break;
 8001d46:	bf00      	nop
		break;
 8001d48:	e005      	b.n	8001d56 <HAL_SPI_RxCpltCallback+0x56a>
		break;
 8001d4a:	bf00      	nop
 8001d4c:	e004      	b.n	8001d58 <HAL_SPI_RxCpltCallback+0x56c>
		break;
 8001d4e:	bf00      	nop
 8001d50:	e002      	b.n	8001d58 <HAL_SPI_RxCpltCallback+0x56c>
		break;
 8001d52:	bf00      	nop
 8001d54:	e000      	b.n	8001d58 <HAL_SPI_RxCpltCallback+0x56c>
		break;
 8001d56:	bf00      	nop
	}
	// USB command: ID
	switch (spi3_buf[0] & 0b00000111) {
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d80b      	bhi.n	8001d7c <HAL_SPI_RxCpltCallback+0x590>
 8001d64:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <HAL_SPI_RxCpltCallback+0x580>)
 8001d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6a:	bf00      	nop
 8001d6c:	08001d7d 	.word	0x08001d7d
 8001d70:	08001d7d 	.word	0x08001d7d
 8001d74:	08001d7d 	.word	0x08001d7d
 8001d78:	08001d7d 	.word	0x08001d7d
	case 0b00000010:  //Command for DIP switch ID = 10
		break;
	case 0b00000011:  //Command for DIP switch ID = 11
		break;
	default:  //Broadcast to every board
		break;
 8001d7c:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <HAL_SPI_RxCpltCallback+0x5a4>)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_SPI_RxCpltCallback+0x5ac>)
 8001d84:	f005 fbb4 	bl	80074f0 <HAL_SPI_Receive_IT>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20004eb0 	.word	0x20004eb0
 8001d94:	200067b4 	.word	0x200067b4
 8001d98:	20004db8 	.word	0x20004db8
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20004eb4 	.word	0x20004eb4

08001da4 <FLASH_WriteByte>:

void FLASH_WriteByte(uint8_t data) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--) {
 8001dae:	2307      	movs	r3, #7
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e022      	b.n	8001dfa <FLASH_WriteByte+0x56>
        HAL_GPIO_WritePin(FLASH_MOSI_PORT, FLASH_MOSI_PIN, (data >> i) & 1);
 8001db4:	79fa      	ldrb	r2, [r7, #7]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	fa42 f303 	asr.w	r3, r2, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dca:	4810      	ldr	r0, [pc, #64]	; (8001e0c <FLASH_WriteByte+0x68>)
 8001dcc:	f002 f81c 	bl	8003e08 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <FLASH_WriteByte+0x68>)
 8001dd8:	f002 f816 	bl	8003e08 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7ff fc76 	bl	80016ce <delay_100ns>
        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de8:	4808      	ldr	r0, [pc, #32]	; (8001e0c <FLASH_WriteByte+0x68>)
 8001dea:	f002 f80d 	bl	8003e08 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f7ff fc6d 	bl	80016ce <delay_100ns>
    for (int i = 7; i >= 0; i--) {
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dad9      	bge.n	8001db4 <FLASH_WriteByte+0x10>
    }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	48001400 	.word	0x48001400

08001e10 <FLASH_ReadByte>:

uint8_t FLASH_ReadByte(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	71fb      	strb	r3, [r7, #7]

    for (int i = 7; i >= 0; i--) {
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	e024      	b.n	8001e6a <FLASH_ReadByte+0x5a>
        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e26:	4815      	ldr	r0, [pc, #84]	; (8001e7c <FLASH_ReadByte+0x6c>)
 8001e28:	f001 ffee 	bl	8003e08 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff fc4e 	bl	80016ce <delay_100ns>
        data |= (HAL_GPIO_ReadPin(FLASH_MISO_PORT, FLASH_MISO_PIN) << i);
 8001e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e36:	4811      	ldr	r0, [pc, #68]	; (8001e7c <FLASH_ReadByte+0x6c>)
 8001e38:	f001 ffce 	bl	8003dd8 <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	b25a      	sxtb	r2, r3
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b25b      	sxtb	r3, r3
 8001e50:	71fb      	strb	r3, [r7, #7]
        HAL_GPIO_WritePin(FLASH_CLK_PORT,FLASH_CLK_PIN, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e58:	4808      	ldr	r0, [pc, #32]	; (8001e7c <FLASH_ReadByte+0x6c>)
 8001e5a:	f001 ffd5 	bl	8003e08 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f7ff fc35 	bl	80016ce <delay_100ns>
    for (int i = 7; i >= 0; i--) {
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	dad7      	bge.n	8001e20 <FLASH_ReadByte+0x10>
    }

    return data;
 8001e70:	79fb      	ldrb	r3, [r7, #7]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	48001400 	.word	0x48001400

08001e80 <write_flash_page>:

void write_flash_page(uint8_t *data, uint8_t image_id)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id/8;
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	08db      	lsrs	r3, r3, #3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id%8;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]
	int count=0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015b      	lsls	r3, r3, #5
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	e057      	b.n	8001f58 <write_flash_page+0xd8>
	{
		// enable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eae:	4830      	ldr	r0, [pc, #192]	; (8001f70 <write_flash_page+0xf0>)
 8001eb0:	f001 ffaa 	bl	8003e08 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x06);
 8001eb4:	2006      	movs	r0, #6
 8001eb6:	f7ff ff75 	bl	8001da4 <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec0:	482b      	ldr	r0, [pc, #172]	; (8001f70 <write_flash_page+0xf0>)
 8001ec2:	f001 ffa1 	bl	8003e08 <HAL_GPIO_WritePin>

		// write data to flash page
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ecc:	4828      	ldr	r0, [pc, #160]	; (8001f70 <write_flash_page+0xf0>)
 8001ece:	f001 ff9b 	bl	8003e08 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x02);
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f7ff ff66 	bl	8001da4 <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff61 	bl	8001da4 <FLASH_WriteByte>
		FLASH_WriteByte(i);
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff5c 	bl	8001da4 <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff ff59 	bl	8001da4 <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e00d      	b.n	8001f14 <write_flash_page+0x94>
		{
			FLASH_WriteByte(data[count*256+j]);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	461a      	mov	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	4413      	add	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff4b 	bl	8001da4 <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d9ee      	bls.n	8001ef8 <write_flash_page+0x78>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4813      	ldr	r0, [pc, #76]	; (8001f70 <write_flash_page+0xf0>)
 8001f22:	f001 ff71 	bl	8003e08 <HAL_GPIO_WritePin>

		// disable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f2c:	4810      	ldr	r0, [pc, #64]	; (8001f70 <write_flash_page+0xf0>)
 8001f2e:	f001 ff6b 	bl	8003e08 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x04);
 8001f32:	2004      	movs	r0, #4
 8001f34:	f7ff ff36 	bl	8001da4 <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <write_flash_page+0xf0>)
 8001f40:	f001 ff62 	bl	8003e08 <HAL_GPIO_WritePin>
		delay_us(1000);
 8001f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f48:	f7ff fba6 	bl	8001698 <delay_us>
		count++;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	3301      	adds	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015b      	lsls	r3, r3, #5
 8001f5c:	3319      	adds	r3, #25
 8001f5e:	461a      	mov	r2, r3
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d3a0      	bcc.n	8001ea8 <write_flash_page+0x28>
	}
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	48000800 	.word	0x48000800

08001f74 <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id/8;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	08db      	lsrs	r3, r3, #3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id%8;
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]
	int count=0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015b      	lsls	r3, r3, #5
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	e035      	b.n	8002008 <read_flash_page+0x94>
	{
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa2:	481f      	ldr	r0, [pc, #124]	; (8002020 <read_flash_page+0xac>)
 8001fa4:	f001 ff30 	bl	8003e08 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x03);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f7ff fefb 	bl	8001da4 <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fef6 	bl	8001da4 <FLASH_WriteByte>
		FLASH_WriteByte(i);
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fef1 	bl	8001da4 <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff feee 	bl	8001da4 <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e00d      	b.n	8001fea <read_flash_page+0x76>
		{
			data[count*256+j] = FLASH_ReadByte();
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	18d4      	adds	r4, r2, r3
 8001fdc:	f7ff ff18 	bl	8001e10 <FLASH_ReadByte>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	7023      	strb	r3, [r4, #0]
		for(uint32_t j=0; j<256; j++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2bff      	cmp	r3, #255	; 0xff
 8001fee:	d9ee      	bls.n	8001fce <read_flash_page+0x5a>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff6:	480a      	ldr	r0, [pc, #40]	; (8002020 <read_flash_page+0xac>)
 8001ff8:	f001 ff06 	bl	8003e08 <HAL_GPIO_WritePin>
		count++;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3301      	adds	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	3301      	adds	r3, #1
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015b      	lsls	r3, r3, #5
 800200c:	3319      	adds	r3, #25
 800200e:	461a      	mov	r2, r3
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	4293      	cmp	r3, r2
 8002014:	d3c2      	bcc.n	8001f9c <read_flash_page+0x28>
	}
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	3724      	adds	r7, #36	; 0x24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd90      	pop	{r4, r7, pc}
 8002020:	48000800 	.word	0x48000800

08002024 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
	int image_id_H = image_id/8;
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	60fb      	str	r3, [r7, #12]
	int image_id_L = image_id%8;
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	60bb      	str	r3, [r7, #8]
	reset_flash_software();
 800203e:	f000 f889 	bl	8002154 <reset_flash_software>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002048:	4841      	ldr	r0, [pc, #260]	; (8002150 <erase_flash_sector+0x12c>)
 800204a:	f001 fedd 	bl	8003e08 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 800204e:	2006      	movs	r0, #6
 8002050:	f7ff fea8 	bl	8001da4 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002054:	2201      	movs	r2, #1
 8002056:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800205a:	483d      	ldr	r0, [pc, #244]	; (8002150 <erase_flash_sector+0x12c>)
 800205c:	f001 fed4 	bl	8003e08 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002066:	483a      	ldr	r0, [pc, #232]	; (8002150 <erase_flash_sector+0x12c>)
 8002068:	f001 fece 	bl	8003e08 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 800206c:	2020      	movs	r0, #32
 800206e:	f7ff fe99 	bl	8001da4 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fe94 	bl	8001da4 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L*0x20);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	015b      	lsls	r3, r3, #5
 8002082:	b2db      	uxtb	r3, r3
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe8d 	bl	8001da4 <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 800208a:	2000      	movs	r0, #0
 800208c:	f7ff fe8a 	bl	8001da4 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002096:	482e      	ldr	r0, [pc, #184]	; (8002150 <erase_flash_sector+0x12c>)
 8002098:	f001 feb6 	bl	8003e08 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a2:	482b      	ldr	r0, [pc, #172]	; (8002150 <erase_flash_sector+0x12c>)
 80020a4:	f001 feb0 	bl	8003e08 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 80020a8:	2004      	movs	r0, #4
 80020aa:	f7ff fe7b 	bl	8001da4 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b4:	4826      	ldr	r0, [pc, #152]	; (8002150 <erase_flash_sector+0x12c>)
 80020b6:	f001 fea7 	bl	8003e08 <HAL_GPIO_WritePin>

	delay_us(30000);
 80020ba:	f247 5030 	movw	r0, #30000	; 0x7530
 80020be:	f7ff faeb 	bl	8001698 <delay_us>
	////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020c8:	4821      	ldr	r0, [pc, #132]	; (8002150 <erase_flash_sector+0x12c>)
 80020ca:	f001 fe9d 	bl	8003e08 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 80020ce:	2006      	movs	r0, #6
 80020d0:	f7ff fe68 	bl	8001da4 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020da:	481d      	ldr	r0, [pc, #116]	; (8002150 <erase_flash_sector+0x12c>)
 80020dc:	f001 fe94 	bl	8003e08 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e6:	481a      	ldr	r0, [pc, #104]	; (8002150 <erase_flash_sector+0x12c>)
 80020e8:	f001 fe8e 	bl	8003e08 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 80020ec:	2020      	movs	r0, #32
 80020ee:	f7ff fe59 	bl	8001da4 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fe54 	bl	8001da4 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L*0x20+0x10);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	015b      	lsls	r3, r3, #5
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3310      	adds	r3, #16
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fe4b 	bl	8001da4 <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff fe48 	bl	8001da4 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002114:	2201      	movs	r2, #1
 8002116:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <erase_flash_sector+0x12c>)
 800211c:	f001 fe74 	bl	8003e08 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002120:	2200      	movs	r2, #0
 8002122:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002126:	480a      	ldr	r0, [pc, #40]	; (8002150 <erase_flash_sector+0x12c>)
 8002128:	f001 fe6e 	bl	8003e08 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 800212c:	2004      	movs	r0, #4
 800212e:	f7ff fe39 	bl	8001da4 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <erase_flash_sector+0x12c>)
 800213a:	f001 fe65 	bl	8003e08 <HAL_GPIO_WritePin>

	delay_us(30000);
 800213e:	f247 5030 	movw	r0, #30000	; 0x7530
 8002142:	f7ff faa9 	bl	8001698 <delay_us>
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	48000800 	.word	0x48000800

08002154 <reset_flash_software>:

void reset_flash_software()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800215e:	4813      	ldr	r0, [pc, #76]	; (80021ac <reset_flash_software+0x58>)
 8002160:	f001 fe52 	bl	8003e08 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x66);
 8002164:	2066      	movs	r0, #102	; 0x66
 8002166:	f7ff fe1d 	bl	8001da4 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <reset_flash_software+0x58>)
 8002172:	f001 fe49 	bl	8003e08 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff faa9 	bl	80016ce <delay_100ns>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002182:	480a      	ldr	r0, [pc, #40]	; (80021ac <reset_flash_software+0x58>)
 8002184:	f001 fe40 	bl	8003e08 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x99);
 8002188:	2099      	movs	r0, #153	; 0x99
 800218a:	f7ff fe0b 	bl	8001da4 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <reset_flash_software+0x58>)
 8002196:	f001 fe37 	bl	8003e08 <HAL_GPIO_WritePin>
	delay_100ns(1);
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff fa97 	bl	80016ce <delay_100ns>

	delay_us(1000);
 80021a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021a4:	f7ff fa78 	bl	8001698 <delay_us>
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	48000800 	.word	0x48000800

080021b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
}
 80021b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021b8:	e7fe      	b.n	80021b8 <Error_Handler+0x8>
	...

080021bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_MspInit+0x44>)
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_MspInit+0x44>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6613      	str	r3, [r2, #96]	; 0x60
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_MspInit+0x44>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_MspInit+0x44>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <HAL_MspInit+0x44>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_MspInit+0x44>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000

08002204 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0aa      	sub	sp, #168	; 0xa8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	229c      	movs	r2, #156	; 0x9c
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f006 fe63 	bl	8008ee0 <memset>
  if(hdsi->Instance==DSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_DSI_MspInit+0x60>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d11b      	bne.n	800225c <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8002224:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002228:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	4618      	mov	r0, r3
 8002236:	f003 fe71 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8002240:	f7ff ffb6 	bl	80021b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_DSI_MspInit+0x64>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_DSI_MspInit+0x64>)
 800224a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800224e:	6613      	str	r3, [r2, #96]	; 0x60
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_DSI_MspInit+0x64>)
 8002252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	37a8      	adds	r7, #168	; 0xa8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40016c00 	.word	0x40016c00
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0b2      	sub	sp, #200	; 0xc8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	229c      	movs	r2, #156	; 0x9c
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f006 fe27 	bl	8008ee0 <memset>
  if(hi2c->Instance==I2C1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a42      	ldr	r2, [pc, #264]	; (80023a0 <HAL_I2C_MspInit+0x134>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d13c      	bne.n	8002316 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a4:	f107 0318 	add.w	r3, r7, #24
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fe37 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80022b4:	f7ff ff7c 	bl	80021b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	4a39      	ldr	r2, [pc, #228]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c4:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 80022c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80022d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d8:	2312      	movs	r3, #18
 80022da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ea:	2304      	movs	r3, #4
 80022ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022f4:	4619      	mov	r1, r3
 80022f6:	482c      	ldr	r0, [pc, #176]	; (80023a8 <HAL_I2C_MspInit+0x13c>)
 80022f8:	f001 fbdc 	bl	8003ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 8002302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002306:	6593      	str	r3, [r2, #88]	; 0x58
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002314:	e040      	b.n	8002398 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_I2C_MspInit+0x140>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d13b      	bne.n	8002398 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002324:	2300      	movs	r3, #0
 8002326:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002328:	f107 0318 	add.w	r3, r7, #24
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fdf5 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002338:	f7ff ff3a 	bl	80021b0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 800233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002354:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800235c:	2312      	movs	r3, #18
 800235e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800236e:	2304      	movs	r3, #4
 8002370:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002378:	4619      	mov	r1, r3
 800237a:	480b      	ldr	r0, [pc, #44]	; (80023a8 <HAL_I2C_MspInit+0x13c>)
 800237c:	f001 fb9a 	bl	8003ab4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 8002386:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800238a:	6593      	str	r3, [r2, #88]	; 0x58
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_I2C_MspInit+0x138>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
}
 8002398:	bf00      	nop
 800239a:	37c8      	adds	r7, #200	; 0xc8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40005400 	.word	0x40005400
 80023a4:	40021000 	.word	0x40021000
 80023a8:	48000400 	.word	0x48000400
 80023ac:	40005800 	.word	0x40005800

080023b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0aa      	sub	sp, #168	; 0xa8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	229c      	movs	r2, #156	; 0x9c
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f006 fd8d 	bl	8008ee0 <memset>
  if(hltdc->Instance==LTDC)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_LTDC_MspInit+0x80>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d12b      	bne.n	8002428 <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 80023d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 80023de:	2303      	movs	r3, #3
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 80023e6:	2308      	movs	r3, #8
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 80023ea:	2302      	movs	r3, #2
 80023ec:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 80023ee:	2302      	movs	r3, #2
 80023f0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 80023f2:	2302      	movs	r3, #2
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 80023f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023fa:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fd8b 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 800240c:	f7ff fed0 	bl	80021b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_LTDC_MspInit+0x84>)
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_LTDC_MspInit+0x84>)
 8002416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800241a:	6613      	str	r3, [r2, #96]	; 0x60
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_LTDC_MspInit+0x84>)
 800241e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002428:	bf00      	nop
 800242a:	37a8      	adds	r7, #168	; 0xa8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40016800 	.word	0x40016800
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0b2      	sub	sp, #200	; 0xc8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002450:	f107 0318 	add.w	r3, r7, #24
 8002454:	229c      	movs	r2, #156	; 0x9c
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f006 fd41 	bl	8008ee0 <memset>
  if(hospi->Instance==OCTOSPI2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a38      	ldr	r2, [pc, #224]	; (8002544 <HAL_OSPI_MspInit+0x10c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d169      	bne.n	800253c <HAL_OSPI_MspInit+0x104>

  /* USER CODE END OCTOSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800246c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002474:	f107 0318 	add.w	r3, r7, #24
 8002478:	4618      	mov	r0, r3
 800247a:	f003 fd4f 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002484:	f7ff fe94 	bl	80021b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	4a2e      	ldr	r2, [pc, #184]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 800248e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002494:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 80024a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a4:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 80024a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024aa:	6513      	str	r3, [r2, #80]	; 0x50
 80024ac:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 80024ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	4a22      	ldr	r2, [pc, #136]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 80024c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 80024d6:	f043 0320 	orr.w	r3, r3, #32
 80024da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_OSPI_MspInit+0x110>)
 80024de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> OCTOSPIM_P2_NCS
    PF1     ------> OCTOSPIM_P2_IO1
    PF0     ------> OCTOSPIM_P2_IO0
    PF4     ------> OCTOSPIM_P2_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024e8:	2308      	movs	r3, #8
 80024ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 8002500:	230a      	movs	r3, #10
 8002502:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002506:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800250a:	4619      	mov	r1, r3
 800250c:	480f      	ldr	r0, [pc, #60]	; (800254c <HAL_OSPI_MspInit+0x114>)
 800250e:	f001 fad1 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4;
 8002512:	2313      	movs	r3, #19
 8002514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800252a:	2305      	movs	r3, #5
 800252c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002530:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002534:	4619      	mov	r1, r3
 8002536:	4806      	ldr	r0, [pc, #24]	; (8002550 <HAL_OSPI_MspInit+0x118>)
 8002538:	f001 fabc 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 800253c:	bf00      	nop
 800253e:	37c8      	adds	r7, #200	; 0xc8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	a0001400 	.word	0xa0001400
 8002548:	40021000 	.word	0x40021000
 800254c:	48000c00 	.word	0x48000c00
 8002550:	48001400 	.word	0x48001400

08002554 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b092      	sub	sp, #72	; 0x48
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a84      	ldr	r2, [pc, #528]	; (8002784 <HAL_SPI_MspInit+0x230>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d146      	bne.n	8002604 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002576:	4b84      	ldr	r3, [pc, #528]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257a:	4a83      	ldr	r2, [pc, #524]	; (8002788 <HAL_SPI_MspInit+0x234>)
 800257c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002580:	6613      	str	r3, [r2, #96]	; 0x60
 8002582:	4b81      	ldr	r3, [pc, #516]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	4b7e      	ldr	r3, [pc, #504]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4a7d      	ldr	r2, [pc, #500]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259a:	4b7b      	ldr	r3, [pc, #492]	; (8002788 <HAL_SPI_MspInit+0x234>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	4b78      	ldr	r3, [pc, #480]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	4a77      	ldr	r2, [pc, #476]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b2:	4b75      	ldr	r3, [pc, #468]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 80025be:	2338      	movs	r3, #56	; 0x38
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ce:	2305      	movs	r3, #5
 80025d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025d6:	4619      	mov	r1, r3
 80025d8:	486c      	ldr	r0, [pc, #432]	; (800278c <HAL_SPI_MspInit+0x238>)
 80025da:	f001 fa6b 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f0:	2305      	movs	r3, #5
 80025f2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025f8:	4619      	mov	r1, r3
 80025fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fe:	f001 fa59 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002602:	e0ba      	b.n	800277a <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a61      	ldr	r2, [pc, #388]	; (8002790 <HAL_SPI_MspInit+0x23c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d144      	bne.n	8002698 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800260e:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	4a5d      	ldr	r2, [pc, #372]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
 800261a:	4b5b      	ldr	r3, [pc, #364]	; (8002788 <HAL_SPI_MspInit+0x234>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002626:	4b58      	ldr	r3, [pc, #352]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	4a57      	ldr	r2, [pc, #348]	; (8002788 <HAL_SPI_MspInit+0x234>)
 800262c:	f043 0308 	orr.w	r3, r3, #8
 8002630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002632:	4b55      	ldr	r3, [pc, #340]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800263e:	4b52      	ldr	r3, [pc, #328]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	4a51      	ldr	r2, [pc, #324]	; (8002788 <HAL_SPI_MspInit+0x234>)
 8002644:	f043 0304 	orr.w	r3, r3, #4
 8002648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264a:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <HAL_SPI_MspInit+0x234>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8002656:	2312      	movs	r3, #18
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002666:	2305      	movs	r3, #5
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800266a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800266e:	4619      	mov	r1, r3
 8002670:	4848      	ldr	r0, [pc, #288]	; (8002794 <HAL_SPI_MspInit+0x240>)
 8002672:	f001 fa1f 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002676:	2304      	movs	r3, #4
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002686:	2305      	movs	r3, #5
 8002688:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800268e:	4619      	mov	r1, r3
 8002690:	4841      	ldr	r0, [pc, #260]	; (8002798 <HAL_SPI_MspInit+0x244>)
 8002692:	f001 fa0f 	bl	8003ab4 <HAL_GPIO_Init>
}
 8002696:	e070      	b.n	800277a <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI3)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3f      	ldr	r2, [pc, #252]	; (800279c <HAL_SPI_MspInit+0x248>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d16b      	bne.n	800277a <HAL_SPI_MspInit+0x226>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	4a38      	ldr	r2, [pc, #224]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ac:	6593      	str	r3, [r2, #88]	; 0x58
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	4a32      	ldr	r2, [pc, #200]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	4a2c      	ldr	r2, [pc, #176]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026ea:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	4a26      	ldr	r2, [pc, #152]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_SPI_MspInit+0x234>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002702:	f002 fd23 	bl	800514c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002706:	2340      	movs	r3, #64	; 0x40
 8002708:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002716:	2305      	movs	r3, #5
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800271a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800271e:	4619      	mov	r1, r3
 8002720:	481c      	ldr	r0, [pc, #112]	; (8002794 <HAL_SPI_MspInit+0x240>)
 8002722:	f001 f9c7 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002738:	2306      	movs	r3, #6
 800273a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002740:	4619      	mov	r1, r3
 8002742:	4815      	ldr	r0, [pc, #84]	; (8002798 <HAL_SPI_MspInit+0x244>)
 8002744:	f001 f9b6 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800274c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800275a:	2306      	movs	r3, #6
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800275e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002762:	4619      	mov	r1, r3
 8002764:	480e      	ldr	r0, [pc, #56]	; (80027a0 <HAL_SPI_MspInit+0x24c>)
 8002766:	f001 f9a5 	bl	8003ab4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	2033      	movs	r0, #51	; 0x33
 8002770:	f000 fa67 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002774:	2033      	movs	r0, #51	; 0x33
 8002776:	f000 fa80 	bl	8002c7a <HAL_NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3748      	adds	r7, #72	; 0x48
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40013000 	.word	0x40013000
 8002788:	40021000 	.word	0x40021000
 800278c:	48000400 	.word	0x48000400
 8002790:	40003800 	.word	0x40003800
 8002794:	48000c00 	.word	0x48000c00
 8002798:	48000800 	.word	0x48000800
 800279c:	40003c00 	.word	0x40003c00
 80027a0:	48001800 	.word	0x48001800

080027a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0b0      	sub	sp, #192	; 0xc0
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	229c      	movs	r2, #156	; 0x9c
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f006 fb8b 	bl	8008ee0 <memset>
  if(huart->Instance==UART4)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a21      	ldr	r2, [pc, #132]	; (8002854 <HAL_UART_MspInit+0xb0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d13b      	bne.n	800284c <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027d4:	2308      	movs	r3, #8
 80027d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80027d8:	2300      	movs	r3, #0
 80027da:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 fb9b 	bl	8005f1c <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027ec:	f7ff fce0 	bl	80021b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_UART_MspInit+0xb4>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_UART_MspInit+0xb4>)
 80027f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027fa:	6593      	str	r3, [r2, #88]	; 0x58
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_UART_MspInit+0xb4>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_UART_MspInit+0xb4>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	4a12      	ldr	r2, [pc, #72]	; (8002858 <HAL_UART_MspInit+0xb4>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002814:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_UART_MspInit+0xb4>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002820:	2303      	movs	r3, #3
 8002822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002838:	2308      	movs	r3, #8
 800283a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002842:	4619      	mov	r1, r3
 8002844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002848:	f001 f934 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800284c:	bf00      	nop
 800284e:	37c0      	adds	r7, #192	; 0xc0
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40004c00 	.word	0x40004c00
 8002858:	40021000 	.word	0x40021000

0800285c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002860:	e7fe      	b.n	8002860 <NMI_Handler+0x4>

08002862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002866:	e7fe      	b.n	8002866 <HardFault_Handler+0x4>

08002868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800286c:	e7fe      	b.n	800286c <MemManage_Handler+0x4>

0800286e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <BusFault_Handler+0x4>

08002874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <UsageFault_Handler+0x4>

0800287a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a8:	f000 f8ac 	bl	8002a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80028b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028b8:	f001 fabe 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}

080028c0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <SPI3_IRQHandler+0x10>)
 80028c6:	f004 ff6f 	bl	80077a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20004db8 	.word	0x20004db8

080028d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <SystemInit+0x20>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <SystemInit+0x20>)
 80028e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002930 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028fc:	f7ff ffea 	bl	80028d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <LoopForever+0x6>)
  ldr r1, =_edata
 8002902:	490d      	ldr	r1, [pc, #52]	; (8002938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <LoopForever+0xe>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002908:	e002      	b.n	8002910 <LoopCopyDataInit>

0800290a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800290c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290e:	3304      	adds	r3, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002914:	d3f9      	bcc.n	800290a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002918:	4c0a      	ldr	r4, [pc, #40]	; (8002944 <LoopForever+0x16>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800291c:	e001      	b.n	8002922 <LoopFillZerobss>

0800291e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002920:	3204      	adds	r2, #4

08002922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002924:	d3fb      	bcc.n	800291e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002926:	f006 fae3 	bl	8008ef0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800292a:	f7fd fde5 	bl	80004f8 <main>

0800292e <LoopForever>:

LoopForever:
    b LoopForever
 800292e:	e7fe      	b.n	800292e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002930:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002938:	20004b18 	.word	0x20004b18
  ldr r2, =_sidata
 800293c:	08009064 	.word	0x08009064
  ldr r2, =_sbss
 8002940:	20004b18 	.word	0x20004b18
  ldr r4, =_ebss
 8002944:	2000b2c0 	.word	0x2000b2c0

08002948 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002948:	e7fe      	b.n	8002948 <ADC1_IRQHandler>
	...

0800294c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_Init+0x3c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_Init+0x3c>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002962:	2003      	movs	r0, #3
 8002964:	f000 f962 	bl	8002c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002968:	2002      	movs	r0, #2
 800296a:	f000 f80f 	bl	800298c <HAL_InitTick>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	71fb      	strb	r3, [r7, #7]
 8002978:	e001      	b.n	800297e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800297a:	f7ff fc1f 	bl	80021bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800297e:	79fb      	ldrb	r3, [r7, #7]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40022000 	.word	0x40022000

0800298c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_InitTick+0x6c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d023      	beq.n	80029e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029a0:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_InitTick+0x70>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_InitTick+0x6c>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f96d 	bl	8002c96 <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10f      	bne.n	80029e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b0f      	cmp	r3, #15
 80029c6:	d809      	bhi.n	80029dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c8:	2200      	movs	r2, #0
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f000 f937 	bl	8002c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_InitTick+0x74>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e007      	b.n	80029ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e004      	b.n	80029ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	e001      	b.n	80029ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20004b14 	.word	0x20004b14
 80029fc:	20004b0c 	.word	0x20004b0c
 8002a00:	20004b10 	.word	0x20004b10

08002a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_IncTick+0x20>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_IncTick+0x24>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_IncTick+0x24>)
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20004b14 	.word	0x20004b14
 8002a28:	2000b2bc 	.word	0x2000b2bc

08002a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_GetTick+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	2000b2bc 	.word	0x2000b2bc

08002a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff ffee 	bl	8002a2c <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d005      	beq.n	8002a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_Delay+0x44>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4413      	add	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6a:	bf00      	nop
 8002a6c:	f7ff ffde 	bl	8002a2c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d8f7      	bhi.n	8002a6c <HAL_Delay+0x28>
  {
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20004b14 	.word	0x20004b14

08002a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <__NVIC_GetPriorityGrouping+0x18>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0307 	and.w	r3, r3, #7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db0b      	blt.n	8002b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4907      	ldr	r1, [pc, #28]	; (8002b28 <__NVIC_EnableIRQ+0x38>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	; (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf8:	d301      	bcc.n	8002bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00f      	b.n	8002c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <SysTick_Config+0x40>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c06:	210f      	movs	r1, #15
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	f7ff ff8e 	bl	8002b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <SysTick_Config+0x40>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c16:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <SysTick_Config+0x40>)
 8002c18:	2207      	movs	r2, #7
 8002c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	e000e010 	.word	0xe000e010

08002c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff29 	bl	8002a8c <__NVIC_SetPriorityGrouping>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c54:	f7ff ff3e 	bl	8002ad4 <__NVIC_GetPriorityGrouping>
 8002c58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f7ff ff8e 	bl	8002b80 <NVIC_EncodePriority>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff5d 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff31 	bl	8002af0 <__NVIC_EnableIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ffa2 	bl	8002be8 <SysTick_Config>
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d005      	beq.n	8002cd2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	e047      	b.n	8002d62 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 020e 	bic.w	r2, r2, #14
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f003 021c 	and.w	r2, r3, #28
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d1e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d40:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
    }
  }
  return status;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	019a      	lsls	r2, r3, #6
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	431a      	orrs	r2, r3
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dac:	f7ff fe3e 	bl	8002a2c <HAL_GetTick>
 8002db0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002db2:	e009      	b.n	8002dc8 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002db4:	f7ff fe3a 	bl	8002a2c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dc2:	d901      	bls.n	8002dc8 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e015      	b.n	8002df4 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ee      	beq.n	8002db4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	019a      	lsls	r2, r3, #6
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	ea42 0103 	orr.w	r1, r2, r3
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e10b      	b.n	8003028 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7c5b      	ldrb	r3, [r3, #17]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff f9f2 	bl	8002204 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2203      	movs	r2, #3
 8002e24:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002e3a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4e:	f7ff fded 	bl	8002a2c <HAL_GetTick>
 8002e52:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002e54:	e009      	b.n	8002e6a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e56:	f7ff fde9 	bl	8002a2c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e64:	d901      	bls.n	8002e6a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e0de      	b.n	8003028 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0ed      	beq.n	8002e56 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8002e8a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002e8e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002ea6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002eae:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7ff fdae 	bl	8002a44 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee8:	f7ff fda0 	bl	8002a2c <HAL_GetTick>
 8002eec:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002eee:	e009      	b.n	8002f04 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002ef0:	f7ff fd9c 	bl	8002a2c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002efe:	d901      	bls.n	8002f04 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e091      	b.n	8003028 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ed      	beq.n	8002ef0 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0206 	orr.w	r2, r2, #6
 8002f24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0203 	bic.w	r2, r2, #3
 8002f38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0203 	bic.w	r2, r2, #3
 8002f66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f8e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6899      	ldr	r1, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_DSI_Init+0x1b4>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	e000      	b.n	8002fb2 <HAL_DSI_Init+0x1b6>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <HAL_DSI_Init+0x234>)
 8002fb8:	fb03 f202 	mul.w	r2, r3, r2
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002fe8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	003d0900 	.word	0x003d0900

08003034 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7c1b      	ldrb	r3, [r3, #16]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_DSI_ConfigErrorMonitor+0x16>
 8003046:	2302      	movs	r3, #2
 8003048:	e0ab      	b.n	80031a2 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003084:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003088:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80030a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0202 	orr.w	r2, r2, #2
 80030e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 020c 	orr.w	r2, r2, #12
 8003100:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0210 	orr.w	r2, r2, #16
 800311e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0220 	orr.w	r2, r2, #32
 800313c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800315a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003178:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003196:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7c1b      	ldrb	r3, [r3, #16]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_DSI_SetGenericVCID+0x16>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e016      	b.n	80031f2 <HAL_DSI_SetGenericVCID+0x44>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0203 	bic.w	r2, r2, #3
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7c1b      	ldrb	r3, [r3, #16]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_DSI_ConfigVideoMode+0x16>
 8003210:	2302      	movs	r3, #2
 8003212:	e1f6      	b.n	8003602 <HAL_DSI_ConfigVideoMode+0x404>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0203 	bic.w	r2, r2, #3
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800326e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003272:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003294:	f023 031f 	bic.w	r3, r3, #31
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80032ba:	f023 031f 	bic.w	r3, r3, #31
 80032be:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0203 	bic.w	r2, r2, #3
 80032e0:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68d9      	ldr	r1, [r3, #12]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0207 	bic.w	r2, r2, #7
 8003302:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6959      	ldr	r1, [r3, #20]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 020f 	bic.w	r2, r2, #15
 8003330:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6919      	ldr	r1, [r3, #16]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 020e 	bic.w	r2, r2, #14
 8003354:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	005a      	lsls	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d110      	bne.n	800339a <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003386:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6919      	ldr	r1, [r3, #16]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80033a8:	f023 030f 	bic.w	r3, r3, #15
 80033ac:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80033ce:	f023 030f 	bic.w	r3, r3, #15
 80033d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80033f8:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003440:	f023 0303 	bic.w	r3, r3, #3
 8003444:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800348c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003490:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699a      	ldr	r2, [r3, #24]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80034d4:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6999      	ldr	r1, [r3, #24]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e0:	041a      	lsls	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034f8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6999      	ldr	r1, [r3, #24]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035e6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7c1b      	ldrb	r3, [r3, #16]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_DSI_ConfigPhyTimer+0x16>
 8003620:	2302      	movs	r3, #2
 8003622:	e058      	b.n	80036d6 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4293      	cmp	r3, r2
 8003634:	bf38      	it	cc
 8003636:	4613      	movcc	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800364a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003678:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80036b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	021a      	lsls	r2, r3, #8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7c1b      	ldrb	r3, [r3, #16]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_DSI_ConfigHostTimeouts+0x16>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0b4      	b.n	8003862 <HAL_DSI_ConfigHostTimeouts+0x180>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800370c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	021a      	lsls	r2, r3, #8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	b292      	uxth	r2, r2
 800372e:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	041a      	lsls	r2, r3, #16
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	0c1b      	lsrs	r3, r3, #16
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	0c1b      	lsrs	r3, r3, #16
 80037c0:	041b      	lsls	r3, r3, #16
 80037c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80037ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	0c1b      	lsrs	r3, r3, #16
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7c1b      	ldrb	r3, [r3, #16]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_DSI_Start+0x14>
 800387e:	2302      	movs	r3, #2
 8003880:	e02b      	b.n	80038da <HAL_DSI_Start+0x6c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b088      	sub	sp, #32
 80038ea:	af02      	add	r7, sp, #8
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	7c1b      	ldrb	r3, [r3, #16]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_DSI_ShortWrite+0x1a>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e010      	b.n	8003922 <HAL_DSI_ShortWrite+0x3c>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff fa44 	bl	8002d9e <DSI_ShortWrite>
 8003916:	4603      	mov	r3, r0
 8003918:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	741a      	strb	r2, [r3, #16]

  return status;
 8003920:	7dfb      	ldrb	r3, [r7, #23]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b08c      	sub	sp, #48	; 0x30
 800392e:	af02      	add	r7, sp, #8
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393a:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	7c1b      	ldrb	r3, [r3, #16]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_DSI_LongWrite+0x1e>
 8003944:	2302      	movs	r3, #2
 8003946:	e084      	b.n	8003a52 <HAL_DSI_LongWrite+0x128>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800394e:	f7ff f86d 	bl	8002a2c <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003954:	e00c      	b.n	8003970 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003956:	f7ff f869 	bl	8002a2c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003964:	d904      	bls.n	8003970 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e070      	b.n	8003a52 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0eb      	beq.n	8003956 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b03      	cmp	r3, #3
 8003986:	bf28      	it	cs
 8003988:	2303      	movcs	r3, #3
 800398a:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800398c:	2300      	movs	r3, #0
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	e00f      	b.n	80039b2 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	4413      	add	r3, r2
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	3301      	adds	r3, #1
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	3301      	adds	r3, #1
 80039b0:	623b      	str	r3, [r7, #32]
 80039b2:	6a3a      	ldr	r2, [r7, #32]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d3eb      	bcc.n	8003992 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80039d2:	e028      	b.n	8003a26 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf28      	it	cs
 80039da:	2304      	movcs	r3, #4
 80039dc:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
 80039e6:	e00e      	b.n	8003a06 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	4413      	add	r3, r2
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	3301      	adds	r3, #1
 8003a04:	623b      	str	r3, [r7, #32]
 8003a06:	6a3a      	ldr	r2, [r7, #32]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d3ec      	bcc.n	80039e8 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1d3      	bne.n	80039d4 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a34:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	f7ff f991 	bl	8002d6c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7c1b      	ldrb	r3, [r3, #16]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e01b      	b.n	8003aa8 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003a86:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	065a      	lsls	r2, r3, #25
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac2:	e166      	b.n	8003d92 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8158 	beq.w	8003d8c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d005      	beq.n	8003af4 <HAL_GPIO_Init+0x40>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d130      	bne.n	8003b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0201 	and.w	r2, r3, #1
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d017      	beq.n	8003b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4013      	ands	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d123      	bne.n	8003be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	08da      	lsrs	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3208      	adds	r2, #8
 8003ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	08da      	lsrs	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3208      	adds	r2, #8
 8003be0:	6939      	ldr	r1, [r7, #16]
 8003be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0203 	and.w	r2, r3, #3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80b2 	beq.w	8003d8c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_GPIO_Init+0x2fc>)
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2c:	4a60      	ldr	r2, [pc, #384]	; (8003db0 <HAL_GPIO_Init+0x2fc>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6613      	str	r3, [r2, #96]	; 0x60
 8003c34:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <HAL_GPIO_Init+0x2fc>)
 8003c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c40:	4a5c      	ldr	r2, [pc, #368]	; (8003db4 <HAL_GPIO_Init+0x300>)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	089b      	lsrs	r3, r3, #2
 8003c46:	3302      	adds	r3, #2
 8003c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	220f      	movs	r2, #15
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c6a:	d02b      	beq.n	8003cc4 <HAL_GPIO_Init+0x210>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a52      	ldr	r2, [pc, #328]	; (8003db8 <HAL_GPIO_Init+0x304>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d025      	beq.n	8003cc0 <HAL_GPIO_Init+0x20c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a51      	ldr	r2, [pc, #324]	; (8003dbc <HAL_GPIO_Init+0x308>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d01f      	beq.n	8003cbc <HAL_GPIO_Init+0x208>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a50      	ldr	r2, [pc, #320]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d019      	beq.n	8003cb8 <HAL_GPIO_Init+0x204>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a4f      	ldr	r2, [pc, #316]	; (8003dc4 <HAL_GPIO_Init+0x310>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_GPIO_Init+0x200>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a4e      	ldr	r2, [pc, #312]	; (8003dc8 <HAL_GPIO_Init+0x314>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00d      	beq.n	8003cb0 <HAL_GPIO_Init+0x1fc>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a4d      	ldr	r2, [pc, #308]	; (8003dcc <HAL_GPIO_Init+0x318>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <HAL_GPIO_Init+0x1f8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a4c      	ldr	r2, [pc, #304]	; (8003dd0 <HAL_GPIO_Init+0x31c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <HAL_GPIO_Init+0x1f4>
 8003ca4:	2307      	movs	r3, #7
 8003ca6:	e00e      	b.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003ca8:	2308      	movs	r3, #8
 8003caa:	e00c      	b.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003cac:	2306      	movs	r3, #6
 8003cae:	e00a      	b.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003cb0:	2305      	movs	r3, #5
 8003cb2:	e008      	b.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	e006      	b.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e004      	b.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e002      	b.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	f002 0203 	and.w	r2, r2, #3
 8003ccc:	0092      	lsls	r2, r2, #2
 8003cce:	4093      	lsls	r3, r2
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cd6:	4937      	ldr	r1, [pc, #220]	; (8003db4 <HAL_GPIO_Init+0x300>)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	3302      	adds	r3, #2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d08:	4a32      	ldr	r2, [pc, #200]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d32:	4a28      	ldr	r2, [pc, #160]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d38:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d86:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f47f ae91 	bne.w	8003ac4 <HAL_GPIO_Init+0x10>
  }
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40010000 	.word	0x40010000
 8003db8:	48000400 	.word	0x48000400
 8003dbc:	48000800 	.word	0x48000800
 8003dc0:	48000c00 	.word	0x48000c00
 8003dc4:	48001000 	.word	0x48001000
 8003dc8:	48001400 	.word	0x48001400
 8003dcc:	48001800 	.word	0x48001800
 8003dd0:	48001c00 	.word	0x48001c00
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	e001      	b.n	8003dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
 8003e14:	4613      	mov	r3, r2
 8003e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e18:	787b      	ldrb	r3, [r7, #1]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e1e:	887a      	ldrh	r2, [r7, #2]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e24:	e002      	b.n	8003e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e26:	887a      	ldrh	r2, [r7, #2]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e4e:	4a05      	ldr	r2, [pc, #20]	; (8003e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd fc54 	bl	8001704 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40010400 	.word	0x40010400

08003e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e08d      	b.n	8003f96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fe f9ec 	bl	800226c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	; 0x24
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	e006      	b.n	8003ef0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d108      	bne.n	8003f0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	e007      	b.n	8003f1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69d9      	ldr	r1, [r3, #28]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d138      	bne.n	8004026 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e032      	b.n	8004028 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2224      	movs	r2, #36	; 0x24
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	d139      	bne.n	80040be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004054:	2302      	movs	r3, #2
 8004056:	e033      	b.n	80040c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	; 0x24
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004086:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0bf      	b.n	800425e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fe f95c 	bl	80023b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800410e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6999      	ldr	r1, [r3, #24]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004124:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <HAL_LTDC_Init+0x19c>)
 8004140:	400b      	ands	r3, r1
 8004142:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68d9      	ldr	r1, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b3e      	ldr	r3, [pc, #248]	; (8004268 <HAL_LTDC_Init+0x19c>)
 800416e:	400b      	ands	r3, r1
 8004170:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68d9      	ldr	r1, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6919      	ldr	r1, [r3, #16]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b33      	ldr	r3, [pc, #204]	; (8004268 <HAL_LTDC_Init+0x19c>)
 800419c:	400b      	ands	r3, r1
 800419e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6919      	ldr	r1, [r3, #16]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6959      	ldr	r1, [r3, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_LTDC_Init+0x19c>)
 80041ca:	400b      	ands	r3, r1
 80041cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6959      	ldr	r1, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0206 	orr.w	r2, r2, #6
 800423a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	f000f800 	.word	0xf000f800

0800426c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800426c:	b5b0      	push	{r4, r5, r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_LTDC_ConfigLayer+0x1a>
 8004282:	2302      	movs	r3, #2
 8004284:	e02c      	b.n	80042e0 <HAL_LTDC_ConfigLayer+0x74>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2134      	movs	r1, #52	; 0x34
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4614      	mov	r4, r2
 80042aa:	461d      	mov	r5, r3
 80042ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f811 	bl	80042e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2201      	movs	r2, #1
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bdb0      	pop	{r4, r5, r7, pc}

080042e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	; 0x24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004304:	4413      	add	r3, r2
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	01db      	lsls	r3, r3, #7
 8004314:	4413      	add	r3, r2
 8004316:	3384      	adds	r3, #132	; 0x84
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	4611      	mov	r1, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	01d2      	lsls	r2, r2, #7
 8004324:	440a      	add	r2, r1
 8004326:	3284      	adds	r2, #132	; 0x84
 8004328:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800432c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800433e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004340:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4619      	mov	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	01db      	lsls	r3, r3, #7
 800434c:	440b      	add	r3, r1
 800434e:	3384      	adds	r3, #132	; 0x84
 8004350:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004356:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004366:	4413      	add	r3, r2
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	01db      	lsls	r3, r3, #7
 8004376:	4413      	add	r3, r2
 8004378:	3384      	adds	r3, #132	; 0x84
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	4611      	mov	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	01d2      	lsls	r2, r2, #7
 8004386:	440a      	add	r2, r1
 8004388:	3284      	adds	r2, #132	; 0x84
 800438a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800438e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800439e:	4413      	add	r3, r2
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4619      	mov	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	01db      	lsls	r3, r3, #7
 80043ac:	440b      	add	r3, r1
 80043ae:	3384      	adds	r3, #132	; 0x84
 80043b0:	4619      	mov	r1, r3
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	01db      	lsls	r3, r3, #7
 80043c2:	4413      	add	r3, r2
 80043c4:	3384      	adds	r3, #132	; 0x84
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	4611      	mov	r1, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	01d2      	lsls	r2, r2, #7
 80043d2:	440a      	add	r2, r1
 80043d4:	3284      	adds	r2, #132	; 0x84
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	01db      	lsls	r3, r3, #7
 80043e6:	4413      	add	r3, r2
 80043e8:	3384      	adds	r3, #132	; 0x84
 80043ea:	461a      	mov	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	061b      	lsls	r3, r3, #24
 800440c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	01db      	lsls	r3, r3, #7
 8004418:	4413      	add	r3, r2
 800441a:	3384      	adds	r3, #132	; 0x84
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	01db      	lsls	r3, r3, #7
 8004428:	4413      	add	r3, r2
 800442a:	3384      	adds	r3, #132	; 0x84
 800442c:	461a      	mov	r2, r3
 800442e:	2300      	movs	r3, #0
 8004430:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004438:	461a      	mov	r2, r3
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	431a      	orrs	r2, r3
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4619      	mov	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	01db      	lsls	r3, r3, #7
 800444c:	440b      	add	r3, r1
 800444e:	3384      	adds	r3, #132	; 0x84
 8004450:	4619      	mov	r1, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	01db      	lsls	r3, r3, #7
 8004462:	4413      	add	r3, r2
 8004464:	3384      	adds	r3, #132	; 0x84
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	4611      	mov	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	01d2      	lsls	r2, r2, #7
 8004472:	440a      	add	r2, r1
 8004474:	3284      	adds	r2, #132	; 0x84
 8004476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800447a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	01db      	lsls	r3, r3, #7
 8004486:	4413      	add	r3, r2
 8004488:	3384      	adds	r3, #132	; 0x84
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	01db      	lsls	r3, r3, #7
 800449c:	4413      	add	r3, r2
 800449e:	3384      	adds	r3, #132	; 0x84
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	4611      	mov	r1, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	01d2      	lsls	r2, r2, #7
 80044ac:	440a      	add	r2, r1
 80044ae:	3284      	adds	r2, #132	; 0x84
 80044b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044b4:	f023 0307 	bic.w	r3, r3, #7
 80044b8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	6809      	ldr	r1, [r1, #0]
 80044c6:	4608      	mov	r0, r1
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	01c9      	lsls	r1, r1, #7
 80044cc:	4401      	add	r1, r0
 80044ce:	3184      	adds	r1, #132	; 0x84
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	01db      	lsls	r3, r3, #7
 80044de:	4413      	add	r3, r2
 80044e0:	3384      	adds	r3, #132	; 0x84
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	01db      	lsls	r3, r3, #7
 80044ee:	4413      	add	r3, r2
 80044f0:	3384      	adds	r3, #132	; 0x84
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	01db      	lsls	r3, r3, #7
 8004502:	4413      	add	r3, r2
 8004504:	3384      	adds	r3, #132	; 0x84
 8004506:	461a      	mov	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004516:	2304      	movs	r3, #4
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	e01b      	b.n	8004554 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d102      	bne.n	800452a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004524:	2303      	movs	r3, #3
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e014      	b.n	8004554 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d00b      	beq.n	800454a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004536:	2b02      	cmp	r3, #2
 8004538:	d007      	beq.n	800454a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800453e:	2b03      	cmp	r3, #3
 8004540:	d003      	beq.n	800454a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004546:	2b07      	cmp	r3, #7
 8004548:	d102      	bne.n	8004550 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800454a:	2302      	movs	r3, #2
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	e001      	b.n	8004554 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004550:	2301      	movs	r3, #1
 8004552:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	01db      	lsls	r3, r3, #7
 800455e:	4413      	add	r3, r2
 8004560:	3384      	adds	r3, #132	; 0x84
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4611      	mov	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	01d2      	lsls	r2, r2, #7
 800456e:	440a      	add	r2, r1
 8004570:	3284      	adds	r2, #132	; 0x84
 8004572:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004576:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	1acb      	subs	r3, r1, r3
 800458e:	69f9      	ldr	r1, [r7, #28]
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	6809      	ldr	r1, [r1, #0]
 800459a:	4608      	mov	r0, r1
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	01c9      	lsls	r1, r1, #7
 80045a0:	4401      	add	r1, r0
 80045a2:	3184      	adds	r1, #132	; 0x84
 80045a4:	4313      	orrs	r3, r2
 80045a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	01db      	lsls	r3, r3, #7
 80045b2:	4413      	add	r3, r2
 80045b4:	3384      	adds	r3, #132	; 0x84
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	4611      	mov	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	01d2      	lsls	r2, r2, #7
 80045c2:	440a      	add	r2, r1
 80045c4:	3284      	adds	r2, #132	; 0x84
 80045c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	01db      	lsls	r3, r3, #7
 80045da:	4413      	add	r3, r2
 80045dc:	3384      	adds	r3, #132	; 0x84
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	01db      	lsls	r3, r3, #7
 80045f0:	4413      	add	r3, r2
 80045f2:	3384      	adds	r3, #132	; 0x84
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	4611      	mov	r1, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	01d2      	lsls	r2, r2, #7
 8004600:	440a      	add	r2, r1
 8004602:	3284      	adds	r2, #132	; 0x84
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6013      	str	r3, [r2, #0]
}
 800460a:	bf00      	nop
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af02      	add	r7, sp, #8
 800461e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004624:	f7fe fa02 	bl	8002a2c <HAL_GetTick>
 8004628:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
 8004634:	e092      	b.n	800475c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 808b 	bne.w	800475c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd fef6 	bl	8002438 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800464c:	f241 3188 	movw	r1, #5000	; 0x1388
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f88b 	bl	800476c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	4b42      	ldr	r3, [pc, #264]	; (8004768 <HAL_OSPI_Init+0x150>)
 800465e:	4013      	ands	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68d1      	ldr	r1, [r2, #12]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6912      	ldr	r2, [r2, #16]
 8004668:	3a01      	subs	r2, #1
 800466a:	0412      	lsls	r2, r2, #16
 800466c:	4311      	orrs	r1, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6952      	ldr	r2, [r2, #20]
 8004672:	3a01      	subs	r2, #1
 8004674:	0212      	lsls	r2, r2, #8
 8004676:	4311      	orrs	r1, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800467c:	4311      	orrs	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	69d2      	ldr	r2, [r2, #28]
 8004682:	4311      	orrs	r1, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	430b      	orrs	r3, r1
 800468a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0412      	lsls	r2, r2, #16
 8004696:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	021a      	lsls	r2, r3, #8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2120      	movs	r1, #32
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fb98 	bl	8004df4 <OSPI_WaitFlagStateUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d146      	bne.n	800475c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004704:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d107      	bne.n	8004744 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0202 	orr.w	r2, r2, #2
 8004742:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800474c:	d103      	bne.n	8004756 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
 8004754:	e002      	b.n	800475c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	f8e0f8f4 	.word	0xf8e0f8f4

0800476c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b092      	sub	sp, #72	; 0x48
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a08      	ldr	r2, [pc, #32]	; (80047cc <HAL_OSPIM_Config+0x40>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d105      	bne.n	80047ba <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80047b8:	e004      	b.n	80047c4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80047ba:	2301      	movs	r3, #1
 80047bc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80047ca:	e01f      	b.n	800480c <HAL_OSPIM_Config+0x80>
 80047cc:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80047d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047d4:	3301      	adds	r3, #1
 80047d6:	b2d8      	uxtb	r0, r3
 80047d8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80047dc:	f107 0114 	add.w	r1, r7, #20
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	4619      	mov	r1, r3
 80047ec:	f000 fb3a 	bl	8004e64 <OSPIM_GetConfig>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2208      	movs	r2, #8
 8004800:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004802:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004806:	3301      	adds	r3, #1
 8004808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800480c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004810:	2b01      	cmp	r3, #1
 8004812:	d9dd      	bls.n	80047d0 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004814:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004818:	2b00      	cmp	r3, #0
 800481a:	f040 82de 	bne.w	8004dda <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800481e:	4bc6      	ldr	r3, [pc, #792]	; (8004b38 <HAL_OSPIM_Config+0x3ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800482a:	4bc3      	ldr	r3, [pc, #780]	; (8004b38 <HAL_OSPIM_Config+0x3ac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4ac2      	ldr	r2, [pc, #776]	; (8004b38 <HAL_OSPIM_Config+0x3ac>)
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004836:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004842:	4bbe      	ldr	r3, [pc, #760]	; (8004b3c <HAL_OSPIM_Config+0x3b0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800484e:	4bbb      	ldr	r3, [pc, #748]	; (8004b3c <HAL_OSPIM_Config+0x3b0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4aba      	ldr	r2, [pc, #744]	; (8004b3c <HAL_OSPIM_Config+0x3b0>)
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800485a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800485e:	f043 0302 	orr.w	r3, r3, #2
 8004862:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004866:	49b6      	ldr	r1, [pc, #728]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 8004868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	3348      	adds	r3, #72	; 0x48
 8004874:	443b      	add	r3, r7
 8004876:	3b2c      	subs	r3, #44	; 0x2c
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3b01      	subs	r3, #1
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	48af      	ldr	r0, [pc, #700]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 8004884:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	3348      	adds	r3, #72	; 0x48
 8004890:	443b      	add	r3, r7
 8004892:	3b2c      	subs	r3, #44	; 0x2c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3b01      	subs	r3, #1
 8004898:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4403      	add	r3, r0
 80048a0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80048a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	3348      	adds	r3, #72	; 0x48
 80048ae:	443b      	add	r3, r7
 80048b0:	3b34      	subs	r3, #52	; 0x34
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80a1 	beq.w	80049fc <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80048ba:	49a1      	ldr	r1, [pc, #644]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 80048bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	3348      	adds	r3, #72	; 0x48
 80048c8:	443b      	add	r3, r7
 80048ca:	3b34      	subs	r3, #52	; 0x34
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	489a      	ldr	r0, [pc, #616]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 80048d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	3348      	adds	r3, #72	; 0x48
 80048e4:	443b      	add	r3, r7
 80048e6:	3b34      	subs	r3, #52	; 0x34
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	f021 0201 	bic.w	r2, r1, #1
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4403      	add	r3, r0
 80048f4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80048f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	3348      	adds	r3, #72	; 0x48
 8004902:	443b      	add	r3, r7
 8004904:	3b30      	subs	r3, #48	; 0x30
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01d      	beq.n	8004948 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800490c:	498c      	ldr	r1, [pc, #560]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 800490e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	3348      	adds	r3, #72	; 0x48
 800491a:	443b      	add	r3, r7
 800491c:	3b30      	subs	r3, #48	; 0x30
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3b01      	subs	r3, #1
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	4885      	ldr	r0, [pc, #532]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 800492a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	3348      	adds	r3, #72	; 0x48
 8004936:	443b      	add	r3, r7
 8004938:	3b30      	subs	r3, #48	; 0x30
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3b01      	subs	r3, #1
 800493e:	f021 0210 	bic.w	r2, r1, #16
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4403      	add	r3, r0
 8004946:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	3348      	adds	r3, #72	; 0x48
 8004954:	443b      	add	r3, r7
 8004956:	3b28      	subs	r3, #40	; 0x28
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d021      	beq.n	80049a2 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800495e:	4978      	ldr	r1, [pc, #480]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 8004960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	3348      	adds	r3, #72	; 0x48
 800496c:	443b      	add	r3, r7
 800496e:	3b28      	subs	r3, #40	; 0x28
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3b01      	subs	r3, #1
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	4870      	ldr	r0, [pc, #448]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 8004980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	3348      	adds	r3, #72	; 0x48
 800498c:	443b      	add	r3, r7
 800498e:	3b28      	subs	r3, #40	; 0x28
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3b01      	subs	r3, #1
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4403      	add	r3, r0
 80049a0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80049a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	3348      	adds	r3, #72	; 0x48
 80049ae:	443b      	add	r3, r7
 80049b0:	3b24      	subs	r3, #36	; 0x24
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d021      	beq.n	80049fc <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80049b8:	4961      	ldr	r1, [pc, #388]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 80049ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	3348      	adds	r3, #72	; 0x48
 80049c6:	443b      	add	r3, r7
 80049c8:	3b24      	subs	r3, #36	; 0x24
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	4859      	ldr	r0, [pc, #356]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 80049da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	3348      	adds	r3, #72	; 0x48
 80049e6:	443b      	add	r3, r7
 80049e8:	3b24      	subs	r3, #36	; 0x24
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4403      	add	r3, r0
 80049fa:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	3348      	adds	r3, #72	; 0x48
 8004a0e:	443b      	add	r3, r7
 8004a10:	3b34      	subs	r3, #52	; 0x34
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4299      	cmp	r1, r3
 8004a16:	d038      	beq.n	8004a8a <HAL_OSPIM_Config+0x2fe>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	3348      	adds	r3, #72	; 0x48
 8004a2a:	443b      	add	r3, r7
 8004a2c:	3b30      	subs	r3, #48	; 0x30
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4299      	cmp	r1, r3
 8004a32:	d02a      	beq.n	8004a8a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6899      	ldr	r1, [r3, #8]
 8004a38:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	3348      	adds	r3, #72	; 0x48
 8004a46:	443b      	add	r3, r7
 8004a48:	3b2c      	subs	r3, #44	; 0x2c
 8004a4a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004a4c:	4299      	cmp	r1, r3
 8004a4e:	d01c      	beq.n	8004a8a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	68d9      	ldr	r1, [r3, #12]
 8004a54:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	3348      	adds	r3, #72	; 0x48
 8004a62:	443b      	add	r3, r7
 8004a64:	3b28      	subs	r3, #40	; 0x28
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	d00e      	beq.n	8004a8a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6919      	ldr	r1, [r3, #16]
 8004a70:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	3348      	adds	r3, #72	; 0x48
 8004a7e:	443b      	add	r3, r7
 8004a80:	3b24      	subs	r3, #36	; 0x24
 8004a82:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004a84:	4299      	cmp	r1, r3
 8004a86:	f040 80d3 	bne.w	8004c30 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004a8a:	492d      	ldr	r1, [pc, #180]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 8004a8c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	3348      	adds	r3, #72	; 0x48
 8004a9a:	443b      	add	r3, r7
 8004a9c:	3b34      	subs	r3, #52	; 0x34
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	4825      	ldr	r0, [pc, #148]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 8004aaa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	3348      	adds	r3, #72	; 0x48
 8004ab8:	443b      	add	r3, r7
 8004aba:	3b34      	subs	r3, #52	; 0x34
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	f021 0201 	bic.w	r2, r1, #1
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4403      	add	r3, r0
 8004ac8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004aca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	3348      	adds	r3, #72	; 0x48
 8004ad8:	443b      	add	r3, r7
 8004ada:	3b30      	subs	r3, #48	; 0x30
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01f      	beq.n	8004b22 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004ae2:	4917      	ldr	r1, [pc, #92]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 8004ae4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	3348      	adds	r3, #72	; 0x48
 8004af2:	443b      	add	r3, r7
 8004af4:	3b30      	subs	r3, #48	; 0x30
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	6859      	ldr	r1, [r3, #4]
 8004b00:	480f      	ldr	r0, [pc, #60]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 8004b02:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	3348      	adds	r3, #72	; 0x48
 8004b10:	443b      	add	r3, r7
 8004b12:	3b30      	subs	r3, #48	; 0x30
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	f021 0210 	bic.w	r2, r1, #16
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4403      	add	r3, r0
 8004b20:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004b22:	4907      	ldr	r1, [pc, #28]	; (8004b40 <HAL_OSPIM_Config+0x3b4>)
 8004b24:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	3348      	adds	r3, #72	; 0x48
 8004b32:	443b      	add	r3, r7
 8004b34:	3b2c      	subs	r3, #44	; 0x2c
 8004b36:	e005      	b.n	8004b44 <HAL_OSPIM_Config+0x3b8>
 8004b38:	a0001000 	.word	0xa0001000
 8004b3c:	a0001400 	.word	0xa0001400
 8004b40:	50061c00 	.word	0x50061c00
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	48a6      	ldr	r0, [pc, #664]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004b50:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	3348      	adds	r3, #72	; 0x48
 8004b5e:	443b      	add	r3, r7
 8004b60:	3b2c      	subs	r3, #44	; 0x2c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4403      	add	r3, r0
 8004b6e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004b70:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3348      	adds	r3, #72	; 0x48
 8004b7e:	443b      	add	r3, r7
 8004b80:	3b28      	subs	r3, #40	; 0x28
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d023      	beq.n	8004bd0 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004b88:	4997      	ldr	r1, [pc, #604]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004b8a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	3348      	adds	r3, #72	; 0x48
 8004b98:	443b      	add	r3, r7
 8004b9a:	3b28      	subs	r3, #40	; 0x28
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	6859      	ldr	r1, [r3, #4]
 8004baa:	488f      	ldr	r0, [pc, #572]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004bac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	3348      	adds	r3, #72	; 0x48
 8004bba:	443b      	add	r3, r7
 8004bbc:	3b28      	subs	r3, #40	; 0x28
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4403      	add	r3, r0
 8004bce:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004bd0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	3348      	adds	r3, #72	; 0x48
 8004bde:	443b      	add	r3, r7
 8004be0:	3b24      	subs	r3, #36	; 0x24
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d023      	beq.n	8004c30 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004be8:	497f      	ldr	r1, [pc, #508]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004bea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3348      	adds	r3, #72	; 0x48
 8004bf8:	443b      	add	r3, r7
 8004bfa:	3b24      	subs	r3, #36	; 0x24
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	4877      	ldr	r0, [pc, #476]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004c0c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	3348      	adds	r3, #72	; 0x48
 8004c1a:	443b      	add	r3, r7
 8004c1c:	3b24      	subs	r3, #36	; 0x24
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4403      	add	r3, r0
 8004c2e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004c30:	4a6d      	ldr	r2, [pc, #436]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c44:	025b      	lsls	r3, r3, #9
 8004c46:	431a      	orrs	r2, r3
 8004c48:	4967      	ldr	r1, [pc, #412]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004c5a:	4a63      	ldr	r2, [pc, #396]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f023 0203 	bic.w	r2, r3, #3
 8004c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	431a      	orrs	r2, r3
 8004c72:	495d      	ldr	r1, [pc, #372]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d014      	beq.n	8004cb6 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004c8c:	4a56      	ldr	r2, [pc, #344]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca0:	015b      	lsls	r3, r3, #5
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	4950      	ldr	r1, [pc, #320]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	f042 0210 	orr.w	r2, r2, #16
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d019      	beq.n	8004cf6 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004cc2:	4a49      	ldr	r2, [pc, #292]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cda:	049b      	lsls	r3, r3, #18
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	4942      	ldr	r1, [pc, #264]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	e01c      	b.n	8004d30 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d018      	beq.n	8004d30 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004cfe:	4a3a      	ldr	r2, [pc, #232]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d16:	069b      	lsls	r3, r3, #26
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	4933      	ldr	r1, [pc, #204]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d019      	beq.n	8004d70 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d54:	049b      	lsls	r3, r3, #18
 8004d56:	431a      	orrs	r2, r3
 8004d58:	4923      	ldr	r1, [pc, #140]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	e01c      	b.n	8004daa <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d018      	beq.n	8004daa <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d78:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d90:	069b      	lsls	r3, r3, #26
 8004d92:	431a      	orrs	r2, r3
 8004d94:	4914      	ldr	r1, [pc, #80]	; (8004de8 <HAL_OSPIM_Config+0x65c>)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004daa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_OSPIM_Config+0x660>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <HAL_OSPIM_Config+0x660>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004dc2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_OSPIM_Config+0x664>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a07      	ldr	r2, [pc, #28]	; (8004df0 <HAL_OSPIM_Config+0x664>)
 8004dd4:	f043 0301 	orr.w	r3, r3, #1
 8004dd8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004dda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3748      	adds	r7, #72	; 0x48
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	50061c00 	.word	0x50061c00
 8004dec:	a0001000 	.word	0xa0001000
 8004df0:	a0001400 	.word	0xa0001400

08004df4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004e04:	e01a      	b.n	8004e3c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d016      	beq.n	8004e3c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fd fe0d 	bl	8002a2c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e30:	f043 0201 	orr.w	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e00e      	b.n	8004e5a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d1d6      	bne.n	8004e06 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	6039      	str	r1, [r7, #0]
 8004e6e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <OSPIM_GetConfig+0x26>
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d802      	bhi.n	8004e8a <OSPIM_GetConfig+0x26>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
 8004e8e:	e08e      	b.n	8004fae <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d101      	bne.n	8004eb8 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004eb4:	4b41      	ldr	r3, [pc, #260]	; (8004fbc <OSPIM_GetConfig+0x158>)
 8004eb6:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e074      	b.n	8004fa8 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004ebe:	4a40      	ldr	r2, [pc, #256]	; (8004fc0 <OSPIM_GetConfig+0x15c>)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4053      	eors	r3, r2
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4053      	eors	r3, r2
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4053      	eors	r3, r2
 8004f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d018      	beq.n	8004f66 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4053      	eors	r3, r2
 8004f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d111      	bne.n	8004f66 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	60da      	str	r2, [r3, #12]
 8004f58:	e005      	b.n	8004f66 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d018      	beq.n	8004fa2 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4053      	eors	r3, r2
 8004f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d111      	bne.n	8004fa2 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d106      	bne.n	8004f96 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	611a      	str	r2, [r3, #16]
 8004f94:	e005      	b.n	8004fa2 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d987      	bls.n	8004ebe <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	04040222 	.word	0x04040222
 8004fc0:	50061c00 	.word	0x50061c00

08004fc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd4:	d102      	bne.n	8004fdc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fda:	e00b      	b.n	8004ff4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004fdc:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d102      	bne.n	8004ff2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff0:	e000      	b.n	8004ff4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004ff2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40007000 	.word	0x40007000

08005004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d141      	bne.n	8005096 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005012:	4b4b      	ldr	r3, [pc, #300]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501e:	d131      	bne.n	8005084 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005020:	4b47      	ldr	r3, [pc, #284]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005026:	4a46      	ldr	r2, [pc, #280]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005030:	4b43      	ldr	r3, [pc, #268]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005038:	4a41      	ldr	r2, [pc, #260]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800503e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005040:	4b40      	ldr	r3, [pc, #256]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2232      	movs	r2, #50	; 0x32
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	4a3f      	ldr	r2, [pc, #252]	; (8005148 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	0c9b      	lsrs	r3, r3, #18
 8005052:	3301      	adds	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005056:	e002      	b.n	800505e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3b01      	subs	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800505e:	4b38      	ldr	r3, [pc, #224]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506a:	d102      	bne.n	8005072 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f2      	bne.n	8005058 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005072:	4b33      	ldr	r3, [pc, #204]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507e:	d158      	bne.n	8005132 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e057      	b.n	8005134 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005084:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508a:	4a2d      	ldr	r2, [pc, #180]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005094:	e04d      	b.n	8005132 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509c:	d141      	bne.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800509e:	4b28      	ldr	r3, [pc, #160]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050aa:	d131      	bne.n	8005110 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050ac:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b2:	4a23      	ldr	r2, [pc, #140]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050c4:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050cc:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2232      	movs	r2, #50	; 0x32
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050d8:	fba2 2303 	umull	r2, r3, r2, r3
 80050dc:	0c9b      	lsrs	r3, r3, #18
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050e2:	e002      	b.n	80050ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f6:	d102      	bne.n	80050fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f2      	bne.n	80050e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510a:	d112      	bne.n	8005132 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e011      	b.n	8005134 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005116:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005120:	e007      	b.n	8005132 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800512a:	4a05      	ldr	r2, [pc, #20]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005130:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	40007000 	.word	0x40007000
 8005144:	20004b0c 	.word	0x20004b0c
 8005148:	431bde83 	.word	0x431bde83

0800514c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4a04      	ldr	r2, [pc, #16]	; (8005168 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800515a:	6053      	str	r3, [r2, #4]
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40007000 	.word	0x40007000

0800516c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f000 bc08 	b.w	8005990 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005180:	4b96      	ldr	r3, [pc, #600]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 030c 	and.w	r3, r3, #12
 8005188:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800518a:	4b94      	ldr	r3, [pc, #592]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80e4 	beq.w	800536a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d007      	beq.n	80051b8 <HAL_RCC_OscConfig+0x4c>
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b0c      	cmp	r3, #12
 80051ac:	f040 808b 	bne.w	80052c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	f040 8087 	bne.w	80052c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051b8:	4b88      	ldr	r3, [pc, #544]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_OscConfig+0x64>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e3df      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	4b81      	ldr	r3, [pc, #516]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <HAL_RCC_OscConfig+0x7e>
 80051e0:	4b7e      	ldr	r3, [pc, #504]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e8:	e005      	b.n	80051f6 <HAL_RCC_OscConfig+0x8a>
 80051ea:	4b7c      	ldr	r3, [pc, #496]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80051ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d223      	bcs.n	8005242 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fdcc 	bl	8005d9c <RCC_SetFlashLatencyFromMSIRange>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e3c0      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800520e:	4b73      	ldr	r3, [pc, #460]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a72      	ldr	r2, [pc, #456]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005214:	f043 0308 	orr.w	r3, r3, #8
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b70      	ldr	r3, [pc, #448]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	496d      	ldr	r1, [pc, #436]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005228:	4313      	orrs	r3, r2
 800522a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800522c:	4b6b      	ldr	r3, [pc, #428]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	4968      	ldr	r1, [pc, #416]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800523c:	4313      	orrs	r3, r2
 800523e:	604b      	str	r3, [r1, #4]
 8005240:	e025      	b.n	800528e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005242:	4b66      	ldr	r3, [pc, #408]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a65      	ldr	r2, [pc, #404]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	4b63      	ldr	r3, [pc, #396]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4960      	ldr	r1, [pc, #384]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005260:	4b5e      	ldr	r3, [pc, #376]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	495b      	ldr	r1, [pc, #364]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fd8c 	bl	8005d9c <RCC_SetFlashLatencyFromMSIRange>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e380      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800528e:	f000 fcc1 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005292:	4602      	mov	r2, r0
 8005294:	4b51      	ldr	r3, [pc, #324]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	4950      	ldr	r1, [pc, #320]	; (80053e0 <HAL_RCC_OscConfig+0x274>)
 80052a0:	5ccb      	ldrb	r3, [r1, r3]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	4a4e      	ldr	r2, [pc, #312]	; (80053e4 <HAL_RCC_OscConfig+0x278>)
 80052ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80052ae:	4b4e      	ldr	r3, [pc, #312]	; (80053e8 <HAL_RCC_OscConfig+0x27c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd fb6a 	bl	800298c <HAL_InitTick>
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d052      	beq.n	8005368 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	e364      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d032      	beq.n	8005334 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052ce:	4b43      	ldr	r3, [pc, #268]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a42      	ldr	r2, [pc, #264]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052da:	f7fd fba7 	bl	8002a2c <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052e2:	f7fd fba3 	bl	8002a2c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e34d      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052f4:	4b39      	ldr	r3, [pc, #228]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005300:	4b36      	ldr	r3, [pc, #216]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a35      	ldr	r2, [pc, #212]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005306:	f043 0308 	orr.w	r3, r3, #8
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b33      	ldr	r3, [pc, #204]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4930      	ldr	r1, [pc, #192]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800531a:	4313      	orrs	r3, r2
 800531c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800531e:	4b2f      	ldr	r3, [pc, #188]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	492b      	ldr	r1, [pc, #172]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800532e:	4313      	orrs	r3, r2
 8005330:	604b      	str	r3, [r1, #4]
 8005332:	e01a      	b.n	800536a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005334:	4b29      	ldr	r3, [pc, #164]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a28      	ldr	r2, [pc, #160]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005340:	f7fd fb74 	bl	8002a2c <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005348:	f7fd fb70 	bl	8002a2c <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e31a      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800535a:	4b20      	ldr	r3, [pc, #128]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x1dc>
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005368:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d073      	beq.n	800545e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d005      	beq.n	8005388 <HAL_RCC_OscConfig+0x21c>
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d10e      	bne.n	80053a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b03      	cmp	r3, #3
 8005386:	d10b      	bne.n	80053a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	4b14      	ldr	r3, [pc, #80]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d063      	beq.n	800545c <HAL_RCC_OscConfig+0x2f0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d15f      	bne.n	800545c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e2f7      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a8:	d106      	bne.n	80053b8 <HAL_RCC_OscConfig+0x24c>
 80053aa:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a0b      	ldr	r2, [pc, #44]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e025      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c0:	d114      	bne.n	80053ec <HAL_RCC_OscConfig+0x280>
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a05      	ldr	r2, [pc, #20]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80053c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a02      	ldr	r2, [pc, #8]	; (80053dc <HAL_RCC_OscConfig+0x270>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e013      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
 80053dc:	40021000 	.word	0x40021000
 80053e0:	08008fe4 	.word	0x08008fe4
 80053e4:	20004b0c 	.word	0x20004b0c
 80053e8:	20004b10 	.word	0x20004b10
 80053ec:	4ba0      	ldr	r3, [pc, #640]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a9f      	ldr	r2, [pc, #636]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b9d      	ldr	r3, [pc, #628]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a9c      	ldr	r2, [pc, #624]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80053fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d013      	beq.n	8005434 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fd fb0e 	bl	8002a2c <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005414:	f7fd fb0a 	bl	8002a2c <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e2b4      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005426:	4b92      	ldr	r3, [pc, #584]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x2a8>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fd fafa 	bl	8002a2c <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800543c:	f7fd faf6 	bl	8002a2c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	; 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e2a0      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800544e:	4b88      	ldr	r3, [pc, #544]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x2d0>
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d060      	beq.n	800552c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b04      	cmp	r3, #4
 800546e:	d005      	beq.n	800547c <HAL_RCC_OscConfig+0x310>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d119      	bne.n	80054aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d116      	bne.n	80054aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800547c:	4b7c      	ldr	r3, [pc, #496]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCC_OscConfig+0x328>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e27d      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005494:	4b76      	ldr	r3, [pc, #472]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	4973      	ldr	r1, [pc, #460]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a8:	e040      	b.n	800552c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d023      	beq.n	80054fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b2:	4b6f      	ldr	r3, [pc, #444]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a6e      	ldr	r2, [pc, #440]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80054b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054be:	f7fd fab5 	bl	8002a2c <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c6:	f7fd fab1 	bl	8002a2c <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e25b      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054d8:	4b65      	ldr	r3, [pc, #404]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e4:	4b62      	ldr	r3, [pc, #392]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	495f      	ldr	r1, [pc, #380]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	604b      	str	r3, [r1, #4]
 80054f8:	e018      	b.n	800552c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fa:	4b5d      	ldr	r3, [pc, #372]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a5c      	ldr	r2, [pc, #368]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fd fa91 	bl	8002a2c <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550e:	f7fd fa8d 	bl	8002a2c <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e237      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005520:	4b53      	ldr	r3, [pc, #332]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f0      	bne.n	800550e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d03c      	beq.n	80055b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01c      	beq.n	800557a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005540:	4b4b      	ldr	r3, [pc, #300]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005546:	4a4a      	ldr	r2, [pc, #296]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005550:	f7fd fa6c 	bl	8002a2c <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005558:	f7fd fa68 	bl	8002a2c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e212      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800556a:	4b41      	ldr	r3, [pc, #260]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 800556c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0ef      	beq.n	8005558 <HAL_RCC_OscConfig+0x3ec>
 8005578:	e01b      	b.n	80055b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800557a:	4b3d      	ldr	r3, [pc, #244]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 800557c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005580:	4a3b      	ldr	r2, [pc, #236]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558a:	f7fd fa4f 	bl	8002a2c <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005592:	f7fd fa4b 	bl	8002a2c <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e1f5      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80055a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1ef      	bne.n	8005592 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80a6 	beq.w	800570c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055c0:	2300      	movs	r3, #0
 80055c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055c4:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10d      	bne.n	80055ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d0:	4b27      	ldr	r3, [pc, #156]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	4a26      	ldr	r2, [pc, #152]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80055d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055da:	6593      	str	r3, [r2, #88]	; 0x58
 80055dc:	4b24      	ldr	r3, [pc, #144]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e8:	2301      	movs	r3, #1
 80055ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ec:	4b21      	ldr	r3, [pc, #132]	; (8005674 <HAL_RCC_OscConfig+0x508>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d118      	bne.n	800562a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055f8:	4b1e      	ldr	r3, [pc, #120]	; (8005674 <HAL_RCC_OscConfig+0x508>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <HAL_RCC_OscConfig+0x508>)
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005604:	f7fd fa12 	bl	8002a2c <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560c:	f7fd fa0e 	bl	8002a2c <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e1b8      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800561e:	4b15      	ldr	r3, [pc, #84]	; (8005674 <HAL_RCC_OscConfig+0x508>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d108      	bne.n	8005644 <HAL_RCC_OscConfig+0x4d8>
 8005632:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005638:	4a0d      	ldr	r2, [pc, #52]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005642:	e029      	b.n	8005698 <HAL_RCC_OscConfig+0x52c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b05      	cmp	r3, #5
 800564a:	d115      	bne.n	8005678 <HAL_RCC_OscConfig+0x50c>
 800564c:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005652:	4a07      	ldr	r2, [pc, #28]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005654:	f043 0304 	orr.w	r3, r3, #4
 8005658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	4a03      	ldr	r2, [pc, #12]	; (8005670 <HAL_RCC_OscConfig+0x504>)
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800566c:	e014      	b.n	8005698 <HAL_RCC_OscConfig+0x52c>
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000
 8005674:	40007000 	.word	0x40007000
 8005678:	4b9d      	ldr	r3, [pc, #628]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567e:	4a9c      	ldr	r2, [pc, #624]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005688:	4b99      	ldr	r3, [pc, #612]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 800568a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568e:	4a98      	ldr	r2, [pc, #608]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005690:	f023 0304 	bic.w	r3, r3, #4
 8005694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d016      	beq.n	80056ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a0:	f7fd f9c4 	bl	8002a2c <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a6:	e00a      	b.n	80056be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a8:	f7fd f9c0 	bl	8002a2c <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e168      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056be:	4b8c      	ldr	r3, [pc, #560]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ed      	beq.n	80056a8 <HAL_RCC_OscConfig+0x53c>
 80056cc:	e015      	b.n	80056fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ce:	f7fd f9ad 	bl	8002a2c <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056d4:	e00a      	b.n	80056ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d6:	f7fd f9a9 	bl	8002a2c <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e151      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056ec:	4b80      	ldr	r3, [pc, #512]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ed      	bne.n	80056d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056fa:	7ffb      	ldrb	r3, [r7, #31]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d105      	bne.n	800570c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005700:	4b7b      	ldr	r3, [pc, #492]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	4a7a      	ldr	r2, [pc, #488]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d03c      	beq.n	8005792 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01c      	beq.n	800575a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005720:	4b73      	ldr	r3, [pc, #460]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005726:	4a72      	ldr	r2, [pc, #456]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7fd f97c 	bl	8002a2c <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005738:	f7fd f978 	bl	8002a2c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e122      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800574a:	4b69      	ldr	r3, [pc, #420]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 800574c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0ef      	beq.n	8005738 <HAL_RCC_OscConfig+0x5cc>
 8005758:	e01b      	b.n	8005792 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800575a:	4b65      	ldr	r3, [pc, #404]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 800575c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005760:	4a63      	ldr	r2, [pc, #396]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576a:	f7fd f95f 	bl	8002a2c <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005772:	f7fd f95b 	bl	8002a2c <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e105      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005784:	4b5a      	ldr	r3, [pc, #360]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1ef      	bne.n	8005772 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80f9 	beq.w	800598e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	f040 80cf 	bne.w	8005944 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057a6:	4b52      	ldr	r3, [pc, #328]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f003 0203 	and.w	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d12c      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	3b01      	subs	r3, #1
 80057c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d123      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d11b      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d113      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	3b01      	subs	r3, #1
 80057fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d109      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	3b01      	subs	r3, #1
 800580e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d071      	beq.n	80058f8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d068      	beq.n	80058ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800581a:	4b35      	ldr	r3, [pc, #212]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005826:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0ac      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005836:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 800583c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005840:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005842:	f7fd f8f3 	bl	8002a2c <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584a:	f7fd f8ef 	bl	8002a2c <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e099      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800585c:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f0      	bne.n	800584a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005868:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	4b21      	ldr	r3, [pc, #132]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005878:	3a01      	subs	r2, #1
 800587a:	0112      	lsls	r2, r2, #4
 800587c:	4311      	orrs	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005882:	0212      	lsls	r2, r2, #8
 8005884:	4311      	orrs	r1, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800588a:	0852      	lsrs	r2, r2, #1
 800588c:	3a01      	subs	r2, #1
 800588e:	0552      	lsls	r2, r2, #21
 8005890:	4311      	orrs	r1, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005896:	0852      	lsrs	r2, r2, #1
 8005898:	3a01      	subs	r2, #1
 800589a:	0652      	lsls	r2, r2, #25
 800589c:	4311      	orrs	r1, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058a2:	06d2      	lsls	r2, r2, #27
 80058a4:	430a      	orrs	r2, r1
 80058a6:	4912      	ldr	r1, [pc, #72]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0f      	ldr	r2, [pc, #60]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b8:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058c4:	f7fd f8b2 	bl	8002a2c <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058cc:	f7fd f8ae 	bl	8002a2c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e058      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058ea:	e050      	b.n	800598e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e04f      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
 80058f0:	40021000 	.word	0x40021000
 80058f4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f8:	4b27      	ldr	r3, [pc, #156]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d144      	bne.n	800598e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a23      	ldr	r2, [pc, #140]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 800590a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800590e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005910:	4b21      	ldr	r3, [pc, #132]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a20      	ldr	r2, [pc, #128]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800591a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800591c:	f7fd f886 	bl	8002a2c <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005924:	f7fd f882 	bl	8002a2c <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e02c      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005936:	4b18      	ldr	r3, [pc, #96]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x7b8>
 8005942:	e024      	b.n	800598e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b0c      	cmp	r3, #12
 8005948:	d01f      	beq.n	800598a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594a:	4b13      	ldr	r3, [pc, #76]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a12      	ldr	r2, [pc, #72]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005950:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005956:	f7fd f869 	bl	8002a2c <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595e:	f7fd f865 	bl	8002a2c <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e00f      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f0      	bne.n	800595e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	4905      	ldr	r1, [pc, #20]	; (8005998 <HAL_RCC_OscConfig+0x82c>)
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_RCC_OscConfig+0x830>)
 8005984:	4013      	ands	r3, r2
 8005986:	60cb      	str	r3, [r1, #12]
 8005988:	e001      	b.n	800598e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000
 800599c:	feeefffc 	.word	0xfeeefffc

080059a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e11d      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059b8:	4b90      	ldr	r3, [pc, #576]	; (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d910      	bls.n	80059e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b8d      	ldr	r3, [pc, #564]	; (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 020f 	bic.w	r2, r3, #15
 80059ce:	498b      	ldr	r1, [pc, #556]	; (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d6:	4b89      	ldr	r3, [pc, #548]	; (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e105      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d010      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	4b81      	ldr	r3, [pc, #516]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d908      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a04:	4b7e      	ldr	r3, [pc, #504]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	497b      	ldr	r1, [pc, #492]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d079      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d11e      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a2a:	4b75      	ldr	r3, [pc, #468]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e0dc      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005a3a:	f000 fa09 	bl	8005e50 <RCC_GetSysClockFreqFromPLLSource>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4a70      	ldr	r2, [pc, #448]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d946      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a46:	4b6e      	ldr	r3, [pc, #440]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d140      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a52:	4b6b      	ldr	r3, [pc, #428]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a5a:	4a69      	ldr	r2, [pc, #420]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e035      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a70:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d115      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0b9      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a88:	4b5d      	ldr	r3, [pc, #372]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0ad      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a98:	4b59      	ldr	r3, [pc, #356]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0a5      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005aa8:	f000 f8b4 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005aac:	4603      	mov	r3, r0
 8005aae:	4a55      	ldr	r2, [pc, #340]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d90f      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ab4:	4b52      	ldr	r3, [pc, #328]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ac0:	4b4f      	ldr	r3, [pc, #316]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac8:	4a4d      	ldr	r2, [pc, #308]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ace:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ad0:	2380      	movs	r3, #128	; 0x80
 8005ad2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ad4:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 0203 	bic.w	r2, r3, #3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	4947      	ldr	r1, [pc, #284]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae6:	f7fc ffa1 	bl	8002a2c <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aec:	e00a      	b.n	8005b04 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aee:	f7fc ff9d 	bl	8002a2c <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e077      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b04:	4b3e      	ldr	r3, [pc, #248]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 020c 	and.w	r2, r3, #12
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d1eb      	bne.n	8005aee <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b80      	cmp	r3, #128	; 0x80
 8005b1a:	d105      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b1c:	4b38      	ldr	r3, [pc, #224]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	4a37      	ldr	r2, [pc, #220]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b26:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d010      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d208      	bcs.n	8005b56 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b44:	4b2e      	ldr	r3, [pc, #184]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	492b      	ldr	r1, [pc, #172]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b56:	4b29      	ldr	r3, [pc, #164]	; (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d210      	bcs.n	8005b86 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b64:	4b25      	ldr	r3, [pc, #148]	; (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f023 020f 	bic.w	r2, r3, #15
 8005b6c:	4923      	ldr	r1, [pc, #140]	; (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b74:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <HAL_RCC_ClockConfig+0x25c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d001      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e036      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b92:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	4918      	ldr	r1, [pc, #96]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d009      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bb0:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4910      	ldr	r1, [pc, #64]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bc4:	f000 f826 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	490c      	ldr	r1, [pc, #48]	; (8005c08 <HAL_RCC_ClockConfig+0x268>)
 8005bd6:	5ccb      	ldrb	r3, [r1, r3]
 8005bd8:	f003 031f 	and.w	r3, r3, #31
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <HAL_RCC_ClockConfig+0x26c>)
 8005be2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005be4:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <HAL_RCC_ClockConfig+0x270>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fc fecf 	bl	800298c <HAL_InitTick>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40022000 	.word	0x40022000
 8005c00:	40021000 	.word	0x40021000
 8005c04:	04c4b400 	.word	0x04c4b400
 8005c08:	08008fe4 	.word	0x08008fe4
 8005c0c:	20004b0c 	.word	0x20004b0c
 8005c10:	20004b10 	.word	0x20004b10

08005c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c22:	4b3e      	ldr	r3, [pc, #248]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c2c:	4b3b      	ldr	r3, [pc, #236]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_RCC_GetSysClockFreq+0x34>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b0c      	cmp	r3, #12
 8005c40:	d121      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d11e      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c48:	4b34      	ldr	r3, [pc, #208]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c54:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e005      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c64:	4b2d      	ldr	r3, [pc, #180]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c70:	4a2b      	ldr	r2, [pc, #172]	; (8005d20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10d      	bne.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d102      	bne.n	8005c92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c8c:	4b25      	ldr	r3, [pc, #148]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	e004      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c98:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b0c      	cmp	r3, #12
 8005ca0:	d134      	bne.n	8005d0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ca2:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0xa6>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d003      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xac>
 8005cb8:	e005      	b.n	8005cc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005cba:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cbc:	617b      	str	r3, [r7, #20]
      break;
 8005cbe:	e005      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cc0:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cc2:	617b      	str	r3, [r7, #20]
      break;
 8005cc4:	e002      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	617b      	str	r3, [r7, #20]
      break;
 8005cca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ccc:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cda:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	fb03 f202 	mul.w	r2, r3, r2
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	0e5b      	lsrs	r3, r3, #25
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3724      	adds	r7, #36	; 0x24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	08008ffc 	.word	0x08008ffc
 8005d24:	00f42400 	.word	0x00f42400
 8005d28:	007a1200 	.word	0x007a1200

08005d2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d32:	681b      	ldr	r3, [r3, #0]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20004b0c 	.word	0x20004b0c

08005d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d48:	f7ff fff0 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4904      	ldr	r1, [pc, #16]	; (8005d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	08008ff4 	.word	0x08008ff4

08005d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d74:	f7ff ffda 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0adb      	lsrs	r3, r3, #11
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4904      	ldr	r1, [pc, #16]	; (8005d98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40021000 	.word	0x40021000
 8005d98:	08008ff4 	.word	0x08008ff4

08005d9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005da8:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005db4:	f7ff f906 	bl	8004fc4 <HAL_PWREx_GetVoltageRange>
 8005db8:	6178      	str	r0, [r7, #20]
 8005dba:	e014      	b.n	8005de6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dbc:	4b22      	ldr	r3, [pc, #136]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc0:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8005dc8:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005dd4:	f7ff f8f6 	bl	8004fc4 <HAL_PWREx_GetVoltageRange>
 8005dd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dde:	4a1a      	ldr	r2, [pc, #104]	; (8005e48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dec:	d10b      	bne.n	8005e06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b80      	cmp	r3, #128	; 0x80
 8005df2:	d913      	bls.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2ba0      	cmp	r3, #160	; 0xa0
 8005df8:	d902      	bls.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	e00d      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e00:	2301      	movs	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	e00a      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b7f      	cmp	r3, #127	; 0x7f
 8005e0a:	d902      	bls.n	8005e12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e004      	b.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b70      	cmp	r3, #112	; 0x70
 8005e16:	d101      	bne.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e18:	2301      	movs	r3, #1
 8005e1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f023 020f 	bic.w	r2, r3, #15
 8005e24:	4909      	ldr	r1, [pc, #36]	; (8005e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d001      	beq.n	8005e3e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40022000 	.word	0x40022000

08005e50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e56:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d00b      	beq.n	8005e7e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d825      	bhi.n	8005eb8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d008      	beq.n	8005e84 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d11f      	bne.n	8005eb8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005e78:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e7a:	613b      	str	r3, [r7, #16]
    break;
 8005e7c:	e01f      	b.n	8005ebe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005e7e:	4b25      	ldr	r3, [pc, #148]	; (8005f14 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005e80:	613b      	str	r3, [r7, #16]
    break;
 8005e82:	e01c      	b.n	8005ebe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e84:	4b21      	ldr	r3, [pc, #132]	; (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d107      	bne.n	8005ea0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e90:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e005      	b.n	8005eac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ea0:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	091b      	lsrs	r3, r3, #4
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005eac:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb4:	613b      	str	r3, [r7, #16]
    break;
 8005eb6:	e002      	b.n	8005ebe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
    break;
 8005ebc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ebe:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	0a1b      	lsrs	r3, r3, #8
 8005ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	fb03 f202 	mul.w	r2, r3, r2
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ee4:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	0e5b      	lsrs	r3, r3, #25
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005efe:	683b      	ldr	r3, [r7, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	00f42400 	.word	0x00f42400
 8005f14:	007a1200 	.word	0x007a1200
 8005f18:	08008ffc 	.word	0x08008ffc

08005f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f24:	2300      	movs	r3, #0
 8005f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f28:	2300      	movs	r3, #0
 8005f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d040      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d02a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f40:	2b80      	cmp	r3, #128	; 0x80
 8005f42:	d825      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f44:	2b60      	cmp	r3, #96	; 0x60
 8005f46:	d026      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f48:	2b60      	cmp	r3, #96	; 0x60
 8005f4a:	d821      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d006      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	d81d      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d009      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005f5c:	e018      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f5e:	4b89      	ldr	r3, [pc, #548]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	4a88      	ldr	r2, [pc, #544]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f68:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f6a:	e015      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fb62 	bl	800663c <RCCEx_PLLSAI1_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f7c:	e00c      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3320      	adds	r3, #32
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fc4d 	bl	8006824 <RCCEx_PLLSAI2_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f8e:	e003      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	74fb      	strb	r3, [r7, #19]
      break;
 8005f94:	e000      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f9e:	4b79      	ldr	r3, [pc, #484]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fa4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fac:	4975      	ldr	r1, [pc, #468]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005fb4:	e001      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb6:	7cfb      	ldrb	r3, [r7, #19]
 8005fb8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d047      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fce:	d030      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd4:	d82a      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fda:	d02a      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fe0:	d824      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe6:	d008      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fec:	d81e      	bhi.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff6:	d010      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ff8:	e018      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ffa:	4b62      	ldr	r3, [pc, #392]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	4a61      	ldr	r2, [pc, #388]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006006:	e015      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3304      	adds	r3, #4
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fb14 	bl	800663c <RCCEx_PLLSAI1_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006018:	e00c      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3320      	adds	r3, #32
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fbff 	bl	8006824 <RCCEx_PLLSAI2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800602a:	e003      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	74fb      	strb	r3, [r7, #19]
      break;
 8006030:	e000      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006034:	7cfb      	ldrb	r3, [r7, #19]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800603a:	4b52      	ldr	r3, [pc, #328]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800603c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	494e      	ldr	r1, [pc, #312]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006050:	e001      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	7cfb      	ldrb	r3, [r7, #19]
 8006054:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 809f 	beq.w	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006064:	2300      	movs	r3, #0
 8006066:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006068:	4b46      	ldr	r3, [pc, #280]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006078:	2300      	movs	r3, #0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800607e:	4b41      	ldr	r3, [pc, #260]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	4a40      	ldr	r2, [pc, #256]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006088:	6593      	str	r3, [r2, #88]	; 0x58
 800608a:	4b3e      	ldr	r3, [pc, #248]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006096:	2301      	movs	r3, #1
 8006098:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800609a:	4b3b      	ldr	r3, [pc, #236]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a3a      	ldr	r2, [pc, #232]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80060a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060a6:	f7fc fcc1 	bl	8002a2c <HAL_GetTick>
 80060aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060ac:	e009      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ae:	f7fc fcbd 	bl	8002a2c <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d902      	bls.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	74fb      	strb	r3, [r7, #19]
        break;
 80060c0:	e005      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060c2:	4b31      	ldr	r3, [pc, #196]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0ef      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d15b      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060d4:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01f      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d019      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060f2:	4b24      	ldr	r3, [pc, #144]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060fe:	4b21      	ldr	r3, [pc, #132]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006114:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800611e:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d016      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fc fc7c 	bl	8002a2c <HAL_GetTick>
 8006134:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006136:	e00b      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006138:	f7fc fc78 	bl	8002a2c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	; 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d902      	bls.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	74fb      	strb	r3, [r7, #19]
            break;
 800614e:	e006      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0ec      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10c      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006174:	4903      	ldr	r1, [pc, #12]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800617c:	e008      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800617e:	7cfb      	ldrb	r3, [r7, #19]
 8006180:	74bb      	strb	r3, [r7, #18]
 8006182:	e005      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006184:	40021000 	.word	0x40021000
 8006188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	7cfb      	ldrb	r3, [r7, #19]
 800618e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006190:	7c7b      	ldrb	r3, [r7, #17]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006196:	4ba0      	ldr	r3, [pc, #640]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619a:	4a9f      	ldr	r2, [pc, #636]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061ae:	4b9a      	ldr	r3, [pc, #616]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f023 0203 	bic.w	r2, r3, #3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061bc:	4996      	ldr	r1, [pc, #600]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061d0:	4b91      	ldr	r3, [pc, #580]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	f023 020c 	bic.w	r2, r3, #12
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	498e      	ldr	r1, [pc, #568]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061f2:	4b89      	ldr	r3, [pc, #548]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006200:	4985      	ldr	r1, [pc, #532]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006214:	4b80      	ldr	r3, [pc, #512]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006222:	497d      	ldr	r1, [pc, #500]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006236:	4b78      	ldr	r3, [pc, #480]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006244:	4974      	ldr	r1, [pc, #464]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006258:	4b6f      	ldr	r3, [pc, #444]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006266:	496c      	ldr	r1, [pc, #432]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800627a:	4b67      	ldr	r3, [pc, #412]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006288:	4963      	ldr	r1, [pc, #396]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800629c:	4b5e      	ldr	r3, [pc, #376]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062aa:	495b      	ldr	r1, [pc, #364]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062be:	4b56      	ldr	r3, [pc, #344]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062cc:	4952      	ldr	r1, [pc, #328]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062e0:	4b4d      	ldr	r3, [pc, #308]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ee:	494a      	ldr	r1, [pc, #296]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006302:	4b45      	ldr	r3, [pc, #276]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006310:	4941      	ldr	r1, [pc, #260]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006324:	4b3c      	ldr	r3, [pc, #240]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006326:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800632a:	f023 0203 	bic.w	r2, r3, #3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006332:	4939      	ldr	r1, [pc, #228]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006334:	4313      	orrs	r3, r2
 8006336:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d028      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006346:	4b34      	ldr	r3, [pc, #208]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006354:	4930      	ldr	r1, [pc, #192]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006364:	d106      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006366:	4b2c      	ldr	r3, [pc, #176]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	4a2b      	ldr	r2, [pc, #172]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800636c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006370:	60d3      	str	r3, [r2, #12]
 8006372:	e011      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800637c:	d10c      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	2101      	movs	r1, #1
 8006384:	4618      	mov	r0, r3
 8006386:	f000 f959 	bl	800663c <RCCEx_PLLSAI1_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800638e:	7cfb      	ldrb	r3, [r7, #19]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006394:	7cfb      	ldrb	r3, [r7, #19]
 8006396:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d04d      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ac:	d108      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80063ae:	4b1a      	ldr	r3, [pc, #104]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063b4:	4a18      	ldr	r2, [pc, #96]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80063be:	e012      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063c0:	4b15      	ldr	r3, [pc, #84]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063c6:	4a14      	ldr	r2, [pc, #80]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80063d0:	4b11      	ldr	r3, [pc, #68]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063de:	490e      	ldr	r1, [pc, #56]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ee:	d106      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063f0:	4b09      	ldr	r3, [pc, #36]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a08      	ldr	r2, [pc, #32]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063fa:	60d3      	str	r3, [r2, #12]
 80063fc:	e020      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006406:	d109      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006408:	4b03      	ldr	r3, [pc, #12]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4a02      	ldr	r2, [pc, #8]	; (8006418 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006412:	60d3      	str	r3, [r2, #12]
 8006414:	e014      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006424:	d10c      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3304      	adds	r3, #4
 800642a:	2101      	movs	r1, #1
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f905 	bl	800663c <RCCEx_PLLSAI1_Config>
 8006432:	4603      	mov	r3, r0
 8006434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006436:	7cfb      	ldrb	r3, [r7, #19]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800643c:	7cfb      	ldrb	r3, [r7, #19]
 800643e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d028      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800644c:	4b7a      	ldr	r3, [pc, #488]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006452:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645a:	4977      	ldr	r1, [pc, #476]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800646a:	d106      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800646c:	4b72      	ldr	r3, [pc, #456]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	4a71      	ldr	r2, [pc, #452]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006476:	60d3      	str	r3, [r2, #12]
 8006478:	e011      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006482:	d10c      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3304      	adds	r3, #4
 8006488:	2101      	movs	r1, #1
 800648a:	4618      	mov	r0, r3
 800648c:	f000 f8d6 	bl	800663c <RCCEx_PLLSAI1_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006494:	7cfb      	ldrb	r3, [r7, #19]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800649a:	7cfb      	ldrb	r3, [r7, #19]
 800649c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01e      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064aa:	4b63      	ldr	r3, [pc, #396]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ba:	495f      	ldr	r1, [pc, #380]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064cc:	d10c      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3304      	adds	r3, #4
 80064d2:	2102      	movs	r1, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 f8b1 	bl	800663c <RCCEx_PLLSAI1_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064de:	7cfb      	ldrb	r3, [r7, #19]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064f4:	4b50      	ldr	r3, [pc, #320]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80064f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064fa:	f023 0204 	bic.w	r2, r3, #4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006504:	494c      	ldr	r1, [pc, #304]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006518:	4b47      	ldr	r3, [pc, #284]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800651a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800651e:	f023 0218 	bic.w	r2, r3, #24
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006528:	4943      	ldr	r1, [pc, #268]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d035      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800653c:	4b3e      	ldr	r3, [pc, #248]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a3d      	ldr	r2, [pc, #244]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006548:	f7fc fa70 	bl	8002a2c <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800654e:	e009      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006550:	f7fc fa6c 	bl	8002a2c <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d902      	bls.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	74fb      	strb	r3, [r7, #19]
        break;
 8006562:	e005      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006564:	4b34      	ldr	r3, [pc, #208]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1ef      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006570:	7cfb      	ldrb	r3, [r7, #19]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d113      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006576:	4b30      	ldr	r3, [pc, #192]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006578:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800657c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006586:	492c      	ldr	r1, [pc, #176]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3320      	adds	r3, #32
 8006592:	2102      	movs	r1, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f945 	bl	8006824 <RCCEx_PLLSAI2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800659e:	7cfb      	ldrb	r3, [r7, #19]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80065a4:	7cfb      	ldrb	r3, [r7, #19]
 80065a6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01e      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80065b4:	4b20      	ldr	r3, [pc, #128]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c4:	491c      	ldr	r1, [pc, #112]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	d10c      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3320      	adds	r3, #32
 80065dc:	2101      	movs	r1, #1
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f920 	bl	8006824 <RCCEx_PLLSAI2_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80065ee:	7cfb      	ldrb	r3, [r7, #19]
 80065f0:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d017      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80065fe:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800660e:	490a      	ldr	r1, [pc, #40]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800661c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006620:	d105      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	4a04      	ldr	r2, [pc, #16]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800662c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800662e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40021000 	.word	0x40021000

0800663c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800664a:	4b72      	ldr	r3, [pc, #456]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00e      	beq.n	8006674 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006656:	4b6f      	ldr	r3, [pc, #444]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f003 0203 	and.w	r2, r3, #3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d103      	bne.n	800666e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
       ||
 800666a:	2b00      	cmp	r3, #0
 800666c:	d142      	bne.n	80066f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
 8006672:	e03f      	b.n	80066f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d018      	beq.n	80066ae <RCCEx_PLLSAI1_Config+0x72>
 800667c:	2b03      	cmp	r3, #3
 800667e:	d825      	bhi.n	80066cc <RCCEx_PLLSAI1_Config+0x90>
 8006680:	2b01      	cmp	r3, #1
 8006682:	d002      	beq.n	800668a <RCCEx_PLLSAI1_Config+0x4e>
 8006684:	2b02      	cmp	r3, #2
 8006686:	d009      	beq.n	800669c <RCCEx_PLLSAI1_Config+0x60>
 8006688:	e020      	b.n	80066cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800668a:	4b62      	ldr	r3, [pc, #392]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d11d      	bne.n	80066d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800669a:	e01a      	b.n	80066d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800669c:	4b5d      	ldr	r3, [pc, #372]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d116      	bne.n	80066d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066ac:	e013      	b.n	80066d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066ae:	4b59      	ldr	r3, [pc, #356]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10f      	bne.n	80066da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066ba:	4b56      	ldr	r3, [pc, #344]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066ca:	e006      	b.n	80066da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e004      	b.n	80066dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066d2:	bf00      	nop
 80066d4:	e002      	b.n	80066dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066d6:	bf00      	nop
 80066d8:	e000      	b.n	80066dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066da:	bf00      	nop
    }

    if(status == HAL_OK)
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80066e2:	4b4c      	ldr	r3, [pc, #304]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f023 0203 	bic.w	r2, r3, #3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4949      	ldr	r1, [pc, #292]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f040 8086 	bne.w	8006808 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066fc:	4b45      	ldr	r3, [pc, #276]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a44      	ldr	r2, [pc, #272]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006708:	f7fc f990 	bl	8002a2c <HAL_GetTick>
 800670c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800670e:	e009      	b.n	8006724 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006710:	f7fc f98c 	bl	8002a2c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d902      	bls.n	8006724 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	73fb      	strb	r3, [r7, #15]
        break;
 8006722:	e005      	b.n	8006730 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006724:	4b3b      	ldr	r3, [pc, #236]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1ef      	bne.n	8006710 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d168      	bne.n	8006808 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d113      	bne.n	8006764 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800673c:	4b35      	ldr	r3, [pc, #212]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	4b35      	ldr	r3, [pc, #212]	; (8006818 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006742:	4013      	ands	r3, r2
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6892      	ldr	r2, [r2, #8]
 8006748:	0211      	lsls	r1, r2, #8
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	68d2      	ldr	r2, [r2, #12]
 800674e:	06d2      	lsls	r2, r2, #27
 8006750:	4311      	orrs	r1, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6852      	ldr	r2, [r2, #4]
 8006756:	3a01      	subs	r2, #1
 8006758:	0112      	lsls	r2, r2, #4
 800675a:	430a      	orrs	r2, r1
 800675c:	492d      	ldr	r1, [pc, #180]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 800675e:	4313      	orrs	r3, r2
 8006760:	610b      	str	r3, [r1, #16]
 8006762:	e02d      	b.n	80067c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d115      	bne.n	8006796 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800676a:	4b2a      	ldr	r3, [pc, #168]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	4b2b      	ldr	r3, [pc, #172]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6892      	ldr	r2, [r2, #8]
 8006776:	0211      	lsls	r1, r2, #8
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6912      	ldr	r2, [r2, #16]
 800677c:	0852      	lsrs	r2, r2, #1
 800677e:	3a01      	subs	r2, #1
 8006780:	0552      	lsls	r2, r2, #21
 8006782:	4311      	orrs	r1, r2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6852      	ldr	r2, [r2, #4]
 8006788:	3a01      	subs	r2, #1
 800678a:	0112      	lsls	r2, r2, #4
 800678c:	430a      	orrs	r2, r1
 800678e:	4921      	ldr	r1, [pc, #132]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006790:	4313      	orrs	r3, r2
 8006792:	610b      	str	r3, [r1, #16]
 8006794:	e014      	b.n	80067c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006796:	4b1f      	ldr	r3, [pc, #124]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	4b21      	ldr	r3, [pc, #132]	; (8006820 <RCCEx_PLLSAI1_Config+0x1e4>)
 800679c:	4013      	ands	r3, r2
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6892      	ldr	r2, [r2, #8]
 80067a2:	0211      	lsls	r1, r2, #8
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6952      	ldr	r2, [r2, #20]
 80067a8:	0852      	lsrs	r2, r2, #1
 80067aa:	3a01      	subs	r2, #1
 80067ac:	0652      	lsls	r2, r2, #25
 80067ae:	4311      	orrs	r1, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6852      	ldr	r2, [r2, #4]
 80067b4:	3a01      	subs	r2, #1
 80067b6:	0112      	lsls	r2, r2, #4
 80067b8:	430a      	orrs	r2, r1
 80067ba:	4916      	ldr	r1, [pc, #88]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80067c0:	4b14      	ldr	r3, [pc, #80]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a13      	ldr	r2, [pc, #76]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067cc:	f7fc f92e 	bl	8002a2c <HAL_GetTick>
 80067d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067d2:	e009      	b.n	80067e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067d4:	f7fc f92a 	bl	8002a2c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d902      	bls.n	80067e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	73fb      	strb	r3, [r7, #15]
          break;
 80067e6:	e005      	b.n	80067f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067e8:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0ef      	beq.n	80067d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	4904      	ldr	r1, [pc, #16]	; (8006814 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006804:	4313      	orrs	r3, r2
 8006806:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40021000 	.word	0x40021000
 8006818:	07ff800f 	.word	0x07ff800f
 800681c:	ff9f800f 	.word	0xff9f800f
 8006820:	f9ff800f 	.word	0xf9ff800f

08006824 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006832:	4b72      	ldr	r3, [pc, #456]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00e      	beq.n	800685c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800683e:	4b6f      	ldr	r3, [pc, #444]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f003 0203 	and.w	r2, r3, #3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d103      	bne.n	8006856 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
       ||
 8006852:	2b00      	cmp	r3, #0
 8006854:	d142      	bne.n	80068dc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
 800685a:	e03f      	b.n	80068dc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b03      	cmp	r3, #3
 8006862:	d018      	beq.n	8006896 <RCCEx_PLLSAI2_Config+0x72>
 8006864:	2b03      	cmp	r3, #3
 8006866:	d825      	bhi.n	80068b4 <RCCEx_PLLSAI2_Config+0x90>
 8006868:	2b01      	cmp	r3, #1
 800686a:	d002      	beq.n	8006872 <RCCEx_PLLSAI2_Config+0x4e>
 800686c:	2b02      	cmp	r3, #2
 800686e:	d009      	beq.n	8006884 <RCCEx_PLLSAI2_Config+0x60>
 8006870:	e020      	b.n	80068b4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006872:	4b62      	ldr	r3, [pc, #392]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d11d      	bne.n	80068ba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006882:	e01a      	b.n	80068ba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006884:	4b5d      	ldr	r3, [pc, #372]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	2b00      	cmp	r3, #0
 800688e:	d116      	bne.n	80068be <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006894:	e013      	b.n	80068be <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006896:	4b59      	ldr	r3, [pc, #356]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10f      	bne.n	80068c2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068a2:	4b56      	ldr	r3, [pc, #344]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068b2:	e006      	b.n	80068c2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
      break;
 80068b8:	e004      	b.n	80068c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068ba:	bf00      	nop
 80068bc:	e002      	b.n	80068c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068be:	bf00      	nop
 80068c0:	e000      	b.n	80068c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d108      	bne.n	80068dc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80068ca:	4b4c      	ldr	r3, [pc, #304]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f023 0203 	bic.w	r2, r3, #3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4949      	ldr	r1, [pc, #292]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f040 8086 	bne.w	80069f0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80068e4:	4b45      	ldr	r3, [pc, #276]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a44      	ldr	r2, [pc, #272]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f0:	f7fc f89c 	bl	8002a2c <HAL_GetTick>
 80068f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068f6:	e009      	b.n	800690c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068f8:	f7fc f898 	bl	8002a2c <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d902      	bls.n	800690c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	73fb      	strb	r3, [r7, #15]
        break;
 800690a:	e005      	b.n	8006918 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800690c:	4b3b      	ldr	r3, [pc, #236]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1ef      	bne.n	80068f8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d168      	bne.n	80069f0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d113      	bne.n	800694c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006924:	4b35      	ldr	r3, [pc, #212]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	4b35      	ldr	r3, [pc, #212]	; (8006a00 <RCCEx_PLLSAI2_Config+0x1dc>)
 800692a:	4013      	ands	r3, r2
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6892      	ldr	r2, [r2, #8]
 8006930:	0211      	lsls	r1, r2, #8
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68d2      	ldr	r2, [r2, #12]
 8006936:	06d2      	lsls	r2, r2, #27
 8006938:	4311      	orrs	r1, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6852      	ldr	r2, [r2, #4]
 800693e:	3a01      	subs	r2, #1
 8006940:	0112      	lsls	r2, r2, #4
 8006942:	430a      	orrs	r2, r1
 8006944:	492d      	ldr	r1, [pc, #180]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006946:	4313      	orrs	r3, r2
 8006948:	614b      	str	r3, [r1, #20]
 800694a:	e02d      	b.n	80069a8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d115      	bne.n	800697e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006952:	4b2a      	ldr	r3, [pc, #168]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006954:	695a      	ldr	r2, [r3, #20]
 8006956:	4b2b      	ldr	r3, [pc, #172]	; (8006a04 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6892      	ldr	r2, [r2, #8]
 800695e:	0211      	lsls	r1, r2, #8
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6912      	ldr	r2, [r2, #16]
 8006964:	0852      	lsrs	r2, r2, #1
 8006966:	3a01      	subs	r2, #1
 8006968:	0552      	lsls	r2, r2, #21
 800696a:	4311      	orrs	r1, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6852      	ldr	r2, [r2, #4]
 8006970:	3a01      	subs	r2, #1
 8006972:	0112      	lsls	r2, r2, #4
 8006974:	430a      	orrs	r2, r1
 8006976:	4921      	ldr	r1, [pc, #132]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006978:	4313      	orrs	r3, r2
 800697a:	614b      	str	r3, [r1, #20]
 800697c:	e014      	b.n	80069a8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800697e:	4b1f      	ldr	r3, [pc, #124]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006980:	695a      	ldr	r2, [r3, #20]
 8006982:	4b21      	ldr	r3, [pc, #132]	; (8006a08 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006984:	4013      	ands	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6892      	ldr	r2, [r2, #8]
 800698a:	0211      	lsls	r1, r2, #8
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6952      	ldr	r2, [r2, #20]
 8006990:	0852      	lsrs	r2, r2, #1
 8006992:	3a01      	subs	r2, #1
 8006994:	0652      	lsls	r2, r2, #25
 8006996:	4311      	orrs	r1, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6852      	ldr	r2, [r2, #4]
 800699c:	3a01      	subs	r2, #1
 800699e:	0112      	lsls	r2, r2, #4
 80069a0:	430a      	orrs	r2, r1
 80069a2:	4916      	ldr	r1, [pc, #88]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80069a8:	4b14      	ldr	r3, [pc, #80]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a13      	ldr	r2, [pc, #76]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b4:	f7fc f83a 	bl	8002a2c <HAL_GetTick>
 80069b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069ba:	e009      	b.n	80069d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069bc:	f7fc f836 	bl	8002a2c <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d902      	bls.n	80069d0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	73fb      	strb	r3, [r7, #15]
          break;
 80069ce:	e005      	b.n	80069dc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0ef      	beq.n	80069bc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069e4:	695a      	ldr	r2, [r3, #20]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	4904      	ldr	r1, [pc, #16]	; (80069fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	40021000 	.word	0x40021000
 8006a00:	07ff800f 	.word	0x07ff800f
 8006a04:	ff9f800f 	.word	0xff9f800f
 8006a08:	f9ff800f 	.word	0xf9ff800f

08006a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e095      	b.n	8006b4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d108      	bne.n	8006a38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a2e:	d009      	beq.n	8006a44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	61da      	str	r2, [r3, #28]
 8006a36:	e005      	b.n	8006a44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fb fd78 	bl	8002554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a84:	d902      	bls.n	8006a8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	e002      	b.n	8006a92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a9a:	d007      	beq.n	8006aac <HAL_SPI_Init+0xa0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aa4:	d002      	beq.n	8006aac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	ea42 0103 	orr.w	r1, r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	0c1b      	lsrs	r3, r3, #16
 8006b08:	f003 0204 	and.w	r2, r3, #4
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b28:	ea42 0103 	orr.w	r1, r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b088      	sub	sp, #32
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	603b      	str	r3, [r7, #0]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_SPI_Transmit+0x22>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e15f      	b.n	8006e34 <HAL_SPI_Transmit+0x2e2>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b7c:	f7fb ff56 	bl	8002a2c <HAL_GetTick>
 8006b80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d002      	beq.n	8006b98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
 8006b94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b96:	e148      	b.n	8006e2a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Transmit+0x52>
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ba8:	e13f      	b.n	8006e2a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2203      	movs	r2, #3
 8006bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	88fa      	ldrh	r2, [r7, #6]
 8006bc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf4:	d10f      	bne.n	8006c16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	d007      	beq.n	8006c34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c3c:	d94f      	bls.n	8006cde <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_SPI_Transmit+0xfa>
 8006c46:	8afb      	ldrh	r3, [r7, #22]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d142      	bne.n	8006cd2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	881a      	ldrh	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	1c9a      	adds	r2, r3, #2
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c70:	e02f      	b.n	8006cd2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d112      	bne.n	8006ca6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	881a      	ldrh	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c90:	1c9a      	adds	r2, r3, #2
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ca4:	e015      	b.n	8006cd2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ca6:	f7fb fec1 	bl	8002a2c <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d803      	bhi.n	8006cbe <HAL_SPI_Transmit+0x16c>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d102      	bne.n	8006cc4 <HAL_SPI_Transmit+0x172>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d106      	bne.n	8006cd2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006cd0:	e0ab      	b.n	8006e2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1ca      	bne.n	8006c72 <HAL_SPI_Transmit+0x120>
 8006cdc:	e080      	b.n	8006de0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <HAL_SPI_Transmit+0x19a>
 8006ce6:	8afb      	ldrh	r3, [r7, #22]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d174      	bne.n	8006dd6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d912      	bls.n	8006d1c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfa:	881a      	ldrh	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	1c9a      	adds	r2, r3, #2
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b02      	subs	r3, #2
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d1a:	e05c      	b.n	8006dd6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	7812      	ldrb	r2, [r2, #0]
 8006d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006d42:	e048      	b.n	8006dd6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d12b      	bne.n	8006daa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d912      	bls.n	8006d82 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	881a      	ldrh	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	1c9a      	adds	r2, r3, #2
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b02      	subs	r3, #2
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d80:	e029      	b.n	8006dd6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	330c      	adds	r3, #12
 8006d8c:	7812      	ldrb	r2, [r2, #0]
 8006d8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006da8:	e015      	b.n	8006dd6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006daa:	f7fb fe3f 	bl	8002a2c <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d803      	bhi.n	8006dc2 <HAL_SPI_Transmit+0x270>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d102      	bne.n	8006dc8 <HAL_SPI_Transmit+0x276>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006dd4:	e029      	b.n	8006e2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1b1      	bne.n	8006d44 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f001 f8cb 	bl	8007f80 <SPI_EndRxTxTransaction>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e003      	b.n	8006e2a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3720      	adds	r7, #32
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e60:	e11a      	b.n	8007098 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e6a:	d112      	bne.n	8006e92 <HAL_SPI_Receive+0x56>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10e      	bne.n	8006e92 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2204      	movs	r2, #4
 8006e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e7c:	88fa      	ldrh	r2, [r7, #6]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4613      	mov	r3, r2
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 f90e 	bl	80070aa <HAL_SPI_TransmitReceive>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	e107      	b.n	80070a2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_SPI_Receive+0x64>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e100      	b.n	80070a2 <HAL_SPI_Receive+0x266>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ea8:	f7fb fdc0 	bl	8002a2c <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <HAL_SPI_Receive+0x7e>
 8006eb4:	88fb      	ldrh	r3, [r7, #6]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d102      	bne.n	8006ec0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ebe:	e0eb      	b.n	8007098 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	88fa      	ldrh	r2, [r7, #6]
 8006ee0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f0a:	d908      	bls.n	8006f1e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	e007      	b.n	8006f2e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f2c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f36:	d10f      	bne.n	8006f58 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	d007      	beq.n	8006f76 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f7e:	d86f      	bhi.n	8007060 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f80:	e034      	b.n	8006fec <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d117      	bne.n	8006fc0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f103 020c 	add.w	r2, r3, #12
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006fbe:	e015      	b.n	8006fec <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc0:	f7fb fd34 	bl	8002a2c <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d803      	bhi.n	8006fd8 <HAL_SPI_Receive+0x19c>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d102      	bne.n	8006fde <HAL_SPI_Receive+0x1a2>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006fea:	e055      	b.n	8007098 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1c4      	bne.n	8006f82 <HAL_SPI_Receive+0x146>
 8006ff8:	e038      	b.n	800706c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b01      	cmp	r3, #1
 8007006:	d115      	bne.n	8007034 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	b292      	uxth	r2, r2
 8007014:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	1c9a      	adds	r2, r3, #2
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007032:	e015      	b.n	8007060 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007034:	f7fb fcfa 	bl	8002a2c <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d803      	bhi.n	800704c <HAL_SPI_Receive+0x210>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d102      	bne.n	8007052 <HAL_SPI_Receive+0x216>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800705e:	e01b      	b.n	8007098 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1c6      	bne.n	8006ffa <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 ff2d 	bl	8007ed0 <SPI_EndRxTransaction>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
 800708e:	e003      	b.n	8007098 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b08a      	sub	sp, #40	; 0x28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
 80070b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070b8:	2301      	movs	r3, #1
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x26>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e20a      	b.n	80074e6 <HAL_SPI_TransmitReceive+0x43c>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070d8:	f7fb fca8 	bl	8002a2c <HAL_GetTick>
 80070dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80070ec:	887b      	ldrh	r3, [r7, #2]
 80070ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80070f0:	887b      	ldrh	r3, [r7, #2]
 80070f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070f4:	7efb      	ldrb	r3, [r7, #27]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d00e      	beq.n	8007118 <HAL_SPI_TransmitReceive+0x6e>
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007100:	d106      	bne.n	8007110 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d102      	bne.n	8007110 <HAL_SPI_TransmitReceive+0x66>
 800710a:	7efb      	ldrb	r3, [r7, #27]
 800710c:	2b04      	cmp	r3, #4
 800710e:	d003      	beq.n	8007118 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007110:	2302      	movs	r3, #2
 8007112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007116:	e1e0      	b.n	80074da <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_SPI_TransmitReceive+0x80>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <HAL_SPI_TransmitReceive+0x80>
 8007124:	887b      	ldrh	r3, [r7, #2]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d103      	bne.n	8007132 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007130:	e1d3      	b.n	80074da <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b04      	cmp	r3, #4
 800713c:	d003      	beq.n	8007146 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2205      	movs	r2, #5
 8007142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	887a      	ldrh	r2, [r7, #2]
 8007156:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	887a      	ldrh	r2, [r7, #2]
 800715e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	887a      	ldrh	r2, [r7, #2]
 800716c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	887a      	ldrh	r2, [r7, #2]
 8007172:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007188:	d802      	bhi.n	8007190 <HAL_SPI_TransmitReceive+0xe6>
 800718a:	8a3b      	ldrh	r3, [r7, #16]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d908      	bls.n	80071a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800719e:	605a      	str	r2, [r3, #4]
 80071a0:	e007      	b.n	80071b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b40      	cmp	r3, #64	; 0x40
 80071be:	d007      	beq.n	80071d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071d8:	f240 8081 	bls.w	80072de <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <HAL_SPI_TransmitReceive+0x140>
 80071e4:	8a7b      	ldrh	r3, [r7, #18]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d16d      	bne.n	80072c6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	881a      	ldrh	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	1c9a      	adds	r2, r3, #2
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800720e:	e05a      	b.n	80072c6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b02      	cmp	r3, #2
 800721c:	d11b      	bne.n	8007256 <HAL_SPI_TransmitReceive+0x1ac>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d016      	beq.n	8007256 <HAL_SPI_TransmitReceive+0x1ac>
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	2b01      	cmp	r3, #1
 800722c:	d113      	bne.n	8007256 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	881a      	ldrh	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	1c9a      	adds	r2, r3, #2
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	b29a      	uxth	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b01      	cmp	r3, #1
 8007262:	d11c      	bne.n	800729e <HAL_SPI_TransmitReceive+0x1f4>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d016      	beq.n	800729e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	b292      	uxth	r2, r2
 800727c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	1c9a      	adds	r2, r3, #2
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800729a:	2301      	movs	r3, #1
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800729e:	f7fb fbc5 	bl	8002a2c <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d80b      	bhi.n	80072c6 <HAL_SPI_TransmitReceive+0x21c>
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d007      	beq.n	80072c6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80072c4:	e109      	b.n	80074da <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d19f      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x166>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d199      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x166>
 80072dc:	e0e3      	b.n	80074a6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_SPI_TransmitReceive+0x244>
 80072e6:	8a7b      	ldrh	r3, [r7, #18]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	f040 80cf 	bne.w	800748c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d912      	bls.n	800731e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	881a      	ldrh	r2, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	1c9a      	adds	r2, r3, #2
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007312:	b29b      	uxth	r3, r3
 8007314:	3b02      	subs	r3, #2
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800731c:	e0b6      	b.n	800748c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	330c      	adds	r3, #12
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007344:	e0a2      	b.n	800748c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b02      	cmp	r3, #2
 8007352:	d134      	bne.n	80073be <HAL_SPI_TransmitReceive+0x314>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d02f      	beq.n	80073be <HAL_SPI_TransmitReceive+0x314>
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	2b01      	cmp	r3, #1
 8007362:	d12c      	bne.n	80073be <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b01      	cmp	r3, #1
 800736c:	d912      	bls.n	8007394 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	881a      	ldrh	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	1c9a      	adds	r2, r3, #2
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b02      	subs	r3, #2
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007392:	e012      	b.n	80073ba <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	330c      	adds	r3, #12
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d148      	bne.n	800745e <HAL_SPI_TransmitReceive+0x3b4>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d042      	beq.n	800745e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d923      	bls.n	800742c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	b292      	uxth	r2, r2
 80073f0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	1c9a      	adds	r2, r3, #2
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007402:	b29b      	uxth	r3, r3
 8007404:	3b02      	subs	r3, #2
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b01      	cmp	r3, #1
 8007418:	d81f      	bhi.n	800745a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	e016      	b.n	800745a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f103 020c 	add.w	r2, r3, #12
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800745a:	2301      	movs	r3, #1
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800745e:	f7fb fae5 	bl	8002a2c <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746a:	429a      	cmp	r2, r3
 800746c:	d803      	bhi.n	8007476 <HAL_SPI_TransmitReceive+0x3cc>
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d102      	bne.n	800747c <HAL_SPI_TransmitReceive+0x3d2>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	2b00      	cmp	r3, #0
 800747a:	d107      	bne.n	800748c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800748a:	e026      	b.n	80074da <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	f47f af57 	bne.w	8007346 <HAL_SPI_TransmitReceive+0x29c>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800749e:	b29b      	uxth	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f47f af50 	bne.w	8007346 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 fd68 	bl	8007f80 <SPI_EndRxTxTransaction>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074d0:	e003      	b.n	80074da <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3728      	adds	r7, #40	; 0x28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b01      	cmp	r3, #1
 800750c:	d002      	beq.n	8007514 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800750e:	2302      	movs	r3, #2
 8007510:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007512:	e092      	b.n	800763a <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d110      	bne.n	800753e <HAL_SPI_Receive_IT+0x4e>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007524:	d10b      	bne.n	800753e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2204      	movs	r2, #4
 800752a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f889 	bl	800764c <HAL_SPI_TransmitReceive_IT>
 800753a:	4603      	mov	r3, r0
 800753c:	e07e      	b.n	800763c <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_SPI_Receive_IT+0x5a>
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800754e:	e074      	b.n	800763a <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_SPI_Receive_IT+0x6e>
 800755a:	2302      	movs	r3, #2
 800755c:	e06e      	b.n	800763c <HAL_SPI_Receive_IT+0x14c>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2204      	movs	r2, #4
 800756a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	88fa      	ldrh	r2, [r7, #6]
 800757e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	88fa      	ldrh	r2, [r7, #6]
 8007586:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075aa:	d90b      	bls.n	80075c4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075ba:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4a21      	ldr	r2, [pc, #132]	; (8007644 <HAL_SPI_Receive_IT+0x154>)
 80075c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80075c2:	e00a      	b.n	80075da <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075d2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <HAL_SPI_Receive_IT+0x158>)
 80075d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e2:	d10f      	bne.n	8007604 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007602:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d007      	beq.n	8007622 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007620:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007638:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	08007c49 	.word	0x08007c49
 8007648:	08007bf9 	.word	0x08007bf9

0800764c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007664:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800766c:	7dbb      	ldrb	r3, [r7, #22]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d00d      	beq.n	800768e <HAL_SPI_TransmitReceive_IT+0x42>
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007678:	d106      	bne.n	8007688 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <HAL_SPI_TransmitReceive_IT+0x3c>
 8007682:	7dbb      	ldrb	r3, [r7, #22]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d002      	beq.n	800768e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8007688:	2302      	movs	r3, #2
 800768a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800768c:	e07d      	b.n	800778a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d005      	beq.n	80076a0 <HAL_SPI_TransmitReceive_IT+0x54>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_SPI_TransmitReceive_IT+0x54>
 800769a:	887b      	ldrh	r3, [r7, #2]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076a4:	e071      	b.n	800778a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_SPI_TransmitReceive_IT+0x68>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e06b      	b.n	800778c <HAL_SPI_TransmitReceive_IT+0x140>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d003      	beq.n	80076d0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2205      	movs	r2, #5
 80076cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	887a      	ldrh	r2, [r7, #2]
 80076e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	887a      	ldrh	r2, [r7, #2]
 80076e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	887a      	ldrh	r2, [r7, #2]
 80076f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	887a      	ldrh	r2, [r7, #2]
 80076fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007706:	d906      	bls.n	8007716 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4a23      	ldr	r2, [pc, #140]	; (8007798 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800770c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a22      	ldr	r2, [pc, #136]	; (800779c <HAL_SPI_TransmitReceive_IT+0x150>)
 8007712:	651a      	str	r2, [r3, #80]	; 0x50
 8007714:	e005      	b.n	8007722 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4a21      	ldr	r2, [pc, #132]	; (80077a0 <HAL_SPI_TransmitReceive_IT+0x154>)
 800771a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a21      	ldr	r2, [pc, #132]	; (80077a4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007720:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800772a:	d802      	bhi.n	8007732 <HAL_SPI_TransmitReceive_IT+0xe6>
 800772c:	887b      	ldrh	r3, [r7, #2]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d908      	bls.n	8007744 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007740:	605a      	str	r2, [r3, #4]
 8007742:	e007      	b.n	8007754 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007752:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775e:	2b40      	cmp	r3, #64	; 0x40
 8007760:	d007      	beq.n	8007772 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007770:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007788:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
}
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	08007b33 	.word	0x08007b33
 800779c:	08007b99 	.word	0x08007b99
 80077a0:	080079e3 	.word	0x080079e3
 80077a4:	08007aa1 	.word	0x08007aa1

080077a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10e      	bne.n	80077e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d009      	beq.n	80077e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
    return;
 80077e6:	e0ce      	b.n	8007986 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <HAL_SPI_IRQHandler+0x5e>
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	4798      	blx	r3
    return;
 8007804:	e0bf      	b.n	8007986 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <HAL_SPI_IRQHandler+0x7e>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d105      	bne.n	8007826 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80b0 	beq.w	8007986 <HAL_SPI_IRQHandler+0x1de>
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80aa 	beq.w	8007986 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d023      	beq.n	8007884 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b03      	cmp	r3, #3
 8007846:	d011      	beq.n	800786c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784c:	f043 0204 	orr.w	r2, r3, #4
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	e00b      	b.n	8007884 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800786c:	2300      	movs	r3, #0
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	693b      	ldr	r3, [r7, #16]
        return;
 8007882:	e080      	b.n	8007986 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d014      	beq.n	80078b8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007892:	f043 0201 	orr.w	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00c      	beq.n	80078dc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c6:	f043 0208 	orr.w	r2, r3, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80078ce:	2300      	movs	r3, #0
 80078d0:	60bb      	str	r3, [r7, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d04f      	beq.n	8007984 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d104      	bne.n	8007910 <HAL_SPI_IRQHandler+0x168>
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d034      	beq.n	800797a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0203 	bic.w	r2, r2, #3
 800791e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007924:	2b00      	cmp	r3, #0
 8007926:	d011      	beq.n	800794c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792c:	4a17      	ldr	r2, [pc, #92]	; (800798c <HAL_SPI_IRQHandler+0x1e4>)
 800792e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007934:	4618      	mov	r0, r3
 8007936:	f7fb f9ba 	bl	8002cae <HAL_DMA_Abort_IT>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007944:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007950:	2b00      	cmp	r3, #0
 8007952:	d016      	beq.n	8007982 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007958:	4a0c      	ldr	r2, [pc, #48]	; (800798c <HAL_SPI_IRQHandler+0x1e4>)
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007960:	4618      	mov	r0, r3
 8007962:	f7fb f9a4 	bl	8002cae <HAL_DMA_Abort_IT>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007970:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007978:	e003      	b.n	8007982 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f812 	bl	80079a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007980:	e000      	b.n	8007984 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007982:	bf00      	nop
    return;
 8007984:	bf00      	nop
  }
}
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	080079b9 	.word	0x080079b9

08007990 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff ffe5 	bl	80079a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d923      	bls.n	8007a3e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	b292      	uxth	r2, r2
 8007a02:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	1c9a      	adds	r2, r3, #2
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b02      	subs	r3, #2
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d11f      	bne.n	8007a6c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a3a:	605a      	str	r2, [r3, #4]
 8007a3c:	e016      	b.n	8007a6c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f103 020c 	add.w	r2, r3, #12
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10f      	bne.n	8007a98 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a86:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 faba 	bl	800800c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d912      	bls.n	8007ad8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	881a      	ldrh	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	1c9a      	adds	r2, r3, #2
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b02      	subs	r3, #2
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ad6:	e012      	b.n	8007afe <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	7812      	ldrb	r2, [r2, #0]
 8007ae4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d110      	bne.n	8007b2a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b16:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fa71 	bl	800800c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68da      	ldr	r2, [r3, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	b292      	uxth	r2, r2
 8007b46:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	1c9a      	adds	r2, r3, #2
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10f      	bne.n	8007b90 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d102      	bne.n	8007b90 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fa3e 	bl	800800c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	881a      	ldrh	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	1c9a      	adds	r2, r3, #2
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d110      	bne.n	8007bf0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bdc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d102      	bne.n	8007bf0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa0e 	bl	800800c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f103 020c 	add.w	r2, r3, #12
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0c:	7812      	ldrb	r2, [r2, #0]
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	3b01      	subs	r3, #1
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d102      	bne.n	8007c40 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa28 	bl	8008090 <SPI_CloseRx_ISR>
  }
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa02 	bl	8008090 <SPI_CloseRx_ISR>
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ca4:	f7fa fec2 	bl	8002a2c <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cb4:	f7fa feba 	bl	8002a2c <HAL_GetTick>
 8007cb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cba:	4b39      	ldr	r3, [pc, #228]	; (8007da0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	015b      	lsls	r3, r3, #5
 8007cc0:	0d1b      	lsrs	r3, r3, #20
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	fb02 f303 	mul.w	r3, r2, r3
 8007cc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cca:	e054      	b.n	8007d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd2:	d050      	beq.n	8007d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cd4:	f7fa feaa 	bl	8002a2c <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d902      	bls.n	8007cea <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d13d      	bne.n	8007d66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d02:	d111      	bne.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d0c:	d004      	beq.n	8007d18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d16:	d107      	bne.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d30:	d10f      	bne.n	8007d52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e017      	b.n	8007d96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	bf0c      	ite	eq
 8007d86:	2301      	moveq	r3, #1
 8007d88:	2300      	movne	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d19b      	bne.n	8007ccc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20004b0c 	.word	0x20004b0c

08007da4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007db6:	f7fa fe39 	bl	8002a2c <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007dc6:	f7fa fe31 	bl	8002a2c <HAL_GetTick>
 8007dca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007dd4:	4b3d      	ldr	r3, [pc, #244]	; (8007ecc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	00da      	lsls	r2, r3, #3
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	0d1b      	lsrs	r3, r3, #20
 8007de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de6:	fb02 f303 	mul.w	r3, r2, r3
 8007dea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007dec:	e060      	b.n	8007eb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007df4:	d107      	bne.n	8007e06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d050      	beq.n	8007eb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e0e:	f7fa fe0d 	bl	8002a2c <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d902      	bls.n	8007e24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d13d      	bne.n	8007ea0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e3c:	d111      	bne.n	8007e62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e46:	d004      	beq.n	8007e52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e50:	d107      	bne.n	8007e62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6a:	d10f      	bne.n	8007e8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e010      	b.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4013      	ands	r3, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d196      	bne.n	8007dee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3728      	adds	r7, #40	; 0x28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20004b0c 	.word	0x20004b0c

08007ed0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ee4:	d111      	bne.n	8007f0a <SPI_EndRxTransaction+0x3a>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eee:	d004      	beq.n	8007efa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef8:	d107      	bne.n	8007f0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f08:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff febd 	bl	8007c94 <SPI_WaitFlagStateUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d007      	beq.n	8007f30 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f24:	f043 0220 	orr.w	r2, r3, #32
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e023      	b.n	8007f78 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f38:	d11d      	bne.n	8007f76 <SPI_EndRxTransaction+0xa6>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f42:	d004      	beq.n	8007f4e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f4c:	d113      	bne.n	8007f76 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff ff22 	bl	8007da4 <SPI_WaitFifoStateUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d007      	beq.n	8007f76 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f6a:	f043 0220 	orr.w	r2, r3, #32
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e000      	b.n	8007f78 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff ff03 	bl	8007da4 <SPI_WaitFifoStateUntilTimeout>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d007      	beq.n	8007fb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa8:	f043 0220 	orr.w	r2, r3, #32
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e027      	b.n	8008004 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2180      	movs	r1, #128	; 0x80
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff fe68 	bl	8007c94 <SPI_WaitFlagStateUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fce:	f043 0220 	orr.w	r2, r3, #32
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e014      	b.n	8008004 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff fedc 	bl	8007da4 <SPI_WaitFifoStateUntilTimeout>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff6:	f043 0220 	orr.w	r2, r3, #32
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e000      	b.n	8008004 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008014:	f7fa fd0a 	bl	8002a2c <HAL_GetTick>
 8008018:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0220 	bic.w	r2, r2, #32
 8008028:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	2164      	movs	r1, #100	; 0x64
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff ffa6 	bl	8007f80 <SPI_EndRxTxTransaction>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803e:	f043 0220 	orr.w	r2, r3, #32
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804a:	2b00      	cmp	r3, #0
 800804c:	d115      	bne.n	800807a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b04      	cmp	r3, #4
 8008058:	d107      	bne.n	800806a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7f9 fbc2 	bl	80017ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008068:	e00e      	b.n	8008088 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff fc8c 	bl	8007990 <HAL_SPI_TxRxCpltCallback>
}
 8008078:	e006      	b.n	8008088 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff fc8e 	bl	80079a4 <HAL_SPI_ErrorCallback>
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80080a6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80080a8:	f7fa fcc0 	bl	8002a2c <HAL_GetTick>
 80080ac:	4603      	mov	r3, r0
 80080ae:	461a      	mov	r2, r3
 80080b0:	2164      	movs	r1, #100	; 0x64
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff ff0c 	bl	8007ed0 <SPI_EndRxTransaction>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d005      	beq.n	80080ca <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c2:	f043 0220 	orr.w	r2, r3, #32
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d103      	bne.n	80080e2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7f9 fb86 	bl	80017ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80080e0:	e002      	b.n	80080e8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff fc5e 	bl	80079a4 <HAL_SPI_ErrorCallback>
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e042      	b.n	8008188 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7fa fb45 	bl	80027a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2224      	movs	r2, #36	; 0x24
 800811e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0201 	bic.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fbb4 	bl	80088a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f8b5 	bl	80082b0 <UART_SetConfig>
 8008146:	4603      	mov	r3, r0
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e01b      	b.n	8008188 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800815e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800816e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0201 	orr.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fc33 	bl	80089ec <UART_CheckIdleState>
 8008186:	4603      	mov	r3, r0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08a      	sub	sp, #40	; 0x28
 8008194:	af02      	add	r7, sp, #8
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d17c      	bne.n	80082a4 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_UART_Transmit+0x26>
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e075      	b.n	80082a6 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2221      	movs	r2, #33	; 0x21
 80081c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081ca:	f7fa fc2f 	bl	8002a2c <HAL_GetTick>
 80081ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	88fa      	ldrh	r2, [r7, #6]
 80081d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	88fa      	ldrh	r2, [r7, #6]
 80081dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e8:	d108      	bne.n	80081fc <HAL_UART_Transmit+0x6c>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d104      	bne.n	80081fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	61bb      	str	r3, [r7, #24]
 80081fa:	e003      	b.n	8008204 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008204:	e031      	b.n	800826a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2200      	movs	r2, #0
 800820e:	2180      	movs	r1, #128	; 0x80
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 fc95 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e03e      	b.n	80082a6 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10b      	bne.n	8008246 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	881a      	ldrh	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800823a:	b292      	uxth	r2, r2
 800823c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	3302      	adds	r3, #2
 8008242:	61bb      	str	r3, [r7, #24]
 8008244:	e008      	b.n	8008258 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	781a      	ldrb	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	b292      	uxth	r2, r2
 8008250:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	3301      	adds	r3, #1
 8008256:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800825e:	b29b      	uxth	r3, r3
 8008260:	3b01      	subs	r3, #1
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008270:	b29b      	uxth	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1c7      	bne.n	8008206 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2200      	movs	r2, #0
 800827e:	2140      	movs	r1, #64	; 0x40
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fc5d 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2220      	movs	r2, #32
 8008290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e006      	b.n	80082a6 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	e000      	b.n	80082a6 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80082a4:	2302      	movs	r3, #2
  }
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3720      	adds	r7, #32
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082b4:	b08c      	sub	sp, #48	; 0x30
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	431a      	orrs	r2, r3
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	4baa      	ldr	r3, [pc, #680]	; (8008588 <UART_SetConfig+0x2d8>)
 80082e0:	4013      	ands	r3, r2
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	6812      	ldr	r2, [r2, #0]
 80082e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e8:	430b      	orrs	r3, r1
 80082ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a9f      	ldr	r2, [pc, #636]	; (800858c <UART_SetConfig+0x2dc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d004      	beq.n	800831c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008318:	4313      	orrs	r3, r2
 800831a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008326:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	6812      	ldr	r2, [r2, #0]
 800832e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008330:	430b      	orrs	r3, r1
 8008332:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833a:	f023 010f 	bic.w	r1, r3, #15
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	430a      	orrs	r2, r1
 8008348:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a90      	ldr	r2, [pc, #576]	; (8008590 <UART_SetConfig+0x2e0>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d125      	bne.n	80083a0 <UART_SetConfig+0xf0>
 8008354:	4b8f      	ldr	r3, [pc, #572]	; (8008594 <UART_SetConfig+0x2e4>)
 8008356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	2b03      	cmp	r3, #3
 8008360:	d81a      	bhi.n	8008398 <UART_SetConfig+0xe8>
 8008362:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <UART_SetConfig+0xb8>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	08008379 	.word	0x08008379
 800836c:	08008389 	.word	0x08008389
 8008370:	08008381 	.word	0x08008381
 8008374:	08008391 	.word	0x08008391
 8008378:	2301      	movs	r3, #1
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837e:	e116      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008380:	2302      	movs	r3, #2
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008386:	e112      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008388:	2304      	movs	r3, #4
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838e:	e10e      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008390:	2308      	movs	r3, #8
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008396:	e10a      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008398:	2310      	movs	r3, #16
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839e:	e106      	b.n	80085ae <UART_SetConfig+0x2fe>
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a7c      	ldr	r2, [pc, #496]	; (8008598 <UART_SetConfig+0x2e8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d138      	bne.n	800841c <UART_SetConfig+0x16c>
 80083aa:	4b7a      	ldr	r3, [pc, #488]	; (8008594 <UART_SetConfig+0x2e4>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b0:	f003 030c 	and.w	r3, r3, #12
 80083b4:	2b0c      	cmp	r3, #12
 80083b6:	d82d      	bhi.n	8008414 <UART_SetConfig+0x164>
 80083b8:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <UART_SetConfig+0x110>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083f5 	.word	0x080083f5
 80083c4:	08008415 	.word	0x08008415
 80083c8:	08008415 	.word	0x08008415
 80083cc:	08008415 	.word	0x08008415
 80083d0:	08008405 	.word	0x08008405
 80083d4:	08008415 	.word	0x08008415
 80083d8:	08008415 	.word	0x08008415
 80083dc:	08008415 	.word	0x08008415
 80083e0:	080083fd 	.word	0x080083fd
 80083e4:	08008415 	.word	0x08008415
 80083e8:	08008415 	.word	0x08008415
 80083ec:	08008415 	.word	0x08008415
 80083f0:	0800840d 	.word	0x0800840d
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fa:	e0d8      	b.n	80085ae <UART_SetConfig+0x2fe>
 80083fc:	2302      	movs	r3, #2
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008402:	e0d4      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008404:	2304      	movs	r3, #4
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840a:	e0d0      	b.n	80085ae <UART_SetConfig+0x2fe>
 800840c:	2308      	movs	r3, #8
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008412:	e0cc      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008414:	2310      	movs	r3, #16
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800841a:	e0c8      	b.n	80085ae <UART_SetConfig+0x2fe>
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a5e      	ldr	r2, [pc, #376]	; (800859c <UART_SetConfig+0x2ec>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d125      	bne.n	8008472 <UART_SetConfig+0x1c2>
 8008426:	4b5b      	ldr	r3, [pc, #364]	; (8008594 <UART_SetConfig+0x2e4>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008430:	2b30      	cmp	r3, #48	; 0x30
 8008432:	d016      	beq.n	8008462 <UART_SetConfig+0x1b2>
 8008434:	2b30      	cmp	r3, #48	; 0x30
 8008436:	d818      	bhi.n	800846a <UART_SetConfig+0x1ba>
 8008438:	2b20      	cmp	r3, #32
 800843a:	d00a      	beq.n	8008452 <UART_SetConfig+0x1a2>
 800843c:	2b20      	cmp	r3, #32
 800843e:	d814      	bhi.n	800846a <UART_SetConfig+0x1ba>
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <UART_SetConfig+0x19a>
 8008444:	2b10      	cmp	r3, #16
 8008446:	d008      	beq.n	800845a <UART_SetConfig+0x1aa>
 8008448:	e00f      	b.n	800846a <UART_SetConfig+0x1ba>
 800844a:	2300      	movs	r3, #0
 800844c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008450:	e0ad      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008452:	2302      	movs	r3, #2
 8008454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008458:	e0a9      	b.n	80085ae <UART_SetConfig+0x2fe>
 800845a:	2304      	movs	r3, #4
 800845c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008460:	e0a5      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008462:	2308      	movs	r3, #8
 8008464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008468:	e0a1      	b.n	80085ae <UART_SetConfig+0x2fe>
 800846a:	2310      	movs	r3, #16
 800846c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008470:	e09d      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a4a      	ldr	r2, [pc, #296]	; (80085a0 <UART_SetConfig+0x2f0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d125      	bne.n	80084c8 <UART_SetConfig+0x218>
 800847c:	4b45      	ldr	r3, [pc, #276]	; (8008594 <UART_SetConfig+0x2e4>)
 800847e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008482:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008486:	2bc0      	cmp	r3, #192	; 0xc0
 8008488:	d016      	beq.n	80084b8 <UART_SetConfig+0x208>
 800848a:	2bc0      	cmp	r3, #192	; 0xc0
 800848c:	d818      	bhi.n	80084c0 <UART_SetConfig+0x210>
 800848e:	2b80      	cmp	r3, #128	; 0x80
 8008490:	d00a      	beq.n	80084a8 <UART_SetConfig+0x1f8>
 8008492:	2b80      	cmp	r3, #128	; 0x80
 8008494:	d814      	bhi.n	80084c0 <UART_SetConfig+0x210>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <UART_SetConfig+0x1f0>
 800849a:	2b40      	cmp	r3, #64	; 0x40
 800849c:	d008      	beq.n	80084b0 <UART_SetConfig+0x200>
 800849e:	e00f      	b.n	80084c0 <UART_SetConfig+0x210>
 80084a0:	2300      	movs	r3, #0
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084a6:	e082      	b.n	80085ae <UART_SetConfig+0x2fe>
 80084a8:	2302      	movs	r3, #2
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ae:	e07e      	b.n	80085ae <UART_SetConfig+0x2fe>
 80084b0:	2304      	movs	r3, #4
 80084b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b6:	e07a      	b.n	80085ae <UART_SetConfig+0x2fe>
 80084b8:	2308      	movs	r3, #8
 80084ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084be:	e076      	b.n	80085ae <UART_SetConfig+0x2fe>
 80084c0:	2310      	movs	r3, #16
 80084c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c6:	e072      	b.n	80085ae <UART_SetConfig+0x2fe>
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a35      	ldr	r2, [pc, #212]	; (80085a4 <UART_SetConfig+0x2f4>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d12a      	bne.n	8008528 <UART_SetConfig+0x278>
 80084d2:	4b30      	ldr	r3, [pc, #192]	; (8008594 <UART_SetConfig+0x2e4>)
 80084d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084e0:	d01a      	beq.n	8008518 <UART_SetConfig+0x268>
 80084e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084e6:	d81b      	bhi.n	8008520 <UART_SetConfig+0x270>
 80084e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ec:	d00c      	beq.n	8008508 <UART_SetConfig+0x258>
 80084ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084f2:	d815      	bhi.n	8008520 <UART_SetConfig+0x270>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <UART_SetConfig+0x250>
 80084f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fc:	d008      	beq.n	8008510 <UART_SetConfig+0x260>
 80084fe:	e00f      	b.n	8008520 <UART_SetConfig+0x270>
 8008500:	2300      	movs	r3, #0
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008506:	e052      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008508:	2302      	movs	r3, #2
 800850a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800850e:	e04e      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008510:	2304      	movs	r3, #4
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008516:	e04a      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008518:	2308      	movs	r3, #8
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800851e:	e046      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008526:	e042      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a17      	ldr	r2, [pc, #92]	; (800858c <UART_SetConfig+0x2dc>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d13a      	bne.n	80085a8 <UART_SetConfig+0x2f8>
 8008532:	4b18      	ldr	r3, [pc, #96]	; (8008594 <UART_SetConfig+0x2e4>)
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008538:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800853c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008540:	d01a      	beq.n	8008578 <UART_SetConfig+0x2c8>
 8008542:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008546:	d81b      	bhi.n	8008580 <UART_SetConfig+0x2d0>
 8008548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800854c:	d00c      	beq.n	8008568 <UART_SetConfig+0x2b8>
 800854e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008552:	d815      	bhi.n	8008580 <UART_SetConfig+0x2d0>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <UART_SetConfig+0x2b0>
 8008558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800855c:	d008      	beq.n	8008570 <UART_SetConfig+0x2c0>
 800855e:	e00f      	b.n	8008580 <UART_SetConfig+0x2d0>
 8008560:	2300      	movs	r3, #0
 8008562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008566:	e022      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008568:	2302      	movs	r3, #2
 800856a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856e:	e01e      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008570:	2304      	movs	r3, #4
 8008572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008576:	e01a      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008578:	2308      	movs	r3, #8
 800857a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800857e:	e016      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008580:	2310      	movs	r3, #16
 8008582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008586:	e012      	b.n	80085ae <UART_SetConfig+0x2fe>
 8008588:	cfff69f3 	.word	0xcfff69f3
 800858c:	40008000 	.word	0x40008000
 8008590:	40013800 	.word	0x40013800
 8008594:	40021000 	.word	0x40021000
 8008598:	40004400 	.word	0x40004400
 800859c:	40004800 	.word	0x40004800
 80085a0:	40004c00 	.word	0x40004c00
 80085a4:	40005000 	.word	0x40005000
 80085a8:	2310      	movs	r3, #16
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4aae      	ldr	r2, [pc, #696]	; (800886c <UART_SetConfig+0x5bc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	f040 8097 	bne.w	80086e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085be:	2b08      	cmp	r3, #8
 80085c0:	d823      	bhi.n	800860a <UART_SetConfig+0x35a>
 80085c2:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <UART_SetConfig+0x318>)
 80085c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c8:	080085ed 	.word	0x080085ed
 80085cc:	0800860b 	.word	0x0800860b
 80085d0:	080085f5 	.word	0x080085f5
 80085d4:	0800860b 	.word	0x0800860b
 80085d8:	080085fb 	.word	0x080085fb
 80085dc:	0800860b 	.word	0x0800860b
 80085e0:	0800860b 	.word	0x0800860b
 80085e4:	0800860b 	.word	0x0800860b
 80085e8:	08008603 	.word	0x08008603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085ec:	f7fd fbaa 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 80085f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80085f2:	e010      	b.n	8008616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085f4:	4b9e      	ldr	r3, [pc, #632]	; (8008870 <UART_SetConfig+0x5c0>)
 80085f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80085f8:	e00d      	b.n	8008616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085fa:	f7fd fb0b 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 80085fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008600:	e009      	b.n	8008616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008608:	e005      	b.n	8008616 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8130 	beq.w	800887e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008622:	4a94      	ldr	r2, [pc, #592]	; (8008874 <UART_SetConfig+0x5c4>)
 8008624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008628:	461a      	mov	r2, r3
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008630:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	4613      	mov	r3, r2
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	4413      	add	r3, r2
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	429a      	cmp	r2, r3
 8008640:	d305      	bcc.n	800864e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	429a      	cmp	r2, r3
 800864c:	d903      	bls.n	8008656 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008654:	e113      	b.n	800887e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	2200      	movs	r2, #0
 800865a:	60bb      	str	r3, [r7, #8]
 800865c:	60fa      	str	r2, [r7, #12]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	4a84      	ldr	r2, [pc, #528]	; (8008874 <UART_SetConfig+0x5c4>)
 8008664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008668:	b29b      	uxth	r3, r3
 800866a:	2200      	movs	r2, #0
 800866c:	603b      	str	r3, [r7, #0]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008678:	f7f7 fdc0 	bl	80001fc <__aeabi_uldivmod>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4610      	mov	r0, r2
 8008682:	4619      	mov	r1, r3
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	020b      	lsls	r3, r1, #8
 800868e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008692:	0202      	lsls	r2, r0, #8
 8008694:	6979      	ldr	r1, [r7, #20]
 8008696:	6849      	ldr	r1, [r1, #4]
 8008698:	0849      	lsrs	r1, r1, #1
 800869a:	2000      	movs	r0, #0
 800869c:	460c      	mov	r4, r1
 800869e:	4605      	mov	r5, r0
 80086a0:	eb12 0804 	adds.w	r8, r2, r4
 80086a4:	eb43 0905 	adc.w	r9, r3, r5
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	469a      	mov	sl, r3
 80086b0:	4693      	mov	fp, r2
 80086b2:	4652      	mov	r2, sl
 80086b4:	465b      	mov	r3, fp
 80086b6:	4640      	mov	r0, r8
 80086b8:	4649      	mov	r1, r9
 80086ba:	f7f7 fd9f 	bl	80001fc <__aeabi_uldivmod>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4613      	mov	r3, r2
 80086c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086cc:	d308      	bcc.n	80086e0 <UART_SetConfig+0x430>
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086d4:	d204      	bcs.n	80086e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6a3a      	ldr	r2, [r7, #32]
 80086dc:	60da      	str	r2, [r3, #12]
 80086de:	e0ce      	b.n	800887e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086e6:	e0ca      	b.n	800887e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086f0:	d166      	bne.n	80087c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80086f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d827      	bhi.n	800874a <UART_SetConfig+0x49a>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <UART_SetConfig+0x450>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	08008725 	.word	0x08008725
 8008704:	0800872d 	.word	0x0800872d
 8008708:	08008735 	.word	0x08008735
 800870c:	0800874b 	.word	0x0800874b
 8008710:	0800873b 	.word	0x0800873b
 8008714:	0800874b 	.word	0x0800874b
 8008718:	0800874b 	.word	0x0800874b
 800871c:	0800874b 	.word	0x0800874b
 8008720:	08008743 	.word	0x08008743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008724:	f7fd fb0e 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8008728:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800872a:	e014      	b.n	8008756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800872c:	f7fd fb20 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8008730:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008732:	e010      	b.n	8008756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008734:	4b4e      	ldr	r3, [pc, #312]	; (8008870 <UART_SetConfig+0x5c0>)
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008738:	e00d      	b.n	8008756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800873a:	f7fd fa6b 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 800873e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008740:	e009      	b.n	8008756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008746:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008748:	e005      	b.n	8008756 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8090 	beq.w	800887e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	4a44      	ldr	r2, [pc, #272]	; (8008874 <UART_SetConfig+0x5c4>)
 8008764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008768:	461a      	mov	r2, r3
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008770:	005a      	lsls	r2, r3, #1
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	085b      	lsrs	r3, r3, #1
 8008778:	441a      	add	r2, r3
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008782:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	2b0f      	cmp	r3, #15
 8008788:	d916      	bls.n	80087b8 <UART_SetConfig+0x508>
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008790:	d212      	bcs.n	80087b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	b29b      	uxth	r3, r3
 8008796:	f023 030f 	bic.w	r3, r3, #15
 800879a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	085b      	lsrs	r3, r3, #1
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	f003 0307 	and.w	r3, r3, #7
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	8bfb      	ldrh	r3, [r7, #30]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	8bfa      	ldrh	r2, [r7, #30]
 80087b4:	60da      	str	r2, [r3, #12]
 80087b6:	e062      	b.n	800887e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087be:	e05e      	b.n	800887e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d828      	bhi.n	800881a <UART_SetConfig+0x56a>
 80087c8:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <UART_SetConfig+0x520>)
 80087ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ce:	bf00      	nop
 80087d0:	080087f5 	.word	0x080087f5
 80087d4:	080087fd 	.word	0x080087fd
 80087d8:	08008805 	.word	0x08008805
 80087dc:	0800881b 	.word	0x0800881b
 80087e0:	0800880b 	.word	0x0800880b
 80087e4:	0800881b 	.word	0x0800881b
 80087e8:	0800881b 	.word	0x0800881b
 80087ec:	0800881b 	.word	0x0800881b
 80087f0:	08008813 	.word	0x08008813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f4:	f7fd faa6 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 80087f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087fa:	e014      	b.n	8008826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087fc:	f7fd fab8 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8008800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008802:	e010      	b.n	8008826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008804:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <UART_SetConfig+0x5c0>)
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008808:	e00d      	b.n	8008826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880a:	f7fd fa03 	bl	8005c14 <HAL_RCC_GetSysClockFreq>
 800880e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008810:	e009      	b.n	8008826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008818:	e005      	b.n	8008826 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008824:	bf00      	nop
    }

    if (pclk != 0U)
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d028      	beq.n	800887e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	4a10      	ldr	r2, [pc, #64]	; (8008874 <UART_SetConfig+0x5c4>)
 8008832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008836:	461a      	mov	r2, r3
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	fbb3 f2f2 	udiv	r2, r3, r2
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	085b      	lsrs	r3, r3, #1
 8008844:	441a      	add	r2, r3
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	fbb2 f3f3 	udiv	r3, r2, r3
 800884e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	2b0f      	cmp	r3, #15
 8008854:	d910      	bls.n	8008878 <UART_SetConfig+0x5c8>
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885c:	d20c      	bcs.n	8008878 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	b29a      	uxth	r2, r3
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60da      	str	r2, [r3, #12]
 8008868:	e009      	b.n	800887e <UART_SetConfig+0x5ce>
 800886a:	bf00      	nop
 800886c:	40008000 	.word	0x40008000
 8008870:	00f42400 	.word	0x00f42400
 8008874:	0800902c 	.word	0x0800902c
      }
      else
      {
        ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2201      	movs	r2, #1
 8008882:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2201      	movs	r2, #1
 800888a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2200      	movs	r2, #0
 8008892:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2200      	movs	r2, #0
 8008898:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800889a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3730      	adds	r7, #48	; 0x30
 80088a2:	46bd      	mov	sp, r7
 80088a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080088a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	f003 0308 	and.w	r3, r3, #8
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01a      	beq.n	80089be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089a6:	d10a      	bne.n	80089be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	605a      	str	r2, [r3, #4]
  }
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b098      	sub	sp, #96	; 0x60
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089fc:	f7fa f816 	bl	8002a2c <HAL_GetTick>
 8008a00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d12f      	bne.n	8008a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f88e 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d022      	beq.n	8008a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a48:	647b      	str	r3, [r7, #68]	; 0x44
 8008a4a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e063      	b.n	8008b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0304 	and.w	r3, r3, #4
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	d149      	bne.n	8008b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a86:	2200      	movs	r2, #0
 8008a88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f857 	bl	8008b40 <UART_WaitOnFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d03c      	beq.n	8008b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8008ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e6      	bne.n	8008a98 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aea:	61fa      	str	r2, [r7, #28]
 8008aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	69b9      	ldr	r1, [r7, #24]
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	617b      	str	r3, [r7, #20]
   return(result);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e5      	bne.n	8008aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e012      	b.n	8008b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3758      	adds	r7, #88	; 0x58
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b50:	e049      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b58:	d045      	beq.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b5a:	f7f9 ff67 	bl	8002a2c <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d302      	bcc.n	8008b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e048      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0304 	and.w	r3, r3, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d031      	beq.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d110      	bne.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2208      	movs	r2, #8
 8008b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f838 	bl	8008c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e029      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc0:	d111      	bne.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 f81e 	bl	8008c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e00f      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	69da      	ldr	r2, [r3, #28]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	bf0c      	ite	eq
 8008bf6:	2301      	moveq	r3, #1
 8008bf8:	2300      	movne	r3, #0
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d0a6      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b095      	sub	sp, #84	; 0x54
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c34:	643b      	str	r3, [r7, #64]	; 0x40
 8008c36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c5e:	f023 0301 	bic.w	r3, r3, #1
 8008c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3308      	adds	r3, #8
 8008c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e3      	bne.n	8008c48 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d118      	bne.n	8008cba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f023 0310 	bic.w	r3, r3, #16
 8008c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca6:	61bb      	str	r3, [r7, #24]
 8008ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	6979      	ldr	r1, [r7, #20]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e6      	bne.n	8008c88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008cce:	bf00      	nop
 8008cd0:	3754      	adds	r7, #84	; 0x54
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b085      	sub	sp, #20
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e027      	b.n	8008d40 <HAL_UARTEx_DisableFifoMode+0x66>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2224      	movs	r2, #36	; 0x24
 8008cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0201 	bic.w	r2, r2, #1
 8008d16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d101      	bne.n	8008d64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d60:	2302      	movs	r3, #2
 8008d62:	e02d      	b.n	8008dc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2224      	movs	r2, #36	; 0x24
 8008d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0201 	bic.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f84f 	bl	8008e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2220      	movs	r2, #32
 8008db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d101      	bne.n	8008de0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ddc:	2302      	movs	r3, #2
 8008dde:	e02d      	b.n	8008e3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2224      	movs	r2, #36	; 0x24
 8008dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0201 	bic.w	r2, r2, #1
 8008e06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f811 	bl	8008e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d108      	bne.n	8008e66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e64:	e031      	b.n	8008eca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e66:	2308      	movs	r3, #8
 8008e68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	0e5b      	lsrs	r3, r3, #25
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	f003 0307 	and.w	r3, r3, #7
 8008e7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	0f5b      	lsrs	r3, r3, #29
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	7b3a      	ldrb	r2, [r7, #12]
 8008e92:	4911      	ldr	r1, [pc, #68]	; (8008ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8008e94:	5c8a      	ldrb	r2, [r1, r2]
 8008e96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e9a:	7b3a      	ldrb	r2, [r7, #12]
 8008e9c:	490f      	ldr	r1, [pc, #60]	; (8008edc <UARTEx_SetNbDataToProcess+0x98>)
 8008e9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ea0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	7b7a      	ldrb	r2, [r7, #13]
 8008eb0:	4909      	ldr	r1, [pc, #36]	; (8008ed8 <UARTEx_SetNbDataToProcess+0x94>)
 8008eb2:	5c8a      	ldrb	r2, [r1, r2]
 8008eb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008eb8:	7b7a      	ldrb	r2, [r7, #13]
 8008eba:	4908      	ldr	r1, [pc, #32]	; (8008edc <UARTEx_SetNbDataToProcess+0x98>)
 8008ebc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ebe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008eca:	bf00      	nop
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	08009044 	.word	0x08009044
 8008edc:	0800904c 	.word	0x0800904c

08008ee0 <memset>:
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d100      	bne.n	8008eea <memset+0xa>
 8008ee8:	4770      	bx	lr
 8008eea:	f803 1b01 	strb.w	r1, [r3], #1
 8008eee:	e7f9      	b.n	8008ee4 <memset+0x4>

08008ef0 <__libc_init_array>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	4d0d      	ldr	r5, [pc, #52]	; (8008f28 <__libc_init_array+0x38>)
 8008ef4:	4c0d      	ldr	r4, [pc, #52]	; (8008f2c <__libc_init_array+0x3c>)
 8008ef6:	1b64      	subs	r4, r4, r5
 8008ef8:	10a4      	asrs	r4, r4, #2
 8008efa:	2600      	movs	r6, #0
 8008efc:	42a6      	cmp	r6, r4
 8008efe:	d109      	bne.n	8008f14 <__libc_init_array+0x24>
 8008f00:	4d0b      	ldr	r5, [pc, #44]	; (8008f30 <__libc_init_array+0x40>)
 8008f02:	4c0c      	ldr	r4, [pc, #48]	; (8008f34 <__libc_init_array+0x44>)
 8008f04:	f000 f818 	bl	8008f38 <_init>
 8008f08:	1b64      	subs	r4, r4, r5
 8008f0a:	10a4      	asrs	r4, r4, #2
 8008f0c:	2600      	movs	r6, #0
 8008f0e:	42a6      	cmp	r6, r4
 8008f10:	d105      	bne.n	8008f1e <__libc_init_array+0x2e>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f18:	4798      	blx	r3
 8008f1a:	3601      	adds	r6, #1
 8008f1c:	e7ee      	b.n	8008efc <__libc_init_array+0xc>
 8008f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f22:	4798      	blx	r3
 8008f24:	3601      	adds	r6, #1
 8008f26:	e7f2      	b.n	8008f0e <__libc_init_array+0x1e>
 8008f28:	0800905c 	.word	0x0800905c
 8008f2c:	0800905c 	.word	0x0800905c
 8008f30:	0800905c 	.word	0x0800905c
 8008f34:	08009060 	.word	0x08009060

08008f38 <_init>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	bf00      	nop
 8008f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3e:	bc08      	pop	{r3}
 8008f40:	469e      	mov	lr, r3
 8008f42:	4770      	bx	lr

08008f44 <_fini>:
 8008f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f46:	bf00      	nop
 8008f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f4a:	bc08      	pop	{r3}
 8008f4c:	469e      	mov	lr, r3
 8008f4e:	4770      	bx	lr
