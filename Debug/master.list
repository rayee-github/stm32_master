
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096d8  080096d8  00024b68  2**0
                  CONTENTS
  4 .ARM          00000008  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e0  080096e0  00024b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096e4  080096e4  000196e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004b68  20000000  080096e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068d8  20004b68  0800e250  00024b68  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b440  0800e250  0002b440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024b68  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024b98  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d8a  00000000  00000000  00024bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bb7  00000000  00000000  0003c965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  0003f520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f20  00000000  00000000  00040860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031645  00000000  00000000  00041780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d2f  00000000  00000000  00072dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00129927  00000000  00000000  0008caf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000572c  00000000  00000000  001b641c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001bbb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20004b68 	.word	0x20004b68
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009558 	.word	0x08009558

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20004b6c 	.word	0x20004b6c
 80001fc:	08009558 	.word	0x08009558

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f002 fd41 	bl	8003028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f9e1 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 fd15 	bl	8000fd8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ae:	f000 fb17 	bl	8000be0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b2:	f000 fb55 	bl	8000c60 <MX_I2C2_Init>
  MX_SPI1_Init();
 80005b6:	f000 fc13 	bl	8000de0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005ba:	f000 fc4f 	bl	8000e5c <MX_SPI2_Init>
  MX_UART4_Init();
 80005be:	f000 fcbf 	bl	8000f40 <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 80005c2:	f000 fa21 	bl	8000a08 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 80005c6:	f000 fb8b 	bl	8000ce0 <MX_LTDC_Init>
  MX_SPI3_Init();
 80005ca:	f000 fc81 	bl	8000ed0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 80005ce:	f000 fe67 	bl	80012a0 <mipi_config>
  HAL_UART_Transmit(&huart4, "start", 5, 1000);
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	2205      	movs	r2, #5
 80005d8:	498b      	ldr	r1, [pc, #556]	; (8000808 <main+0x26c>)
 80005da:	488c      	ldr	r0, [pc, #560]	; (800080c <main+0x270>)
 80005dc:	f007 fc70 	bl	8007ec0 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int frame_buf_count = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]

  // switch
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET) //switch = 00
 80005e4:	2101      	movs	r1, #1
 80005e6:	488a      	ldr	r0, [pc, #552]	; (8000810 <main+0x274>)
 80005e8:	f003 ff64 	bl	80044b4 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d10a      	bne.n	8000608 <main+0x6c>
 80005f2:	2110      	movs	r1, #16
 80005f4:	4887      	ldr	r0, [pc, #540]	; (8000814 <main+0x278>)
 80005f6:	f003 ff5d 	bl	80044b4 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d103      	bne.n	8000608 <main+0x6c>
  {
	  BOARD_NUMBER = 1;
 8000600:	4b85      	ldr	r3, [pc, #532]	; (8000818 <main+0x27c>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	e034      	b.n	8000672 <main+0xd6>
  }
  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET) //switch = 01
 8000608:	2101      	movs	r1, #1
 800060a:	4881      	ldr	r0, [pc, #516]	; (8000810 <main+0x274>)
 800060c:	f003 ff52 	bl	80044b4 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b01      	cmp	r3, #1
 8000614:	d10a      	bne.n	800062c <main+0x90>
 8000616:	2110      	movs	r1, #16
 8000618:	487e      	ldr	r0, [pc, #504]	; (8000814 <main+0x278>)
 800061a:	f003 ff4b 	bl	80044b4 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d103      	bne.n	800062c <main+0x90>
  {
	  BOARD_NUMBER = 2;
 8000624:	4b7c      	ldr	r3, [pc, #496]	; (8000818 <main+0x27c>)
 8000626:	2202      	movs	r2, #2
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	e022      	b.n	8000672 <main+0xd6>
  }
  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET) //switch = 10
 800062c:	2101      	movs	r1, #1
 800062e:	4878      	ldr	r0, [pc, #480]	; (8000810 <main+0x274>)
 8000630:	f003 ff40 	bl	80044b4 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10a      	bne.n	8000650 <main+0xb4>
 800063a:	2110      	movs	r1, #16
 800063c:	4875      	ldr	r0, [pc, #468]	; (8000814 <main+0x278>)
 800063e:	f003 ff39 	bl	80044b4 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d103      	bne.n	8000650 <main+0xb4>
  {
	  BOARD_NUMBER = 3;
 8000648:	4b73      	ldr	r3, [pc, #460]	; (8000818 <main+0x27c>)
 800064a:	2203      	movs	r2, #3
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	e010      	b.n	8000672 <main+0xd6>
  }
  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET) //switch = 11
 8000650:	2101      	movs	r1, #1
 8000652:	486f      	ldr	r0, [pc, #444]	; (8000810 <main+0x274>)
 8000654:	f003 ff2e 	bl	80044b4 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d109      	bne.n	8000672 <main+0xd6>
 800065e:	2110      	movs	r1, #16
 8000660:	486c      	ldr	r0, [pc, #432]	; (8000814 <main+0x278>)
 8000662:	f003 ff27 	bl	80044b4 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <main+0xd6>
  {
	  BOARD_NUMBER = 4;
 800066c:	4b6a      	ldr	r3, [pc, #424]	; (8000818 <main+0x27c>)
 800066e:	2204      	movs	r2, #4
 8000670:	701a      	strb	r2, [r3, #0]
  }

  init_ble();
 8000672:	f001 ff57 	bl	8002524 <init_ble>
  __HAL_SPI_ENABLE(&hspi1);
 8000676:	4b69      	ldr	r3, [pc, #420]	; (800081c <main+0x280>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b67      	ldr	r3, [pc, #412]	; (800081c <main+0x280>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000684:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE(&hspi3);
 8000686:	4b66      	ldr	r3, [pc, #408]	; (8000820 <main+0x284>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b64      	ldr	r3, [pc, #400]	; (8000820 <main+0x284>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000694:	601a      	str	r2, [r3, #0]
  HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 8000696:	2202      	movs	r2, #2
 8000698:	4962      	ldr	r1, [pc, #392]	; (8000824 <main+0x288>)
 800069a:	4861      	ldr	r0, [pc, #388]	; (8000820 <main+0x284>)
 800069c:	f006 fdc0 	bl	8007220 <HAL_SPI_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (play_mode_source == 0)
 80006a0:	4b61      	ldr	r3, [pc, #388]	; (8000828 <main+0x28c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f040 80a5 	bne.w	80007f4 <main+0x258>
	  {
		  if (play_mode == 0)
 80006aa:	4b60      	ldr	r3, [pc, #384]	; (800082c <main+0x290>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d142      	bne.n	8000738 <main+0x19c>
		  {
			  read_flash_page(&frame_buf_flash, display_image_number);
 80006b2:	4b5f      	ldr	r3, [pc, #380]	; (8000830 <main+0x294>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	485e      	ldr	r0, [pc, #376]	; (8000834 <main+0x298>)
 80006ba:	f001 fe15 	bl	80022e8 <read_flash_page>
			  frame_buf_count = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
			  for (int i = 0; i < 6400; i += 4)
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	e032      	b.n	800072e <main+0x192>
			  {
				  image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i + 1];
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a59      	ldr	r2, [pc, #356]	; (8000834 <main+0x298>)
 80006ce:	5cd1      	ldrb	r1, [r2, r3]
 80006d0:	4a59      	ldr	r2, [pc, #356]	; (8000838 <main+0x29c>)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	4413      	add	r3, r2
 80006d6:	460a      	mov	r2, r1
 80006d8:	701a      	strb	r2, [r3, #0]
				  frame_buf_count += 2;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	3302      	adds	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
				  image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 80006e0:	4a54      	ldr	r2, [pc, #336]	; (8000834 <main+0x298>)
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	4413      	add	r3, r2
 80006e6:	7819      	ldrb	r1, [r3, #0]
 80006e8:	4a53      	ldr	r2, [pc, #332]	; (8000838 <main+0x29c>)
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	4413      	add	r3, r2
 80006ee:	460a      	mov	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
				  frame_buf_count += 4;
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3304      	adds	r3, #4
 80006f6:	617b      	str	r3, [r7, #20]
				  image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i + 2];
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	3302      	adds	r3, #2
 80006fc:	4a4d      	ldr	r2, [pc, #308]	; (8000834 <main+0x298>)
 80006fe:	5cd1      	ldrb	r1, [r2, r3]
 8000700:	4a4d      	ldr	r2, [pc, #308]	; (8000838 <main+0x29c>)
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	4413      	add	r3, r2
 8000706:	460a      	mov	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
				  frame_buf_count += 4;
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3304      	adds	r3, #4
 800070e:	617b      	str	r3, [r7, #20]
				  image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i + 3];
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	3303      	adds	r3, #3
 8000714:	4a47      	ldr	r2, [pc, #284]	; (8000834 <main+0x298>)
 8000716:	5cd1      	ldrb	r1, [r2, r3]
 8000718:	4a47      	ldr	r2, [pc, #284]	; (8000838 <main+0x29c>)
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	4413      	add	r3, r2
 800071e:	460a      	mov	r2, r1
 8000720:	701a      	strb	r2, [r3, #0]
				  frame_buf_count += 2;
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	3302      	adds	r3, #2
 8000726:	617b      	str	r3, [r7, #20]
			  for (int i = 0; i < 6400; i += 4)
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	3304      	adds	r3, #4
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000734:	dbc8      	blt.n	80006c8 <main+0x12c>
 8000736:	e0ff      	b.n	8000938 <main+0x39c>
			  }
		  }
		  else if (play_mode == 1)
 8000738:	4b3c      	ldr	r3, [pc, #240]	; (800082c <main+0x290>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	f040 80fb 	bne.w	8000938 <main+0x39c>
		  {
			  for (int i = 0; i < total_image_in_flash; i++)
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	e04e      	b.n	80007e6 <main+0x24a>
			  {
				  if (play_mode_source != 0)
 8000748:	4b37      	ldr	r3, [pc, #220]	; (8000828 <main+0x28c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	f040 80f2 	bne.w	8000936 <main+0x39a>
					  break;
				  read_flash_page(&frame_buf_flash, i);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <main+0x298>)
 800075a:	f001 fdc5 	bl	80022e8 <read_flash_page>
				  frame_buf_count = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
				  for (int i = 0; i < 6400; i += 4)
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	e032      	b.n	80007ce <main+0x232>
				  {
					  image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i + 1];
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	3301      	adds	r3, #1
 800076c:	4a31      	ldr	r2, [pc, #196]	; (8000834 <main+0x298>)
 800076e:	5cd1      	ldrb	r1, [r2, r3]
 8000770:	4a31      	ldr	r2, [pc, #196]	; (8000838 <main+0x29c>)
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	460a      	mov	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
					  frame_buf_count += 2;
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3302      	adds	r3, #2
 800077e:	617b      	str	r3, [r7, #20]
					  image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 8000780:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <main+0x298>)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4413      	add	r3, r2
 8000786:	7819      	ldrb	r1, [r3, #0]
 8000788:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <main+0x29c>)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	4413      	add	r3, r2
 800078e:	460a      	mov	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
					  frame_buf_count += 4;
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3304      	adds	r3, #4
 8000796:	617b      	str	r3, [r7, #20]
					  image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i + 2];
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	3302      	adds	r3, #2
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <main+0x298>)
 800079e:	5cd1      	ldrb	r1, [r2, r3]
 80007a0:	4a25      	ldr	r2, [pc, #148]	; (8000838 <main+0x29c>)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	4413      	add	r3, r2
 80007a6:	460a      	mov	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
					  frame_buf_count += 4;
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3304      	adds	r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
					  image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i + 3];
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	3303      	adds	r3, #3
 80007b4:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <main+0x298>)
 80007b6:	5cd1      	ldrb	r1, [r2, r3]
 80007b8:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <main+0x29c>)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4413      	add	r3, r2
 80007be:	460a      	mov	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
					  frame_buf_count += 2;
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3302      	adds	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
				  for (int i = 0; i < 6400; i += 4)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	3304      	adds	r3, #4
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80007d4:	dbc8      	blt.n	8000768 <main+0x1cc>
				  }
				  HAL_Delay(frame_rate);
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <main+0x2a0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fca0 	bl	8003120 <HAL_Delay>
			  for (int i = 0; i < total_image_in_flash; i++)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <main+0x2a4>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4293      	cmp	r3, r2
 80007f0:	dbaa      	blt.n	8000748 <main+0x1ac>
 80007f2:	e0a1      	b.n	8000938 <main+0x39c>
			  }
		  }
	  }
	  else if (play_mode_source == 1)
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <main+0x28c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d15b      	bne.n	80008b4 <main+0x318>
	  {
		  frame_buf_count = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
		  for (int i = 0; i < 6400; i += 4)
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	e051      	b.n	80008aa <main+0x30e>
 8000806:	bf00      	nop
 8000808:	08009570 	.word	0x08009570
 800080c:	20004e1c 	.word	0x20004e1c
 8000810:	48000400 	.word	0x48000400
 8000814:	48000800 	.word	0x48000800
 8000818:	20004eb0 	.word	0x20004eb0
 800081c:	20004cf0 	.word	0x20004cf0
 8000820:	20004db8 	.word	0x20004db8
 8000824:	20004eb4 	.word	0x20004eb4
 8000828:	2000b2b9 	.word	0x2000b2b9
 800082c:	2000b2b8 	.word	0x2000b2b8
 8000830:	2000b2ba 	.word	0x2000b2ba
 8000834:	200099b8 	.word	0x200099b8
 8000838:	20000008 	.word	0x20000008
 800083c:	20000000 	.word	0x20000000
 8000840:	20000004 	.word	0x20000004
		  {
			  image_80x80_rgb888[frame_buf_count] = frame_buf_0[i + 1];
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3301      	adds	r3, #1
 8000848:	4a43      	ldr	r2, [pc, #268]	; (8000958 <main+0x3bc>)
 800084a:	5cd1      	ldrb	r1, [r2, r3]
 800084c:	4a43      	ldr	r2, [pc, #268]	; (800095c <main+0x3c0>)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	4413      	add	r3, r2
 8000852:	460a      	mov	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
			  frame_buf_count += 2;
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3302      	adds	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
			  image_80x80_rgb888[frame_buf_count] = frame_buf_0[i];
 800085c:	4a3e      	ldr	r2, [pc, #248]	; (8000958 <main+0x3bc>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	7819      	ldrb	r1, [r3, #0]
 8000864:	4a3d      	ldr	r2, [pc, #244]	; (800095c <main+0x3c0>)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	4413      	add	r3, r2
 800086a:	460a      	mov	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
			  frame_buf_count += 4;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3304      	adds	r3, #4
 8000872:	617b      	str	r3, [r7, #20]
			  image_80x80_rgb888[frame_buf_count] = frame_buf_0[i + 2];
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3302      	adds	r3, #2
 8000878:	4a37      	ldr	r2, [pc, #220]	; (8000958 <main+0x3bc>)
 800087a:	5cd1      	ldrb	r1, [r2, r3]
 800087c:	4a37      	ldr	r2, [pc, #220]	; (800095c <main+0x3c0>)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	4413      	add	r3, r2
 8000882:	460a      	mov	r2, r1
 8000884:	701a      	strb	r2, [r3, #0]
			  frame_buf_count += 4;
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3304      	adds	r3, #4
 800088a:	617b      	str	r3, [r7, #20]
			  image_80x80_rgb888[frame_buf_count] = frame_buf_0[i + 3];
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3303      	adds	r3, #3
 8000890:	4a31      	ldr	r2, [pc, #196]	; (8000958 <main+0x3bc>)
 8000892:	5cd1      	ldrb	r1, [r2, r3]
 8000894:	4a31      	ldr	r2, [pc, #196]	; (800095c <main+0x3c0>)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	4413      	add	r3, r2
 800089a:	460a      	mov	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
			  frame_buf_count += 2;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3302      	adds	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
		  for (int i = 0; i < 6400; i += 4)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3304      	adds	r3, #4
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80008b0:	dbc8      	blt.n	8000844 <main+0x2a8>
 80008b2:	e041      	b.n	8000938 <main+0x39c>
		  }
	  }
	  else if (play_mode_source == 2)
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <main+0x3c4>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d13d      	bne.n	8000938 <main+0x39c>
	  {
		  frame_buf_count = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
		  for (int i = 0; i < 6400; i += 4)
 80008c0:	2300      	movs	r3, #0
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	e032      	b.n	800092c <main+0x390>
		  {
			  image_80x80_rgb888[frame_buf_count] = frame_buf_1[i + 1];
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a26      	ldr	r2, [pc, #152]	; (8000964 <main+0x3c8>)
 80008cc:	5cd1      	ldrb	r1, [r2, r3]
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <main+0x3c0>)
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	4413      	add	r3, r2
 80008d4:	460a      	mov	r2, r1
 80008d6:	701a      	strb	r2, [r3, #0]
			  frame_buf_count += 2;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3302      	adds	r3, #2
 80008dc:	617b      	str	r3, [r7, #20]
			  image_80x80_rgb888[frame_buf_count] = frame_buf_1[i];
 80008de:	4a21      	ldr	r2, [pc, #132]	; (8000964 <main+0x3c8>)
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	7819      	ldrb	r1, [r3, #0]
 80008e6:	4a1d      	ldr	r2, [pc, #116]	; (800095c <main+0x3c0>)
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	4413      	add	r3, r2
 80008ec:	460a      	mov	r2, r1
 80008ee:	701a      	strb	r2, [r3, #0]
			  frame_buf_count += 4;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3304      	adds	r3, #4
 80008f4:	617b      	str	r3, [r7, #20]
			  image_80x80_rgb888[frame_buf_count] = frame_buf_1[i + 2];
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	3302      	adds	r3, #2
 80008fa:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <main+0x3c8>)
 80008fc:	5cd1      	ldrb	r1, [r2, r3]
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <main+0x3c0>)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	4413      	add	r3, r2
 8000904:	460a      	mov	r2, r1
 8000906:	701a      	strb	r2, [r3, #0]
			  frame_buf_count += 4;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3304      	adds	r3, #4
 800090c:	617b      	str	r3, [r7, #20]
			  image_80x80_rgb888[frame_buf_count] = frame_buf_1[i + 3];
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	3303      	adds	r3, #3
 8000912:	4a14      	ldr	r2, [pc, #80]	; (8000964 <main+0x3c8>)
 8000914:	5cd1      	ldrb	r1, [r2, r3]
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <main+0x3c0>)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	4413      	add	r3, r2
 800091c:	460a      	mov	r2, r1
 800091e:	701a      	strb	r2, [r3, #0]
			  frame_buf_count += 2;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3302      	adds	r3, #2
 8000924:	617b      	str	r3, [r7, #20]
		  for (int i = 0; i < 6400; i += 4)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	3304      	adds	r3, #4
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000932:	dbc8      	blt.n	80008c6 <main+0x32a>
 8000934:	e000      	b.n	8000938 <main+0x39c>
					  break;
 8000936:	bf00      	nop
		  }
	  }
	  HAL_Delay(10);
 8000938:	200a      	movs	r0, #10
 800093a:	f002 fbf1 	bl	8003120 <HAL_Delay>
	  /*uint8_t TXTX[20];
	  sprintf(TXTX,"%c%c%c%c%s",0x10,0x01,0x0A,0x0E,"aaaaaaaaaaaaaa"); //TX
	  Wrap(&TXTX, sizeof TXTX);
	  HAL_Delay(10);
	  */
	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET)
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <main+0x3cc>)
 8000944:	f003 fdb6 	bl	80044b4 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	f47f aea8 	bne.w	80006a0 <main+0x104>
	  {
		  ReadBLE();
 8000950:	f001 fee0 	bl	8002714 <ReadBLE>
	  if (play_mode_source == 0)
 8000954:	e6a4      	b.n	80006a0 <main+0x104>
 8000956:	bf00      	nop
 8000958:	200067b8 	.word	0x200067b8
 800095c:	20000008 	.word	0x20000008
 8000960:	2000b2b9 	.word	0x2000b2b9
 8000964:	200080b8 	.word	0x200080b8
 8000968:	48000c00 	.word	0x48000c00

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b096      	sub	sp, #88	; 0x58
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2244      	movs	r2, #68	; 0x44
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f008 f968 	bl	8008c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800098e:	2000      	movs	r0, #0
 8000990:	f004 f9d0 	bl	8004d34 <HAL_PWREx_ControlVoltageScaling>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800099a:	f001 ffcf 	bl	800293c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099e:	2301      	movs	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	2302      	movs	r3, #2
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ac:	2303      	movs	r3, #3
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80009b4:	231e      	movs	r3, #30
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fa67 	bl	8004e9c <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009d4:	f001 ffb2 	bl	800293c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2303      	movs	r3, #3
 80009de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	2105      	movs	r1, #5
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 fe6d 	bl	80056d0 <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009fc:	f001 ff9e 	bl	800293c <Error_Handler>
  }
}
 8000a00:	bf00      	nop
 8000a02:	3758      	adds	r7, #88	; 0x58
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0ae      	sub	sp, #184	; 0xb8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a1a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a1e:	2224      	movs	r2, #36	; 0x24
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f008 f914 	bl	8008c50 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	226c      	movs	r2, #108	; 0x6c
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 f905 	bl	8008c50 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a46:	4b64      	ldr	r3, [pc, #400]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a48:	4a64      	ldr	r2, [pc, #400]	; (8000bdc <MX_DSIHOST_DSI_Init+0x1d4>)
 8000a4a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a4c:	4b62      	ldr	r3, [pc, #392]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8000a52:	4b61      	ldr	r3, [pc, #388]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000a58:	4b5f      	ldr	r3, [pc, #380]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 8000a5e:	2332      	movs	r3, #50	; 0x32
 8000a60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a74:	4619      	mov	r1, r3
 8000a76:	4858      	ldr	r0, [pc, #352]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a78:	f002 fd2e 	bl	80034d8 <HAL_DSI_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8000a82:	f001 ff5b 	bl	800293c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000abc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4845      	ldr	r0, [pc, #276]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000ac4:	f003 f97b 	bl	8003dbe <HAL_DSI_ConfigHostTimeouts>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000ace:	f001 ff35 	bl	800293c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000ad2:	2313      	movs	r3, #19
 8000ad4:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000ada:	2309      	movs	r3, #9
 8000adc:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000ade:	230a      	movs	r3, #10
 8000ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000aee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000af2:	4619      	mov	r1, r3
 8000af4:	4838      	ldr	r0, [pc, #224]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000af6:	f003 f8f8 	bl	8003cea <HAL_DSI_ConfigPhyTimer>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000b00:	f001 ff1c 	bl	800293c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000b04:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b08:	4833      	ldr	r0, [pc, #204]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b0a:	f003 fb14 	bl	8004136 <HAL_DSI_SetLowPowerRXFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000b14:	f001 ff12 	bl	800293c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	482f      	ldr	r0, [pc, #188]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000b1c:	f002 fdf8 	bl	8003710 <HAL_DSI_ConfigErrorMonitor>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000b26:	f001 ff09 	bl	800293c <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000b2e:	2305      	movs	r3, #5
 8000b30:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000b36:	2301      	movs	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 8000b3a:	2350      	movs	r3, #80	; 0x50
 8000b3c:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 8000b52:	23fc      	movs	r3, #252	; 0xfc
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 8000b56:	23fc      	movs	r3, #252	; 0xfc
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 8000b5a:	f44f 7351 	mov.w	r3, #836	; 0x344
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 8000b60:	2308      	movs	r3, #8
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000b64:	2308      	movs	r3, #8
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 8000b6c:	2350      	movs	r3, #80	; 0x50
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b74:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000b76:	231c      	movs	r3, #28
 8000b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000b7a:	2350      	movs	r3, #80	; 0x50
 8000b7c:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b94:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba0:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bac:	f002 fe95 	bl	80038da <HAL_DSI_ConfigVideoMode>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000bb6:	f001 fec1 	bl	800293c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000bbe:	f002 fe64 	bl	800388a <HAL_DSI_SetGenericVCID>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000bc8:	f001 feb8 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
	LCD_PowerOn();
 8000bcc:	f000 fe3e 	bl	800184c <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	37b8      	adds	r7, #184	; 0xb8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20004b84 	.word	0x20004b84
 8000bdc:	40016c00 	.word	0x40016c00

08000be0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000be6:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <MX_I2C1_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bec:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <MX_I2C1_Init+0x7c>)
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c1a:	480e      	ldr	r0, [pc, #56]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c1c:	f003 fc92 	bl	8004544 <HAL_I2C_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c26:	f001 fe89 	bl	800293c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c2e:	f003 fd24 	bl	800467a <HAL_I2CEx_ConfigAnalogFilter>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c38:	f001 fe80 	bl	800293c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_I2C1_Init+0x74>)
 8000c40:	f003 fd66 	bl	8004710 <HAL_I2CEx_ConfigDigitalFilter>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f001 fe77 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20004ba0 	.word	0x20004ba0
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	307075b1 	.word	0x307075b1

08000c60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <MX_I2C2_Init+0x78>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <MX_I2C2_Init+0x7c>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000c9c:	f003 fc52 	bl	8004544 <HAL_I2C_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ca6:	f001 fe49 	bl	800293c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000cae:	f003 fce4 	bl	800467a <HAL_I2CEx_ConfigAnalogFilter>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cb8:	f001 fe40 	bl	800293c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_I2C2_Init+0x74>)
 8000cc0:	f003 fd26 	bl	8004710 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cca:	f001 fe37 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20004bf4 	.word	0x20004bf4
 8000cd8:	40005800 	.word	0x40005800
 8000cdc:	307075b1 	.word	0x307075b1

08000ce0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2234      	movs	r2, #52	; 0x34
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f007 ffaf 	bl	8008c50 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cf2:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000cf4:	4a38      	ldr	r2, [pc, #224]	; (8000dd8 <MX_LTDC_Init+0xf8>)
 8000cf6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000cf8:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000cfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cfe:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000d00:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d06:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d08:	4b32      	ldr	r3, [pc, #200]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 8000d14:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d16:	22fb      	movs	r2, #251	; 0xfb
 8000d18:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d22:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000d26:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8000d28:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d30:	f240 2247 	movw	r2, #583	; 0x247
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d38:	225f      	movs	r2, #95	; 0x5f
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d3e:	f240 3243 	movw	r2, #835	; 0x343
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d46:	2261      	movs	r2, #97	; 0x61
 8000d48:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d4c:	22ff      	movs	r2, #255	; 0xff
 8000d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d54:	22ff      	movs	r2, #255	; 0xff
 8000d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d5c:	22ff      	movs	r2, #255	; 0xff
 8000d5e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d62:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000d64:	f003 fd20 	bl	80047a8 <HAL_LTDC_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000d6e:	f001 fde5 	bl	800293c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 8000d76:	2350      	movs	r3, #80	; 0x50
 8000d78:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 8000d7e:	2350      	movs	r3, #80	; 0x50
 8000d80:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d82:	2301      	movs	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d86:	23ff      	movs	r3, #255	; 0xff
 8000d88:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d92:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d94:	2305      	movs	r3, #5
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_LTDC_Init+0xfc>)
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 8000d9c:	2350      	movs	r3, #80	; 0x50
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 8000da0:	2350      	movs	r3, #80	; 0x50
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000da4:	23ff      	movs	r3, #255	; 0xff
 8000da6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000daa:	23ff      	movs	r3, #255	; 0xff
 8000dac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000db0:	23ff      	movs	r3, #255	; 0xff
 8000db2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_LTDC_Init+0xf4>)
 8000dbe:	f003 fdc3 	bl	8004948 <HAL_LTDC_ConfigLayer>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000dc8:	f001 fdb8 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3738      	adds	r7, #56	; 0x38
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20004c48 	.word	0x20004c48
 8000dd8:	40016800 	.word	0x40016800
 8000ddc:	20000008 	.word	0x20000008

08000de0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_SPI1_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000df0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000dfa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e16:	2210      	movs	r2, #16
 8000e18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e2e:	2207      	movs	r2, #7
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_SPI1_Init+0x74>)
 8000e40:	f005 fc7c 	bl	800673c <HAL_SPI_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f001 fd77 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20004cf0 	.word	0x20004cf0
 8000e58:	40013000 	.word	0x40013000

08000e5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <MX_SPI2_Init+0x70>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e74:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_SPI2_Init+0x6c>)
 8000eb4:	f005 fc42 	bl	800673c <HAL_SPI_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000ebe:	f001 fd3d 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20004d54 	.word	0x20004d54
 8000ecc:	40003800 	.word	0x40003800

08000ed0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <MX_SPI3_Init+0x6c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000ee8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_SPI3_Init+0x68>)
 8000f26:	f005 fc09 	bl	800673c <HAL_SPI_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000f30:	f001 fd04 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20004db8 	.word	0x20004db8
 8000f3c:	40003c00 	.word	0x40003c00

08000f40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f46:	4a23      	ldr	r2, [pc, #140]	; (8000fd4 <MX_UART4_Init+0x94>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f8a:	f006 ff49 	bl	8007e20 <HAL_UART_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f94:	f001 fcd2 	bl	800293c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000f9c:	f007 fd6e 	bl	8008a7c <HAL_UARTEx_SetTxFifoThreshold>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000fa6:	f001 fcc9 	bl	800293c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000fae:	f007 fda3 	bl	8008af8 <HAL_UARTEx_SetRxFifoThreshold>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000fb8:	f001 fcc0 	bl	800293c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_UART4_Init+0x90>)
 8000fbe:	f007 fd24 	bl	8008a0a <HAL_UARTEx_DisableFifoMode>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000fc8:	f001 fcb8 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20004e1c 	.word	0x20004e1c
 8000fd4:	40004c00 	.word	0x40004c00

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	; 0x38
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4ba6      	ldr	r3, [pc, #664]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4aa5      	ldr	r2, [pc, #660]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4ba3      	ldr	r3, [pc, #652]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	623b      	str	r3, [r7, #32]
 8001004:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	4ba0      	ldr	r3, [pc, #640]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a9f      	ldr	r2, [pc, #636]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b9d      	ldr	r3, [pc, #628]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b9a      	ldr	r3, [pc, #616]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a99      	ldr	r2, [pc, #612]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b97      	ldr	r3, [pc, #604]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b94      	ldr	r3, [pc, #592]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a93      	ldr	r2, [pc, #588]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b91      	ldr	r3, [pc, #580]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800104e:	4b8e      	ldr	r3, [pc, #568]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a8d      	ldr	r2, [pc, #564]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b8b      	ldr	r3, [pc, #556]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8001066:	f003 ff09 	bl	8004e7c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	4b87      	ldr	r3, [pc, #540]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a86      	ldr	r2, [pc, #536]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001070:	f043 0320 	orr.w	r3, r3, #32
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b84      	ldr	r3, [pc, #528]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0320 	and.w	r3, r3, #32
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	4b81      	ldr	r3, [pc, #516]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4a80      	ldr	r2, [pc, #512]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4b7e      	ldr	r3, [pc, #504]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a7a      	ldr	r2, [pc, #488]	; (8001288 <MX_GPIO_Init+0x2b0>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b78      	ldr	r3, [pc, #480]	; (8001288 <MX_GPIO_Init+0x2b0>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ble_ncs_GPIO_Port, ble_ncs_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2108      	movs	r1, #8
 80010b6:	4875      	ldr	r0, [pc, #468]	; (800128c <MX_GPIO_Init+0x2b4>)
 80010b8:	f003 fa14 	bl	80044e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(flash_cs_GPIO_Port, flash_cs_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c2:	4873      	ldr	r0, [pc, #460]	; (8001290 <MX_GPIO_Init+0x2b8>)
 80010c4:	f003 fa0e 	bl	80044e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ble_mosi_Pin|flash_mosi_Pin|ble_clk_Pin|flash_clk_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f240 5112 	movw	r1, #1298	; 0x512
 80010ce:	4871      	ldr	r0, [pc, #452]	; (8001294 <MX_GPIO_Init+0x2bc>)
 80010d0:	f003 fa08 	bl	80044e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	21a0      	movs	r1, #160	; 0xa0
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f003 fa02 	bl	80044e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e6:	486c      	ldr	r0, [pc, #432]	; (8001298 <MX_GPIO_Init+0x2c0>)
 80010e8:	f003 f9fc 	bl	80044e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80010f2:	486a      	ldr	r0, [pc, #424]	; (800129c <MX_GPIO_Init+0x2c4>)
 80010f4:	f003 f9f6 	bl	80044e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fe:	4866      	ldr	r0, [pc, #408]	; (8001298 <MX_GPIO_Init+0x2c0>)
 8001100:	f003 f9f0 	bl	80044e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ble_ncs_Pin */
  GPIO_InitStruct.Pin = ble_ncs_Pin;
 8001104:	2308      	movs	r3, #8
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ble_ncs_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001118:	4619      	mov	r1, r3
 800111a:	485c      	ldr	r0, [pc, #368]	; (800128c <MX_GPIO_Init+0x2b4>)
 800111c:	f003 f838 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : flash_cs_Pin */
  GPIO_InitStruct.Pin = flash_cs_Pin;
 8001120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(flash_cs_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	4855      	ldr	r0, [pc, #340]	; (8001290 <MX_GPIO_Init+0x2b8>)
 800113a:	f003 f829 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : ble_mosi_Pin flash_mosi_Pin ble_clk_Pin flash_clk_Pin */
  GPIO_InitStruct.Pin = ble_mosi_Pin|flash_mosi_Pin|ble_clk_Pin|flash_clk_Pin;
 800113e:	f240 5312 	movw	r3, #1298	; 0x512
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	484f      	ldr	r0, [pc, #316]	; (8001294 <MX_GPIO_Init+0x2bc>)
 8001158:	f003 f81a 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : ble_miso_Pin flash_miso_Pin */
  GPIO_InitStruct.Pin = ble_miso_Pin|flash_miso_Pin;
 800115c:	f240 2301 	movw	r3, #513	; 0x201
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4848      	ldr	r0, [pc, #288]	; (8001294 <MX_GPIO_Init+0x2bc>)
 8001172:	f003 f80d 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : ble_irq_Pin */
  GPIO_InitStruct.Pin = ble_irq_Pin;
 8001176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ble_irq_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	4840      	ldr	r0, [pc, #256]	; (800128c <MX_GPIO_Init+0x2b4>)
 800118c:	f003 f800 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8001190:	2318      	movs	r3, #24
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f002 fff3 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011aa:	23a0      	movs	r3, #160	; 0xa0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f002 ffe4 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011c8:	2310      	movs	r3, #16
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	482d      	ldr	r0, [pc, #180]	; (8001290 <MX_GPIO_Init+0x2b8>)
 80011dc:	f002 ffd8 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4827      	ldr	r0, [pc, #156]	; (8001298 <MX_GPIO_Init+0x2c0>)
 80011fa:	f002 ffc9 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4821      	ldr	r0, [pc, #132]	; (800129c <MX_GPIO_Init+0x2c4>)
 8001218:	f002 ffba 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800121c:	2301      	movs	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	481b      	ldr	r0, [pc, #108]	; (800129c <MX_GPIO_Init+0x2c4>)
 8001230:	f002 ffae 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001240:	2302      	movs	r3, #2
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4813      	ldr	r0, [pc, #76]	; (8001298 <MX_GPIO_Init+0x2c0>)
 800124c:	f002 ffa0 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001250:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125a:	2301      	movs	r3, #1
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <MX_GPIO_Init+0x2c0>)
 800126a:	f002 ff91 	bl	8004190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2103      	movs	r1, #3
 8001272:	2028      	movs	r0, #40	; 0x28
 8001274:	f002 f853 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001278:	2028      	movs	r0, #40	; 0x28
 800127a:	f002 f86c 	bl	8003356 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	; 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	48000c00 	.word	0x48000c00
 8001290:	48000800 	.word	0x48000800
 8001294:	48001400 	.word	0x48001400
 8001298:	48001000 	.word	0x48001000
 800129c:	48000400 	.word	0x48000400

080012a0 <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config()
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b0af      	sub	sp, #188	; 0xbc
 80012a4:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK)
 80012a6:	48c4      	ldr	r0, [pc, #784]	; (80015b8 <mipi_config+0x318>)
 80012a8:	f002 fe4f 	bl	8003f4a <HAL_DSI_Start>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <mipi_config+0x16>
	{
		Error_Handler();
 80012b2:	f001 fb43 	bl	800293c <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 80012b6:	23c3      	movs	r3, #195	; 0xc3
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	23f0      	movs	r3, #240	; 0xf0
 80012bc:	2215      	movs	r2, #21
 80012be:	2100      	movs	r1, #0
 80012c0:	48bd      	ldr	r0, [pc, #756]	; (80015b8 <mipi_config+0x318>)
 80012c2:	f002 fe7e 	bl	8003fc2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 80012c6:	2396      	movs	r3, #150	; 0x96
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	23f0      	movs	r3, #240	; 0xf0
 80012cc:	2215      	movs	r2, #21
 80012ce:	2100      	movs	r1, #0
 80012d0:	48b9      	ldr	r0, [pc, #740]	; (80015b8 <mipi_config+0x318>)
 80012d2:	f002 fe76 	bl	8003fc2 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = {0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33};
 80012d6:	4ab9      	ldr	r2, [pc, #740]	; (80015bc <mipi_config+0x31c>)
 80012d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012e0:	6018      	str	r0, [r3, #0]
 80012e2:	3304      	adds	r3, #4
 80012e4:	8019      	strh	r1, [r3, #0]
 80012e6:	3302      	adds	r3, #2
 80012e8:	0c0a      	lsrs	r2, r1, #16
 80012ea:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 80012ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	23e7      	movs	r3, #231	; 0xe7
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2308      	movs	r3, #8
 80012f8:	2239      	movs	r2, #57	; 0x39
 80012fa:	2100      	movs	r1, #0
 80012fc:	48ae      	ldr	r0, [pc, #696]	; (80015b8 <mipi_config+0x318>)
 80012fe:	f002 fe82 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = {0xC0, 0x68, 0xE0};
 8001302:	4aaf      	ldr	r2, [pc, #700]	; (80015c0 <mipi_config+0x320>)
 8001304:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	4611      	mov	r1, r2
 800130c:	8019      	strh	r1, [r3, #0]
 800130e:	3302      	adds	r3, #2
 8001310:	0c12      	lsrs	r2, r2, #16
 8001312:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8001314:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	23a4      	movs	r3, #164	; 0xa4
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2304      	movs	r3, #4
 8001320:	2239      	movs	r2, #57	; 0x39
 8001322:	2100      	movs	r1, #0
 8001324:	48a4      	ldr	r0, [pc, #656]	; (80015b8 <mipi_config+0x318>)
 8001326:	f002 fe6e 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = {0x42, 0x05, 0x24, 0x03};
 800132a:	4ba6      	ldr	r3, [pc, #664]	; (80015c4 <mipi_config+0x324>)
 800132c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8001330:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	23c3      	movs	r3, #195	; 0xc3
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2305      	movs	r3, #5
 800133c:	2239      	movs	r2, #57	; 0x39
 800133e:	2100      	movs	r1, #0
 8001340:	489d      	ldr	r0, [pc, #628]	; (80015b8 <mipi_config+0x318>)
 8001342:	f002 fe60 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = {0x42, 0x05, 0x24, 0x03};
 8001346:	4b9f      	ldr	r3, [pc, #636]	; (80015c4 <mipi_config+0x324>)
 8001348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 800134c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	23c4      	movs	r3, #196	; 0xc4
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2305      	movs	r3, #5
 8001358:	2239      	movs	r2, #57	; 0x39
 800135a:	2100      	movs	r1, #0
 800135c:	4896      	ldr	r0, [pc, #600]	; (80015b8 <mipi_config+0x318>)
 800135e:	f002 fe52 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 8001362:	4a99      	ldr	r2, [pc, #612]	; (80015c8 <mipi_config+0x328>)
 8001364:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001368:	ca07      	ldmia	r2, {r0, r1, r2}
 800136a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 800136e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	23e5      	movs	r3, #229	; 0xe5
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	230d      	movs	r3, #13
 800137a:	2239      	movs	r2, #57	; 0x39
 800137c:	2100      	movs	r1, #0
 800137e:	488e      	ldr	r0, [pc, #568]	; (80015b8 <mipi_config+0x318>)
 8001380:	f002 fe41 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = {0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55, 0x55, 0x55, 0x55};
 8001384:	4a90      	ldr	r2, [pc, #576]	; (80015c8 <mipi_config+0x328>)
 8001386:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800138a:	ca07      	ldmia	r2, {r0, r1, r2}
 800138c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001390:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	23e6      	movs	r3, #230	; 0xe6
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	230d      	movs	r3, #13
 800139c:	2239      	movs	r2, #57	; 0x39
 800139e:	2100      	movs	r1, #0
 80013a0:	4885      	ldr	r0, [pc, #532]	; (80015b8 <mipi_config+0x318>)
 80013a2:	f002 fe30 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = {0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22};
 80013a6:	4a89      	ldr	r2, [pc, #548]	; (80015cc <mipi_config+0x32c>)
 80013a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b0:	6018      	str	r0, [r3, #0]
 80013b2:	3304      	adds	r3, #4
 80013b4:	8019      	strh	r1, [r3, #0]
 80013b6:	3302      	adds	r3, #2
 80013b8:	0c0a      	lsrs	r2, r1, #16
 80013ba:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 80013bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	23ec      	movs	r3, #236	; 0xec
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2308      	movs	r3, #8
 80013c8:	2239      	movs	r2, #57	; 0x39
 80013ca:	2100      	movs	r1, #0
 80013cc:	487a      	ldr	r0, [pc, #488]	; (80015b8 <mipi_config+0x318>)
 80013ce:	f002 fe1a 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = {0x88, 0x05, 0x0F, 0x18};
 80013d2:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <mipi_config+0x330>)
 80013d4:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 80013d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	23c1      	movs	r3, #193	; 0xc1
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2305      	movs	r3, #5
 80013e2:	2239      	movs	r2, #57	; 0x39
 80013e4:	2100      	movs	r1, #0
 80013e6:	4874      	ldr	r0, [pc, #464]	; (80015b8 <mipi_config+0x318>)
 80013e8:	f002 fe0d 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = {0x88, 0x05, 0x0F, 0x18};
 80013ec:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <mipi_config+0x330>)
 80013ee:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 80013f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	23c2      	movs	r3, #194	; 0xc2
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2305      	movs	r3, #5
 80013fc:	2239      	movs	r2, #57	; 0x39
 80013fe:	2100      	movs	r1, #0
 8001400:	486d      	ldr	r0, [pc, #436]	; (80015b8 <mipi_config+0x318>)
 8001402:	f002 fe00 	bl	8004006 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 8001406:	2300      	movs	r3, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2336      	movs	r3, #54	; 0x36
 800140c:	2215      	movs	r2, #21
 800140e:	2100      	movs	r1, #0
 8001410:	4869      	ldr	r0, [pc, #420]	; (80015b8 <mipi_config+0x318>)
 8001412:	f002 fdd6 	bl	8003fc2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 8001416:	2307      	movs	r3, #7
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	233a      	movs	r3, #58	; 0x3a
 800141c:	2215      	movs	r2, #21
 800141e:	2100      	movs	r1, #0
 8001420:	4865      	ldr	r0, [pc, #404]	; (80015b8 <mipi_config+0x318>)
 8001422:	f002 fdce 	bl	8003fc2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 8001426:	23be      	movs	r3, #190	; 0xbe
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	23c5      	movs	r3, #197	; 0xc5
 800142c:	2215      	movs	r2, #21
 800142e:	2100      	movs	r1, #0
 8001430:	4861      	ldr	r0, [pc, #388]	; (80015b8 <mipi_config+0x318>)
 8001432:	f002 fdc6 	bl	8003fc2 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = {0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55, 0x3D, 0x19, 0x18, 0x24, 0x27};
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <mipi_config+0x334>)
 8001438:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800143c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143e:	c407      	stmia	r4!, {r0, r1, r2}
 8001440:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 8001442:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	23e0      	movs	r3, #224	; 0xe0
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	230f      	movs	r3, #15
 800144e:	2239      	movs	r2, #57	; 0x39
 8001450:	2100      	movs	r1, #0
 8001452:	4859      	ldr	r0, [pc, #356]	; (80015b8 <mipi_config+0x318>)
 8001454:	f002 fdd7 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = {0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56, 0x3E, 0x1A, 0x18, 0x24, 0x28};
 8001458:	4b5f      	ldr	r3, [pc, #380]	; (80015d8 <mipi_config+0x338>)
 800145a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800145e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001460:	c407      	stmia	r4!, {r0, r1, r2}
 8001462:	8023      	strh	r3, [r4, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 8001464:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	23e1      	movs	r3, #225	; 0xe1
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	230f      	movs	r3, #15
 8001470:	2239      	movs	r2, #57	; 0x39
 8001472:	2100      	movs	r1, #0
 8001474:	4850      	ldr	r0, [pc, #320]	; (80015b8 <mipi_config+0x318>)
 8001476:	f002 fdc6 	bl	8004006 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 800147a:	2310      	movs	r3, #16
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	23b2      	movs	r3, #178	; 0xb2
 8001480:	2215      	movs	r2, #21
 8001482:	2100      	movs	r1, #0
 8001484:	484c      	ldr	r0, [pc, #304]	; (80015b8 <mipi_config+0x318>)
 8001486:	f002 fd9c 	bl	8003fc2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 800148a:	2301      	movs	r3, #1
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	23b3      	movs	r3, #179	; 0xb3
 8001490:	2215      	movs	r2, #21
 8001492:	2100      	movs	r1, #0
 8001494:	4848      	ldr	r0, [pc, #288]	; (80015b8 <mipi_config+0x318>)
 8001496:	f002 fd94 	bl	8003fc2 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 800149a:	2301      	movs	r3, #1
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	23b4      	movs	r3, #180	; 0xb4
 80014a0:	2215      	movs	r2, #21
 80014a2:	2100      	movs	r1, #0
 80014a4:	4844      	ldr	r0, [pc, #272]	; (80015b8 <mipi_config+0x318>)
 80014a6:	f002 fd8c 	bl	8003fc2 <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = {0x27, 0x09};
 80014aa:	f640 1327 	movw	r3, #2343	; 0x927
 80014ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 80014b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	23b6      	movs	r3, #182	; 0xb6
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2303      	movs	r3, #3
 80014be:	2239      	movs	r2, #57	; 0x39
 80014c0:	2100      	movs	r1, #0
 80014c2:	483d      	ldr	r0, [pc, #244]	; (80015b8 <mipi_config+0x318>)
 80014c4:	f002 fd9f 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = {0x00, 0x54, 0x00, 0x54};
 80014c8:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 80014cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 80014ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	23b5      	movs	r3, #181	; 0xb5
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2305      	movs	r3, #5
 80014da:	2239      	movs	r2, #57	; 0x39
 80014dc:	2100      	movs	r1, #0
 80014de:	4836      	ldr	r0, [pc, #216]	; (80015b8 <mipi_config+0x318>)
 80014e0:	f002 fd91 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 80014e4:	4a3d      	ldr	r2, [pc, #244]	; (80015dc <mipi_config+0x33c>)
 80014e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ec:	c303      	stmia	r3!, {r0, r1}
 80014ee:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 80014f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	23a5      	movs	r3, #165	; 0xa5
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	230a      	movs	r3, #10
 80014fc:	2239      	movs	r2, #57	; 0x39
 80014fe:	2100      	movs	r1, #0
 8001500:	482d      	ldr	r0, [pc, #180]	; (80015b8 <mipi_config+0x318>)
 8001502:	f002 fd80 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = {0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00};
 8001506:	4a35      	ldr	r2, [pc, #212]	; (80015dc <mipi_config+0x33c>)
 8001508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800150c:	ca07      	ldmia	r2, {r0, r1, r2}
 800150e:	c303      	stmia	r3!, {r0, r1}
 8001510:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 8001512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	23a6      	movs	r3, #166	; 0xa6
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	230a      	movs	r3, #10
 800151e:	2239      	movs	r2, #57	; 0x39
 8001520:	2100      	movs	r1, #0
 8001522:	4825      	ldr	r0, [pc, #148]	; (80015b8 <mipi_config+0x318>)
 8001524:	f002 fd6f 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = {0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00};
 8001528:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <mipi_config+0x340>)
 800152a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001532:	6018      	str	r0, [r3, #0]
 8001534:	3304      	adds	r3, #4
 8001536:	8019      	strh	r1, [r3, #0]
 8001538:	3302      	adds	r3, #2
 800153a:	0c0a      	lsrs	r2, r1, #16
 800153c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 800153e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	23ba      	movs	r3, #186	; 0xba
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2308      	movs	r3, #8
 800154a:	2239      	movs	r2, #57	; 0x39
 800154c:	2100      	movs	r1, #0
 800154e:	481a      	ldr	r0, [pc, #104]	; (80015b8 <mipi_config+0x318>)
 8001550:	f002 fd59 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 8001554:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <mipi_config+0x344>)
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	23bb      	movs	r3, #187	; 0xbb
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2309      	movs	r3, #9
 800156e:	2239      	movs	r2, #57	; 0x39
 8001570:	2100      	movs	r1, #0
 8001572:	4811      	ldr	r0, [pc, #68]	; (80015b8 <mipi_config+0x318>)
 8001574:	f002 fd47 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = {0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04};
 8001578:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <mipi_config+0x344>)
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001582:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	23bc      	movs	r3, #188	; 0xbc
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2309      	movs	r3, #9
 8001592:	2239      	movs	r2, #57	; 0x39
 8001594:	2100      	movs	r1, #0
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <mipi_config+0x318>)
 8001598:	f002 fd35 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = {0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF, 0xFF, 0xF9};
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <mipi_config+0x348>)
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a4:	c303      	stmia	r3!, {r0, r1}
 80015a6:	801a      	strh	r2, [r3, #0]
 80015a8:	3302      	adds	r3, #2
 80015aa:	0c12      	lsrs	r2, r2, #16
 80015ac:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	e01a      	b.n	80015ec <mipi_config+0x34c>
 80015b6:	bf00      	nop
 80015b8:	20004b84 	.word	0x20004b84
 80015bc:	08009578 	.word	0x08009578
 80015c0:	08009580 	.word	0x08009580
 80015c4:	03240542 	.word	0x03240542
 80015c8:	08009584 	.word	0x08009584
 80015cc:	08009590 	.word	0x08009590
 80015d0:	180f0588 	.word	0x180f0588
 80015d4:	08009598 	.word	0x08009598
 80015d8:	080095a8 	.word	0x080095a8
 80015dc:	080095b8 	.word	0x080095b8
 80015e0:	080095c4 	.word	0x080095c4
 80015e4:	080095cc 	.word	0x080095cc
 80015e8:	080095d4 	.word	0x080095d4
 80015ec:	23bd      	movs	r3, #189	; 0xbd
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	230c      	movs	r3, #12
 80015f2:	2239      	movs	r2, #57	; 0x39
 80015f4:	2100      	movs	r1, #0
 80015f6:	482d      	ldr	r0, [pc, #180]	; (80016ac <mipi_config+0x40c>)
 80015f8:	f002 fd05 	bl	8004006 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 80015fc:	23c3      	movs	r3, #195	; 0xc3
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	23ed      	movs	r3, #237	; 0xed
 8001602:	2215      	movs	r2, #21
 8001604:	2100      	movs	r1, #0
 8001606:	4829      	ldr	r0, [pc, #164]	; (80016ac <mipi_config+0x40c>)
 8001608:	f002 fcdb 	bl	8003fc2 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = {0x40, 0x0F, 0x00};
 800160c:	4a28      	ldr	r2, [pc, #160]	; (80016b0 <mipi_config+0x410>)
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	4611      	mov	r1, r2
 8001616:	8019      	strh	r1, [r3, #0]
 8001618:	3302      	adds	r3, #2
 800161a:	0c12      	lsrs	r2, r2, #16
 800161c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	23e4      	movs	r3, #228	; 0xe4
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2304      	movs	r3, #4
 800162a:	2239      	movs	r2, #57	; 0x39
 800162c:	2100      	movs	r1, #0
 800162e:	481f      	ldr	r0, [pc, #124]	; (80016ac <mipi_config+0x40c>)
 8001630:	f002 fce9 	bl	8004006 <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = {0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25};
 8001634:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <mipi_config+0x414>)
 8001636:	463b      	mov	r3, r7
 8001638:	ca07      	ldmia	r2, {r0, r1, r2}
 800163a:	c303      	stmia	r3!, {r0, r1}
 800163c:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 800163e:	463b      	mov	r3, r7
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	23cc      	movs	r3, #204	; 0xcc
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	230a      	movs	r3, #10
 8001648:	2239      	movs	r2, #57	; 0x39
 800164a:	2100      	movs	r1, #0
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <mipi_config+0x40c>)
 800164e:	f002 fcda 	bl	8004006 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001652:	2300      	movs	r3, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2335      	movs	r3, #53	; 0x35
 8001658:	2215      	movs	r2, #21
 800165a:	2100      	movs	r1, #0
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <mipi_config+0x40c>)
 800165e:	f002 fcb0 	bl	8003fc2 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 8001662:	2000      	movs	r0, #0
 8001664:	f001 fd5c 	bl	8003120 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001668:	2300      	movs	r3, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2311      	movs	r3, #17
 800166e:	2205      	movs	r2, #5
 8001670:	2100      	movs	r1, #0
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <mipi_config+0x40c>)
 8001674:	f002 fca5 	bl	8003fc2 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001678:	2078      	movs	r0, #120	; 0x78
 800167a:	f001 fd51 	bl	8003120 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 800167e:	2300      	movs	r3, #0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2329      	movs	r3, #41	; 0x29
 8001684:	2205      	movs	r2, #5
 8001686:	2100      	movs	r1, #0
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <mipi_config+0x40c>)
 800168a:	f002 fc9a 	bl	8003fc2 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800168e:	2078      	movs	r0, #120	; 0x78
 8001690:	f001 fd46 	bl	8003120 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2335      	movs	r3, #53	; 0x35
 800169a:	2215      	movs	r2, #21
 800169c:	2100      	movs	r1, #0
 800169e:	4803      	ldr	r0, [pc, #12]	; (80016ac <mipi_config+0x40c>)
 80016a0:	f002 fc8f 	bl	8003fc2 <HAL_DSI_ShortWrite>
}
 80016a4:	bf00      	nop
 80016a6:	37b4      	adds	r7, #180	; 0xb4
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	20004b84 	.word	0x20004b84
 80016b0:	080095e0 	.word	0x080095e0
 80016b4:	080095e4 	.word	0x080095e4

080016b8 <SPI_master2slave>:

void SPI_master2slave(char *buf, char *frame_buf, uint8_t image_flag)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	4613      	mov	r3, r2
 80016c4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 1000);
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	2201      	movs	r2, #1
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	4812      	ldr	r0, [pc, #72]	; (8001718 <SPI_master2slave+0x60>)
 80016d0:	f005 f8d7 	bl	8006882 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &buf[1], 1, 1000);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1c59      	adds	r1, r3, #1
 80016d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016dc:	2201      	movs	r2, #1
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <SPI_master2slave+0x60>)
 80016e0:	f005 f8cf 	bl	8006882 <HAL_SPI_Transmit>
	if (image_flag == 1)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d112      	bne.n	8001710 <SPI_master2slave+0x58>
	{
		for (int i = 0; i < 6400; i++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e00b      	b.n	8001708 <SPI_master2slave+0x50>
		{
			HAL_SPI_Transmit(&hspi1, &frame_buf[i], 1, 1000);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	18d1      	adds	r1, r2, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	2201      	movs	r2, #1
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <SPI_master2slave+0x60>)
 80016fe:	f005 f8c0 	bl	8006882 <HAL_SPI_Transmit>
		for (int i = 0; i < 6400; i++)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800170e:	dbef      	blt.n	80016f0 <SPI_master2slave+0x38>
		}
	}
}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20004cf0 	.word	0x20004cf0

0800171c <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = {0};
 8001726:	2300      	movs	r3, #0
 8001728:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = {0};
 800172a:	2300      	movs	r3, #0
 800172c:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 1000);
 800172e:	f107 010c 	add.w	r1, r7, #12
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	2201      	movs	r2, #1
 8001738:	483f      	ldr	r0, [pc, #252]	; (8001838 <Write_Registers_data+0x11c>)
 800173a:	f005 fa17 	bl	8006b6c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)data, 1, 1000);
 800173e:	f107 0108 	add.w	r1, r7, #8
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	2201      	movs	r2, #1
 8001748:	483b      	ldr	r0, [pc, #236]	; (8001838 <Write_Registers_data+0x11c>)
 800174a:	f005 fa0f 	bl	8006b6c <HAL_SPI_Receive>
	HAL_SPI_Transmit(&hspi1, &Register_Address[0], 1, 1000);
 800174e:	f107 010c 	add.w	r1, r7, #12
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	2201      	movs	r2, #1
 8001758:	4838      	ldr	r0, [pc, #224]	; (800183c <Write_Registers_data+0x120>)
 800175a:	f005 f892 	bl	8006882 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data[0], 1, 1000);
 800175e:	f107 0108 	add.w	r1, r7, #8
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	2201      	movs	r2, #1
 8001768:	4834      	ldr	r0, [pc, #208]	; (800183c <Write_Registers_data+0x120>)
 800176a:	f005 f88a 	bl	8006882 <HAL_SPI_Transmit>
	if (do_flag == 1)
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d15c      	bne.n	800182e <Write_Registers_data+0x112>
	{
		switch (Register_Address[0])
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	2b13      	cmp	r3, #19
 8001778:	d859      	bhi.n	800182e <Write_Registers_data+0x112>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <Write_Registers_data+0x64>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001829 	.word	0x08001829
 8001784:	08001829 	.word	0x08001829
 8001788:	08001829 	.word	0x08001829
 800178c:	08001829 	.word	0x08001829
 8001790:	08001829 	.word	0x08001829
 8001794:	08001829 	.word	0x08001829
 8001798:	080017d1 	.word	0x080017d1
 800179c:	080017e3 	.word	0x080017e3
 80017a0:	08001829 	.word	0x08001829
 80017a4:	08001829 	.word	0x08001829
 80017a8:	08001829 	.word	0x08001829
 80017ac:	08001829 	.word	0x08001829
 80017b0:	08001829 	.word	0x08001829
 80017b4:	08001829 	.word	0x08001829
 80017b8:	08001829 	.word	0x08001829
 80017bc:	08001829 	.word	0x08001829
 80017c0:	080017eb 	.word	0x080017eb
 80017c4:	0800182f 	.word	0x0800182f
 80017c8:	0800182f 	.word	0x0800182f
 80017cc:	08001829 	.word	0x08001829
		case 4: //Vertical blanking (High byte)
			break;
		case 5: //Vertical blanking (Low byte)
			break;
		case 6: //Frame rate x 2 (Hz)
			frame_rate = (uint32_t)data[0] * 1000;
 80017d0:	7a3b      	ldrb	r3, [r7, #8]
 80017d2:	461a      	mov	r2, r3
 80017d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	4a18      	ldr	r2, [pc, #96]	; (8001840 <Write_Registers_data+0x124>)
 80017de:	6013      	str	r3, [r2, #0]
			break;
 80017e0:	e025      	b.n	800182e <Write_Registers_data+0x112>
		case 7: //Show SPI flash content length
			total_image_in_flash=(uint32_t)data[0];
 80017e2:	7a3a      	ldrb	r2, [r7, #8]
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <Write_Registers_data+0x128>)
 80017e6:	701a      	strb	r2, [r3, #0]
			break;
 80017e8:	e021      	b.n	800182e <Write_Registers_data+0x112>
		case 14: //Day of Version
			break;
		case 15: //Month of Version
			break;
		case 16: //Control A
			switch (data[0] & 0b00000011)
 80017ea:	7a3b      	ldrb	r3, [r7, #8]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d81b      	bhi.n	800182c <Write_Registers_data+0x110>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <Write_Registers_data+0xe0>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	08001815 	.word	0x08001815
 8001804:	08001825 	.word	0x08001825
 8001808:	0800181d 	.word	0x0800181d
			{
			case 0b00000000: //Display content of frame buffer (0)
				play_mode_source = 1;
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <Write_Registers_data+0x12c>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
				break;
 8001812:	e008      	b.n	8001826 <Write_Registers_data+0x10a>
			case 0b00000001: //Display content of frame buffer (1)
				play_mode_source = 2;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <Write_Registers_data+0x12c>)
 8001816:	2202      	movs	r2, #2
 8001818:	701a      	strb	r2, [r3, #0]
				break;
 800181a:	e004      	b.n	8001826 <Write_Registers_data+0x10a>
			case 0b00000010: //Display SPI input content
				break;
			case 0b00000011: //Display Flash content
				play_mode_source = 0;
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <Write_Registers_data+0x12c>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
				break;
 8001822:	e000      	b.n	8001826 <Write_Registers_data+0x10a>
				break;
 8001824:	bf00      	nop
			}
			break;
 8001826:	e001      	b.n	800182c <Write_Registers_data+0x110>
			break;
 8001828:	bf00      	nop
 800182a:	e000      	b.n	800182e <Write_Registers_data+0x112>
			break;
 800182c:	bf00      	nop
			break;
		}
	}
	//HAL_UART_Transmit(&huart4, &Register_Address, 1, 1000);
	//HAL_UART_Transmit(&huart4, &data, 1, 1000);
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20004db8 	.word	0x20004db8
 800183c:	20004cf0 	.word	0x20004cf0
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004
 8001848:	2000b2b9 	.word	0x2000b2b9

0800184c <LCD_PowerOn>:
		}
	}*/
}

static void LCD_PowerOn(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <LCD_PowerOn+0x2c>)
 8001858:	f002 fe44 	bl	80044e4 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 800185c:	2014      	movs	r0, #20
 800185e:	f001 fc5f 	bl	8003120 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <LCD_PowerOn+0x2c>)
 800186a:	f002 fe3b 	bl	80044e4 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 800186e:	2078      	movs	r0, #120	; 0x78
 8001870:	f001 fc56 	bl	8003120 <HAL_Delay>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	48001000 	.word	0x48001000

0800187c <delay_us>:

void delay_us(int time)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
	while (time--)
 8001888:	e007      	b.n	800189a <delay_us+0x1e>
	{
		i = 13;
 800188a:	230d      	movs	r3, #13
 800188c:	60fb      	str	r3, [r7, #12]
		while (i--);
 800188e:	bf00      	nop
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e5a      	subs	r2, r3, #1
 8001894:	60fa      	str	r2, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1fa      	bne.n	8001890 <delay_us+0x14>
	while (time--)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f2      	bne.n	800188a <delay_us+0xe>
	}
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <delay_100ns>:

void delay_100ns(int time)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	int i = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
	while (time--)
 80018be:	e007      	b.n	80018d0 <delay_100ns+0x1e>
	{
		i = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
		while (i--);
 80018c4:	bf00      	nop
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1e5a      	subs	r2, r3, #1
 80018ca:	60fa      	str	r2, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1fa      	bne.n	80018c6 <delay_100ns+0x14>
	while (time--)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1e5a      	subs	r2, r3, #1
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f2      	bne.n	80018c0 <delay_100ns+0xe>
	}
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_GPIO_EXTI_Callback>:

int button_count = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f8:	d15f      	bne.n	80019ba <HAL_GPIO_EXTI_Callback+0xd2>
	{
		button_count++;
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001902:	6013      	str	r3, [r2, #0]
		delay_us(50000);
 8001904:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001908:	f7ff ffb8 	bl	800187c <delay_us>
		for (int i = 0; i < 200; i++)
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e032      	b.n	8001978 <HAL_GPIO_EXTI_Callback+0x90>
		{
			if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001916:	482b      	ldr	r0, [pc, #172]	; (80019c4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001918:	f002 fdcc 	bl	80044b4 <HAL_GPIO_ReadPin>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d11e      	bne.n	8001960 <HAL_GPIO_EXTI_Callback+0x78>
			{
				if (button_count < 80 && button_count > 5 && play_mode == 0)
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b4f      	cmp	r3, #79	; 0x4f
 8001928:	dc16      	bgt.n	8001958 <HAL_GPIO_EXTI_Callback+0x70>
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b05      	cmp	r3, #5
 8001930:	dd12      	ble.n	8001958 <HAL_GPIO_EXTI_Callback+0x70>
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10e      	bne.n	8001958 <HAL_GPIO_EXTI_Callback+0x70>
				{
					display_image_number++;
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_GPIO_EXTI_Callback+0xe4>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001944:	701a      	strb	r2, [r3, #0]
					if (display_image_number >= total_image_in_flash)
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xe8>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d302      	bcc.n	8001958 <HAL_GPIO_EXTI_Callback+0x70>
						display_image_number = 0;
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_GPIO_EXTI_Callback+0xe4>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
				}
				button_count = 0;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
				return;
 800195e:	e02c      	b.n	80019ba <HAL_GPIO_EXTI_Callback+0xd2>
			}
			button_count++;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001968:	6013      	str	r3, [r2, #0]
			delay_us(10000);
 800196a:	f242 7010 	movw	r0, #10000	; 0x2710
 800196e:	f7ff ff85 	bl	800187c <delay_us>
		for (int i = 0; i < 200; i++)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2bc7      	cmp	r3, #199	; 0xc7
 800197c:	ddc9      	ble.n	8001912 <HAL_GPIO_EXTI_Callback+0x2a>
		}
		if (play_mode == 1)
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d109      	bne.n	800199a <HAL_GPIO_EXTI_Callback+0xb2>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198c:	4811      	ldr	r0, [pc, #68]	; (80019d4 <HAL_GPIO_EXTI_Callback+0xec>)
 800198e:	f002 fda9 	bl	80044e4 <HAL_GPIO_WritePin>
			play_mode = 0;
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	e00c      	b.n	80019b4 <HAL_GPIO_EXTI_Callback+0xcc>
		}
		else if (play_mode == 0)
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d108      	bne.n	80019b4 <HAL_GPIO_EXTI_Callback+0xcc>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019a2:	2201      	movs	r2, #1
 80019a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a8:	480a      	ldr	r0, [pc, #40]	; (80019d4 <HAL_GPIO_EXTI_Callback+0xec>)
 80019aa:	f002 fd9b 	bl	80044e4 <HAL_GPIO_WritePin>
			play_mode = 1;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
		}
		button_count = 0;
 80019b4:	4b02      	ldr	r3, [pc, #8]	; (80019c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
	}
}
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000b2bc 	.word	0x2000b2bc
 80019c4:	48001000 	.word	0x48001000
 80019c8:	2000b2b8 	.word	0x2000b2b8
 80019cc:	2000b2ba 	.word	0x2000b2ba
 80019d0:	20000004 	.word	0x20000004
 80019d4:	48000400 	.word	0x48000400

080019d8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart4, &spi3_buf, 2, 1000);
	// USB command: Type and command
	switch (spi3_buf[0] & 0b11000000)
 80019e0:	4bbc      	ldr	r3, [pc, #752]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019e8:	2bc0      	cmp	r3, #192	; 0xc0
 80019ea:	f000 8259 	beq.w	8001ea0 <HAL_SPI_RxCpltCallback+0x4c8>
 80019ee:	2bc0      	cmp	r3, #192	; 0xc0
 80019f0:	f300 836f 	bgt.w	80020d2 <HAL_SPI_RxCpltCallback+0x6fa>
 80019f4:	2b80      	cmp	r3, #128	; 0x80
 80019f6:	f000 8247 	beq.w	8001e88 <HAL_SPI_RxCpltCallback+0x4b0>
 80019fa:	2b80      	cmp	r3, #128	; 0x80
 80019fc:	f300 8369 	bgt.w	80020d2 <HAL_SPI_RxCpltCallback+0x6fa>
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_SPI_RxCpltCallback+0x34>
 8001a04:	2b40      	cmp	r3, #64	; 0x40
 8001a06:	f000 81e1 	beq.w	8001dcc <HAL_SPI_RxCpltCallback+0x3f4>
 8001a0a:	e362      	b.n	80020d2 <HAL_SPI_RxCpltCallback+0x6fa>
	{
	case 0b00000000: //Chain SPI functions
		switch (spi3_buf[0] & 0b00111000)
 8001a0c:	4bb1      	ldr	r3, [pc, #708]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a14:	2b38      	cmp	r3, #56	; 0x38
 8001a16:	f200 8355 	bhi.w	80020c4 <HAL_SPI_RxCpltCallback+0x6ec>
 8001a1a:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <HAL_SPI_RxCpltCallback+0x48>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001b05 	.word	0x08001b05
 8001a24:	080020c5 	.word	0x080020c5
 8001a28:	080020c5 	.word	0x080020c5
 8001a2c:	080020c5 	.word	0x080020c5
 8001a30:	080020c5 	.word	0x080020c5
 8001a34:	080020c5 	.word	0x080020c5
 8001a38:	080020c5 	.word	0x080020c5
 8001a3c:	080020c5 	.word	0x080020c5
 8001a40:	08001c0d 	.word	0x08001c0d
 8001a44:	080020c5 	.word	0x080020c5
 8001a48:	080020c5 	.word	0x080020c5
 8001a4c:	080020c5 	.word	0x080020c5
 8001a50:	080020c5 	.word	0x080020c5
 8001a54:	080020c5 	.word	0x080020c5
 8001a58:	080020c5 	.word	0x080020c5
 8001a5c:	080020c5 	.word	0x080020c5
 8001a60:	08001d2d 	.word	0x08001d2d
 8001a64:	080020c5 	.word	0x080020c5
 8001a68:	080020c5 	.word	0x080020c5
 8001a6c:	080020c5 	.word	0x080020c5
 8001a70:	080020c5 	.word	0x080020c5
 8001a74:	080020c5 	.word	0x080020c5
 8001a78:	080020c5 	.word	0x080020c5
 8001a7c:	080020c5 	.word	0x080020c5
 8001a80:	08001dc9 	.word	0x08001dc9
 8001a84:	080020c5 	.word	0x080020c5
 8001a88:	080020c5 	.word	0x080020c5
 8001a8c:	080020c5 	.word	0x080020c5
 8001a90:	080020c5 	.word	0x080020c5
 8001a94:	080020c5 	.word	0x080020c5
 8001a98:	080020c5 	.word	0x080020c5
 8001a9c:	080020c5 	.word	0x080020c5
 8001aa0:	08001dc9 	.word	0x08001dc9
 8001aa4:	080020c5 	.word	0x080020c5
 8001aa8:	080020c5 	.word	0x080020c5
 8001aac:	080020c5 	.word	0x080020c5
 8001ab0:	080020c5 	.word	0x080020c5
 8001ab4:	080020c5 	.word	0x080020c5
 8001ab8:	080020c5 	.word	0x080020c5
 8001abc:	080020c5 	.word	0x080020c5
 8001ac0:	08001dc9 	.word	0x08001dc9
 8001ac4:	080020c5 	.word	0x080020c5
 8001ac8:	080020c5 	.word	0x080020c5
 8001acc:	080020c5 	.word	0x080020c5
 8001ad0:	080020c5 	.word	0x080020c5
 8001ad4:	080020c5 	.word	0x080020c5
 8001ad8:	080020c5 	.word	0x080020c5
 8001adc:	080020c5 	.word	0x080020c5
 8001ae0:	08001dc9 	.word	0x08001dc9
 8001ae4:	080020c5 	.word	0x080020c5
 8001ae8:	080020c5 	.word	0x080020c5
 8001aec:	080020c5 	.word	0x080020c5
 8001af0:	080020c5 	.word	0x080020c5
 8001af4:	080020c5 	.word	0x080020c5
 8001af8:	080020c5 	.word	0x080020c5
 8001afc:	080020c5 	.word	0x080020c5
 8001b00:	08001dc9 	.word	0x08001dc9
		{
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi3_buf[0] & 0b00000111)
 8001b04:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d879      	bhi.n	8001c04 <HAL_SPI_RxCpltCallback+0x22c>
 8001b10:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_SPI_RxCpltCallback+0x140>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b2d 	.word	0x08001b2d
 8001b1c:	08001b47 	.word	0x08001b47
 8001b20:	08001b7d 	.word	0x08001b7d
 8001b24:	08001bb3 	.word	0x08001bb3
 8001b28:	08001be9 	.word	0x08001be9
			{
			case 0b00000000: //Command for DIP switch ID = 00
				if (BOARD_NUMBER == 1)
 8001b2c:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <HAL_SPI_RxCpltCallback+0x300>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d169      	bne.n	8001c08 <HAL_SPI_RxCpltCallback+0x230>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, 6400, 1000);
 8001b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b38:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b3c:	4967      	ldr	r1, [pc, #412]	; (8001cdc <HAL_SPI_RxCpltCallback+0x304>)
 8001b3e:	4868      	ldr	r0, [pc, #416]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001b40:	f005 f814 	bl	8006b6c <HAL_SPI_Receive>
				}
				break;
 8001b44:	e060      	b.n	8001c08 <HAL_SPI_RxCpltCallback+0x230>
			case 0b00000001: //Command for DIP switch ID = 01
				if (BOARD_NUMBER == 2)
 8001b46:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_SPI_RxCpltCallback+0x300>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d108      	bne.n	8001b60 <HAL_SPI_RxCpltCallback+0x188>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, 6400, 1000);
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b56:	4961      	ldr	r1, [pc, #388]	; (8001cdc <HAL_SPI_RxCpltCallback+0x304>)
 8001b58:	4861      	ldr	r0, [pc, #388]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001b5a:	f005 f807 	bl	8006b6c <HAL_SPI_Receive>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001b5e:	e054      	b.n	8001c0a <HAL_SPI_RxCpltCallback+0x232>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b64:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b68:	495e      	ldr	r1, [pc, #376]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b6a:	485d      	ldr	r0, [pc, #372]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001b6c:	f004 fffe 	bl	8006b6c <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001b70:	2201      	movs	r2, #1
 8001b72:	495c      	ldr	r1, [pc, #368]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b74:	4857      	ldr	r0, [pc, #348]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001b76:	f7ff fd9f 	bl	80016b8 <SPI_master2slave>
				break;
 8001b7a:	e046      	b.n	8001c0a <HAL_SPI_RxCpltCallback+0x232>
			case 0b00000010: //Command for DIP switch ID = 10
				if (BOARD_NUMBER == 3)
 8001b7c:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <HAL_SPI_RxCpltCallback+0x300>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d108      	bne.n	8001b96 <HAL_SPI_RxCpltCallback+0x1be>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, 6400, 1000);
 8001b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b88:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b8c:	4953      	ldr	r1, [pc, #332]	; (8001cdc <HAL_SPI_RxCpltCallback+0x304>)
 8001b8e:	4854      	ldr	r0, [pc, #336]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001b90:	f004 ffec 	bl	8006b6c <HAL_SPI_Receive>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001b94:	e039      	b.n	8001c0a <HAL_SPI_RxCpltCallback+0x232>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b9e:	4951      	ldr	r1, [pc, #324]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001ba0:	484f      	ldr	r0, [pc, #316]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001ba2:	f004 ffe3 	bl	8006b6c <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	494e      	ldr	r1, [pc, #312]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001baa:	484a      	ldr	r0, [pc, #296]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001bac:	f7ff fd84 	bl	80016b8 <SPI_master2slave>
				break;
 8001bb0:	e02b      	b.n	8001c0a <HAL_SPI_RxCpltCallback+0x232>
			case 0b00000011: //Command for DIP switch ID = 11
				if (BOARD_NUMBER == 4)
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_SPI_RxCpltCallback+0x300>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d108      	bne.n	8001bcc <HAL_SPI_RxCpltCallback+0x1f4>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, 6400, 1000);
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001bc2:	4946      	ldr	r1, [pc, #280]	; (8001cdc <HAL_SPI_RxCpltCallback+0x304>)
 8001bc4:	4846      	ldr	r0, [pc, #280]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001bc6:	f004 ffd1 	bl	8006b6c <HAL_SPI_Receive>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001bca:	e01e      	b.n	8001c0a <HAL_SPI_RxCpltCallback+0x232>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001bd4:	4943      	ldr	r1, [pc, #268]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001bd6:	4842      	ldr	r0, [pc, #264]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001bd8:	f004 ffc8 	bl	8006b6c <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4941      	ldr	r1, [pc, #260]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001be0:	483c      	ldr	r0, [pc, #240]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001be2:	f7ff fd69 	bl	80016b8 <SPI_master2slave>
				break;
 8001be6:	e010      	b.n	8001c0a <HAL_SPI_RxCpltCallback+0x232>
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_0, 6400, 1000);
 8001be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bec:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001bf0:	493a      	ldr	r1, [pc, #232]	; (8001cdc <HAL_SPI_RxCpltCallback+0x304>)
 8001bf2:	483b      	ldr	r0, [pc, #236]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001bf4:	f004 ffba 	bl	8006b6c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_0, 1);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4938      	ldr	r1, [pc, #224]	; (8001cdc <HAL_SPI_RxCpltCallback+0x304>)
 8001bfc:	4835      	ldr	r0, [pc, #212]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001bfe:	f7ff fd5b 	bl	80016b8 <SPI_master2slave>
				break;
 8001c02:	e002      	b.n	8001c0a <HAL_SPI_RxCpltCallback+0x232>
			default:
				break;
 8001c04:	bf00      	nop
 8001c06:	e0e0      	b.n	8001dca <HAL_SPI_RxCpltCallback+0x3f2>
				break;
 8001c08:	bf00      	nop
			}
			break;
 8001c0a:	e0de      	b.n	8001dca <HAL_SPI_RxCpltCallback+0x3f2>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi3_buf[0] & 0b00000111)
 8001c0c:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	f200 8085 	bhi.w	8001d24 <HAL_SPI_RxCpltCallback+0x34c>
 8001c1a:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <HAL_SPI_RxCpltCallback+0x248>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c35 	.word	0x08001c35
 8001c24:	08001c4f 	.word	0x08001c4f
 8001c28:	08001c85 	.word	0x08001c85
 8001c2c:	08001cbb 	.word	0x08001cbb
 8001c30:	08001d09 	.word	0x08001d09
			{
			case 0b00000000: //Command for DIP switch ID = 00
				if (BOARD_NUMBER == 1)
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_SPI_RxCpltCallback+0x300>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d175      	bne.n	8001d28 <HAL_SPI_RxCpltCallback+0x350>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, 6400, 1000);
 8001c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c40:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c44:	4928      	ldr	r1, [pc, #160]	; (8001ce8 <HAL_SPI_RxCpltCallback+0x310>)
 8001c46:	4826      	ldr	r0, [pc, #152]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001c48:	f004 ff90 	bl	8006b6c <HAL_SPI_Receive>
				}
				break;
 8001c4c:	e06c      	b.n	8001d28 <HAL_SPI_RxCpltCallback+0x350>
			case 0b00000001: //Command for DIP switch ID = 01
				if (BOARD_NUMBER == 2)
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_SPI_RxCpltCallback+0x300>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d108      	bne.n	8001c68 <HAL_SPI_RxCpltCallback+0x290>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, 6400, 1000);
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c5e:	4922      	ldr	r1, [pc, #136]	; (8001ce8 <HAL_SPI_RxCpltCallback+0x310>)
 8001c60:	481f      	ldr	r0, [pc, #124]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001c62:	f004 ff83 	bl	8006b6c <HAL_SPI_Receive>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001c66:	e060      	b.n	8001d2a <HAL_SPI_RxCpltCallback+0x352>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c70:	491c      	ldr	r1, [pc, #112]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001c72:	481b      	ldr	r0, [pc, #108]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001c74:	f004 ff7a 	bl	8006b6c <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	491a      	ldr	r1, [pc, #104]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001c7c:	4815      	ldr	r0, [pc, #84]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001c7e:	f7ff fd1b 	bl	80016b8 <SPI_master2slave>
				break;
 8001c82:	e052      	b.n	8001d2a <HAL_SPI_RxCpltCallback+0x352>
			case 0b00000010: //Command for DIP switch ID = 10
				if (BOARD_NUMBER == 3)
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_SPI_RxCpltCallback+0x300>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d108      	bne.n	8001c9e <HAL_SPI_RxCpltCallback+0x2c6>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, 6400, 1000);
 8001c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c90:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c94:	4914      	ldr	r1, [pc, #80]	; (8001ce8 <HAL_SPI_RxCpltCallback+0x310>)
 8001c96:	4812      	ldr	r0, [pc, #72]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001c98:	f004 ff68 	bl	8006b6c <HAL_SPI_Receive>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001c9c:	e045      	b.n	8001d2a <HAL_SPI_RxCpltCallback+0x352>
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca2:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ca6:	490f      	ldr	r1, [pc, #60]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001caa:	f004 ff5f 	bl	8006b6c <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <HAL_SPI_RxCpltCallback+0x30c>)
 8001cb2:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001cb4:	f7ff fd00 	bl	80016b8 <SPI_master2slave>
				break;
 8001cb8:	e037      	b.n	8001d2a <HAL_SPI_RxCpltCallback+0x352>
			case 0b00000011: //Command for DIP switch ID = 11
				if (BOARD_NUMBER == 4)
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_SPI_RxCpltCallback+0x300>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d114      	bne.n	8001cec <HAL_SPI_RxCpltCallback+0x314>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, 6400, 1000);
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001cca:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <HAL_SPI_RxCpltCallback+0x310>)
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <HAL_SPI_RxCpltCallback+0x308>)
 8001cce:	f004 ff4d 	bl	8006b6c <HAL_SPI_Receive>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001cd2:	e02a      	b.n	8001d2a <HAL_SPI_RxCpltCallback+0x352>
 8001cd4:	20004eb4 	.word	0x20004eb4
 8001cd8:	20004eb0 	.word	0x20004eb0
 8001cdc:	200067b8 	.word	0x200067b8
 8001ce0:	20004db8 	.word	0x20004db8
 8001ce4:	20004eb8 	.word	0x20004eb8
 8001ce8:	200080b8 	.word	0x200080b8
					HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001cf4:	49ba      	ldr	r1, [pc, #744]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001cf6:	48bb      	ldr	r0, [pc, #748]	; (8001fe4 <HAL_SPI_RxCpltCallback+0x60c>)
 8001cf8:	f004 ff38 	bl	8006b6c <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	49b8      	ldr	r1, [pc, #736]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001d00:	48b9      	ldr	r0, [pc, #740]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001d02:	f7ff fcd9 	bl	80016b8 <SPI_master2slave>
				break;
 8001d06:	e010      	b.n	8001d2a <HAL_SPI_RxCpltCallback+0x352>
			case 0b00000100: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_1, 6400, 1000);
 8001d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d10:	49b6      	ldr	r1, [pc, #728]	; (8001fec <HAL_SPI_RxCpltCallback+0x614>)
 8001d12:	48b4      	ldr	r0, [pc, #720]	; (8001fe4 <HAL_SPI_RxCpltCallback+0x60c>)
 8001d14:	f004 ff2a 	bl	8006b6c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_1, 1);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	49b4      	ldr	r1, [pc, #720]	; (8001fec <HAL_SPI_RxCpltCallback+0x614>)
 8001d1c:	48b2      	ldr	r0, [pc, #712]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001d1e:	f7ff fccb 	bl	80016b8 <SPI_master2slave>
				break;
 8001d22:	e002      	b.n	8001d2a <HAL_SPI_RxCpltCallback+0x352>
			default:
				break;
 8001d24:	bf00      	nop
 8001d26:	e050      	b.n	8001dca <HAL_SPI_RxCpltCallback+0x3f2>
				break;
 8001d28:	bf00      	nop
			}
			break;
 8001d2a:	e04e      	b.n	8001dca <HAL_SPI_RxCpltCallback+0x3f2>
		case 0b00010000: //Write Registers data
			SPI_master2slave(&spi3_buf, NULL, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	48ad      	ldr	r0, [pc, #692]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001d32:	f7ff fcc1 	bl	80016b8 <SPI_master2slave>
			switch (spi3_buf[0] & 0b00000111)
 8001d36:	4bac      	ldr	r3, [pc, #688]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d840      	bhi.n	8001dc4 <HAL_SPI_RxCpltCallback+0x3ec>
 8001d42:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <HAL_SPI_RxCpltCallback+0x370>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d5d 	.word	0x08001d5d
 8001d4c:	08001d75 	.word	0x08001d75
 8001d50:	08001d8d 	.word	0x08001d8d
 8001d54:	08001da5 	.word	0x08001da5
 8001d58:	08001dbd 	.word	0x08001dbd
			{
			case 0b00000000: //Command for DIP switch ID = 00
				if (BOARD_NUMBER == 1)
 8001d5c:	4ba4      	ldr	r3, [pc, #656]	; (8001ff0 <HAL_SPI_RxCpltCallback+0x618>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d103      	bne.n	8001d6c <HAL_SPI_RxCpltCallback+0x394>
				{
					Write_Registers_data(1);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f7ff fcd9 	bl	800171c <Write_Registers_data>
				}
				else
				{
					Write_Registers_data(0);
				}
				break;
 8001d6a:	e02c      	b.n	8001dc6 <HAL_SPI_RxCpltCallback+0x3ee>
					Write_Registers_data(0);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff fcd5 	bl	800171c <Write_Registers_data>
				break;
 8001d72:	e028      	b.n	8001dc6 <HAL_SPI_RxCpltCallback+0x3ee>
			case 0b00000001: //Command for DIP switch ID = 01
				if (BOARD_NUMBER == 2)
 8001d74:	4b9e      	ldr	r3, [pc, #632]	; (8001ff0 <HAL_SPI_RxCpltCallback+0x618>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d103      	bne.n	8001d84 <HAL_SPI_RxCpltCallback+0x3ac>
				{
					Write_Registers_data(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fccd 	bl	800171c <Write_Registers_data>
				}
				else
				{
					Write_Registers_data(0);
				}
				break;
 8001d82:	e020      	b.n	8001dc6 <HAL_SPI_RxCpltCallback+0x3ee>
					Write_Registers_data(0);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fcc9 	bl	800171c <Write_Registers_data>
				break;
 8001d8a:	e01c      	b.n	8001dc6 <HAL_SPI_RxCpltCallback+0x3ee>
			case 0b00000010: //Command for DIP switch ID = 10
				if (BOARD_NUMBER == 3)
 8001d8c:	4b98      	ldr	r3, [pc, #608]	; (8001ff0 <HAL_SPI_RxCpltCallback+0x618>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d103      	bne.n	8001d9c <HAL_SPI_RxCpltCallback+0x3c4>
				{
					Write_Registers_data(1);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7ff fcc1 	bl	800171c <Write_Registers_data>
				}
				else
				{
					Write_Registers_data(0);
				}
				break;
 8001d9a:	e014      	b.n	8001dc6 <HAL_SPI_RxCpltCallback+0x3ee>
					Write_Registers_data(0);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fcbd 	bl	800171c <Write_Registers_data>
				break;
 8001da2:	e010      	b.n	8001dc6 <HAL_SPI_RxCpltCallback+0x3ee>
			case 0b00000011: //Command for DIP switch ID = 11
				if (BOARD_NUMBER == 4)
 8001da4:	4b92      	ldr	r3, [pc, #584]	; (8001ff0 <HAL_SPI_RxCpltCallback+0x618>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d103      	bne.n	8001db4 <HAL_SPI_RxCpltCallback+0x3dc>
				{
					Write_Registers_data(1);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7ff fcb5 	bl	800171c <Write_Registers_data>
				}
				else
				{
					Write_Registers_data(0);
				}
				break;
 8001db2:	e008      	b.n	8001dc6 <HAL_SPI_RxCpltCallback+0x3ee>
					Write_Registers_data(0);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff fcb1 	bl	800171c <Write_Registers_data>
				break;
 8001dba:	e004      	b.n	8001dc6 <HAL_SPI_RxCpltCallback+0x3ee>
			case 0b00000100: //Broadcast to every board
				Write_Registers_data(1);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff fcad 	bl	800171c <Write_Registers_data>
				break;
 8001dc2:	e000      	b.n	8001dc6 <HAL_SPI_RxCpltCallback+0x3ee>
			default:
				break;
 8001dc4:	bf00      	nop
			}
			break;
 8001dc6:	e000      	b.n	8001dca <HAL_SPI_RxCpltCallback+0x3f2>
		case 0b00011000: //Write partial content of frame buffer
			break;
 8001dc8:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 8001dca:	e17b      	b.n	80020c4 <HAL_SPI_RxCpltCallback+0x6ec>
	case 0b01000000: //Master SPI functions
		switch (spi3_buf[0] & 0b00111000)
 8001dcc:	4b86      	ldr	r3, [pc, #536]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dd4:	2b28      	cmp	r3, #40	; 0x28
 8001dd6:	f200 8177 	bhi.w	80020c8 <HAL_SPI_RxCpltCallback+0x6f0>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <HAL_SPI_RxCpltCallback+0x408>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e85 	.word	0x08001e85
 8001de4:	080020c9 	.word	0x080020c9
 8001de8:	080020c9 	.word	0x080020c9
 8001dec:	080020c9 	.word	0x080020c9
 8001df0:	080020c9 	.word	0x080020c9
 8001df4:	080020c9 	.word	0x080020c9
 8001df8:	080020c9 	.word	0x080020c9
 8001dfc:	080020c9 	.word	0x080020c9
 8001e00:	08001e85 	.word	0x08001e85
 8001e04:	080020c9 	.word	0x080020c9
 8001e08:	080020c9 	.word	0x080020c9
 8001e0c:	080020c9 	.word	0x080020c9
 8001e10:	080020c9 	.word	0x080020c9
 8001e14:	080020c9 	.word	0x080020c9
 8001e18:	080020c9 	.word	0x080020c9
 8001e1c:	080020c9 	.word	0x080020c9
 8001e20:	08001e85 	.word	0x08001e85
 8001e24:	080020c9 	.word	0x080020c9
 8001e28:	080020c9 	.word	0x080020c9
 8001e2c:	080020c9 	.word	0x080020c9
 8001e30:	080020c9 	.word	0x080020c9
 8001e34:	080020c9 	.word	0x080020c9
 8001e38:	080020c9 	.word	0x080020c9
 8001e3c:	080020c9 	.word	0x080020c9
 8001e40:	08001e85 	.word	0x08001e85
 8001e44:	080020c9 	.word	0x080020c9
 8001e48:	080020c9 	.word	0x080020c9
 8001e4c:	080020c9 	.word	0x080020c9
 8001e50:	080020c9 	.word	0x080020c9
 8001e54:	080020c9 	.word	0x080020c9
 8001e58:	080020c9 	.word	0x080020c9
 8001e5c:	080020c9 	.word	0x080020c9
 8001e60:	08001e85 	.word	0x08001e85
 8001e64:	080020c9 	.word	0x080020c9
 8001e68:	080020c9 	.word	0x080020c9
 8001e6c:	080020c9 	.word	0x080020c9
 8001e70:	080020c9 	.word	0x080020c9
 8001e74:	080020c9 	.word	0x080020c9
 8001e78:	080020c9 	.word	0x080020c9
 8001e7c:	080020c9 	.word	0x080020c9
 8001e80:	08001e85 	.word	0x08001e85
		{
		case 0b00000000: //Start SPI write data
			break;
 8001e84:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001e86:	e11f      	b.n	80020c8 <HAL_SPI_RxCpltCallback+0x6f0>
	case 0b10000000: //I2C command
		switch (spi3_buf[0] & 0b00111000)
 8001e88:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_SPI_RxCpltCallback+0x4c4>
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	f040 8119 	bne.w	80020cc <HAL_SPI_RxCpltCallback+0x6f4>
		{
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001e9a:	e000      	b.n	8001e9e <HAL_SPI_RxCpltCallback+0x4c6>
			break;
 8001e9c:	bf00      	nop
		}
		break;
 8001e9e:	e115      	b.n	80020cc <HAL_SPI_RxCpltCallback+0x6f4>
	case 0b11000000: //SPI flash function & Slave SPI
		switch (spi3_buf[0] & 0b00111000)
 8001ea0:	4b51      	ldr	r3, [pc, #324]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	f000 8109 	beq.w	80020c0 <HAL_SPI_RxCpltCallback+0x6e8>
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	f300 810e 	bgt.w	80020d0 <HAL_SPI_RxCpltCallback+0x6f8>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_SPI_RxCpltCallback+0x4e8>
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	f000 80c0 	beq.w	800203e <HAL_SPI_RxCpltCallback+0x666>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001ebe:	e107      	b.n	80020d0 <HAL_SPI_RxCpltCallback+0x6f8>
			switch (spi3_buf[0] & 0b00000111)
 8001ec0:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	f200 80b6 	bhi.w	800203a <HAL_SPI_RxCpltCallback+0x662>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_SPI_RxCpltCallback+0x4fc>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001ee9 	.word	0x08001ee9
 8001ed8:	08001f2d 	.word	0x08001f2d
 8001edc:	08001f71 	.word	0x08001f71
 8001ee0:	08001fa7 	.word	0x08001fa7
 8001ee4:	08002001 	.word	0x08002001
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eec:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ef0:	493b      	ldr	r1, [pc, #236]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001ef2:	483c      	ldr	r0, [pc, #240]	; (8001fe4 <HAL_SPI_RxCpltCallback+0x60c>)
 8001ef4:	f004 fe3a 	bl	8006b6c <HAL_SPI_Receive>
				if (BOARD_NUMBER == 1)
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_SPI_RxCpltCallback+0x618>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d10f      	bne.n	8001f20 <HAL_SPI_RxCpltCallback+0x548>
					erase_flash_sector(spi3_buf[1] - 1);
 8001f00:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fa45 	bl	8002398 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001f0e:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	4619      	mov	r1, r3
 8001f18:	4831      	ldr	r0, [pc, #196]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001f1a:	f000 f96b 	bl	80021f4 <write_flash_page>
				break;
 8001f1e:	e08d      	b.n	800203c <HAL_SPI_RxCpltCallback+0x664>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001f20:	2201      	movs	r2, #1
 8001f22:	492f      	ldr	r1, [pc, #188]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001f24:	4830      	ldr	r0, [pc, #192]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001f26:	f7ff fbc7 	bl	80016b8 <SPI_master2slave>
				break;
 8001f2a:	e087      	b.n	800203c <HAL_SPI_RxCpltCallback+0x664>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f30:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001f34:	492a      	ldr	r1, [pc, #168]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001f36:	482b      	ldr	r0, [pc, #172]	; (8001fe4 <HAL_SPI_RxCpltCallback+0x60c>)
 8001f38:	f004 fe18 	bl	8006b6c <HAL_SPI_Receive>
				if (BOARD_NUMBER == 2)
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_SPI_RxCpltCallback+0x618>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d10f      	bne.n	8001f64 <HAL_SPI_RxCpltCallback+0x58c>
					erase_flash_sector(spi3_buf[1] - 1);
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001f46:	785b      	ldrb	r3, [r3, #1]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fa23 	bl	8002398 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4820      	ldr	r0, [pc, #128]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001f5e:	f000 f949 	bl	80021f4 <write_flash_page>
				break;
 8001f62:	e06b      	b.n	800203c <HAL_SPI_RxCpltCallback+0x664>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001f64:	2201      	movs	r2, #1
 8001f66:	491e      	ldr	r1, [pc, #120]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001f68:	481f      	ldr	r0, [pc, #124]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001f6a:	f7ff fba5 	bl	80016b8 <SPI_master2slave>
				break;
 8001f6e:	e065      	b.n	800203c <HAL_SPI_RxCpltCallback+0x664>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f74:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001f78:	4919      	ldr	r1, [pc, #100]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001f7a:	481a      	ldr	r0, [pc, #104]	; (8001fe4 <HAL_SPI_RxCpltCallback+0x60c>)
 8001f7c:	f004 fdf6 	bl	8006b6c <HAL_SPI_Receive>
				if (BOARD_NUMBER = 3)
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_SPI_RxCpltCallback+0x618>)
 8001f82:	2203      	movs	r2, #3
 8001f84:	701a      	strb	r2, [r3, #0]
					erase_flash_sector(spi3_buf[1] - 1);
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001f88:	785b      	ldrb	r3, [r3, #1]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fa02 	bl	8002398 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4810      	ldr	r0, [pc, #64]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001fa0:	f000 f928 	bl	80021f4 <write_flash_page>
				break;
 8001fa4:	e04a      	b.n	800203c <HAL_SPI_RxCpltCallback+0x664>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001fae:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <HAL_SPI_RxCpltCallback+0x60c>)
 8001fb2:	f004 fddb 	bl	8006b6c <HAL_SPI_Receive>
				if (BOARD_NUMBER == 4)
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_SPI_RxCpltCallback+0x618>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d11a      	bne.n	8001ff4 <HAL_SPI_RxCpltCallback+0x61c>
					erase_flash_sector(spi3_buf[1] - 1);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001fc0:	785b      	ldrb	r3, [r3, #1]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f9e6 	bl	8002398 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_SPI_RxCpltCallback+0x610>)
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <HAL_SPI_RxCpltCallback+0x608>)
 8001fd8:	f000 f90c 	bl	80021f4 <write_flash_page>
				break;
 8001fdc:	e02e      	b.n	800203c <HAL_SPI_RxCpltCallback+0x664>
 8001fde:	bf00      	nop
 8001fe0:	20004eb8 	.word	0x20004eb8
 8001fe4:	20004db8 	.word	0x20004db8
 8001fe8:	20004eb4 	.word	0x20004eb4
 8001fec:	200080b8 	.word	0x200080b8
 8001ff0:	20004eb0 	.word	0x20004eb0
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4944      	ldr	r1, [pc, #272]	; (8002108 <HAL_SPI_RxCpltCallback+0x730>)
 8001ff8:	4844      	ldr	r0, [pc, #272]	; (800210c <HAL_SPI_RxCpltCallback+0x734>)
 8001ffa:	f7ff fb5d 	bl	80016b8 <SPI_master2slave>
				break;
 8001ffe:	e01d      	b.n	800203c <HAL_SPI_RxCpltCallback+0x664>
				HAL_SPI_Receive(&hspi3, (uint8_t *)frame_buf_tmp, 6400, 1000);
 8002000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002004:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002008:	493f      	ldr	r1, [pc, #252]	; (8002108 <HAL_SPI_RxCpltCallback+0x730>)
 800200a:	4841      	ldr	r0, [pc, #260]	; (8002110 <HAL_SPI_RxCpltCallback+0x738>)
 800200c:	f004 fdae 	bl	8006b6c <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8002010:	2201      	movs	r2, #1
 8002012:	493d      	ldr	r1, [pc, #244]	; (8002108 <HAL_SPI_RxCpltCallback+0x730>)
 8002014:	483d      	ldr	r0, [pc, #244]	; (800210c <HAL_SPI_RxCpltCallback+0x734>)
 8002016:	f7ff fb4f 	bl	80016b8 <SPI_master2slave>
				erase_flash_sector(spi3_buf[1] - 1);
 800201a:	4b3c      	ldr	r3, [pc, #240]	; (800210c <HAL_SPI_RxCpltCallback+0x734>)
 800201c:	785b      	ldrb	r3, [r3, #1]
 800201e:	3b01      	subs	r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f9b8 	bl	8002398 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8002028:	4b38      	ldr	r3, [pc, #224]	; (800210c <HAL_SPI_RxCpltCallback+0x734>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	3b01      	subs	r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4619      	mov	r1, r3
 8002032:	4835      	ldr	r0, [pc, #212]	; (8002108 <HAL_SPI_RxCpltCallback+0x730>)
 8002034:	f000 f8de 	bl	80021f4 <write_flash_page>
				break;
 8002038:	e000      	b.n	800203c <HAL_SPI_RxCpltCallback+0x664>
				break;
 800203a:	bf00      	nop
			break;
 800203c:	e041      	b.n	80020c2 <HAL_SPI_RxCpltCallback+0x6ea>
			switch (spi3_buf[0] & 0b00000111)
 800203e:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_SPI_RxCpltCallback+0x734>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	d836      	bhi.n	80020b8 <HAL_SPI_RxCpltCallback+0x6e0>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_SPI_RxCpltCallback+0x678>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	08002065 	.word	0x08002065
 8002054:	080020b9 	.word	0x080020b9
 8002058:	080020b9 	.word	0x080020b9
 800205c:	080020b9 	.word	0x080020b9
 8002060:	08002093 	.word	0x08002093
				if (BOARD_NUMBER == 1)
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_SPI_RxCpltCallback+0x73c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d127      	bne.n	80020bc <HAL_SPI_RxCpltCallback+0x6e4>
					reset_flash_software();
 800206c:	f000 fa2c 	bl	80024c8 <reset_flash_software>
					read_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_SPI_RxCpltCallback+0x734>)
 8002072:	785b      	ldrb	r3, [r3, #1]
 8002074:	3b01      	subs	r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4619      	mov	r1, r3
 800207a:	4823      	ldr	r0, [pc, #140]	; (8002108 <HAL_SPI_RxCpltCallback+0x730>)
 800207c:	f000 f934 	bl	80022e8 <read_flash_page>
					HAL_SPI_Transmit(&hspi3, &frame_buf_tmp, 6400, 1000);
 8002080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002084:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002088:	491f      	ldr	r1, [pc, #124]	; (8002108 <HAL_SPI_RxCpltCallback+0x730>)
 800208a:	4821      	ldr	r0, [pc, #132]	; (8002110 <HAL_SPI_RxCpltCallback+0x738>)
 800208c:	f004 fbf9 	bl	8006882 <HAL_SPI_Transmit>
				break;
 8002090:	e014      	b.n	80020bc <HAL_SPI_RxCpltCallback+0x6e4>
				reset_flash_software();
 8002092:	f000 fa19 	bl	80024c8 <reset_flash_software>
				read_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_SPI_RxCpltCallback+0x734>)
 8002098:	785b      	ldrb	r3, [r3, #1]
 800209a:	3b01      	subs	r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4619      	mov	r1, r3
 80020a0:	4819      	ldr	r0, [pc, #100]	; (8002108 <HAL_SPI_RxCpltCallback+0x730>)
 80020a2:	f000 f921 	bl	80022e8 <read_flash_page>
				HAL_SPI_Transmit(&hspi3, &frame_buf_tmp, 6400, 1000);
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80020ae:	4916      	ldr	r1, [pc, #88]	; (8002108 <HAL_SPI_RxCpltCallback+0x730>)
 80020b0:	4817      	ldr	r0, [pc, #92]	; (8002110 <HAL_SPI_RxCpltCallback+0x738>)
 80020b2:	f004 fbe6 	bl	8006882 <HAL_SPI_Transmit>
				break;
 80020b6:	e002      	b.n	80020be <HAL_SPI_RxCpltCallback+0x6e6>
				break;
 80020b8:	bf00      	nop
 80020ba:	e002      	b.n	80020c2 <HAL_SPI_RxCpltCallback+0x6ea>
				break;
 80020bc:	bf00      	nop
			break;
 80020be:	e000      	b.n	80020c2 <HAL_SPI_RxCpltCallback+0x6ea>
			break;
 80020c0:	bf00      	nop
		break;
 80020c2:	e005      	b.n	80020d0 <HAL_SPI_RxCpltCallback+0x6f8>
		break;
 80020c4:	bf00      	nop
 80020c6:	e004      	b.n	80020d2 <HAL_SPI_RxCpltCallback+0x6fa>
		break;
 80020c8:	bf00      	nop
 80020ca:	e002      	b.n	80020d2 <HAL_SPI_RxCpltCallback+0x6fa>
		break;
 80020cc:	bf00      	nop
 80020ce:	e000      	b.n	80020d2 <HAL_SPI_RxCpltCallback+0x6fa>
		break;
 80020d0:	bf00      	nop
	}
	// USB command: ID
	switch (spi3_buf[0] & 0b00000111)
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_SPI_RxCpltCallback+0x734>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d80a      	bhi.n	80020f4 <HAL_SPI_RxCpltCallback+0x71c>
 80020de:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <HAL_SPI_RxCpltCallback+0x70c>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	080020f5 	.word	0x080020f5
 80020ec:	080020f5 	.word	0x080020f5
 80020f0:	080020f5 	.word	0x080020f5
	case 0b00000010: //Command for DIP switch ID = 10
		break;
	case 0b00000011: //Command for DIP switch ID = 11
		break;
	default: //Broadcast to every board
		break;
 80020f4:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 80020f6:	2202      	movs	r2, #2
 80020f8:	4904      	ldr	r1, [pc, #16]	; (800210c <HAL_SPI_RxCpltCallback+0x734>)
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <HAL_SPI_RxCpltCallback+0x738>)
 80020fc:	f005 f890 	bl	8007220 <HAL_SPI_Receive_IT>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20004eb8 	.word	0x20004eb8
 800210c:	20004eb4 	.word	0x20004eb4
 8002110:	20004db8 	.word	0x20004db8
 8002114:	20004eb0 	.word	0x20004eb0

08002118 <FLASH_WriteByte>:

///////////////////////flash/////////////////////////
void FLASH_WriteByte(uint8_t data)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	for (int i = 7; i >= 0; i--)
 8002122:	2307      	movs	r3, #7
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e022      	b.n	800216e <FLASH_WriteByte+0x56>
	{
		HAL_GPIO_WritePin(FLASH_MOSI_PORT, FLASH_MOSI_PIN, (data >> i) & 1);
 8002128:	79fa      	ldrb	r2, [r7, #7]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	fa42 f303 	asr.w	r3, r2, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213e:	4810      	ldr	r0, [pc, #64]	; (8002180 <FLASH_WriteByte+0x68>)
 8002140:	f002 f9d0 	bl	80044e4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8002144:	2201      	movs	r2, #1
 8002146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <FLASH_WriteByte+0x68>)
 800214c:	f002 f9ca 	bl	80044e4 <HAL_GPIO_WritePin>
		delay_100ns(1);
 8002150:	2001      	movs	r0, #1
 8002152:	f7ff fbae 	bl	80018b2 <delay_100ns>
		HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800215c:	4808      	ldr	r0, [pc, #32]	; (8002180 <FLASH_WriteByte+0x68>)
 800215e:	f002 f9c1 	bl	80044e4 <HAL_GPIO_WritePin>
		delay_100ns(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff fba5 	bl	80018b2 <delay_100ns>
	for (int i = 7; i >= 0; i--)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3b01      	subs	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	dad9      	bge.n	8002128 <FLASH_WriteByte+0x10>
	}
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	48001400 	.word	0x48001400

08002184 <FLASH_ReadByte>:

uint8_t FLASH_ReadByte(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	71fb      	strb	r3, [r7, #7]

	for (int i = 7; i >= 0; i--)
 800218e:	2307      	movs	r3, #7
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	e024      	b.n	80021de <FLASH_ReadByte+0x5a>
	{
		HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219a:	4815      	ldr	r0, [pc, #84]	; (80021f0 <FLASH_ReadByte+0x6c>)
 800219c:	f002 f9a2 	bl	80044e4 <HAL_GPIO_WritePin>
		delay_100ns(1);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7ff fb86 	bl	80018b2 <delay_100ns>
		data |= (HAL_GPIO_ReadPin(FLASH_MISO_PORT, FLASH_MISO_PIN) << i);
 80021a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021aa:	4811      	ldr	r0, [pc, #68]	; (80021f0 <FLASH_ReadByte+0x6c>)
 80021ac:	f002 f982 	bl	80044b4 <HAL_GPIO_ReadPin>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	b25a      	sxtb	r2, r3
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021cc:	4808      	ldr	r0, [pc, #32]	; (80021f0 <FLASH_ReadByte+0x6c>)
 80021ce:	f002 f989 	bl	80044e4 <HAL_GPIO_WritePin>
		delay_100ns(1);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7ff fb6d 	bl	80018b2 <delay_100ns>
	for (int i = 7; i >= 0; i--)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3b01      	subs	r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dad7      	bge.n	8002194 <FLASH_ReadByte+0x10>
	}

	return data;
 80021e4:	79fb      	ldrb	r3, [r7, #7]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	48001400 	.word	0x48001400

080021f4 <write_flash_page>:

void write_flash_page(uint8_t *data, uint8_t image_id)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id / 8;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	08db      	lsrs	r3, r3, #3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id % 8;
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]
	int count = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = image_id_L * 0x20; i < image_id_L * 0x20 + 25; i++)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015b      	lsls	r3, r3, #5
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	e057      	b.n	80022cc <write_flash_page+0xd8>
	{
		// enable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002222:	4830      	ldr	r0, [pc, #192]	; (80022e4 <write_flash_page+0xf0>)
 8002224:	f002 f95e 	bl	80044e4 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x06);
 8002228:	2006      	movs	r0, #6
 800222a:	f7ff ff75 	bl	8002118 <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002234:	482b      	ldr	r0, [pc, #172]	; (80022e4 <write_flash_page+0xf0>)
 8002236:	f002 f955 	bl	80044e4 <HAL_GPIO_WritePin>

		// write data to flash page
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002240:	4828      	ldr	r0, [pc, #160]	; (80022e4 <write_flash_page+0xf0>)
 8002242:	f002 f94f 	bl	80044e4 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x02);
 8002246:	2002      	movs	r0, #2
 8002248:	f7ff ff66 	bl	8002118 <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff61 	bl	8002118 <FLASH_WriteByte>
		FLASH_WriteByte(i);
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff ff5c 	bl	8002118 <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 8002260:	2000      	movs	r0, #0
 8002262:	f7ff ff59 	bl	8002118 <FLASH_WriteByte>
		for (uint32_t j = 0; j < 256; j++)
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e00d      	b.n	8002288 <write_flash_page+0x94>
		{
			FLASH_WriteByte(data[count * 256 + j]);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	461a      	mov	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4413      	add	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff4b 	bl	8002118 <FLASH_WriteByte>
		for (uint32_t j = 0; j < 256; j++)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2bff      	cmp	r3, #255	; 0xff
 800228c:	d9ee      	bls.n	800226c <write_flash_page+0x78>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800228e:	2201      	movs	r2, #1
 8002290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002294:	4813      	ldr	r0, [pc, #76]	; (80022e4 <write_flash_page+0xf0>)
 8002296:	f002 f925 	bl	80044e4 <HAL_GPIO_WritePin>

		// disable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4810      	ldr	r0, [pc, #64]	; (80022e4 <write_flash_page+0xf0>)
 80022a2:	f002 f91f 	bl	80044e4 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x04);
 80022a6:	2004      	movs	r0, #4
 80022a8:	f7ff ff36 	bl	8002118 <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80022ac:	2201      	movs	r2, #1
 80022ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b2:	480c      	ldr	r0, [pc, #48]	; (80022e4 <write_flash_page+0xf0>)
 80022b4:	f002 f916 	bl	80044e4 <HAL_GPIO_WritePin>
		delay_us(1000);
 80022b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022bc:	f7ff fade 	bl	800187c <delay_us>
		count++;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3301      	adds	r3, #1
 80022c4:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = image_id_L * 0x20; i < image_id_L * 0x20 + 25; i++)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015b      	lsls	r3, r3, #5
 80022d0:	3319      	adds	r3, #25
 80022d2:	461a      	mov	r2, r3
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d3a0      	bcc.n	800221c <write_flash_page+0x28>
	}
}
 80022da:	bf00      	nop
 80022dc:	bf00      	nop
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	48000800 	.word	0x48000800

080022e8 <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id / 8;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	08db      	lsrs	r3, r3, #3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id % 8;
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]
	int count = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = image_id_L * 0x20; i < image_id_L * 0x20 + 25; i++)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	015b      	lsls	r3, r3, #5
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	e035      	b.n	800237c <read_flash_page+0x94>
	{
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002316:	481f      	ldr	r0, [pc, #124]	; (8002394 <read_flash_page+0xac>)
 8002318:	f002 f8e4 	bl	80044e4 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x03);
 800231c:	2003      	movs	r0, #3
 800231e:	f7ff fefb 	bl	8002118 <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fef6 	bl	8002118 <FLASH_WriteByte>
		FLASH_WriteByte(i);
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fef1 	bl	8002118 <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 8002336:	2000      	movs	r0, #0
 8002338:	f7ff feee 	bl	8002118 <FLASH_WriteByte>
		for (uint32_t j = 0; j < 256; j++)
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e00d      	b.n	800235e <read_flash_page+0x76>
		{
			data[count * 256 + j] = FLASH_ReadByte();
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	461a      	mov	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4413      	add	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	18d4      	adds	r4, r2, r3
 8002350:	f7ff ff18 	bl	8002184 <FLASH_ReadByte>
 8002354:	4603      	mov	r3, r0
 8002356:	7023      	strb	r3, [r4, #0]
		for (uint32_t j = 0; j < 256; j++)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3301      	adds	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2bff      	cmp	r3, #255	; 0xff
 8002362:	d9ee      	bls.n	8002342 <read_flash_page+0x5a>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800236a:	480a      	ldr	r0, [pc, #40]	; (8002394 <read_flash_page+0xac>)
 800236c:	f002 f8ba 	bl	80044e4 <HAL_GPIO_WritePin>
		count++;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	3301      	adds	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = image_id_L * 0x20; i < image_id_L * 0x20 + 25; i++)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	3301      	adds	r3, #1
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015b      	lsls	r3, r3, #5
 8002380:	3319      	adds	r3, #25
 8002382:	461a      	mov	r2, r3
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4293      	cmp	r3, r2
 8002388:	d3c2      	bcc.n	8002310 <read_flash_page+0x28>
	}
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	3724      	adds	r7, #36	; 0x24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}
 8002394:	48000800 	.word	0x48000800

08002398 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
	int image_id_H = image_id / 8;
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	60fb      	str	r3, [r7, #12]
	int image_id_L = image_id % 8;
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	60bb      	str	r3, [r7, #8]
	reset_flash_software();
 80023b2:	f000 f889 	bl	80024c8 <reset_flash_software>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80023b6:	2200      	movs	r2, #0
 80023b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023bc:	4841      	ldr	r0, [pc, #260]	; (80024c4 <erase_flash_sector+0x12c>)
 80023be:	f002 f891 	bl	80044e4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 80023c2:	2006      	movs	r0, #6
 80023c4:	f7ff fea8 	bl	8002118 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ce:	483d      	ldr	r0, [pc, #244]	; (80024c4 <erase_flash_sector+0x12c>)
 80023d0:	f002 f888 	bl	80044e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80023d4:	2200      	movs	r2, #0
 80023d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023da:	483a      	ldr	r0, [pc, #232]	; (80024c4 <erase_flash_sector+0x12c>)
 80023dc:	f002 f882 	bl	80044e4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 80023e0:	2020      	movs	r0, #32
 80023e2:	f7ff fe99 	bl	8002118 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fe94 	bl	8002118 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L * 0x20);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	015b      	lsls	r3, r3, #5
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fe8d 	bl	8002118 <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 80023fe:	2000      	movs	r0, #0
 8002400:	f7ff fe8a 	bl	8002118 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002404:	2201      	movs	r2, #1
 8002406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800240a:	482e      	ldr	r0, [pc, #184]	; (80024c4 <erase_flash_sector+0x12c>)
 800240c:	f002 f86a 	bl	80044e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002416:	482b      	ldr	r0, [pc, #172]	; (80024c4 <erase_flash_sector+0x12c>)
 8002418:	f002 f864 	bl	80044e4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 800241c:	2004      	movs	r0, #4
 800241e:	f7ff fe7b 	bl	8002118 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002428:	4826      	ldr	r0, [pc, #152]	; (80024c4 <erase_flash_sector+0x12c>)
 800242a:	f002 f85b 	bl	80044e4 <HAL_GPIO_WritePin>

	delay_us(30000);
 800242e:	f247 5030 	movw	r0, #30000	; 0x7530
 8002432:	f7ff fa23 	bl	800187c <delay_us>
	////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002436:	2200      	movs	r2, #0
 8002438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800243c:	4821      	ldr	r0, [pc, #132]	; (80024c4 <erase_flash_sector+0x12c>)
 800243e:	f002 f851 	bl	80044e4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 8002442:	2006      	movs	r0, #6
 8002444:	f7ff fe68 	bl	8002118 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800244e:	481d      	ldr	r0, [pc, #116]	; (80024c4 <erase_flash_sector+0x12c>)
 8002450:	f002 f848 	bl	80044e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800245a:	481a      	ldr	r0, [pc, #104]	; (80024c4 <erase_flash_sector+0x12c>)
 800245c:	f002 f842 	bl	80044e4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 8002460:	2020      	movs	r0, #32
 8002462:	f7ff fe59 	bl	8002118 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fe54 	bl	8002118 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L * 0x20 + 0x10);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	015b      	lsls	r3, r3, #5
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3310      	adds	r3, #16
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fe4b 	bl	8002118 <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff fe48 	bl	8002118 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002488:	2201      	movs	r2, #1
 800248a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248e:	480d      	ldr	r0, [pc, #52]	; (80024c4 <erase_flash_sector+0x12c>)
 8002490:	f002 f828 	bl	80044e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002494:	2200      	movs	r2, #0
 8002496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800249a:	480a      	ldr	r0, [pc, #40]	; (80024c4 <erase_flash_sector+0x12c>)
 800249c:	f002 f822 	bl	80044e4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 80024a0:	2004      	movs	r0, #4
 80024a2:	f7ff fe39 	bl	8002118 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80024a6:	2201      	movs	r2, #1
 80024a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <erase_flash_sector+0x12c>)
 80024ae:	f002 f819 	bl	80044e4 <HAL_GPIO_WritePin>

	delay_us(30000);
 80024b2:	f247 5030 	movw	r0, #30000	; 0x7530
 80024b6:	f7ff f9e1 	bl	800187c <delay_us>
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	48000800 	.word	0x48000800

080024c8 <reset_flash_software>:

void reset_flash_software()
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024d2:	4813      	ldr	r0, [pc, #76]	; (8002520 <reset_flash_software+0x58>)
 80024d4:	f002 f806 	bl	80044e4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x66);
 80024d8:	2066      	movs	r0, #102	; 0x66
 80024da:	f7ff fe1d 	bl	8002118 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e4:	480e      	ldr	r0, [pc, #56]	; (8002520 <reset_flash_software+0x58>)
 80024e6:	f001 fffd 	bl	80044e4 <HAL_GPIO_WritePin>
	delay_100ns(1);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7ff f9e1 	bl	80018b2 <delay_100ns>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024f6:	480a      	ldr	r0, [pc, #40]	; (8002520 <reset_flash_software+0x58>)
 80024f8:	f001 fff4 	bl	80044e4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x99);
 80024fc:	2099      	movs	r0, #153	; 0x99
 80024fe:	f7ff fe0b 	bl	8002118 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002502:	2201      	movs	r2, #1
 8002504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <reset_flash_software+0x58>)
 800250a:	f001 ffeb 	bl	80044e4 <HAL_GPIO_WritePin>
	delay_100ns(1);
 800250e:	2001      	movs	r0, #1
 8002510:	f7ff f9cf 	bl	80018b2 <delay_100ns>

	delay_us(1000);
 8002514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002518:	f7ff f9b0 	bl	800187c <delay_us>
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	48000800 	.word	0x48000800

08002524 <init_ble>:
///////////////////////flash/////////////////////////

///////////////////////ble/////////////////////////
void init_ble()
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b098      	sub	sp, #96	; 0x60
 8002528:	af04      	add	r7, sp, #16
	uint8_t BAUD_1[20], BAUD_2[20], NAME_1[20], NAME_2[20];

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 800252a:	2201      	movs	r2, #1
 800252c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002530:	4837      	ldr	r0, [pc, #220]	; (8002610 <init_ble+0xec>)
 8002532:	f001 ffd7 	bl	80044e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800253c:	4834      	ldr	r0, [pc, #208]	; (8002610 <init_ble+0xec>)
 800253e:	f001 ffd1 	bl	80044e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002542:	200a      	movs	r0, #10
 8002544:	f000 fdec 	bl	8003120 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8002548:	2201      	movs	r2, #1
 800254a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800254e:	4830      	ldr	r0, [pc, #192]	; (8002610 <init_ble+0xec>)
 8002550:	f001 ffc8 	bl	80044e4 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8002554:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002558:	f000 fde2 	bl	8003120 <HAL_Delay>

	sprintf(BAUD_1,"%c%c%c%c%s",0x10,0x00,0x0A,0x8C,"AT+BAUDRATE="); //Bit 7 of payload size is also set
 800255c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <init_ble+0xf0>)
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	238c      	movs	r3, #140	; 0x8c
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	230a      	movs	r3, #10
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2300      	movs	r3, #0
 800256e:	2210      	movs	r2, #16
 8002570:	4929      	ldr	r1, [pc, #164]	; (8002618 <init_ble+0xf4>)
 8002572:	f006 fb4d 	bl	8008c10 <siprintf>
	sprintf(BAUD_2,"%c%c%c%c%s",0x10,0x00,0x0A,0x06,"115200");
 8002576:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800257a:	4b28      	ldr	r3, [pc, #160]	; (800261c <init_ble+0xf8>)
 800257c:	9302      	str	r3, [sp, #8]
 800257e:	2306      	movs	r3, #6
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	230a      	movs	r3, #10
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2300      	movs	r3, #0
 8002588:	2210      	movs	r2, #16
 800258a:	4923      	ldr	r1, [pc, #140]	; (8002618 <init_ble+0xf4>)
 800258c:	f006 fb40 	bl	8008c10 <siprintf>
	sprintf(NAME_1,"%c%c%c%c%s",0x10,0x00,0x0A,0x8E,"AT+GAPDEVNAME="); //Bit 7 of payload size is also set
 8002590:	f107 0014 	add.w	r0, r7, #20
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <init_ble+0xfc>)
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	238e      	movs	r3, #142	; 0x8e
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	230a      	movs	r3, #10
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2300      	movs	r3, #0
 80025a2:	2210      	movs	r2, #16
 80025a4:	491c      	ldr	r1, [pc, #112]	; (8002618 <init_ble+0xf4>)
 80025a6:	f006 fb33 	bl	8008c10 <siprintf>
	sprintf(NAME_2,"%c%c%c%c%s",0x10,0x00,0x0A,0x09,"MIPI_Demo");
 80025aa:	4638      	mov	r0, r7
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <init_ble+0x100>)
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	2309      	movs	r3, #9
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	230a      	movs	r3, #10
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	2210      	movs	r2, #16
 80025bc:	4916      	ldr	r1, [pc, #88]	; (8002618 <init_ble+0xf4>)
 80025be:	f006 fb27 	bl	8008c10 <siprintf>

	Wrap(&BAUD_1, sizeof BAUD_1);
 80025c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025c6:	2114      	movs	r1, #20
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f935 	bl	8002838 <Wrap>
	HAL_Delay(5);
 80025ce:	2005      	movs	r0, #5
 80025d0:	f000 fda6 	bl	8003120 <HAL_Delay>
	Wrap(&BAUD_2, sizeof BAUD_2);
 80025d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d8:	2114      	movs	r1, #20
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f92c 	bl	8002838 <Wrap>
	HAL_Delay(5);
 80025e0:	2005      	movs	r0, #5
 80025e2:	f000 fd9d 	bl	8003120 <HAL_Delay>
	Wrap(&NAME_1, sizeof NAME_1);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	2114      	movs	r1, #20
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f923 	bl	8002838 <Wrap>
	HAL_Delay(5);
 80025f2:	2005      	movs	r0, #5
 80025f4:	f000 fd94 	bl	8003120 <HAL_Delay>
	Wrap(&NAME_2, sizeof NAME_2);
 80025f8:	463b      	mov	r3, r7
 80025fa:	2114      	movs	r1, #20
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f91b 	bl	8002838 <Wrap>
	HAL_Delay(10);
 8002602:	200a      	movs	r0, #10
 8002604:	f000 fd8c 	bl	8003120 <HAL_Delay>
}
 8002608:	bf00      	nop
 800260a:	3750      	adds	r7, #80	; 0x50
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	48001400 	.word	0x48001400
 8002614:	08009600 	.word	0x08009600
 8002618:	080095f4 	.word	0x080095f4
 800261c:	08009610 	.word	0x08009610
 8002620:	08009618 	.word	0x08009618
 8002624:	08009628 	.word	0x08009628

08002628 <ble_SPI_WriteByte>:

void ble_SPI_WriteByte(uint8_t data) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--) {
 8002632:	2307      	movs	r3, #7
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e01f      	b.n	8002678 <ble_SPI_WriteByte+0x50>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, (data >> i) & 1); //mosi
 8002638:	79fa      	ldrb	r2, [r7, #7]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	fa42 f303 	asr.w	r3, r2, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	2102      	movs	r1, #2
 800264c:	480e      	ldr	r0, [pc, #56]	; (8002688 <ble_SPI_WriteByte+0x60>)
 800264e:	f001 ff49 	bl	80044e4 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); //clk
 8002652:	2201      	movs	r2, #1
 8002654:	2110      	movs	r1, #16
 8002656:	480c      	ldr	r0, [pc, #48]	; (8002688 <ble_SPI_WriteByte+0x60>)
 8002658:	f001 ff44 	bl	80044e4 <HAL_GPIO_WritePin>
        delay_us(1);
 800265c:	2001      	movs	r0, #1
 800265e:	f7ff f90d 	bl	800187c <delay_us>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); //clk
 8002662:	2200      	movs	r2, #0
 8002664:	2110      	movs	r1, #16
 8002666:	4808      	ldr	r0, [pc, #32]	; (8002688 <ble_SPI_WriteByte+0x60>)
 8002668:	f001 ff3c 	bl	80044e4 <HAL_GPIO_WritePin>
        delay_us(1);
 800266c:	2001      	movs	r0, #1
 800266e:	f7ff f905 	bl	800187c <delay_us>
    for (int i = 7; i >= 0; i--) {
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3b01      	subs	r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	dadc      	bge.n	8002638 <ble_SPI_WriteByte+0x10>
    }
}
 800267e:	bf00      	nop
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	48001400 	.word	0x48001400

0800268c <ble_SPI_RWByte>:
    }

    return data;
}

uint8_t ble_SPI_RWByte(uint8_t wdata) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
    uint8_t rdata = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]

    for (int i = 7; i >= 0; i--) {
 800269a:	2307      	movs	r3, #7
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	e02e      	b.n	80026fe <ble_SPI_RWByte+0x72>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, (wdata >> i) & 1); //mosi
 80026a0:	79fa      	ldrb	r2, [r7, #7]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	fa42 f303 	asr.w	r3, r2, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	2102      	movs	r1, #2
 80026b4:	4816      	ldr	r0, [pc, #88]	; (8002710 <ble_SPI_RWByte+0x84>)
 80026b6:	f001 ff15 	bl	80044e4 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET); //clk
 80026ba:	2201      	movs	r2, #1
 80026bc:	2110      	movs	r1, #16
 80026be:	4814      	ldr	r0, [pc, #80]	; (8002710 <ble_SPI_RWByte+0x84>)
 80026c0:	f001 ff10 	bl	80044e4 <HAL_GPIO_WritePin>
        delay_us(1);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7ff f8d9 	bl	800187c <delay_us>
        rdata |= (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0) << i); //miso
 80026ca:	2101      	movs	r1, #1
 80026cc:	4810      	ldr	r0, [pc, #64]	; (8002710 <ble_SPI_RWByte+0x84>)
 80026ce:	f001 fef1 	bl	80044b4 <HAL_GPIO_ReadPin>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	b25a      	sxtb	r2, r3
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET); //clk
 80026e8:	2200      	movs	r2, #0
 80026ea:	2110      	movs	r1, #16
 80026ec:	4808      	ldr	r0, [pc, #32]	; (8002710 <ble_SPI_RWByte+0x84>)
 80026ee:	f001 fef9 	bl	80044e4 <HAL_GPIO_WritePin>
        delay_us(1);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7ff f8c2 	bl	800187c <delay_us>
    for (int i = 7; i >= 0; i--) {
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	dacd      	bge.n	80026a0 <ble_SPI_RWByte+0x14>
    }

    return rdata;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	48001400 	.word	0x48001400

08002714 <ReadBLE>:
	 	if ((ble_ReadBuffer[2] == 0x0A)&&(ble_ReadBuffer[3] == 0x00)) Write_flag = 0; //Looking for last two bytes
	 	else Write_flag = 1;
}

void ReadBLE(void) //Reads BYTES from BLE
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
	 	for (int i=0; i < 20; i++) //Initialize read buffer
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e007      	b.n	8002730 <ReadBLE+0x1c>
	 	{
	 		ble_RXBuffer[i] = 0x00;
 8002720:	4a3e      	ldr	r2, [pc, #248]	; (800281c <ReadBLE+0x108>)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4413      	add	r3, r2
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
	 	for (int i=0; i < 20; i++) //Initialize read buffer
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3301      	adds	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b13      	cmp	r3, #19
 8002734:	ddf4      	ble.n	8002720 <ReadBLE+0xc>
	 	 }
	 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); //Pull CS line low
 8002736:	2200      	movs	r2, #0
 8002738:	2108      	movs	r1, #8
 800273a:	4839      	ldr	r0, [pc, #228]	; (8002820 <ReadBLE+0x10c>)
 800273c:	f001 fed2 	bl	80044e4 <HAL_GPIO_WritePin>
	 	delay_us(100); //Required delay after CS asserted
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	f7ff f89b 	bl	800187c <delay_us>
	 	for (int i=0; i < 4; i++)
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	e009      	b.n	8002760 <ReadBLE+0x4c>
	 	{
	 		ble_SPI_WriteByte(ble_read_cmd[i]);
 800274c:	4a35      	ldr	r2, [pc, #212]	; (8002824 <ReadBLE+0x110>)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4413      	add	r3, r2
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff67 	bl	8002628 <ble_SPI_WriteByte>
	 	for (int i=0; i < 4; i++)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3301      	adds	r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b03      	cmp	r3, #3
 8002764:	ddf2      	ble.n	800274c <ReadBLE+0x38>
	 	}
	 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); //Pull CS line high
 8002766:	2201      	movs	r2, #1
 8002768:	2108      	movs	r1, #8
 800276a:	482d      	ldr	r0, [pc, #180]	; (8002820 <ReadBLE+0x10c>)
 800276c:	f001 feba 	bl	80044e4 <HAL_GPIO_WritePin>
	 	/* The BLE module acknowledges the above read command with the 4 byte string 0x20,0x02,0x0A,[num strings],[bytes]
	 	Wait ~6 ms in this setup for bytes to arrive on SPI.  */
	 	HAL_Delay(6);
 8002770:	2006      	movs	r0, #6
 8002772:	f000 fcd5 	bl	8003120 <HAL_Delay>
	 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET); //Pull CS line low
 8002776:	2200      	movs	r2, #0
 8002778:	2108      	movs	r1, #8
 800277a:	4829      	ldr	r0, [pc, #164]	; (8002820 <ReadBLE+0x10c>)
 800277c:	f001 feb2 	bl	80044e4 <HAL_GPIO_WritePin>
	 	delay_us(100); //100 us
 8002780:	2064      	movs	r0, #100	; 0x64
 8002782:	f7ff f87b 	bl	800187c <delay_us>
	 	for (int i=0; i < 20; i++)
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	e03a      	b.n	8002802 <ReadBLE+0xee>
	 	{
	 		ble_RXBuffer[i] = ble_SPI_RWByte(0xAA);
 800278c:	20aa      	movs	r0, #170	; 0xaa
 800278e:	f7ff ff7d 	bl	800268c <ble_SPI_RWByte>
 8002792:	4603      	mov	r3, r0
 8002794:	4619      	mov	r1, r3
 8002796:	4a21      	ldr	r2, [pc, #132]	; (800281c <ReadBLE+0x108>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	460a      	mov	r2, r1
 800279e:	701a      	strb	r2, [r3, #0]
	 		if (i==1) //First two bytes have arrived
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10b      	bne.n	80027be <ReadBLE+0xaa>
	 		{
	 			if ((ble_RXBuffer[0]==0x20)&&(ble_RXBuffer[1]==0x02)) ;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <ReadBLE+0x108>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d103      	bne.n	80027b6 <ReadBLE+0xa2>
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <ReadBLE+0x108>)
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d022      	beq.n	80027fc <ReadBLE+0xe8>
	 			else //Problem on BLE SPI
	 			{
	 			 	Read_flag=1;
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <ReadBLE+0x114>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
	 			 	break;
 80027bc:	e024      	b.n	8002808 <ReadBLE+0xf4>
	 			}
	 		}
	 		else if (i==3) //4th byte indicates size of data string
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d109      	bne.n	80027d8 <ReadBLE+0xc4>
	 		{
	 			Rcount = (int16_t)ble_RXBuffer[3]; //Number of data packets
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <ReadBLE+0x108>)
 80027c6:	78db      	ldrb	r3, [r3, #3]
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <ReadBLE+0x118>)
 80027cc:	801a      	strh	r2, [r3, #0]
	 			if (ble_RXBuffer[3] == 0x00) break;
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <ReadBLE+0x108>)
 80027d0:	78db      	ldrb	r3, [r3, #3]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d112      	bne.n	80027fc <ReadBLE+0xe8>
 80027d6:	e017      	b.n	8002808 <ReadBLE+0xf4>
	 		}
	 		else if (i == (Rcount+3))
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <ReadBLE+0x118>)
 80027da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027de:	3303      	adds	r3, #3
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d10a      	bne.n	80027fc <ReadBLE+0xe8>
	 		{
 				HAL_UART_Transmit(&huart4, &ble_RXBuffer[4], Rcount, 1000);
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <ReadBLE+0x118>)
 80027e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f2:	490f      	ldr	r1, [pc, #60]	; (8002830 <ReadBLE+0x11c>)
 80027f4:	480f      	ldr	r0, [pc, #60]	; (8002834 <ReadBLE+0x120>)
 80027f6:	f005 fb63 	bl	8007ec0 <HAL_UART_Transmit>
	 			break; //Run loop until all bytes read
 80027fa:	e005      	b.n	8002808 <ReadBLE+0xf4>
	 	for (int i=0; i < 20; i++)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3301      	adds	r3, #1
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b13      	cmp	r3, #19
 8002806:	ddc1      	ble.n	800278c <ReadBLE+0x78>
	 		}
			else ; //Should never get here
	 	}
	 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); //Pull CS line high
 8002808:	2201      	movs	r2, #1
 800280a:	2108      	movs	r1, #8
 800280c:	4804      	ldr	r0, [pc, #16]	; (8002820 <ReadBLE+0x10c>)
 800280e:	f001 fe69 	bl	80044e4 <HAL_GPIO_WritePin>
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000b2c0 	.word	0x2000b2c0
 8002820:	48000c00 	.word	0x48000c00
 8002824:	20004b08 	.word	0x20004b08
 8002828:	2000b2e8 	.word	0x2000b2e8
 800282c:	2000b2ea 	.word	0x2000b2ea
 8002830:	2000b2c4 	.word	0x2000b2c4
 8002834:	20004e1c 	.word	0x20004e1c

08002838 <Wrap>:

void Wrap(uint8_t *str1, int16_t count)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
 		for (int i=0; i < 20; i++) //Initialize read buffer
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e007      	b.n	800285a <Wrap+0x22>
 	 	{
 			ble_WrapRX[i] = 0xAA;
 800284a:	4a39      	ldr	r2, [pc, #228]	; (8002930 <Wrap+0xf8>)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4413      	add	r3, r2
 8002850:	22aa      	movs	r2, #170	; 0xaa
 8002852:	701a      	strb	r2, [r3, #0]
 		for (int i=0; i < 20; i++) //Initialize read buffer
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3301      	adds	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b13      	cmp	r3, #19
 800285e:	ddf4      	ble.n	800284a <Wrap+0x12>
 	 	}
 		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);  //Pull CS line low
 8002860:	2200      	movs	r2, #0
 8002862:	2108      	movs	r1, #8
 8002864:	4833      	ldr	r0, [pc, #204]	; (8002934 <Wrap+0xfc>)
 8002866:	f001 fe3d 	bl	80044e4 <HAL_GPIO_WritePin>
		delay_us(100);
 800286a:	2064      	movs	r0, #100	; 0x64
 800286c:	f7ff f806 	bl	800187c <delay_us>
	 	for (int i=0; i < count; i++)
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	e009      	b.n	800288a <Wrap+0x52>
	 	{
	 		ble_SPI_WriteByte(str1[i]);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fed2 	bl	8002628 <ble_SPI_WriteByte>
	 	for (int i=0; i < count; i++)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	3301      	adds	r3, #1
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	dbf0      	blt.n	8002876 <Wrap+0x3e>
	 	}
	 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); //Pull CS line high
 8002894:	2201      	movs	r2, #1
 8002896:	2108      	movs	r1, #8
 8002898:	4826      	ldr	r0, [pc, #152]	; (8002934 <Wrap+0xfc>)
 800289a:	f001 fe23 	bl	80044e4 <HAL_GPIO_WritePin>
	 /* The BLE module acknowledges the above command with the 4 byte string:
	 	0x20,0x00,0x0A,[bytes in payload], [payload].
	 	Wait ~6 ms in this setup for MISO bytes to arrive on SPI.  */
		HAL_Delay(6);
 800289e:	2006      	movs	r0, #6
 80028a0:	f000 fc3e 	bl	8003120 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);  //Re-assert CS line
 80028a4:	2200      	movs	r2, #0
 80028a6:	2108      	movs	r1, #8
 80028a8:	4822      	ldr	r0, [pc, #136]	; (8002934 <Wrap+0xfc>)
 80028aa:	f001 fe1b 	bl	80044e4 <HAL_GPIO_WritePin>
		delay_us(100);
 80028ae:	2064      	movs	r0, #100	; 0x64
 80028b0:	f7fe ffe4 	bl	800187c <delay_us>
	 	for (int i=0; i < 20; i++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e02c      	b.n	8002914 <Wrap+0xdc>
	 	{
	 		ble_WrapRX[i] = ble_SPI_RWByte(0xAA);
 80028ba:	20aa      	movs	r0, #170	; 0xaa
 80028bc:	f7ff fee6 	bl	800268c <ble_SPI_RWByte>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4619      	mov	r1, r3
 80028c4:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <Wrap+0xf8>)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	460a      	mov	r2, r1
 80028cc:	701a      	strb	r2, [r3, #0]
	 		if (i == 1) //First two bytes have arrived
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d108      	bne.n	80028e6 <Wrap+0xae>
	 		{
	 			if ((ble_WrapRX[0] == 0x20)&&(ble_WrapRX[1] == 0x00)) ;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <Wrap+0xf8>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d120      	bne.n	800291e <Wrap+0xe6>
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <Wrap+0xf8>)
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d014      	beq.n	800290e <Wrap+0xd6>
 80028e4:	e01b      	b.n	800291e <Wrap+0xe6>
	 			 	//Wrap_error = 1;
	 				//HAL_UART_Transmit(&huart4, "error", 5, 1000);
	 			 	break;
	 			}
	 		}
	 		else if (i==3) //This byte indicates size of payload
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d109      	bne.n	8002900 <Wrap+0xc8>
	 		{
	 			Wcount = (int16_t)ble_WrapRX[3]; //Number of data packets
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <Wrap+0xf8>)
 80028ee:	78db      	ldrb	r3, [r3, #3]
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <Wrap+0x100>)
 80028f4:	801a      	strh	r2, [r3, #0]
	 			if (ble_WrapRX[3] == 0x00) break; //Empty payload
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <Wrap+0xf8>)
 80028f8:	78db      	ldrb	r3, [r3, #3]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d107      	bne.n	800290e <Wrap+0xd6>
 80028fe:	e00e      	b.n	800291e <Wrap+0xe6>
	 		}
	 		else if (i == (Wcount+3)) break; //Run loop until all bytes read
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <Wrap+0x100>)
 8002902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002906:	3303      	adds	r3, #3
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	429a      	cmp	r2, r3
 800290c:	d006      	beq.n	800291c <Wrap+0xe4>
	 	for (int i=0; i < 20; i++)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3301      	adds	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b13      	cmp	r3, #19
 8002918:	ddcf      	ble.n	80028ba <Wrap+0x82>
 800291a:	e000      	b.n	800291e <Wrap+0xe6>
	 		else if (i == (Wcount+3)) break; //Run loop until all bytes read
 800291c:	bf00      	nop
	 		else ;
	 	}
	 	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET); //Pull CS line high
 800291e:	2201      	movs	r2, #1
 8002920:	2108      	movs	r1, #8
 8002922:	4804      	ldr	r0, [pc, #16]	; (8002934 <Wrap+0xfc>)
 8002924:	f001 fdde 	bl	80044e4 <HAL_GPIO_WritePin>
}
 8002928:	bf00      	nop
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	2000b2d4 	.word	0x2000b2d4
 8002934:	48000c00 	.word	0x48000c00
 8002938:	2000b2ec 	.word	0x2000b2ec

0800293c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002940:	b672      	cpsid	i
}
 8002942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002944:	e7fe      	b.n	8002944 <Error_Handler+0x8>
	...

08002948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_MspInit+0x44>)
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	4a0e      	ldr	r2, [pc, #56]	; (800298c <HAL_MspInit+0x44>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6613      	str	r3, [r2, #96]	; 0x60
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <HAL_MspInit+0x44>)
 800295c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_MspInit+0x44>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_MspInit+0x44>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_MspInit+0x44>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0aa      	sub	sp, #168	; 0xa8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	229c      	movs	r2, #156	; 0x9c
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f006 f955 	bl	8008c50 <memset>
  if(hdsi->Instance==DSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_DSI_MspInit+0x60>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d11b      	bne.n	80029e8 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80029b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80029b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029bc:	f107 030c 	add.w	r3, r7, #12
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 f943 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 80029cc:	f7ff ffb6 	bl	800293c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_DSI_MspInit+0x64>)
 80029d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_DSI_MspInit+0x64>)
 80029d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029da:	6613      	str	r3, [r2, #96]	; 0x60
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_DSI_MspInit+0x64>)
 80029de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	37a8      	adds	r7, #168	; 0xa8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40016c00 	.word	0x40016c00
 80029f4:	40021000 	.word	0x40021000

080029f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b0b2      	sub	sp, #200	; 0xc8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a10:	f107 0318 	add.w	r3, r7, #24
 8002a14:	229c      	movs	r2, #156	; 0x9c
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f006 f919 	bl	8008c50 <memset>
  if(hi2c->Instance==I2C1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a42      	ldr	r2, [pc, #264]	; (8002b2c <HAL_I2C_MspInit+0x134>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d13c      	bne.n	8002aa2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a28:	2340      	movs	r3, #64	; 0x40
 8002a2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a30:	f107 0318 	add.w	r3, r7, #24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 f909 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a40:	f7ff ff7c 	bl	800293c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	4a39      	ldr	r2, [pc, #228]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002a5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a64:	2312      	movs	r3, #18
 8002a66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a76:	2304      	movs	r3, #4
 8002a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a80:	4619      	mov	r1, r3
 8002a82:	482c      	ldr	r0, [pc, #176]	; (8002b34 <HAL_I2C_MspInit+0x13c>)
 8002a84:	f001 fb84 	bl	8004190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a88:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002aa0:	e040      	b.n	8002b24 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_I2C_MspInit+0x140>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d13b      	bne.n	8002b24 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab4:	f107 0318 	add.w	r3, r7, #24
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 f8c7 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002ac4:	f7ff ff3a 	bl	800293c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002acc:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002ae0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae8:	2312      	movs	r3, #18
 8002aea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002afa:	2304      	movs	r3, #4
 8002afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b04:	4619      	mov	r1, r3
 8002b06:	480b      	ldr	r0, [pc, #44]	; (8002b34 <HAL_I2C_MspInit+0x13c>)
 8002b08:	f001 fb42 	bl	8004190 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b16:	6593      	str	r3, [r2, #88]	; 0x58
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_I2C_MspInit+0x138>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
}
 8002b24:	bf00      	nop
 8002b26:	37c8      	adds	r7, #200	; 0xc8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40005400 	.word	0x40005400
 8002b30:	40021000 	.word	0x40021000
 8002b34:	48000400 	.word	0x48000400
 8002b38:	40005800 	.word	0x40005800

08002b3c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b0aa      	sub	sp, #168	; 0xa8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	229c      	movs	r2, #156	; 0x9c
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f006 f87f 	bl	8008c50 <memset>
  if(hltdc->Instance==LTDC)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_LTDC_MspInit+0x80>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d12b      	bne.n	8002bb4 <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b60:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 8002b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8002b72:	2308      	movs	r3, #8
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8002b76:	2302      	movs	r3, #2
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8002b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b86:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 f85d 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 8002b98:	f7ff fed0 	bl	800293c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_LTDC_MspInit+0x84>)
 8002b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_LTDC_MspInit+0x84>)
 8002ba2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ba6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_LTDC_MspInit+0x84>)
 8002baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002bb4:	bf00      	nop
 8002bb6:	37a8      	adds	r7, #168	; 0xa8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40016800 	.word	0x40016800
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b092      	sub	sp, #72	; 0x48
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a84      	ldr	r2, [pc, #528]	; (8002df4 <HAL_SPI_MspInit+0x230>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d146      	bne.n	8002c74 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002be6:	4b84      	ldr	r3, [pc, #528]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	4a83      	ldr	r2, [pc, #524]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8002bf2:	4b81      	ldr	r3, [pc, #516]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	4b7e      	ldr	r3, [pc, #504]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	4a7d      	ldr	r2, [pc, #500]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c0a:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c16:	4b78      	ldr	r3, [pc, #480]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	4a77      	ldr	r2, [pc, #476]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c22:	4b75      	ldr	r3, [pc, #468]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 8002c2e:	2338      	movs	r3, #56	; 0x38
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c3e:	2305      	movs	r3, #5
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c46:	4619      	mov	r1, r3
 8002c48:	486c      	ldr	r0, [pc, #432]	; (8002dfc <HAL_SPI_MspInit+0x238>)
 8002c4a:	f001 faa1 	bl	8004190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c60:	2305      	movs	r3, #5
 8002c62:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c6e:	f001 fa8f 	bl	8004190 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c72:	e0ba      	b.n	8002dea <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a61      	ldr	r2, [pc, #388]	; (8002e00 <HAL_SPI_MspInit+0x23c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d144      	bne.n	8002d08 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c7e:	4b5e      	ldr	r3, [pc, #376]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	4a5d      	ldr	r2, [pc, #372]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c88:	6593      	str	r3, [r2, #88]	; 0x58
 8002c8a:	4b5b      	ldr	r3, [pc, #364]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c96:	4b58      	ldr	r3, [pc, #352]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	4a57      	ldr	r2, [pc, #348]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ca2:	4b55      	ldr	r3, [pc, #340]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cae:	4b52      	ldr	r3, [pc, #328]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	4a51      	ldr	r2, [pc, #324]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cba:	4b4f      	ldr	r3, [pc, #316]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8002cc6:	2312      	movs	r3, #18
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4848      	ldr	r0, [pc, #288]	; (8002e04 <HAL_SPI_MspInit+0x240>)
 8002ce2:	f001 fa55 	bl	8004190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cf6:	2305      	movs	r3, #5
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4841      	ldr	r0, [pc, #260]	; (8002e08 <HAL_SPI_MspInit+0x244>)
 8002d02:	f001 fa45 	bl	8004190 <HAL_GPIO_Init>
}
 8002d06:	e070      	b.n	8002dea <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI3)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a3f      	ldr	r2, [pc, #252]	; (8002e0c <HAL_SPI_MspInit+0x248>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d16b      	bne.n	8002dea <HAL_SPI_MspInit+0x226>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d12:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d1e:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2a:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	4a32      	ldr	r2, [pc, #200]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d36:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	4a2c      	ldr	r2, [pc, #176]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d5a:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_SPI_MspInit+0x234>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002d72:	f002 f883 	bl	8004e7c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d76:	2340      	movs	r3, #64	; 0x40
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002d86:	2305      	movs	r3, #5
 8002d88:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d8e:	4619      	mov	r1, r3
 8002d90:	481c      	ldr	r0, [pc, #112]	; (8002e04 <HAL_SPI_MspInit+0x240>)
 8002d92:	f001 f9fd 	bl	8004190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002da8:	2306      	movs	r3, #6
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002db0:	4619      	mov	r1, r3
 8002db2:	4815      	ldr	r0, [pc, #84]	; (8002e08 <HAL_SPI_MspInit+0x244>)
 8002db4:	f001 f9ec 	bl	8004190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002db8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dca:	2306      	movs	r3, #6
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	480e      	ldr	r0, [pc, #56]	; (8002e10 <HAL_SPI_MspInit+0x24c>)
 8002dd6:	f001 f9db 	bl	8004190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2033      	movs	r0, #51	; 0x33
 8002de0:	f000 fa9d 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002de4:	2033      	movs	r0, #51	; 0x33
 8002de6:	f000 fab6 	bl	8003356 <HAL_NVIC_EnableIRQ>
}
 8002dea:	bf00      	nop
 8002dec:	3748      	adds	r7, #72	; 0x48
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40013000 	.word	0x40013000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	48000400 	.word	0x48000400
 8002e00:	40003800 	.word	0x40003800
 8002e04:	48000c00 	.word	0x48000c00
 8002e08:	48000800 	.word	0x48000800
 8002e0c:	40003c00 	.word	0x40003c00
 8002e10:	48001800 	.word	0x48001800

08002e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b0b0      	sub	sp, #192	; 0xc0
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	229c      	movs	r2, #156	; 0x9c
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f005 ff0b 	bl	8008c50 <memset>
  if(huart->Instance==UART4)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <HAL_UART_MspInit+0xb0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d13b      	bne.n	8002ebc <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002e44:	2308      	movs	r3, #8
 8002e46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e4c:	f107 0310 	add.w	r3, r7, #16
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fefb 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e5c:	f7ff fd6e 	bl	800293c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_UART_MspInit+0xb4>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <HAL_UART_MspInit+0xb4>)
 8002e66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_UART_MspInit+0xb4>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <HAL_UART_MspInit+0xb4>)
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <HAL_UART_MspInit+0xb4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_UART_MspInit+0xb4>)
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e90:	2303      	movs	r3, #3
 8002e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb8:	f001 f96a 	bl	8004190 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002ebc:	bf00      	nop
 8002ebe:	37c0      	adds	r7, #192	; 0xc0
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40004c00 	.word	0x40004c00
 8002ec8:	40021000 	.word	0x40021000

08002ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ed0:	e7fe      	b.n	8002ed0 <NMI_Handler+0x4>

08002ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed6:	e7fe      	b.n	8002ed6 <HardFault_Handler+0x4>

08002ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002edc:	e7fe      	b.n	8002edc <MemManage_Handler+0x4>

08002ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <BusFault_Handler+0x4>

08002ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <UsageFault_Handler+0x4>

08002eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f18:	f000 f8e2 	bl	80030e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002f24:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f28:	f001 faf4 	bl	8004514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <SPI3_IRQHandler+0x10>)
 8002f36:	f004 facf 	bl	80074d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20004db8 	.word	0x20004db8

08002f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <_sbrk+0x5c>)
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <_sbrk+0x60>)
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <_sbrk+0x64>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <_sbrk+0x64>)
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <_sbrk+0x68>)
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d207      	bcs.n	8002f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f74:	f005 fe74 	bl	8008c60 <__errno>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	e009      	b.n	8002f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <_sbrk+0x64>)
 8002f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	200a0000 	.word	0x200a0000
 8002fa4:	00000400 	.word	0x00000400
 8002fa8:	2000b2f0 	.word	0x2000b2f0
 8002fac:	2000b440 	.word	0x2000b440

08002fb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <SystemInit+0x20>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <SystemInit+0x20>)
 8002fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800300c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fd8:	f7ff ffea 	bl	8002fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fdc:	480c      	ldr	r0, [pc, #48]	; (8003010 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fde:	490d      	ldr	r1, [pc, #52]	; (8003014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <LoopForever+0xe>)
  movs r3, #0
 8002fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe4:	e002      	b.n	8002fec <LoopCopyDataInit>

08002fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fea:	3304      	adds	r3, #4

08002fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff0:	d3f9      	bcc.n	8002fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	; (8003020 <LoopForever+0x16>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff8:	e001      	b.n	8002ffe <LoopFillZerobss>

08002ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ffc:	3204      	adds	r2, #4

08002ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003000:	d3fb      	bcc.n	8002ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003002:	f005 fe33 	bl	8008c6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003006:	f7fd fac9 	bl	800059c <main>

0800300a <LoopForever>:

LoopForever:
    b LoopForever
 800300a:	e7fe      	b.n	800300a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800300c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003014:	20004b68 	.word	0x20004b68
  ldr r2, =_sidata
 8003018:	080096e8 	.word	0x080096e8
  ldr r2, =_sbss
 800301c:	20004b68 	.word	0x20004b68
  ldr r4, =_ebss
 8003020:	2000b440 	.word	0x2000b440

08003024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003024:	e7fe      	b.n	8003024 <ADC1_IRQHandler>
	...

08003028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <HAL_Init+0x3c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <HAL_Init+0x3c>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303e:	2003      	movs	r0, #3
 8003040:	f000 f962 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003044:	2002      	movs	r0, #2
 8003046:	f000 f80f 	bl	8003068 <HAL_InitTick>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	71fb      	strb	r3, [r7, #7]
 8003054:	e001      	b.n	800305a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003056:	f7ff fc77 	bl	8002948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800305a:	79fb      	ldrb	r3, [r7, #7]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000

08003068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_InitTick+0x6c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d023      	beq.n	80030c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_InitTick+0x70>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_InitTick+0x6c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308a:	fbb3 f3f1 	udiv	r3, r3, r1
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f96d 	bl	8003372 <HAL_SYSTICK_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b0f      	cmp	r3, #15
 80030a2:	d809      	bhi.n	80030b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a4:	2200      	movs	r2, #0
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ac:	f000 f937 	bl	800331e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_InitTick+0x74>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e007      	b.n	80030c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	e004      	b.n	80030c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e001      	b.n	80030c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20004b14 	.word	0x20004b14
 80030d8:	20004b0c 	.word	0x20004b0c
 80030dc:	20004b10 	.word	0x20004b10

080030e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_IncTick+0x20>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_IncTick+0x24>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4413      	add	r3, r2
 80030f0:	4a04      	ldr	r2, [pc, #16]	; (8003104 <HAL_IncTick+0x24>)
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20004b14 	.word	0x20004b14
 8003104:	2000b2f4 	.word	0x2000b2f4

08003108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return uwTick;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <HAL_GetTick+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000b2f4 	.word	0x2000b2f4

08003120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff ffee 	bl	8003108 <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d005      	beq.n	8003146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_Delay+0x44>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003146:	bf00      	nop
 8003148:	f7ff ffde 	bl	8003108 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	429a      	cmp	r2, r3
 8003156:	d8f7      	bhi.n	8003148 <HAL_Delay+0x28>
  {
  }
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20004b14 	.word	0x20004b14

08003168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003184:	4013      	ands	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319a:	4a04      	ldr	r2, [pc, #16]	; (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	60d3      	str	r3, [r2, #12]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b4:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <__NVIC_GetPriorityGrouping+0x18>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	f003 0307 	and.w	r3, r3, #7
}
 80031be:	4618      	mov	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	db0b      	blt.n	80031f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	f003 021f 	and.w	r2, r3, #31
 80031e4:	4907      	ldr	r1, [pc, #28]	; (8003204 <__NVIC_EnableIRQ+0x38>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2001      	movs	r0, #1
 80031ee:	fa00 f202 	lsl.w	r2, r0, r2
 80031f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000e100 	.word	0xe000e100

08003208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db0a      	blt.n	8003232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	490c      	ldr	r1, [pc, #48]	; (8003254 <__NVIC_SetPriority+0x4c>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	440b      	add	r3, r1
 800322c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003230:	e00a      	b.n	8003248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4908      	ldr	r1, [pc, #32]	; (8003258 <__NVIC_SetPriority+0x50>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3b04      	subs	r3, #4
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	440b      	add	r3, r1
 8003246:	761a      	strb	r2, [r3, #24]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000e100 	.word	0xe000e100
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f1c3 0307 	rsb	r3, r3, #7
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf28      	it	cs
 800327a:	2304      	movcs	r3, #4
 800327c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3304      	adds	r3, #4
 8003282:	2b06      	cmp	r3, #6
 8003284:	d902      	bls.n	800328c <NVIC_EncodePriority+0x30>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b03      	subs	r3, #3
 800328a:	e000      	b.n	800328e <NVIC_EncodePriority+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	4313      	orrs	r3, r2
         );
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d4:	d301      	bcc.n	80032da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00f      	b.n	80032fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <SysTick_Config+0x40>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e2:	210f      	movs	r1, #15
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f7ff ff8e 	bl	8003208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <SysTick_Config+0x40>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <SysTick_Config+0x40>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000e010 	.word	0xe000e010

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff29 	bl	8003168 <__NVIC_SetPriorityGrouping>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff3e 	bl	80031b0 <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ff8e 	bl	800325c <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5d 	bl	8003208 <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff31 	bl	80031cc <__NVIC_EnableIRQ>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ffa2 	bl	80032c4 <SysTick_Config>
 8003380:	4603      	mov	r3, r0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d005      	beq.n	80033ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2204      	movs	r2, #4
 80033a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e047      	b.n	800343e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 020e 	bic.w	r2, r2, #14
 80033bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f003 021c 	and.w	r2, r3, #28
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003412:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800341c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
    }
  }
  return status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	019a      	lsls	r2, r3, #6
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	431a      	orrs	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	431a      	orrs	r2, r3
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	431a      	orrs	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003488:	f7ff fe3e 	bl	8003108 <HAL_GetTick>
 800348c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800348e:	e009      	b.n	80034a4 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003490:	f7ff fe3a 	bl	8003108 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800349e:	d901      	bls.n	80034a4 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e015      	b.n	80034d0 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ee      	beq.n	8003490 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	019a      	lsls	r2, r3, #6
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	ea42 0103 	orr.w	r1, r2, r3
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	041a      	lsls	r2, r3, #16
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e10b      	b.n	8003704 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7c5b      	ldrb	r3, [r3, #17]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fa4a 	bl	8002990 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2203      	movs	r2, #3
 8003500:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003516:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800352a:	f7ff fded 	bl	8003108 <HAL_GetTick>
 800352e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003530:	e009      	b.n	8003546 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003532:	f7ff fde9 	bl	8003108 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003540:	d901      	bls.n	8003546 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0de      	b.n	8003704 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800354e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ed      	beq.n	8003532 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003566:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800356a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003582:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800358a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80035be:	2001      	movs	r0, #1
 80035c0:	f7ff fdae 	bl	8003120 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c4:	f7ff fda0 	bl	8003108 <HAL_GetTick>
 80035c8:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80035ca:	e009      	b.n	80035e0 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80035cc:	f7ff fd9c 	bl	8003108 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035da:	d901      	bls.n	80035e0 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e091      	b.n	8003704 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ed      	beq.n	80035cc <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0206 	orr.w	r2, r2, #6
 8003600:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0203 	bic.w	r2, r2, #3
 8003614:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0203 	bic.w	r2, r2, #3
 8003642:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800366a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_DSI_Init+0x1b4>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	e000      	b.n	800368e <HAL_DSI_Init+0x1b6>
 800368c:	2301      	movs	r3, #1
 800368e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_DSI_Init+0x234>)
 8003694:	fb03 f202 	mul.w	r2, r3, r2
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	409a      	lsls	r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80036c4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	003d0900 	.word	0x003d0900

08003710 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7c1b      	ldrb	r3, [r3, #16]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003722:	2302      	movs	r3, #2
 8003724:	e0ab      	b.n	800387e <HAL_DSI_ConfigErrorMonitor+0x16e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2200      	movs	r2, #0
 8003732:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00b      	beq.n	8003768 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003760:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003764:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003782:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0202 	orr.w	r2, r2, #2
 80037be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 020c 	orr.w	r2, r2, #12
 80037dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0210 	orr.w	r2, r2, #16
 80037fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d009      	beq.n	800381c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0220 	orr.w	r2, r2, #32
 8003818:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003836:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d009      	beq.n	8003858 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003854:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003872:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7c1b      	ldrb	r3, [r3, #16]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_DSI_SetGenericVCID+0x16>
 800389c:	2302      	movs	r3, #2
 800389e:	e016      	b.n	80038ce <HAL_DSI_SetGenericVCID+0x44>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0203 	bic.w	r2, r2, #3
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7c1b      	ldrb	r3, [r3, #16]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_DSI_ConfigVideoMode+0x16>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e1f6      	b.n	8003cde <HAL_DSI_ConfigVideoMode+0x404>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0203 	bic.w	r2, r2, #3
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800394a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800394e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003970:	f023 031f 	bic.w	r3, r3, #31
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003996:	f023 031f 	bic.w	r3, r3, #31
 800399a:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0203 	bic.w	r2, r2, #3
 80039bc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68d9      	ldr	r1, [r3, #12]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0207 	bic.w	r2, r2, #7
 80039de:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6959      	ldr	r1, [r3, #20]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 020f 	bic.w	r2, r2, #15
 8003a0c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6919      	ldr	r1, [r3, #16]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 020e 	bic.w	r2, r2, #14
 8003a30:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	005a      	lsls	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d110      	bne.n	8003a76 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a62:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6919      	ldr	r1, [r3, #16]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003a84:	f023 030f 	bic.w	r3, r3, #15
 8003a88:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003aaa:	f023 030f 	bic.w	r3, r3, #15
 8003aae:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ad0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ad4:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b1c:	f023 0303 	bic.w	r3, r3, #3
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b6c:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003bb0:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6999      	ldr	r1, [r3, #24]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbc:	041a      	lsls	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bd4:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6999      	ldr	r1, [r3, #24]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7c1b      	ldrb	r3, [r3, #16]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_DSI_ConfigPhyTimer+0x16>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e058      	b.n	8003db2 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	bf38      	it	cc
 8003d12:	4613      	movcc	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003d26:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	041a      	lsls	r2, r3, #16
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003d54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003d8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7c1b      	ldrb	r3, [r3, #16]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0b4      	b.n	8003f3e <HAL_DSI_ConfigHostTimeouts+0x180>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003de8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6899      	ldr	r1, [r3, #8]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	021a      	lsls	r2, r3, #8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	041a      	lsls	r2, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	041b      	lsls	r3, r3, #16
 8003e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	0c1b      	lsrs	r3, r3, #16
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7c1b      	ldrb	r3, [r3, #16]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_DSI_Start+0x14>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e02b      	b.n	8003fb6 <HAL_DSI_Start+0x6c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b088      	sub	sp, #32
 8003fc6:	af02      	add	r7, sp, #8
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	7c1b      	ldrb	r3, [r3, #16]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_DSI_ShortWrite+0x1a>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e010      	b.n	8003ffe <HAL_DSI_ShortWrite+0x3c>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff fa44 	bl	800347a <DSI_ShortWrite>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	741a      	strb	r2, [r3, #16]

  return status;
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b08c      	sub	sp, #48	; 0x30
 800400a:	af02      	add	r7, sp, #8
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	7c1b      	ldrb	r3, [r3, #16]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_DSI_LongWrite+0x1e>
 8004020:	2302      	movs	r3, #2
 8004022:	e084      	b.n	800412e <HAL_DSI_LongWrite+0x128>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800402a:	f7ff f86d 	bl	8003108 <HAL_GetTick>
 800402e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004030:	e00c      	b.n	800404c <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004032:	f7ff f869 	bl	8003108 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004040:	d904      	bls.n	800404c <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e070      	b.n	800412e <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0eb      	beq.n	8004032 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b03      	cmp	r3, #3
 8004062:	bf28      	it	cs
 8004064:	2303      	movcs	r3, #3
 8004066:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004068:	2300      	movs	r3, #0
 800406a:	623b      	str	r3, [r7, #32]
 800406c:	e00f      	b.n	800408e <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	4413      	add	r3, r2
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	3301      	adds	r3, #1
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	4313      	orrs	r3, r2
 8004086:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	3301      	adds	r3, #1
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	6a3a      	ldr	r2, [r7, #32]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	429a      	cmp	r2, r3
 8004094:	d3eb      	bcc.n	800406e <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80040ae:	e028      	b.n	8004102 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	bf28      	it	cs
 80040b6:	2304      	movcs	r3, #4
 80040b8:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80040be:	2300      	movs	r3, #0
 80040c0:	623b      	str	r3, [r7, #32]
 80040c2:	e00e      	b.n	80040e2 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	4413      	add	r3, r2
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	3301      	adds	r3, #1
 80040e0:	623b      	str	r3, [r7, #32]
 80040e2:	6a3a      	ldr	r2, [r7, #32]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d3ec      	bcc.n	80040c4 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4413      	add	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1d3      	bne.n	80040b0 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004110:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	3301      	adds	r3, #1
 8004116:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004118:	b2db      	uxtb	r3, r3
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	f7ff f991 	bl	8003448 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3728      	adds	r7, #40	; 0x28
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	7c1b      	ldrb	r3, [r3, #16]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004148:	2302      	movs	r3, #2
 800414a:	e01b      	b.n	8004184 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004162:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	065a      	lsls	r2, r3, #25
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800419e:	e166      	b.n	800446e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	2101      	movs	r1, #1
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	4013      	ands	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8158 	beq.w	8004468 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d005      	beq.n	80041d0 <HAL_GPIO_Init+0x40>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d130      	bne.n	8004232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	2203      	movs	r2, #3
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4013      	ands	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004206:	2201      	movs	r2, #1
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43db      	mvns	r3, r3
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4013      	ands	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f003 0201 	and.w	r2, r3, #1
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b03      	cmp	r3, #3
 800423c:	d017      	beq.n	800426e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	2203      	movs	r2, #3
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d123      	bne.n	80042c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	08da      	lsrs	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3208      	adds	r2, #8
 8004282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004286:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4013      	ands	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	08da      	lsrs	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3208      	adds	r2, #8
 80042bc:	6939      	ldr	r1, [r7, #16]
 80042be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	2203      	movs	r2, #3
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4013      	ands	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0203 	and.w	r2, r3, #3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80b2 	beq.w	8004468 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004304:	4b61      	ldr	r3, [pc, #388]	; (800448c <HAL_GPIO_Init+0x2fc>)
 8004306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004308:	4a60      	ldr	r2, [pc, #384]	; (800448c <HAL_GPIO_Init+0x2fc>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6613      	str	r3, [r2, #96]	; 0x60
 8004310:	4b5e      	ldr	r3, [pc, #376]	; (800448c <HAL_GPIO_Init+0x2fc>)
 8004312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800431c:	4a5c      	ldr	r2, [pc, #368]	; (8004490 <HAL_GPIO_Init+0x300>)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	3302      	adds	r3, #2
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	220f      	movs	r2, #15
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004346:	d02b      	beq.n	80043a0 <HAL_GPIO_Init+0x210>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a52      	ldr	r2, [pc, #328]	; (8004494 <HAL_GPIO_Init+0x304>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d025      	beq.n	800439c <HAL_GPIO_Init+0x20c>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a51      	ldr	r2, [pc, #324]	; (8004498 <HAL_GPIO_Init+0x308>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01f      	beq.n	8004398 <HAL_GPIO_Init+0x208>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a50      	ldr	r2, [pc, #320]	; (800449c <HAL_GPIO_Init+0x30c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d019      	beq.n	8004394 <HAL_GPIO_Init+0x204>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a4f      	ldr	r2, [pc, #316]	; (80044a0 <HAL_GPIO_Init+0x310>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d013      	beq.n	8004390 <HAL_GPIO_Init+0x200>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a4e      	ldr	r2, [pc, #312]	; (80044a4 <HAL_GPIO_Init+0x314>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00d      	beq.n	800438c <HAL_GPIO_Init+0x1fc>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a4d      	ldr	r2, [pc, #308]	; (80044a8 <HAL_GPIO_Init+0x318>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <HAL_GPIO_Init+0x1f8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a4c      	ldr	r2, [pc, #304]	; (80044ac <HAL_GPIO_Init+0x31c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d101      	bne.n	8004384 <HAL_GPIO_Init+0x1f4>
 8004380:	2307      	movs	r3, #7
 8004382:	e00e      	b.n	80043a2 <HAL_GPIO_Init+0x212>
 8004384:	2308      	movs	r3, #8
 8004386:	e00c      	b.n	80043a2 <HAL_GPIO_Init+0x212>
 8004388:	2306      	movs	r3, #6
 800438a:	e00a      	b.n	80043a2 <HAL_GPIO_Init+0x212>
 800438c:	2305      	movs	r3, #5
 800438e:	e008      	b.n	80043a2 <HAL_GPIO_Init+0x212>
 8004390:	2304      	movs	r3, #4
 8004392:	e006      	b.n	80043a2 <HAL_GPIO_Init+0x212>
 8004394:	2303      	movs	r3, #3
 8004396:	e004      	b.n	80043a2 <HAL_GPIO_Init+0x212>
 8004398:	2302      	movs	r3, #2
 800439a:	e002      	b.n	80043a2 <HAL_GPIO_Init+0x212>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_GPIO_Init+0x212>
 80043a0:	2300      	movs	r3, #0
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	f002 0203 	and.w	r2, r2, #3
 80043a8:	0092      	lsls	r2, r2, #2
 80043aa:	4093      	lsls	r3, r2
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043b2:	4937      	ldr	r1, [pc, #220]	; (8004490 <HAL_GPIO_Init+0x300>)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	3302      	adds	r3, #2
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043c0:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_GPIO_Init+0x320>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043e4:	4a32      	ldr	r2, [pc, #200]	; (80044b0 <HAL_GPIO_Init+0x320>)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043ea:	4b31      	ldr	r3, [pc, #196]	; (80044b0 <HAL_GPIO_Init+0x320>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800440e:	4a28      	ldr	r2, [pc, #160]	; (80044b0 <HAL_GPIO_Init+0x320>)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004414:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <HAL_GPIO_Init+0x320>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	43db      	mvns	r3, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <HAL_GPIO_Init+0x320>)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800443e:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <HAL_GPIO_Init+0x320>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	43db      	mvns	r3, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4013      	ands	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004462:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <HAL_GPIO_Init+0x320>)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	3301      	adds	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	f47f ae91 	bne.w	80041a0 <HAL_GPIO_Init+0x10>
  }
}
 800447e:	bf00      	nop
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40021000 	.word	0x40021000
 8004490:	40010000 	.word	0x40010000
 8004494:	48000400 	.word	0x48000400
 8004498:	48000800 	.word	0x48000800
 800449c:	48000c00 	.word	0x48000c00
 80044a0:	48001000 	.word	0x48001000
 80044a4:	48001400 	.word	0x48001400
 80044a8:	48001800 	.word	0x48001800
 80044ac:	48001c00 	.word	0x48001c00
 80044b0:	40010400 	.word	0x40010400

080044b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	887b      	ldrh	r3, [r7, #2]
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e001      	b.n	80044d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044d2:	2300      	movs	r3, #0
 80044d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	807b      	strh	r3, [r7, #2]
 80044f0:	4613      	mov	r3, r2
 80044f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044f4:	787b      	ldrb	r3, [r7, #1]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044fa:	887a      	ldrh	r2, [r7, #2]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004500:	e002      	b.n	8004508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800452a:	4a05      	ldr	r2, [pc, #20]	; (8004540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd f9d8 	bl	80018e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40010400 	.word	0x40010400

08004544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e08d      	b.n	8004672 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fe fa44 	bl	80029f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2224      	movs	r2, #36	; 0x24
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004594:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d107      	bne.n	80045be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	e006      	b.n	80045cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d108      	bne.n	80045e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e2:	605a      	str	r2, [r3, #4]
 80045e4:	e007      	b.n	80045f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004608:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004618:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1a      	ldr	r2, [r3, #32]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b20      	cmp	r3, #32
 800468e:	d138      	bne.n	8004702 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800469a:	2302      	movs	r3, #2
 800469c:	e032      	b.n	8004704 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2224      	movs	r2, #36	; 0x24
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b20      	cmp	r3, #32
 8004724:	d139      	bne.n	800479a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004730:	2302      	movs	r3, #2
 8004732:	e033      	b.n	800479c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2224      	movs	r2, #36	; 0x24
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0201 	bic.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004762:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
  }
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0bf      	b.n	800493a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fe f9b4 	bl	8002b3c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80047ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004800:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <HAL_LTDC_Init+0x19c>)
 800481c:	400b      	ands	r3, r1
 800481e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6899      	ldr	r1, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68d9      	ldr	r1, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <HAL_LTDC_Init+0x19c>)
 800484a:	400b      	ands	r3, r1
 800484c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68d9      	ldr	r1, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6919      	ldr	r1, [r3, #16]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b33      	ldr	r3, [pc, #204]	; (8004944 <HAL_LTDC_Init+0x19c>)
 8004878:	400b      	ands	r3, r1
 800487a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6919      	ldr	r1, [r3, #16]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6959      	ldr	r1, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_LTDC_Init+0x19c>)
 80048a6:	400b      	ands	r3, r1
 80048a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6959      	ldr	r1, [r3, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80048ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0206 	orr.w	r2, r2, #6
 8004916:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699a      	ldr	r2, [r3, #24]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	f000f800 	.word	0xf000f800

08004948 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004948:	b5b0      	push	{r4, r5, r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_LTDC_ConfigLayer+0x1a>
 800495e:	2302      	movs	r3, #2
 8004960:	e02c      	b.n	80049bc <HAL_LTDC_ConfigLayer+0x74>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2134      	movs	r1, #52	; 0x34
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4614      	mov	r4, r2
 8004986:	461d      	mov	r5, r3
 8004988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800498a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800498c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800498e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f811 	bl	80049c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bdb0      	pop	{r4, r5, r7, pc}

080049c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e0:	4413      	add	r3, r2
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	01db      	lsls	r3, r3, #7
 80049f0:	4413      	add	r3, r2
 80049f2:	3384      	adds	r3, #132	; 0x84
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	4611      	mov	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	01d2      	lsls	r2, r2, #7
 8004a00:	440a      	add	r2, r1
 8004a02:	3284      	adds	r2, #132	; 0x84
 8004a04:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8004a08:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a1a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a1c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4619      	mov	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	01db      	lsls	r3, r3, #7
 8004a28:	440b      	add	r3, r1
 8004a2a:	3384      	adds	r3, #132	; 0x84
 8004a2c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a32:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a42:	4413      	add	r3, r2
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	01db      	lsls	r3, r3, #7
 8004a52:	4413      	add	r3, r2
 8004a54:	3384      	adds	r3, #132	; 0x84
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	01d2      	lsls	r2, r2, #7
 8004a62:	440a      	add	r2, r1
 8004a64:	3284      	adds	r2, #132	; 0x84
 8004a66:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8004a6a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a7a:	4413      	add	r3, r2
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4619      	mov	r1, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	01db      	lsls	r3, r3, #7
 8004a88:	440b      	add	r3, r1
 8004a8a:	3384      	adds	r3, #132	; 0x84
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	01db      	lsls	r3, r3, #7
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3384      	adds	r3, #132	; 0x84
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	01d2      	lsls	r2, r2, #7
 8004aae:	440a      	add	r2, r1
 8004ab0:	3284      	adds	r2, #132	; 0x84
 8004ab2:	f023 0307 	bic.w	r3, r3, #7
 8004ab6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3384      	adds	r3, #132	; 0x84
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	4413      	add	r3, r2
 8004af6:	3384      	adds	r3, #132	; 0x84
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	01db      	lsls	r3, r3, #7
 8004b04:	4413      	add	r3, r2
 8004b06:	3384      	adds	r3, #132	; 0x84
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b14:	461a      	mov	r2, r3
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4619      	mov	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	01db      	lsls	r3, r3, #7
 8004b28:	440b      	add	r3, r1
 8004b2a:	3384      	adds	r3, #132	; 0x84
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	01db      	lsls	r3, r3, #7
 8004b3e:	4413      	add	r3, r2
 8004b40:	3384      	adds	r3, #132	; 0x84
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	01d2      	lsls	r2, r2, #7
 8004b4e:	440a      	add	r2, r1
 8004b50:	3284      	adds	r2, #132	; 0x84
 8004b52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	01db      	lsls	r3, r3, #7
 8004b62:	4413      	add	r3, r2
 8004b64:	3384      	adds	r3, #132	; 0x84
 8004b66:	461a      	mov	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	01db      	lsls	r3, r3, #7
 8004b78:	4413      	add	r3, r2
 8004b7a:	3384      	adds	r3, #132	; 0x84
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	4611      	mov	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	01d2      	lsls	r2, r2, #7
 8004b88:	440a      	add	r2, r1
 8004b8a:	3284      	adds	r2, #132	; 0x84
 8004b8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b90:	f023 0307 	bic.w	r3, r3, #7
 8004b94:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	69da      	ldr	r2, [r3, #28]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	6809      	ldr	r1, [r1, #0]
 8004ba2:	4608      	mov	r0, r1
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	01c9      	lsls	r1, r1, #7
 8004ba8:	4401      	add	r1, r0
 8004baa:	3184      	adds	r1, #132	; 0x84
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	01db      	lsls	r3, r3, #7
 8004bba:	4413      	add	r3, r2
 8004bbc:	3384      	adds	r3, #132	; 0x84
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	4413      	add	r3, r2
 8004bcc:	3384      	adds	r3, #132	; 0x84
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	01db      	lsls	r3, r3, #7
 8004bde:	4413      	add	r3, r2
 8004be0:	3384      	adds	r3, #132	; 0x84
 8004be2:	461a      	mov	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e01b      	b.n	8004c30 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c00:	2303      	movs	r3, #3
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e014      	b.n	8004c30 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d00b      	beq.n	8004c26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d007      	beq.n	8004c26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d003      	beq.n	8004c26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c22:	2b07      	cmp	r3, #7
 8004c24:	d102      	bne.n	8004c2c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c26:	2302      	movs	r3, #2
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e001      	b.n	8004c30 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	01db      	lsls	r3, r3, #7
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3384      	adds	r3, #132	; 0x84
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	4611      	mov	r1, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	01d2      	lsls	r2, r2, #7
 8004c4a:	440a      	add	r2, r1
 8004c4c:	3284      	adds	r2, #132	; 0x84
 8004c4e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004c52:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	1acb      	subs	r3, r1, r3
 8004c6a:	69f9      	ldr	r1, [r7, #28]
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	6809      	ldr	r1, [r1, #0]
 8004c76:	4608      	mov	r0, r1
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	01c9      	lsls	r1, r1, #7
 8004c7c:	4401      	add	r1, r0
 8004c7e:	3184      	adds	r1, #132	; 0x84
 8004c80:	4313      	orrs	r3, r2
 8004c82:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	01db      	lsls	r3, r3, #7
 8004c8e:	4413      	add	r3, r2
 8004c90:	3384      	adds	r3, #132	; 0x84
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	01d2      	lsls	r2, r2, #7
 8004c9e:	440a      	add	r2, r1
 8004ca0:	3284      	adds	r2, #132	; 0x84
 8004ca2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ca6:	f023 0307 	bic.w	r3, r3, #7
 8004caa:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	01db      	lsls	r3, r3, #7
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3384      	adds	r3, #132	; 0x84
 8004cba:	461a      	mov	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	01db      	lsls	r3, r3, #7
 8004ccc:	4413      	add	r3, r2
 8004cce:	3384      	adds	r3, #132	; 0x84
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	01d2      	lsls	r2, r2, #7
 8004cdc:	440a      	add	r2, r1
 8004cde:	3284      	adds	r2, #132	; 0x84
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	6013      	str	r3, [r2, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	3724      	adds	r7, #36	; 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d04:	d102      	bne.n	8004d0c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d0a:	e00b      	b.n	8004d24 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004d0c:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d1a:	d102      	bne.n	8004d22 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d20:	e000      	b.n	8004d24 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d22:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40007000 	.word	0x40007000

08004d34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d141      	bne.n	8004dc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d42:	4b4b      	ldr	r3, [pc, #300]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4e:	d131      	bne.n	8004db4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d50:	4b47      	ldr	r3, [pc, #284]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d56:	4a46      	ldr	r2, [pc, #280]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d60:	4b43      	ldr	r3, [pc, #268]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d68:	4a41      	ldr	r2, [pc, #260]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d70:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2232      	movs	r2, #50	; 0x32
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	4a3f      	ldr	r2, [pc, #252]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	0c9b      	lsrs	r3, r3, #18
 8004d82:	3301      	adds	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d86:	e002      	b.n	8004d8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d8e:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9a:	d102      	bne.n	8004da2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f2      	bne.n	8004d88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004da2:	4b33      	ldr	r3, [pc, #204]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dae:	d158      	bne.n	8004e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e057      	b.n	8004e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004db4:	4b2e      	ldr	r3, [pc, #184]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dba:	4a2d      	ldr	r2, [pc, #180]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004dc4:	e04d      	b.n	8004e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dcc:	d141      	bne.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dce:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dda:	d131      	bne.n	8004e40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ddc:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de2:	4a23      	ldr	r2, [pc, #140]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dec:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004df4:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2232      	movs	r2, #50	; 0x32
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	0c9b      	lsrs	r3, r3, #18
 8004e0e:	3301      	adds	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e12:	e002      	b.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e1a:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e26:	d102      	bne.n	8004e2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f2      	bne.n	8004e14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3a:	d112      	bne.n	8004e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e011      	b.n	8004e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e46:	4a0a      	ldr	r2, [pc, #40]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e50:	e007      	b.n	8004e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e52:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e5a:	4a05      	ldr	r2, [pc, #20]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e60:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40007000 	.word	0x40007000
 8004e74:	20004b0c 	.word	0x20004b0c
 8004e78:	431bde83 	.word	0x431bde83

08004e7c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e8a:	6053      	str	r3, [r2, #4]
}
 8004e8c:	bf00      	nop
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40007000 	.word	0x40007000

08004e9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f000 bc08 	b.w	80056c0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb0:	4b96      	ldr	r3, [pc, #600]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eba:	4b94      	ldr	r3, [pc, #592]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80e4 	beq.w	800509a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x4c>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b0c      	cmp	r3, #12
 8004edc:	f040 808b 	bne.w	8004ff6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	f040 8087 	bne.w	8004ff6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ee8:	4b88      	ldr	r3, [pc, #544]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCC_OscConfig+0x64>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e3df      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1a      	ldr	r2, [r3, #32]
 8004f04:	4b81      	ldr	r3, [pc, #516]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <HAL_RCC_OscConfig+0x7e>
 8004f10:	4b7e      	ldr	r3, [pc, #504]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f18:	e005      	b.n	8004f26 <HAL_RCC_OscConfig+0x8a>
 8004f1a:	4b7c      	ldr	r3, [pc, #496]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f20:	091b      	lsrs	r3, r3, #4
 8004f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d223      	bcs.n	8004f72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fdcc 	bl	8005acc <RCC_SetFlashLatencyFromMSIRange>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e3c0      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f3e:	4b73      	ldr	r3, [pc, #460]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a72      	ldr	r2, [pc, #456]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f44:	f043 0308 	orr.w	r3, r3, #8
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	4b70      	ldr	r3, [pc, #448]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	496d      	ldr	r1, [pc, #436]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f5c:	4b6b      	ldr	r3, [pc, #428]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	4968      	ldr	r1, [pc, #416]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	604b      	str	r3, [r1, #4]
 8004f70:	e025      	b.n	8004fbe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f72:	4b66      	ldr	r3, [pc, #408]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a65      	ldr	r2, [pc, #404]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f78:	f043 0308 	orr.w	r3, r3, #8
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	4b63      	ldr	r3, [pc, #396]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4960      	ldr	r1, [pc, #384]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f90:	4b5e      	ldr	r3, [pc, #376]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	495b      	ldr	r1, [pc, #364]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fd8c 	bl	8005acc <RCC_SetFlashLatencyFromMSIRange>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e380      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fbe:	f000 fcc1 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	4b51      	ldr	r3, [pc, #324]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	091b      	lsrs	r3, r3, #4
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	4950      	ldr	r1, [pc, #320]	; (8005110 <HAL_RCC_OscConfig+0x274>)
 8004fd0:	5ccb      	ldrb	r3, [r1, r3]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fda:	4a4e      	ldr	r2, [pc, #312]	; (8005114 <HAL_RCC_OscConfig+0x278>)
 8004fdc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fde:	4b4e      	ldr	r3, [pc, #312]	; (8005118 <HAL_RCC_OscConfig+0x27c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe f840 	bl	8003068 <HAL_InitTick>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d052      	beq.n	8005098 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	e364      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d032      	beq.n	8005064 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ffe:	4b43      	ldr	r3, [pc, #268]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a42      	ldr	r2, [pc, #264]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800500a:	f7fe f87d 	bl	8003108 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005012:	f7fe f879 	bl	8003108 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e34d      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005024:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005030:	4b36      	ldr	r3, [pc, #216]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a35      	ldr	r2, [pc, #212]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005036:	f043 0308 	orr.w	r3, r3, #8
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	4b33      	ldr	r3, [pc, #204]	; (800510c <HAL_RCC_OscConfig+0x270>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	4930      	ldr	r1, [pc, #192]	; (800510c <HAL_RCC_OscConfig+0x270>)
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800504e:	4b2f      	ldr	r3, [pc, #188]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	492b      	ldr	r1, [pc, #172]	; (800510c <HAL_RCC_OscConfig+0x270>)
 800505e:	4313      	orrs	r3, r2
 8005060:	604b      	str	r3, [r1, #4]
 8005062:	e01a      	b.n	800509a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005064:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a28      	ldr	r2, [pc, #160]	; (800510c <HAL_RCC_OscConfig+0x270>)
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005070:	f7fe f84a 	bl	8003108 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005078:	f7fe f846 	bl	8003108 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e31a      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <HAL_RCC_OscConfig+0x270>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x1dc>
 8005096:	e000      	b.n	800509a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005098:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d073      	beq.n	800518e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_OscConfig+0x21c>
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b0c      	cmp	r3, #12
 80050b0:	d10e      	bne.n	80050d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d10b      	bne.n	80050d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b8:	4b14      	ldr	r3, [pc, #80]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d063      	beq.n	800518c <HAL_RCC_OscConfig+0x2f0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d15f      	bne.n	800518c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e2f7      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d8:	d106      	bne.n	80050e8 <HAL_RCC_OscConfig+0x24c>
 80050da:	4b0c      	ldr	r3, [pc, #48]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a0b      	ldr	r2, [pc, #44]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e025      	b.n	8005134 <HAL_RCC_OscConfig+0x298>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f0:	d114      	bne.n	800511c <HAL_RCC_OscConfig+0x280>
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a05      	ldr	r2, [pc, #20]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b03      	ldr	r3, [pc, #12]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a02      	ldr	r2, [pc, #8]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e013      	b.n	8005134 <HAL_RCC_OscConfig+0x298>
 800510c:	40021000 	.word	0x40021000
 8005110:	08009634 	.word	0x08009634
 8005114:	20004b0c 	.word	0x20004b0c
 8005118:	20004b10 	.word	0x20004b10
 800511c:	4ba0      	ldr	r3, [pc, #640]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a9f      	ldr	r2, [pc, #636]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b9d      	ldr	r3, [pc, #628]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a9c      	ldr	r2, [pc, #624]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800512e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fd ffe4 	bl	8003108 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd ffe0 	bl	8003108 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e2b4      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005156:	4b92      	ldr	r3, [pc, #584]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0x2a8>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fd ffd0 	bl	8003108 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800516c:	f7fd ffcc 	bl	8003108 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	; 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e2a0      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800517e:	4b88      	ldr	r3, [pc, #544]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x2d0>
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d060      	beq.n	800525c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b04      	cmp	r3, #4
 800519e:	d005      	beq.n	80051ac <HAL_RCC_OscConfig+0x310>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d119      	bne.n	80051da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d116      	bne.n	80051da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ac:	4b7c      	ldr	r3, [pc, #496]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_OscConfig+0x328>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e27d      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c4:	4b76      	ldr	r3, [pc, #472]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	4973      	ldr	r1, [pc, #460]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d8:	e040      	b.n	800525c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d023      	beq.n	800522a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e2:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a6e      	ldr	r2, [pc, #440]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fd ff8b 	bl	8003108 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fd ff87 	bl	8003108 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e25b      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005208:	4b65      	ldr	r3, [pc, #404]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b62      	ldr	r3, [pc, #392]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	495f      	ldr	r1, [pc, #380]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
 8005228:	e018      	b.n	800525c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522a:	4b5d      	ldr	r3, [pc, #372]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5c      	ldr	r2, [pc, #368]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005236:	f7fd ff67 	bl	8003108 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800523e:	f7fd ff63 	bl	8003108 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e237      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005250:	4b53      	ldr	r3, [pc, #332]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d03c      	beq.n	80052e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01c      	beq.n	80052aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005270:	4b4b      	ldr	r3, [pc, #300]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005276:	4a4a      	ldr	r2, [pc, #296]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fd ff42 	bl	8003108 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005288:	f7fd ff3e 	bl	8003108 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e212      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800529a:	4b41      	ldr	r3, [pc, #260]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800529c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ef      	beq.n	8005288 <HAL_RCC_OscConfig+0x3ec>
 80052a8:	e01b      	b.n	80052e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052aa:	4b3d      	ldr	r3, [pc, #244]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80052ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b0:	4a3b      	ldr	r2, [pc, #236]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ba:	f7fd ff25 	bl	8003108 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c2:	f7fd ff21 	bl	8003108 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e1f5      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d4:	4b32      	ldr	r3, [pc, #200]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80052d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1ef      	bne.n	80052c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80a6 	beq.w	800543c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f0:	2300      	movs	r3, #0
 80052f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052f4:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10d      	bne.n	800531c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005300:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530a:	6593      	str	r3, [r2, #88]	; 0x58
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005318:	2301      	movs	r3, #1
 800531a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800531c:	4b21      	ldr	r3, [pc, #132]	; (80053a4 <HAL_RCC_OscConfig+0x508>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d118      	bne.n	800535a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <HAL_RCC_OscConfig+0x508>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_RCC_OscConfig+0x508>)
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005334:	f7fd fee8 	bl	8003108 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533c:	f7fd fee4 	bl	8003108 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e1b8      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534e:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <HAL_RCC_OscConfig+0x508>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d108      	bne.n	8005374 <HAL_RCC_OscConfig+0x4d8>
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005368:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005372:	e029      	b.n	80053c8 <HAL_RCC_OscConfig+0x52c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b05      	cmp	r3, #5
 800537a:	d115      	bne.n	80053a8 <HAL_RCC_OscConfig+0x50c>
 800537c:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	4a07      	ldr	r2, [pc, #28]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005384:	f043 0304 	orr.w	r3, r3, #4
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	4a03      	ldr	r2, [pc, #12]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800539c:	e014      	b.n	80053c8 <HAL_RCC_OscConfig+0x52c>
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40007000 	.word	0x40007000
 80053a8:	4b9d      	ldr	r3, [pc, #628]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	4a9c      	ldr	r2, [pc, #624]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053b8:	4b99      	ldr	r3, [pc, #612]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	4a98      	ldr	r2, [pc, #608]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80053c0:	f023 0304 	bic.w	r3, r3, #4
 80053c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d0:	f7fd fe9a 	bl	8003108 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d8:	f7fd fe96 	bl	8003108 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e168      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ee:	4b8c      	ldr	r3, [pc, #560]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80053f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ed      	beq.n	80053d8 <HAL_RCC_OscConfig+0x53c>
 80053fc:	e015      	b.n	800542a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fd fe83 	bl	8003108 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005404:	e00a      	b.n	800541c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005406:	f7fd fe7f 	bl	8003108 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f241 3288 	movw	r2, #5000	; 0x1388
 8005414:	4293      	cmp	r3, r2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e151      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800541c:	4b80      	ldr	r3, [pc, #512]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ed      	bne.n	8005406 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800542a:	7ffb      	ldrb	r3, [r7, #31]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d105      	bne.n	800543c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005430:	4b7b      	ldr	r3, [pc, #492]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	4a7a      	ldr	r2, [pc, #488]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 8005436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b00      	cmp	r3, #0
 8005446:	d03c      	beq.n	80054c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01c      	beq.n	800548a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005450:	4b73      	ldr	r3, [pc, #460]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 8005452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005456:	4a72      	ldr	r2, [pc, #456]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fd fe52 	bl	8003108 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005468:	f7fd fe4e 	bl	8003108 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e122      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800547a:	4b69      	ldr	r3, [pc, #420]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 800547c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0ef      	beq.n	8005468 <HAL_RCC_OscConfig+0x5cc>
 8005488:	e01b      	b.n	80054c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800548a:	4b65      	ldr	r3, [pc, #404]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 800548c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005490:	4a63      	ldr	r2, [pc, #396]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549a:	f7fd fe35 	bl	8003108 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054a2:	f7fd fe31 	bl	8003108 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e105      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054b4:	4b5a      	ldr	r3, [pc, #360]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80054b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1ef      	bne.n	80054a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80f9 	beq.w	80056be <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	f040 80cf 	bne.w	8005674 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054d6:	4b52      	ldr	r3, [pc, #328]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f003 0203 	and.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d12c      	bne.n	8005544 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	3b01      	subs	r3, #1
 80054f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d123      	bne.n	8005544 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005506:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d11b      	bne.n	8005544 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d113      	bne.n	8005544 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	3b01      	subs	r3, #1
 800552a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d109      	bne.n	8005544 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	3b01      	subs	r3, #1
 800553e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d071      	beq.n	8005628 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b0c      	cmp	r3, #12
 8005548:	d068      	beq.n	800561c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800554a:	4b35      	ldr	r3, [pc, #212]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d105      	bne.n	8005562 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005556:	4b32      	ldr	r3, [pc, #200]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e0ac      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005566:	4b2e      	ldr	r3, [pc, #184]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2d      	ldr	r2, [pc, #180]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 800556c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005570:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005572:	f7fd fdc9 	bl	8003108 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557a:	f7fd fdc5 	bl	8003108 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e099      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800558c:	4b24      	ldr	r3, [pc, #144]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f0      	bne.n	800557a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005598:	4b21      	ldr	r3, [pc, #132]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	4b21      	ldr	r3, [pc, #132]	; (8005624 <HAL_RCC_OscConfig+0x788>)
 800559e:	4013      	ands	r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055a8:	3a01      	subs	r2, #1
 80055aa:	0112      	lsls	r2, r2, #4
 80055ac:	4311      	orrs	r1, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055b2:	0212      	lsls	r2, r2, #8
 80055b4:	4311      	orrs	r1, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055ba:	0852      	lsrs	r2, r2, #1
 80055bc:	3a01      	subs	r2, #1
 80055be:	0552      	lsls	r2, r2, #21
 80055c0:	4311      	orrs	r1, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055c6:	0852      	lsrs	r2, r2, #1
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0652      	lsls	r2, r2, #25
 80055cc:	4311      	orrs	r1, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055d2:	06d2      	lsls	r2, r2, #27
 80055d4:	430a      	orrs	r2, r1
 80055d6:	4912      	ldr	r1, [pc, #72]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055dc:	4b10      	ldr	r3, [pc, #64]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a0f      	ldr	r2, [pc, #60]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80055e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055e8:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 80055ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055f4:	f7fd fd88 	bl	8003108 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fd fd84 	bl	8003108 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e058      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560e:	4b04      	ldr	r3, [pc, #16]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800561a:	e050      	b.n	80056be <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e04f      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
 8005620:	40021000 	.word	0x40021000
 8005624:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005628:	4b27      	ldr	r3, [pc, #156]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d144      	bne.n	80056be <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005634:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a23      	ldr	r2, [pc, #140]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 800563a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800563e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 8005646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800564a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800564c:	f7fd fd5c 	bl	8003108 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005654:	f7fd fd58 	bl	8003108 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e02c      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005666:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0x7b8>
 8005672:	e024      	b.n	80056be <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b0c      	cmp	r3, #12
 8005678:	d01f      	beq.n	80056ba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a12      	ldr	r2, [pc, #72]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 8005680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005686:	f7fd fd3f 	bl	8003108 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568e:	f7fd fd3b 	bl	8003108 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e00f      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f0      	bne.n	800568e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	4905      	ldr	r1, [pc, #20]	; (80056c8 <HAL_RCC_OscConfig+0x82c>)
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCC_OscConfig+0x830>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	60cb      	str	r3, [r1, #12]
 80056b8:	e001      	b.n	80056be <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40021000 	.word	0x40021000
 80056cc:	feeefffc 	.word	0xfeeefffc

080056d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e11d      	b.n	8005924 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056e8:	4b90      	ldr	r3, [pc, #576]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d910      	bls.n	8005718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f6:	4b8d      	ldr	r3, [pc, #564]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f023 020f 	bic.w	r2, r3, #15
 80056fe:	498b      	ldr	r1, [pc, #556]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	4313      	orrs	r3, r2
 8005704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b89      	ldr	r3, [pc, #548]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e105      	b.n	8005924 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d010      	beq.n	8005746 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	4b81      	ldr	r3, [pc, #516]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005730:	429a      	cmp	r2, r3
 8005732:	d908      	bls.n	8005746 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005734:	4b7e      	ldr	r3, [pc, #504]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	497b      	ldr	r1, [pc, #492]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005742:	4313      	orrs	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d079      	beq.n	8005846 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b03      	cmp	r3, #3
 8005758:	d11e      	bne.n	8005798 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800575a:	4b75      	ldr	r3, [pc, #468]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e0dc      	b.n	8005924 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800576a:	f000 fa09 	bl	8005b80 <RCC_GetSysClockFreqFromPLLSource>
 800576e:	4603      	mov	r3, r0
 8005770:	4a70      	ldr	r2, [pc, #448]	; (8005934 <HAL_RCC_ClockConfig+0x264>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d946      	bls.n	8005804 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005776:	4b6e      	ldr	r3, [pc, #440]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d140      	bne.n	8005804 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005782:	4b6b      	ldr	r3, [pc, #428]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800578a:	4a69      	ldr	r2, [pc, #420]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 800578c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005790:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e035      	b.n	8005804 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d107      	bne.n	80057b0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a0:	4b63      	ldr	r3, [pc, #396]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d115      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0b9      	b.n	8005924 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d107      	bne.n	80057c8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057b8:	4b5d      	ldr	r3, [pc, #372]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0ad      	b.n	8005924 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057c8:	4b59      	ldr	r3, [pc, #356]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0a5      	b.n	8005924 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80057d8:	f000 f8b4 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 80057dc:	4603      	mov	r3, r0
 80057de:	4a55      	ldr	r2, [pc, #340]	; (8005934 <HAL_RCC_ClockConfig+0x264>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d90f      	bls.n	8005804 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057e4:	4b52      	ldr	r3, [pc, #328]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057f0:	4b4f      	ldr	r3, [pc, #316]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f8:	4a4d      	ldr	r2, [pc, #308]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005804:	4b4a      	ldr	r3, [pc, #296]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f023 0203 	bic.w	r2, r3, #3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4947      	ldr	r1, [pc, #284]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005816:	f7fd fc77 	bl	8003108 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581c:	e00a      	b.n	8005834 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581e:	f7fd fc73 	bl	8003108 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f241 3288 	movw	r2, #5000	; 0x1388
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e077      	b.n	8005924 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005834:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 020c 	and.w	r2, r3, #12
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	429a      	cmp	r2, r3
 8005844:	d1eb      	bne.n	800581e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b80      	cmp	r3, #128	; 0x80
 800584a:	d105      	bne.n	8005858 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800584c:	4b38      	ldr	r3, [pc, #224]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	4a37      	ldr	r2, [pc, #220]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005856:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d010      	beq.n	8005886 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	4b31      	ldr	r3, [pc, #196]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005870:	429a      	cmp	r2, r3
 8005872:	d208      	bcs.n	8005886 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005874:	4b2e      	ldr	r3, [pc, #184]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	492b      	ldr	r1, [pc, #172]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005886:	4b29      	ldr	r3, [pc, #164]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d210      	bcs.n	80058b6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f023 020f 	bic.w	r2, r3, #15
 800589c:	4923      	ldr	r1, [pc, #140]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a4:	4b21      	ldr	r3, [pc, #132]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e036      	b.n	8005924 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c2:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4918      	ldr	r1, [pc, #96]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4910      	ldr	r1, [pc, #64]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058f4:	f000 f826 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 80058f8:	4602      	mov	r2, r0
 80058fa:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	490c      	ldr	r1, [pc, #48]	; (8005938 <HAL_RCC_ClockConfig+0x268>)
 8005906:	5ccb      	ldrb	r3, [r1, r3]
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	4a0a      	ldr	r2, [pc, #40]	; (800593c <HAL_RCC_ClockConfig+0x26c>)
 8005912:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <HAL_RCC_ClockConfig+0x270>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fd fba5 	bl	8003068 <HAL_InitTick>
 800591e:	4603      	mov	r3, r0
 8005920:	73fb      	strb	r3, [r7, #15]

  return status;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40022000 	.word	0x40022000
 8005930:	40021000 	.word	0x40021000
 8005934:	04c4b400 	.word	0x04c4b400
 8005938:	08009634 	.word	0x08009634
 800593c:	20004b0c 	.word	0x20004b0c
 8005940:	20004b10 	.word	0x20004b10

08005944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	; 0x24
 8005948:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	2300      	movs	r3, #0
 8005950:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005952:	4b3e      	ldr	r3, [pc, #248]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800595c:	4b3b      	ldr	r3, [pc, #236]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x108>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0303 	and.w	r3, r3, #3
 8005964:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <HAL_RCC_GetSysClockFreq+0x34>
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b0c      	cmp	r3, #12
 8005970:	d121      	bne.n	80059b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d11e      	bne.n	80059b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005978:	4b34      	ldr	r3, [pc, #208]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x108>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d107      	bne.n	8005994 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005984:	4b31      	ldr	r3, [pc, #196]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	e005      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005994:	4b2d      	ldr	r3, [pc, #180]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	091b      	lsrs	r3, r3, #4
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059a0:	4a2b      	ldr	r2, [pc, #172]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10d      	bne.n	80059cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059b4:	e00a      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d102      	bne.n	80059c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059bc:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x110>)
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	e004      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059c8:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x114>)
 80059ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	d134      	bne.n	8005a3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059d2:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x108>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d003      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0xa6>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d003      	beq.n	80059f0 <HAL_RCC_GetSysClockFreq+0xac>
 80059e8:	e005      	b.n	80059f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80059ea:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x110>)
 80059ec:	617b      	str	r3, [r7, #20]
      break;
 80059ee:	e005      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80059f0:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x114>)
 80059f2:	617b      	str	r3, [r7, #20]
      break;
 80059f4:	e002      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	617b      	str	r3, [r7, #20]
      break;
 80059fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059fc:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x108>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	3301      	adds	r3, #1
 8005a08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a0a:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	fb03 f202 	mul.w	r2, r3, r2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	0e5b      	lsrs	r3, r3, #25
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3724      	adds	r7, #36	; 0x24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	0800964c 	.word	0x0800964c
 8005a54:	00f42400 	.word	0x00f42400
 8005a58:	007a1200 	.word	0x007a1200

08005a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a60:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a62:	681b      	ldr	r3, [r3, #0]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20004b0c 	.word	0x20004b0c

08005a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a78:	f7ff fff0 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	4904      	ldr	r1, [pc, #16]	; (8005a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a8a:	5ccb      	ldrb	r3, [r1, r3]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	08009644 	.word	0x08009644

08005aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005aa4:	f7ff ffda 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	0adb      	lsrs	r3, r3, #11
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	4904      	ldr	r1, [pc, #16]	; (8005ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ab6:	5ccb      	ldrb	r3, [r1, r3]
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	08009644 	.word	0x08009644

08005acc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ae4:	f7ff f906 	bl	8004cf4 <HAL_PWREx_GetVoltageRange>
 8005ae8:	6178      	str	r0, [r7, #20]
 8005aea:	e014      	b.n	8005b16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005aec:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	4a21      	ldr	r2, [pc, #132]	; (8005b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af6:	6593      	str	r3, [r2, #88]	; 0x58
 8005af8:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b04:	f7ff f8f6 	bl	8004cf4 <HAL_PWREx_GetVoltageRange>
 8005b08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b0a:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0e:	4a1a      	ldr	r2, [pc, #104]	; (8005b78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b1c:	d10b      	bne.n	8005b36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d913      	bls.n	8005b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2ba0      	cmp	r3, #160	; 0xa0
 8005b28:	d902      	bls.n	8005b30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e00d      	b.n	8005b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b30:	2301      	movs	r3, #1
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	e00a      	b.n	8005b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b7f      	cmp	r3, #127	; 0x7f
 8005b3a:	d902      	bls.n	8005b42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	e004      	b.n	8005b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b70      	cmp	r3, #112	; 0x70
 8005b46:	d101      	bne.n	8005b4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b48:	2301      	movs	r3, #1
 8005b4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f023 020f 	bic.w	r2, r3, #15
 8005b54:	4909      	ldr	r1, [pc, #36]	; (8005b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b5c:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d001      	beq.n	8005b6e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	40022000 	.word	0x40022000

08005b80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b86:	4b2d      	ldr	r3, [pc, #180]	; (8005c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d00b      	beq.n	8005bae <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d825      	bhi.n	8005be8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d008      	beq.n	8005bb4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d11f      	bne.n	8005be8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005ba8:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005baa:	613b      	str	r3, [r7, #16]
    break;
 8005bac:	e01f      	b.n	8005bee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005bae:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005bb0:	613b      	str	r3, [r7, #16]
    break;
 8005bb2:	e01c      	b.n	8005bee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bb4:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d107      	bne.n	8005bd0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bc0:	4b1e      	ldr	r3, [pc, #120]	; (8005c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e005      	b.n	8005bdc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005bdc:	4a1a      	ldr	r2, [pc, #104]	; (8005c48 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be4:	613b      	str	r3, [r7, #16]
    break;
 8005be6:	e002      	b.n	8005bee <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	613b      	str	r3, [r7, #16]
    break;
 8005bec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005bfc:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	fb03 f202 	mul.w	r2, r3, r2
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c12:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c14:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	0e5b      	lsrs	r3, r3, #25
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005c2e:	683b      	ldr	r3, [r7, #0]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	00f42400 	.word	0x00f42400
 8005c44:	007a1200 	.word	0x007a1200
 8005c48:	0800964c 	.word	0x0800964c

08005c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c54:	2300      	movs	r3, #0
 8005c56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c58:	2300      	movs	r3, #0
 8005c5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d040      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6c:	2b80      	cmp	r3, #128	; 0x80
 8005c6e:	d02a      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c70:	2b80      	cmp	r3, #128	; 0x80
 8005c72:	d825      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c74:	2b60      	cmp	r3, #96	; 0x60
 8005c76:	d026      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c78:	2b60      	cmp	r3, #96	; 0x60
 8005c7a:	d821      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d006      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d81d      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d009      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d010      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005c8c:	e018      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c8e:	4b89      	ldr	r3, [pc, #548]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	4a88      	ldr	r2, [pc, #544]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c98:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c9a:	e015      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fb62 	bl	800636c <RCCEx_PLLSAI1_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cac:	e00c      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3320      	adds	r3, #32
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fc4d 	bl	8006554 <RCCEx_PLLSAI2_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cbe:	e003      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	74fb      	strb	r3, [r7, #19]
      break;
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc8:	7cfb      	ldrb	r3, [r7, #19]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cce:	4b79      	ldr	r3, [pc, #484]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cd4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cdc:	4975      	ldr	r1, [pc, #468]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005ce4:	e001      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce6:	7cfb      	ldrb	r3, [r7, #19]
 8005ce8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d047      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfe:	d030      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d04:	d82a      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d0a:	d02a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d10:	d824      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d16:	d008      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1c:	d81e      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d26:	d010      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d28:	e018      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d2a:	4b62      	ldr	r3, [pc, #392]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	4a61      	ldr	r2, [pc, #388]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d34:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d36:	e015      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fb14 	bl	800636c <RCCEx_PLLSAI1_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d48:	e00c      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3320      	adds	r3, #32
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fbff 	bl	8006554 <RCCEx_PLLSAI2_Config>
 8005d56:	4603      	mov	r3, r0
 8005d58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d5a:	e003      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	74fb      	strb	r3, [r7, #19]
      break;
 8005d60:	e000      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d6a:	4b52      	ldr	r3, [pc, #328]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	494e      	ldr	r1, [pc, #312]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005d80:	e001      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	7cfb      	ldrb	r3, [r7, #19]
 8005d84:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 809f 	beq.w	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d94:	2300      	movs	r3, #0
 8005d96:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d98:	4b46      	ldr	r3, [pc, #280]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005da8:	2300      	movs	r3, #0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dae:	4b41      	ldr	r3, [pc, #260]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db2:	4a40      	ldr	r2, [pc, #256]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db8:	6593      	str	r3, [r2, #88]	; 0x58
 8005dba:	4b3e      	ldr	r3, [pc, #248]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dca:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a3a      	ldr	r2, [pc, #232]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dd6:	f7fd f997 	bl	8003108 <HAL_GetTick>
 8005dda:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ddc:	e009      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dde:	f7fd f993 	bl	8003108 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d902      	bls.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	74fb      	strb	r3, [r7, #19]
        break;
 8005df0:	e005      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005df2:	4b31      	ldr	r3, [pc, #196]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0ef      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005dfe:	7cfb      	ldrb	r3, [r7, #19]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d15b      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e04:	4b2b      	ldr	r3, [pc, #172]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01f      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d019      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e22:	4b24      	ldr	r3, [pc, #144]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e2e:	4b21      	ldr	r3, [pc, #132]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e34:	4a1f      	ldr	r2, [pc, #124]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e3e:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e4e:	4a19      	ldr	r2, [pc, #100]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d016      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fd f952 	bl	8003108 <HAL_GetTick>
 8005e64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e66:	e00b      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e68:	f7fd f94e 	bl	8003108 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d902      	bls.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	74fb      	strb	r3, [r7, #19]
            break;
 8005e7e:	e006      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e80:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0ec      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005e8e:	7cfb      	ldrb	r3, [r7, #19]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10c      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ea4:	4903      	ldr	r1, [pc, #12]	; (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005eac:	e008      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005eae:	7cfb      	ldrb	r3, [r7, #19]
 8005eb0:	74bb      	strb	r3, [r7, #18]
 8005eb2:	e005      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebc:	7cfb      	ldrb	r3, [r7, #19]
 8005ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ec0:	7c7b      	ldrb	r3, [r7, #17]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d105      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec6:	4ba0      	ldr	r3, [pc, #640]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eca:	4a9f      	ldr	r2, [pc, #636]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ede:	4b9a      	ldr	r3, [pc, #616]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	f023 0203 	bic.w	r2, r3, #3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eec:	4996      	ldr	r1, [pc, #600]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f00:	4b91      	ldr	r3, [pc, #580]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f06:	f023 020c 	bic.w	r2, r3, #12
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	498e      	ldr	r1, [pc, #568]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f22:	4b89      	ldr	r3, [pc, #548]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	4985      	ldr	r1, [pc, #532]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f44:	4b80      	ldr	r3, [pc, #512]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f52:	497d      	ldr	r1, [pc, #500]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f66:	4b78      	ldr	r3, [pc, #480]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f74:	4974      	ldr	r1, [pc, #464]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f88:	4b6f      	ldr	r3, [pc, #444]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f96:	496c      	ldr	r1, [pc, #432]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005faa:	4b67      	ldr	r3, [pc, #412]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb8:	4963      	ldr	r1, [pc, #396]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fcc:	4b5e      	ldr	r3, [pc, #376]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fda:	495b      	ldr	r1, [pc, #364]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fee:	4b56      	ldr	r3, [pc, #344]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffc:	4952      	ldr	r1, [pc, #328]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006010:	4b4d      	ldr	r3, [pc, #308]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	494a      	ldr	r1, [pc, #296]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006032:	4b45      	ldr	r3, [pc, #276]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006040:	4941      	ldr	r1, [pc, #260]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006054:	4b3c      	ldr	r3, [pc, #240]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800605a:	f023 0203 	bic.w	r2, r3, #3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006062:	4939      	ldr	r1, [pc, #228]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d028      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006076:	4b34      	ldr	r3, [pc, #208]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006084:	4930      	ldr	r1, [pc, #192]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006094:	d106      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006096:	4b2c      	ldr	r3, [pc, #176]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800609c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a0:	60d3      	str	r3, [r2, #12]
 80060a2:	e011      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060ac:	d10c      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3304      	adds	r3, #4
 80060b2:	2101      	movs	r1, #1
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 f959 	bl	800636c <RCCEx_PLLSAI1_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060be:	7cfb      	ldrb	r3, [r7, #19]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80060c4:	7cfb      	ldrb	r3, [r7, #19]
 80060c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d04d      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060dc:	d108      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060e4:	4a18      	ldr	r2, [pc, #96]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80060ee:	e012      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80060f0:	4b15      	ldr	r3, [pc, #84]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060f6:	4a14      	ldr	r2, [pc, #80]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006100:	4b11      	ldr	r3, [pc, #68]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006106:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800610e:	490e      	ldr	r1, [pc, #56]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800611a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800611e:	d106      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	4a08      	ldr	r2, [pc, #32]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800612a:	60d3      	str	r3, [r2, #12]
 800612c:	e020      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006136:	d109      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4a02      	ldr	r2, [pc, #8]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006142:	60d3      	str	r3, [r2, #12]
 8006144:	e014      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006154:	d10c      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	2101      	movs	r1, #1
 800615c:	4618      	mov	r0, r3
 800615e:	f000 f905 	bl	800636c <RCCEx_PLLSAI1_Config>
 8006162:	4603      	mov	r3, r0
 8006164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006166:	7cfb      	ldrb	r3, [r7, #19]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800616c:	7cfb      	ldrb	r3, [r7, #19]
 800616e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d028      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800617c:	4b7a      	ldr	r3, [pc, #488]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618a:	4977      	ldr	r1, [pc, #476]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800619a:	d106      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800619c:	4b72      	ldr	r3, [pc, #456]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a71      	ldr	r2, [pc, #452]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a6:	60d3      	str	r3, [r2, #12]
 80061a8:	e011      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061b2:	d10c      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f8d6 	bl	800636c <RCCEx_PLLSAI1_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061c4:	7cfb      	ldrb	r3, [r7, #19]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80061ca:	7cfb      	ldrb	r3, [r7, #19]
 80061cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01e      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061da:	4b63      	ldr	r3, [pc, #396]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ea:	495f      	ldr	r1, [pc, #380]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061fc:	d10c      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3304      	adds	r3, #4
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 f8b1 	bl	800636c <RCCEx_PLLSAI1_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006214:	7cfb      	ldrb	r3, [r7, #19]
 8006216:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006224:	4b50      	ldr	r3, [pc, #320]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006226:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800622a:	f023 0204 	bic.w	r2, r3, #4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006234:	494c      	ldr	r1, [pc, #304]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006248:	4b47      	ldr	r3, [pc, #284]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800624a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800624e:	f023 0218 	bic.w	r2, r3, #24
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	4943      	ldr	r1, [pc, #268]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d035      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800626c:	4b3e      	ldr	r3, [pc, #248]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3d      	ldr	r2, [pc, #244]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006278:	f7fc ff46 	bl	8003108 <HAL_GetTick>
 800627c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800627e:	e009      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006280:	f7fc ff42 	bl	8003108 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d902      	bls.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	74fb      	strb	r3, [r7, #19]
        break;
 8006292:	e005      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006294:	4b34      	ldr	r3, [pc, #208]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1ef      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80062a0:	7cfb      	ldrb	r3, [r7, #19]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d113      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80062a6:	4b30      	ldr	r3, [pc, #192]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b6:	492c      	ldr	r1, [pc, #176]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3320      	adds	r3, #32
 80062c2:	2102      	movs	r1, #2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 f945 	bl	8006554 <RCCEx_PLLSAI2_Config>
 80062ca:	4603      	mov	r3, r0
 80062cc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80062ce:	7cfb      	ldrb	r3, [r7, #19]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80062d4:	7cfb      	ldrb	r3, [r7, #19]
 80062d6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01e      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80062e4:	4b20      	ldr	r3, [pc, #128]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f4:	491c      	ldr	r1, [pc, #112]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006306:	d10c      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3320      	adds	r3, #32
 800630c:	2101      	movs	r1, #1
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f920 	bl	8006554 <RCCEx_PLLSAI2_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006318:	7cfb      	ldrb	r3, [r7, #19]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800631e:	7cfb      	ldrb	r3, [r7, #19]
 8006320:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d017      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800632e:	4b0e      	ldr	r3, [pc, #56]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006330:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800633e:	490a      	ldr	r1, [pc, #40]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006340:	4313      	orrs	r3, r2
 8006342:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800634c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006350:	d105      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006352:	4b05      	ldr	r3, [pc, #20]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	4a04      	ldr	r2, [pc, #16]	; (8006368 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800635c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800635e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	40021000 	.word	0x40021000

0800636c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800637a:	4b72      	ldr	r3, [pc, #456]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00e      	beq.n	80063a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006386:	4b6f      	ldr	r3, [pc, #444]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0203 	and.w	r2, r3, #3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d103      	bne.n	800639e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
       ||
 800639a:	2b00      	cmp	r3, #0
 800639c:	d142      	bne.n	8006424 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	73fb      	strb	r3, [r7, #15]
 80063a2:	e03f      	b.n	8006424 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d018      	beq.n	80063de <RCCEx_PLLSAI1_Config+0x72>
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d825      	bhi.n	80063fc <RCCEx_PLLSAI1_Config+0x90>
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d002      	beq.n	80063ba <RCCEx_PLLSAI1_Config+0x4e>
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d009      	beq.n	80063cc <RCCEx_PLLSAI1_Config+0x60>
 80063b8:	e020      	b.n	80063fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063ba:	4b62      	ldr	r3, [pc, #392]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d11d      	bne.n	8006402 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063ca:	e01a      	b.n	8006402 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063cc:	4b5d      	ldr	r3, [pc, #372]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d116      	bne.n	8006406 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063dc:	e013      	b.n	8006406 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063de:	4b59      	ldr	r3, [pc, #356]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10f      	bne.n	800640a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063ea:	4b56      	ldr	r3, [pc, #344]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063fa:	e006      	b.n	800640a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006400:	e004      	b.n	800640c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800640a:	bf00      	nop
    }

    if(status == HAL_OK)
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d108      	bne.n	8006424 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006412:	4b4c      	ldr	r3, [pc, #304]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f023 0203 	bic.w	r2, r3, #3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4949      	ldr	r1, [pc, #292]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006420:	4313      	orrs	r3, r2
 8006422:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f040 8086 	bne.w	8006538 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800642c:	4b45      	ldr	r3, [pc, #276]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a44      	ldr	r2, [pc, #272]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006438:	f7fc fe66 	bl	8003108 <HAL_GetTick>
 800643c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800643e:	e009      	b.n	8006454 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006440:	f7fc fe62 	bl	8003108 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d902      	bls.n	8006454 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	73fb      	strb	r3, [r7, #15]
        break;
 8006452:	e005      	b.n	8006460 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006454:	4b3b      	ldr	r3, [pc, #236]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ef      	bne.n	8006440 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d168      	bne.n	8006538 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d113      	bne.n	8006494 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800646c:	4b35      	ldr	r3, [pc, #212]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	4b35      	ldr	r3, [pc, #212]	; (8006548 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006472:	4013      	ands	r3, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6892      	ldr	r2, [r2, #8]
 8006478:	0211      	lsls	r1, r2, #8
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	68d2      	ldr	r2, [r2, #12]
 800647e:	06d2      	lsls	r2, r2, #27
 8006480:	4311      	orrs	r1, r2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6852      	ldr	r2, [r2, #4]
 8006486:	3a01      	subs	r2, #1
 8006488:	0112      	lsls	r2, r2, #4
 800648a:	430a      	orrs	r2, r1
 800648c:	492d      	ldr	r1, [pc, #180]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 800648e:	4313      	orrs	r3, r2
 8006490:	610b      	str	r3, [r1, #16]
 8006492:	e02d      	b.n	80064f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d115      	bne.n	80064c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800649a:	4b2a      	ldr	r3, [pc, #168]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	4b2b      	ldr	r3, [pc, #172]	; (800654c <RCCEx_PLLSAI1_Config+0x1e0>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6892      	ldr	r2, [r2, #8]
 80064a6:	0211      	lsls	r1, r2, #8
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6912      	ldr	r2, [r2, #16]
 80064ac:	0852      	lsrs	r2, r2, #1
 80064ae:	3a01      	subs	r2, #1
 80064b0:	0552      	lsls	r2, r2, #21
 80064b2:	4311      	orrs	r1, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6852      	ldr	r2, [r2, #4]
 80064b8:	3a01      	subs	r2, #1
 80064ba:	0112      	lsls	r2, r2, #4
 80064bc:	430a      	orrs	r2, r1
 80064be:	4921      	ldr	r1, [pc, #132]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	610b      	str	r3, [r1, #16]
 80064c4:	e014      	b.n	80064f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064c6:	4b1f      	ldr	r3, [pc, #124]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	4b21      	ldr	r3, [pc, #132]	; (8006550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6892      	ldr	r2, [r2, #8]
 80064d2:	0211      	lsls	r1, r2, #8
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6952      	ldr	r2, [r2, #20]
 80064d8:	0852      	lsrs	r2, r2, #1
 80064da:	3a01      	subs	r2, #1
 80064dc:	0652      	lsls	r2, r2, #25
 80064de:	4311      	orrs	r1, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	3a01      	subs	r2, #1
 80064e6:	0112      	lsls	r2, r2, #4
 80064e8:	430a      	orrs	r2, r1
 80064ea:	4916      	ldr	r1, [pc, #88]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064f0:	4b14      	ldr	r3, [pc, #80]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a13      	ldr	r2, [pc, #76]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fc:	f7fc fe04 	bl	8003108 <HAL_GetTick>
 8006500:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006502:	e009      	b.n	8006518 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006504:	f7fc fe00 	bl	8003108 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d902      	bls.n	8006518 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	73fb      	strb	r3, [r7, #15]
          break;
 8006516:	e005      	b.n	8006524 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0ef      	beq.n	8006504 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	4904      	ldr	r1, [pc, #16]	; (8006544 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40021000 	.word	0x40021000
 8006548:	07ff800f 	.word	0x07ff800f
 800654c:	ff9f800f 	.word	0xff9f800f
 8006550:	f9ff800f 	.word	0xf9ff800f

08006554 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006562:	4b72      	ldr	r3, [pc, #456]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00e      	beq.n	800658c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800656e:	4b6f      	ldr	r3, [pc, #444]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f003 0203 	and.w	r2, r3, #3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d103      	bne.n	8006586 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
       ||
 8006582:	2b00      	cmp	r3, #0
 8006584:	d142      	bne.n	800660c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	73fb      	strb	r3, [r7, #15]
 800658a:	e03f      	b.n	800660c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b03      	cmp	r3, #3
 8006592:	d018      	beq.n	80065c6 <RCCEx_PLLSAI2_Config+0x72>
 8006594:	2b03      	cmp	r3, #3
 8006596:	d825      	bhi.n	80065e4 <RCCEx_PLLSAI2_Config+0x90>
 8006598:	2b01      	cmp	r3, #1
 800659a:	d002      	beq.n	80065a2 <RCCEx_PLLSAI2_Config+0x4e>
 800659c:	2b02      	cmp	r3, #2
 800659e:	d009      	beq.n	80065b4 <RCCEx_PLLSAI2_Config+0x60>
 80065a0:	e020      	b.n	80065e4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065a2:	4b62      	ldr	r3, [pc, #392]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d11d      	bne.n	80065ea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065b2:	e01a      	b.n	80065ea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065b4:	4b5d      	ldr	r3, [pc, #372]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d116      	bne.n	80065ee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065c4:	e013      	b.n	80065ee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065c6:	4b59      	ldr	r3, [pc, #356]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10f      	bne.n	80065f2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065d2:	4b56      	ldr	r3, [pc, #344]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065e2:	e006      	b.n	80065f2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	73fb      	strb	r3, [r7, #15]
      break;
 80065e8:	e004      	b.n	80065f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80065ea:	bf00      	nop
 80065ec:	e002      	b.n	80065f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80065f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d108      	bne.n	800660c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80065fa:	4b4c      	ldr	r3, [pc, #304]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f023 0203 	bic.w	r2, r3, #3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4949      	ldr	r1, [pc, #292]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006608:	4313      	orrs	r3, r2
 800660a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f040 8086 	bne.w	8006720 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006614:	4b45      	ldr	r3, [pc, #276]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a44      	ldr	r2, [pc, #272]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 800661a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800661e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006620:	f7fc fd72 	bl	8003108 <HAL_GetTick>
 8006624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006626:	e009      	b.n	800663c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006628:	f7fc fd6e 	bl	8003108 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d902      	bls.n	800663c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	73fb      	strb	r3, [r7, #15]
        break;
 800663a:	e005      	b.n	8006648 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800663c:	4b3b      	ldr	r3, [pc, #236]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1ef      	bne.n	8006628 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d168      	bne.n	8006720 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d113      	bne.n	800667c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006654:	4b35      	ldr	r3, [pc, #212]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006656:	695a      	ldr	r2, [r3, #20]
 8006658:	4b35      	ldr	r3, [pc, #212]	; (8006730 <RCCEx_PLLSAI2_Config+0x1dc>)
 800665a:	4013      	ands	r3, r2
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6892      	ldr	r2, [r2, #8]
 8006660:	0211      	lsls	r1, r2, #8
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68d2      	ldr	r2, [r2, #12]
 8006666:	06d2      	lsls	r2, r2, #27
 8006668:	4311      	orrs	r1, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6852      	ldr	r2, [r2, #4]
 800666e:	3a01      	subs	r2, #1
 8006670:	0112      	lsls	r2, r2, #4
 8006672:	430a      	orrs	r2, r1
 8006674:	492d      	ldr	r1, [pc, #180]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006676:	4313      	orrs	r3, r2
 8006678:	614b      	str	r3, [r1, #20]
 800667a:	e02d      	b.n	80066d8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d115      	bne.n	80066ae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006682:	4b2a      	ldr	r3, [pc, #168]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006684:	695a      	ldr	r2, [r3, #20]
 8006686:	4b2b      	ldr	r3, [pc, #172]	; (8006734 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006688:	4013      	ands	r3, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6892      	ldr	r2, [r2, #8]
 800668e:	0211      	lsls	r1, r2, #8
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6912      	ldr	r2, [r2, #16]
 8006694:	0852      	lsrs	r2, r2, #1
 8006696:	3a01      	subs	r2, #1
 8006698:	0552      	lsls	r2, r2, #21
 800669a:	4311      	orrs	r1, r2
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6852      	ldr	r2, [r2, #4]
 80066a0:	3a01      	subs	r2, #1
 80066a2:	0112      	lsls	r2, r2, #4
 80066a4:	430a      	orrs	r2, r1
 80066a6:	4921      	ldr	r1, [pc, #132]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	614b      	str	r3, [r1, #20]
 80066ac:	e014      	b.n	80066d8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066ae:	4b1f      	ldr	r3, [pc, #124]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b0:	695a      	ldr	r2, [r3, #20]
 80066b2:	4b21      	ldr	r3, [pc, #132]	; (8006738 <RCCEx_PLLSAI2_Config+0x1e4>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6892      	ldr	r2, [r2, #8]
 80066ba:	0211      	lsls	r1, r2, #8
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6952      	ldr	r2, [r2, #20]
 80066c0:	0852      	lsrs	r2, r2, #1
 80066c2:	3a01      	subs	r2, #1
 80066c4:	0652      	lsls	r2, r2, #25
 80066c6:	4311      	orrs	r1, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6852      	ldr	r2, [r2, #4]
 80066cc:	3a01      	subs	r2, #1
 80066ce:	0112      	lsls	r2, r2, #4
 80066d0:	430a      	orrs	r2, r1
 80066d2:	4916      	ldr	r1, [pc, #88]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80066d8:	4b14      	ldr	r3, [pc, #80]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a13      	ldr	r2, [pc, #76]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e4:	f7fc fd10 	bl	8003108 <HAL_GetTick>
 80066e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066ea:	e009      	b.n	8006700 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066ec:	f7fc fd0c 	bl	8003108 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d902      	bls.n	8006700 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	73fb      	strb	r3, [r7, #15]
          break;
 80066fe:	e005      	b.n	800670c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0ef      	beq.n	80066ec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006712:	4b06      	ldr	r3, [pc, #24]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006714:	695a      	ldr	r2, [r3, #20]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	4904      	ldr	r1, [pc, #16]	; (800672c <RCCEx_PLLSAI2_Config+0x1d8>)
 800671c:	4313      	orrs	r3, r2
 800671e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40021000 	.word	0x40021000
 8006730:	07ff800f 	.word	0x07ff800f
 8006734:	ff9f800f 	.word	0xff9f800f
 8006738:	f9ff800f 	.word	0xf9ff800f

0800673c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e095      	b.n	800687a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	2b00      	cmp	r3, #0
 8006754:	d108      	bne.n	8006768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800675e:	d009      	beq.n	8006774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	61da      	str	r2, [r3, #28]
 8006766:	e005      	b.n	8006774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fc fa18 	bl	8002bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067b4:	d902      	bls.n	80067bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	e002      	b.n	80067c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80067ca:	d007      	beq.n	80067dc <HAL_SPI_Init+0xa0>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067d4:	d002      	beq.n	80067dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	ea42 0103 	orr.w	r1, r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006826:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	0c1b      	lsrs	r3, r3, #16
 8006838:	f003 0204 	and.w	r2, r3, #4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006858:	ea42 0103 	orr.w	r1, r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b088      	sub	sp, #32
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_SPI_Transmit+0x22>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e15f      	b.n	8006b64 <HAL_SPI_Transmit+0x2e2>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068ac:	f7fc fc2c 	bl	8003108 <HAL_GetTick>
 80068b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d002      	beq.n	80068c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
 80068c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068c6:	e148      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_SPI_Transmit+0x52>
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068d8:	e13f      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2203      	movs	r2, #3
 80068de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006924:	d10f      	bne.n	8006946 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006934:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006944:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006950:	2b40      	cmp	r3, #64	; 0x40
 8006952:	d007      	beq.n	8006964 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800696c:	d94f      	bls.n	8006a0e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_SPI_Transmit+0xfa>
 8006976:	8afb      	ldrh	r3, [r7, #22]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d142      	bne.n	8006a02 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	881a      	ldrh	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	1c9a      	adds	r2, r3, #2
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069a0:	e02f      	b.n	8006a02 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d112      	bne.n	80069d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	881a      	ldrh	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d4:	e015      	b.n	8006a02 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d6:	f7fc fb97 	bl	8003108 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d803      	bhi.n	80069ee <HAL_SPI_Transmit+0x16c>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d102      	bne.n	80069f4 <HAL_SPI_Transmit+0x172>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006a00:	e0ab      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1ca      	bne.n	80069a2 <HAL_SPI_Transmit+0x120>
 8006a0c:	e080      	b.n	8006b10 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_SPI_Transmit+0x19a>
 8006a16:	8afb      	ldrh	r3, [r7, #22]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d174      	bne.n	8006b06 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d912      	bls.n	8006a4c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	1c9a      	adds	r2, r3, #2
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b02      	subs	r3, #2
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a4a:	e05c      	b.n	8006b06 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	7812      	ldrb	r2, [r2, #0]
 8006a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a72:	e048      	b.n	8006b06 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d12b      	bne.n	8006ada <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d912      	bls.n	8006ab2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	881a      	ldrh	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	1c9a      	adds	r2, r3, #2
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b02      	subs	r3, #2
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ab0:	e029      	b.n	8006b06 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	7812      	ldrb	r2, [r2, #0]
 8006abe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ad8:	e015      	b.n	8006b06 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ada:	f7fc fb15 	bl	8003108 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d803      	bhi.n	8006af2 <HAL_SPI_Transmit+0x270>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d102      	bne.n	8006af8 <HAL_SPI_Transmit+0x276>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006b04:	e029      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1b1      	bne.n	8006a74 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f001 f8cb 	bl	8007cb0 <SPI_EndRxTxTransaction>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e003      	b.n	8006b5a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3720      	adds	r7, #32
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d002      	beq.n	8006b92 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b90:	e11a      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b9a:	d112      	bne.n	8006bc2 <HAL_SPI_Receive+0x56>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10e      	bne.n	8006bc2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bac:	88fa      	ldrh	r2, [r7, #6]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f90e 	bl	8006dda <HAL_SPI_TransmitReceive>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	e107      	b.n	8006dd2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_SPI_Receive+0x64>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e100      	b.n	8006dd2 <HAL_SPI_Receive+0x266>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bd8:	f7fc fa96 	bl	8003108 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_SPI_Receive+0x7e>
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d102      	bne.n	8006bf0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bee:	e0eb      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c3a:	d908      	bls.n	8006c4e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	e007      	b.n	8006c5e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c5c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c66:	d10f      	bne.n	8006c88 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d007      	beq.n	8006ca6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ca4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cae:	d86f      	bhi.n	8006d90 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cb0:	e034      	b.n	8006d1c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d117      	bne.n	8006cf0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f103 020c 	add.w	r2, r3, #12
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	7812      	ldrb	r2, [r2, #0]
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006cee:	e015      	b.n	8006d1c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf0:	f7fc fa0a 	bl	8003108 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d803      	bhi.n	8006d08 <HAL_SPI_Receive+0x19c>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d102      	bne.n	8006d0e <HAL_SPI_Receive+0x1a2>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d1a:	e055      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1c4      	bne.n	8006cb2 <HAL_SPI_Receive+0x146>
 8006d28:	e038      	b.n	8006d9c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d115      	bne.n	8006d64 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	b292      	uxth	r2, r2
 8006d44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	1c9a      	adds	r2, r3, #2
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d62:	e015      	b.n	8006d90 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d64:	f7fc f9d0 	bl	8003108 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d803      	bhi.n	8006d7c <HAL_SPI_Receive+0x210>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_Receive+0x216>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d8e:	e01b      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1c6      	bne.n	8006d2a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 ff2d 	bl	8007c00 <SPI_EndRxTransaction>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
 8006dbe:	e003      	b.n	8006dc8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b08a      	sub	sp, #40	; 0x28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006de8:	2301      	movs	r3, #1
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_SPI_TransmitReceive+0x26>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e20a      	b.n	8007216 <HAL_SPI_TransmitReceive+0x43c>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e08:	f7fc f97e 	bl	8003108 <HAL_GetTick>
 8006e0c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e14:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e1c:	887b      	ldrh	r3, [r7, #2]
 8006e1e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e20:	887b      	ldrh	r3, [r7, #2]
 8006e22:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e24:	7efb      	ldrb	r3, [r7, #27]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d00e      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x6e>
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e30:	d106      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x66>
 8006e3a:	7efb      	ldrb	r3, [r7, #27]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d003      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e40:	2302      	movs	r3, #2
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e46:	e1e0      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_SPI_TransmitReceive+0x80>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_SPI_TransmitReceive+0x80>
 8006e54:	887b      	ldrh	r3, [r7, #2]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e60:	e1d3      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d003      	beq.n	8006e76 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2205      	movs	r2, #5
 8006e72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	887a      	ldrh	r2, [r7, #2]
 8006e86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	887a      	ldrh	r2, [r7, #2]
 8006e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	887a      	ldrh	r2, [r7, #2]
 8006e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	887a      	ldrh	r2, [r7, #2]
 8006ea2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eb8:	d802      	bhi.n	8006ec0 <HAL_SPI_TransmitReceive+0xe6>
 8006eba:	8a3b      	ldrh	r3, [r7, #16]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d908      	bls.n	8006ed2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ece:	605a      	str	r2, [r3, #4]
 8006ed0:	e007      	b.n	8006ee2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ee0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d007      	beq.n	8006f00 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006efe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f08:	f240 8081 	bls.w	800700e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_SPI_TransmitReceive+0x140>
 8006f14:	8a7b      	ldrh	r3, [r7, #18]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d16d      	bne.n	8006ff6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	881a      	ldrh	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	1c9a      	adds	r2, r3, #2
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f3e:	e05a      	b.n	8006ff6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d11b      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x1ac>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d016      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x1ac>
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d113      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	881a      	ldrh	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	1c9a      	adds	r2, r3, #2
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d11c      	bne.n	8006fce <HAL_SPI_TransmitReceive+0x1f4>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d016      	beq.n	8006fce <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	b292      	uxth	r2, r2
 8006fac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	1c9a      	adds	r2, r3, #2
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fce:	f7fc f89b 	bl	8003108 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d80b      	bhi.n	8006ff6 <HAL_SPI_TransmitReceive+0x21c>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d007      	beq.n	8006ff6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006ff4:	e109      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d19f      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x166>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d199      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x166>
 800700c:	e0e3      	b.n	80071d6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_SPI_TransmitReceive+0x244>
 8007016:	8a7b      	ldrh	r3, [r7, #18]
 8007018:	2b01      	cmp	r3, #1
 800701a:	f040 80cf 	bne.w	80071bc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d912      	bls.n	800704e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	881a      	ldrh	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007038:	1c9a      	adds	r2, r3, #2
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b02      	subs	r3, #2
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800704c:	e0b6      	b.n	80071bc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	7812      	ldrb	r2, [r2, #0]
 800705a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007074:	e0a2      	b.n	80071bc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b02      	cmp	r3, #2
 8007082:	d134      	bne.n	80070ee <HAL_SPI_TransmitReceive+0x314>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d02f      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x314>
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	2b01      	cmp	r3, #1
 8007092:	d12c      	bne.n	80070ee <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b01      	cmp	r3, #1
 800709c:	d912      	bls.n	80070c4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	881a      	ldrh	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	1c9a      	adds	r2, r3, #2
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b02      	subs	r3, #2
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070c2:	e012      	b.n	80070ea <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	7812      	ldrb	r2, [r2, #0]
 80070d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d148      	bne.n	800718e <HAL_SPI_TransmitReceive+0x3b4>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d042      	beq.n	800718e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d923      	bls.n	800715c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	b292      	uxth	r2, r2
 8007120:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	1c9a      	adds	r2, r3, #2
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b02      	subs	r3, #2
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b01      	cmp	r3, #1
 8007148:	d81f      	bhi.n	800718a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007158:	605a      	str	r2, [r3, #4]
 800715a:	e016      	b.n	800718a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f103 020c 	add.w	r2, r3, #12
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	7812      	ldrb	r2, [r2, #0]
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800718a:	2301      	movs	r3, #1
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800718e:	f7fb ffbb 	bl	8003108 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719a:	429a      	cmp	r2, r3
 800719c:	d803      	bhi.n	80071a6 <HAL_SPI_TransmitReceive+0x3cc>
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a4:	d102      	bne.n	80071ac <HAL_SPI_TransmitReceive+0x3d2>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d107      	bne.n	80071bc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80071ba:	e026      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f47f af57 	bne.w	8007076 <HAL_SPI_TransmitReceive+0x29c>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f47f af50 	bne.w	8007076 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 fd68 	bl	8007cb0 <SPI_EndRxTxTransaction>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007200:	e003      	b.n	800720a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007216:	4618      	mov	r0, r3
 8007218:	3728      	adds	r7, #40	; 0x28
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b01      	cmp	r3, #1
 800723c:	d002      	beq.n	8007244 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800723e:	2302      	movs	r3, #2
 8007240:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007242:	e092      	b.n	800736a <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d110      	bne.n	800726e <HAL_SPI_Receive_IT+0x4e>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007254:	d10b      	bne.n	800726e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2204      	movs	r2, #4
 800725a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f889 	bl	800737c <HAL_SPI_TransmitReceive_IT>
 800726a:	4603      	mov	r3, r0
 800726c:	e07e      	b.n	800736c <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <HAL_SPI_Receive_IT+0x5a>
 8007274:	88fb      	ldrh	r3, [r7, #6]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d102      	bne.n	8007280 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800727e:	e074      	b.n	800736a <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_SPI_Receive_IT+0x6e>
 800728a:	2302      	movs	r3, #2
 800728c:	e06e      	b.n	800736c <HAL_SPI_Receive_IT+0x14c>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2204      	movs	r2, #4
 800729a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	88fa      	ldrh	r2, [r7, #6]
 80072ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072da:	d90b      	bls.n	80072f4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072ea:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4a21      	ldr	r2, [pc, #132]	; (8007374 <HAL_SPI_Receive_IT+0x154>)
 80072f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80072f2:	e00a      	b.n	800730a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007302:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a1c      	ldr	r2, [pc, #112]	; (8007378 <HAL_SPI_Receive_IT+0x158>)
 8007308:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007312:	d10f      	bne.n	8007334 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007322:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007332:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d007      	beq.n	8007352 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007350:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007368:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	08007979 	.word	0x08007979
 8007378:	08007929 	.word	0x08007929

0800737c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007394:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800739c:	7dbb      	ldrb	r3, [r7, #22]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d00d      	beq.n	80073be <HAL_SPI_TransmitReceive_IT+0x42>
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073a8:	d106      	bne.n	80073b8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <HAL_SPI_TransmitReceive_IT+0x3c>
 80073b2:	7dbb      	ldrb	r3, [r7, #22]
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d002      	beq.n	80073be <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80073b8:	2302      	movs	r3, #2
 80073ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073bc:	e07d      	b.n	80074ba <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <HAL_SPI_TransmitReceive_IT+0x54>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <HAL_SPI_TransmitReceive_IT+0x54>
 80073ca:	887b      	ldrh	r3, [r7, #2]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073d4:	e071      	b.n	80074ba <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_SPI_TransmitReceive_IT+0x68>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e06b      	b.n	80074bc <HAL_SPI_TransmitReceive_IT+0x140>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d003      	beq.n	8007400 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2205      	movs	r2, #5
 80073fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	887a      	ldrh	r2, [r7, #2]
 8007410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	887a      	ldrh	r2, [r7, #2]
 8007416:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	887a      	ldrh	r2, [r7, #2]
 8007422:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	887a      	ldrh	r2, [r7, #2]
 800742a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007436:	d906      	bls.n	8007446 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a23      	ldr	r2, [pc, #140]	; (80074c8 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800743c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4a22      	ldr	r2, [pc, #136]	; (80074cc <HAL_SPI_TransmitReceive_IT+0x150>)
 8007442:	651a      	str	r2, [r3, #80]	; 0x50
 8007444:	e005      	b.n	8007452 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4a21      	ldr	r2, [pc, #132]	; (80074d0 <HAL_SPI_TransmitReceive_IT+0x154>)
 800744a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4a21      	ldr	r2, [pc, #132]	; (80074d4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007450:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800745a:	d802      	bhi.n	8007462 <HAL_SPI_TransmitReceive_IT+0xe6>
 800745c:	887b      	ldrh	r3, [r7, #2]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d908      	bls.n	8007474 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007470:	605a      	str	r2, [r3, #4]
 8007472:	e007      	b.n	8007484 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007482:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d007      	beq.n	80074a2 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80074b8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	08007863 	.word	0x08007863
 80074cc:	080078c9 	.word	0x080078c9
 80074d0:	08007713 	.word	0x08007713
 80074d4:	080077d1 	.word	0x080077d1

080074d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10e      	bne.n	8007518 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
    return;
 8007516:	e0ce      	b.n	80076b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <HAL_SPI_IRQHandler+0x5e>
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
    return;
 8007534:	e0bf      	b.n	80076b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f003 0320 	and.w	r3, r3, #32
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <HAL_SPI_IRQHandler+0x7e>
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d105      	bne.n	8007556 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80b0 	beq.w	80076b6 <HAL_SPI_IRQHandler+0x1de>
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80aa 	beq.w	80076b6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d023      	beq.n	80075b4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b03      	cmp	r3, #3
 8007576:	d011      	beq.n	800759c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757c:	f043 0204 	orr.w	r2, r3, #4
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	e00b      	b.n	80075b4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800759c:	2300      	movs	r3, #0
 800759e:	613b      	str	r3, [r7, #16]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	613b      	str	r3, [r7, #16]
 80075b0:	693b      	ldr	r3, [r7, #16]
        return;
 80075b2:	e080      	b.n	80076b6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d014      	beq.n	80075e8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c2:	f043 0201 	orr.w	r2, r3, #1
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00c      	beq.n	800760c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f6:	f043 0208 	orr.w	r2, r3, #8
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075fe:	2300      	movs	r3, #0
 8007600:	60bb      	str	r3, [r7, #8]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	60bb      	str	r3, [r7, #8]
 800760a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007610:	2b00      	cmp	r3, #0
 8007612:	d04f      	beq.n	80076b4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007622:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d104      	bne.n	8007640 <HAL_SPI_IRQHandler+0x168>
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d034      	beq.n	80076aa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0203 	bic.w	r2, r2, #3
 800764e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007654:	2b00      	cmp	r3, #0
 8007656:	d011      	beq.n	800767c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800765c:	4a17      	ldr	r2, [pc, #92]	; (80076bc <HAL_SPI_IRQHandler+0x1e4>)
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007664:	4618      	mov	r0, r3
 8007666:	f7fb fe90 	bl	800338a <HAL_DMA_Abort_IT>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007674:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007680:	2b00      	cmp	r3, #0
 8007682:	d016      	beq.n	80076b2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007688:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <HAL_SPI_IRQHandler+0x1e4>)
 800768a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007690:	4618      	mov	r0, r3
 8007692:	f7fb fe7a 	bl	800338a <HAL_DMA_Abort_IT>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80076a8:	e003      	b.n	80076b2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f812 	bl	80076d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80076b0:	e000      	b.n	80076b4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80076b2:	bf00      	nop
    return;
 80076b4:	bf00      	nop
  }
}
 80076b6:	3720      	adds	r7, #32
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	080076e9 	.word	0x080076e9

080076c0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f7ff ffe5 	bl	80076d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007720:	b29b      	uxth	r3, r3
 8007722:	2b01      	cmp	r3, #1
 8007724:	d923      	bls.n	800776e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	b292      	uxth	r2, r2
 8007732:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	1c9a      	adds	r2, r3, #2
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b02      	subs	r3, #2
 8007748:	b29a      	uxth	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007756:	b29b      	uxth	r3, r3
 8007758:	2b01      	cmp	r3, #1
 800775a:	d11f      	bne.n	800779c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800776a:	605a      	str	r2, [r3, #4]
 800776c:	e016      	b.n	800779c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f103 020c 	add.w	r2, r3, #12
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10f      	bne.n	80077c8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80077b6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 faba 	bl	8007d3c <SPI_CloseRxTx_ISR>
    }
  }
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d912      	bls.n	8007808 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	881a      	ldrh	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	1c9a      	adds	r2, r3, #2
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	3b02      	subs	r3, #2
 8007800:	b29a      	uxth	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007806:	e012      	b.n	800782e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d110      	bne.n	800785a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007846:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d102      	bne.n	800785a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fa71 	bl	8007d3c <SPI_CloseRxTx_ISR>
    }
  }
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	b292      	uxth	r2, r2
 8007876:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	1c9a      	adds	r2, r3, #2
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29a      	uxth	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10f      	bne.n	80078c0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa3e 	bl	8007d3c <SPI_CloseRxTx_ISR>
    }
  }
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	881a      	ldrh	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	1c9a      	adds	r2, r3, #2
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d110      	bne.n	8007920 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800790c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d102      	bne.n	8007920 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fa0e 	bl	8007d3c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f103 020c 	add.w	r2, r3, #12
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	7812      	ldrb	r2, [r2, #0]
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d102      	bne.n	8007970 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa28 	bl	8007dc0 <SPI_CloseRx_ISR>
  }
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	b292      	uxth	r2, r2
 800798c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	1c9a      	adds	r2, r3, #2
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d102      	bne.n	80079bc <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fa02 	bl	8007dc0 <SPI_CloseRx_ISR>
  }
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	4613      	mov	r3, r2
 80079d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079d4:	f7fb fb98 	bl	8003108 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	1a9b      	subs	r3, r3, r2
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	4413      	add	r3, r2
 80079e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079e4:	f7fb fb90 	bl	8003108 <HAL_GetTick>
 80079e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079ea:	4b39      	ldr	r3, [pc, #228]	; (8007ad0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	015b      	lsls	r3, r3, #5
 80079f0:	0d1b      	lsrs	r3, r3, #20
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	fb02 f303 	mul.w	r3, r2, r3
 80079f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079fa:	e054      	b.n	8007aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a02:	d050      	beq.n	8007aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a04:	f7fb fb80 	bl	8003108 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d902      	bls.n	8007a1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d13d      	bne.n	8007a96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a32:	d111      	bne.n	8007a58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3c:	d004      	beq.n	8007a48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a46:	d107      	bne.n	8007a58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a60:	d10f      	bne.n	8007a82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e017      	b.n	8007ac6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	bf0c      	ite	eq
 8007ab6:	2301      	moveq	r3, #1
 8007ab8:	2300      	movne	r3, #0
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d19b      	bne.n	80079fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3720      	adds	r7, #32
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20004b0c 	.word	0x20004b0c

08007ad4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08a      	sub	sp, #40	; 0x28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ae6:	f7fb fb0f 	bl	8003108 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	4413      	add	r3, r2
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007af6:	f7fb fb07 	bl	8003108 <HAL_GetTick>
 8007afa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b04:	4b3d      	ldr	r3, [pc, #244]	; (8007bfc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	00da      	lsls	r2, r3, #3
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	0d1b      	lsrs	r3, r3, #20
 8007b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b16:	fb02 f303 	mul.w	r3, r2, r3
 8007b1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b1c:	e060      	b.n	8007be0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b24:	d107      	bne.n	8007b36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3c:	d050      	beq.n	8007be0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b3e:	f7fb fae3 	bl	8003108 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d902      	bls.n	8007b54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d13d      	bne.n	8007bd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b6c:	d111      	bne.n	8007b92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b76:	d004      	beq.n	8007b82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b80:	d107      	bne.n	8007b92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9a:	d10f      	bne.n	8007bbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e010      	b.n	8007bf2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	4013      	ands	r3, r2
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d196      	bne.n	8007b1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3728      	adds	r7, #40	; 0x28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20004b0c 	.word	0x20004b0c

08007c00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c14:	d111      	bne.n	8007c3a <SPI_EndRxTransaction+0x3a>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c1e:	d004      	beq.n	8007c2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c28:	d107      	bne.n	8007c3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c38:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2200      	movs	r2, #0
 8007c42:	2180      	movs	r1, #128	; 0x80
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff febd 	bl	80079c4 <SPI_WaitFlagStateUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d007      	beq.n	8007c60 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c54:	f043 0220 	orr.w	r2, r3, #32
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e023      	b.n	8007ca8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c68:	d11d      	bne.n	8007ca6 <SPI_EndRxTransaction+0xa6>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c72:	d004      	beq.n	8007c7e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7c:	d113      	bne.n	8007ca6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff ff22 	bl	8007ad4 <SPI_WaitFifoStateUntilTimeout>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9a:	f043 0220 	orr.w	r2, r3, #32
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e000      	b.n	8007ca8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff ff03 	bl	8007ad4 <SPI_WaitFifoStateUntilTimeout>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d007      	beq.n	8007ce4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd8:	f043 0220 	orr.w	r2, r3, #32
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e027      	b.n	8007d34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2200      	movs	r2, #0
 8007cec:	2180      	movs	r1, #128	; 0x80
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff fe68 	bl	80079c4 <SPI_WaitFlagStateUntilTimeout>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfe:	f043 0220 	orr.w	r2, r3, #32
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e014      	b.n	8007d34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff fedc 	bl	8007ad4 <SPI_WaitFifoStateUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d26:	f043 0220 	orr.w	r2, r3, #32
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e000      	b.n	8007d34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d44:	f7fb f9e0 	bl	8003108 <HAL_GetTick>
 8007d48:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0220 	bic.w	r2, r2, #32
 8007d58:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	2164      	movs	r1, #100	; 0x64
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff ffa6 	bl	8007cb0 <SPI_EndRxTxTransaction>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d6e:	f043 0220 	orr.w	r2, r3, #32
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d115      	bne.n	8007daa <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d107      	bne.n	8007d9a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7f9 fe20 	bl	80019d8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007d98:	e00e      	b.n	8007db8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff fc8c 	bl	80076c0 <HAL_SPI_TxRxCpltCallback>
}
 8007da8:	e006      	b.n	8007db8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff fc8e 	bl	80076d4 <HAL_SPI_ErrorCallback>
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007dd6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007dd8:	f7fb f996 	bl	8003108 <HAL_GetTick>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	461a      	mov	r2, r3
 8007de0:	2164      	movs	r1, #100	; 0x64
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff ff0c 	bl	8007c00 <SPI_EndRxTransaction>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df2:	f043 0220 	orr.w	r2, r3, #32
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7f9 fde4 	bl	80019d8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007e10:	e002      	b.n	8007e18 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff fc5e 	bl	80076d4 <HAL_SPI_ErrorCallback>
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e042      	b.n	8007eb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d106      	bne.n	8007e4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7fa ffe5 	bl	8002e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2224      	movs	r2, #36	; 0x24
 8007e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0201 	bic.w	r2, r2, #1
 8007e60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fbb4 	bl	80085d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f8b5 	bl	8007fe0 <UART_SetConfig>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e01b      	b.n	8007eb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f042 0201 	orr.w	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fc33 	bl	800871c <UART_CheckIdleState>
 8007eb6:	4603      	mov	r3, r0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d17c      	bne.n	8007fd4 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_UART_Transmit+0x26>
 8007ee0:	88fb      	ldrh	r3, [r7, #6]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e075      	b.n	8007fd6 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2221      	movs	r2, #33	; 0x21
 8007ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007efa:	f7fb f905 	bl	8003108 <HAL_GetTick>
 8007efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	88fa      	ldrh	r2, [r7, #6]
 8007f04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f18:	d108      	bne.n	8007f2c <HAL_UART_Transmit+0x6c>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	e003      	b.n	8007f34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f34:	e031      	b.n	8007f9a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2180      	movs	r1, #128	; 0x80
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 fc95 	bl	8008870 <UART_WaitOnFlagUntilTimeout>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e03e      	b.n	8007fd6 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10b      	bne.n	8007f76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	881a      	ldrh	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f6a:	b292      	uxth	r2, r2
 8007f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	3302      	adds	r3, #2
 8007f72:	61bb      	str	r3, [r7, #24]
 8007f74:	e008      	b.n	8007f88 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	3301      	adds	r3, #1
 8007f86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1c7      	bne.n	8007f36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2140      	movs	r1, #64	; 0x40
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 fc5d 	bl	8008870 <UART_WaitOnFlagUntilTimeout>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e006      	b.n	8007fd6 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e000      	b.n	8007fd6 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007fd4:	2302      	movs	r3, #2
  }
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fe4:	b08c      	sub	sp, #48	; 0x30
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	431a      	orrs	r2, r3
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	4313      	orrs	r3, r2
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4baa      	ldr	r3, [pc, #680]	; (80082b8 <UART_SetConfig+0x2d8>)
 8008010:	4013      	ands	r3, r2
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	6812      	ldr	r2, [r2, #0]
 8008016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008018:	430b      	orrs	r3, r1
 800801a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a9f      	ldr	r2, [pc, #636]	; (80082bc <UART_SetConfig+0x2dc>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d004      	beq.n	800804c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008048:	4313      	orrs	r3, r2
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008056:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008060:	430b      	orrs	r3, r1
 8008062:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806a:	f023 010f 	bic.w	r1, r3, #15
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a90      	ldr	r2, [pc, #576]	; (80082c0 <UART_SetConfig+0x2e0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d125      	bne.n	80080d0 <UART_SetConfig+0xf0>
 8008084:	4b8f      	ldr	r3, [pc, #572]	; (80082c4 <UART_SetConfig+0x2e4>)
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	2b03      	cmp	r3, #3
 8008090:	d81a      	bhi.n	80080c8 <UART_SetConfig+0xe8>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <UART_SetConfig+0xb8>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080a9 	.word	0x080080a9
 800809c:	080080b9 	.word	0x080080b9
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	2301      	movs	r3, #1
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ae:	e116      	b.n	80082de <UART_SetConfig+0x2fe>
 80080b0:	2302      	movs	r3, #2
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080b6:	e112      	b.n	80082de <UART_SetConfig+0x2fe>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e10e      	b.n	80082de <UART_SetConfig+0x2fe>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e10a      	b.n	80082de <UART_SetConfig+0x2fe>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e106      	b.n	80082de <UART_SetConfig+0x2fe>
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a7c      	ldr	r2, [pc, #496]	; (80082c8 <UART_SetConfig+0x2e8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d138      	bne.n	800814c <UART_SetConfig+0x16c>
 80080da:	4b7a      	ldr	r3, [pc, #488]	; (80082c4 <UART_SetConfig+0x2e4>)
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e0:	f003 030c 	and.w	r3, r3, #12
 80080e4:	2b0c      	cmp	r3, #12
 80080e6:	d82d      	bhi.n	8008144 <UART_SetConfig+0x164>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x110>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008125 	.word	0x08008125
 80080f4:	08008145 	.word	0x08008145
 80080f8:	08008145 	.word	0x08008145
 80080fc:	08008145 	.word	0x08008145
 8008100:	08008135 	.word	0x08008135
 8008104:	08008145 	.word	0x08008145
 8008108:	08008145 	.word	0x08008145
 800810c:	08008145 	.word	0x08008145
 8008110:	0800812d 	.word	0x0800812d
 8008114:	08008145 	.word	0x08008145
 8008118:	08008145 	.word	0x08008145
 800811c:	08008145 	.word	0x08008145
 8008120:	0800813d 	.word	0x0800813d
 8008124:	2300      	movs	r3, #0
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812a:	e0d8      	b.n	80082de <UART_SetConfig+0x2fe>
 800812c:	2302      	movs	r3, #2
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008132:	e0d4      	b.n	80082de <UART_SetConfig+0x2fe>
 8008134:	2304      	movs	r3, #4
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813a:	e0d0      	b.n	80082de <UART_SetConfig+0x2fe>
 800813c:	2308      	movs	r3, #8
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008142:	e0cc      	b.n	80082de <UART_SetConfig+0x2fe>
 8008144:	2310      	movs	r3, #16
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800814a:	e0c8      	b.n	80082de <UART_SetConfig+0x2fe>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a5e      	ldr	r2, [pc, #376]	; (80082cc <UART_SetConfig+0x2ec>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d125      	bne.n	80081a2 <UART_SetConfig+0x1c2>
 8008156:	4b5b      	ldr	r3, [pc, #364]	; (80082c4 <UART_SetConfig+0x2e4>)
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008160:	2b30      	cmp	r3, #48	; 0x30
 8008162:	d016      	beq.n	8008192 <UART_SetConfig+0x1b2>
 8008164:	2b30      	cmp	r3, #48	; 0x30
 8008166:	d818      	bhi.n	800819a <UART_SetConfig+0x1ba>
 8008168:	2b20      	cmp	r3, #32
 800816a:	d00a      	beq.n	8008182 <UART_SetConfig+0x1a2>
 800816c:	2b20      	cmp	r3, #32
 800816e:	d814      	bhi.n	800819a <UART_SetConfig+0x1ba>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <UART_SetConfig+0x19a>
 8008174:	2b10      	cmp	r3, #16
 8008176:	d008      	beq.n	800818a <UART_SetConfig+0x1aa>
 8008178:	e00f      	b.n	800819a <UART_SetConfig+0x1ba>
 800817a:	2300      	movs	r3, #0
 800817c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008180:	e0ad      	b.n	80082de <UART_SetConfig+0x2fe>
 8008182:	2302      	movs	r3, #2
 8008184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008188:	e0a9      	b.n	80082de <UART_SetConfig+0x2fe>
 800818a:	2304      	movs	r3, #4
 800818c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008190:	e0a5      	b.n	80082de <UART_SetConfig+0x2fe>
 8008192:	2308      	movs	r3, #8
 8008194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008198:	e0a1      	b.n	80082de <UART_SetConfig+0x2fe>
 800819a:	2310      	movs	r3, #16
 800819c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a0:	e09d      	b.n	80082de <UART_SetConfig+0x2fe>
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a4a      	ldr	r2, [pc, #296]	; (80082d0 <UART_SetConfig+0x2f0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d125      	bne.n	80081f8 <UART_SetConfig+0x218>
 80081ac:	4b45      	ldr	r3, [pc, #276]	; (80082c4 <UART_SetConfig+0x2e4>)
 80081ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081b6:	2bc0      	cmp	r3, #192	; 0xc0
 80081b8:	d016      	beq.n	80081e8 <UART_SetConfig+0x208>
 80081ba:	2bc0      	cmp	r3, #192	; 0xc0
 80081bc:	d818      	bhi.n	80081f0 <UART_SetConfig+0x210>
 80081be:	2b80      	cmp	r3, #128	; 0x80
 80081c0:	d00a      	beq.n	80081d8 <UART_SetConfig+0x1f8>
 80081c2:	2b80      	cmp	r3, #128	; 0x80
 80081c4:	d814      	bhi.n	80081f0 <UART_SetConfig+0x210>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <UART_SetConfig+0x1f0>
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d008      	beq.n	80081e0 <UART_SetConfig+0x200>
 80081ce:	e00f      	b.n	80081f0 <UART_SetConfig+0x210>
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d6:	e082      	b.n	80082de <UART_SetConfig+0x2fe>
 80081d8:	2302      	movs	r3, #2
 80081da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081de:	e07e      	b.n	80082de <UART_SetConfig+0x2fe>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e6:	e07a      	b.n	80082de <UART_SetConfig+0x2fe>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ee:	e076      	b.n	80082de <UART_SetConfig+0x2fe>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f6:	e072      	b.n	80082de <UART_SetConfig+0x2fe>
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a35      	ldr	r2, [pc, #212]	; (80082d4 <UART_SetConfig+0x2f4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d12a      	bne.n	8008258 <UART_SetConfig+0x278>
 8008202:	4b30      	ldr	r3, [pc, #192]	; (80082c4 <UART_SetConfig+0x2e4>)
 8008204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008210:	d01a      	beq.n	8008248 <UART_SetConfig+0x268>
 8008212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008216:	d81b      	bhi.n	8008250 <UART_SetConfig+0x270>
 8008218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800821c:	d00c      	beq.n	8008238 <UART_SetConfig+0x258>
 800821e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008222:	d815      	bhi.n	8008250 <UART_SetConfig+0x270>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <UART_SetConfig+0x250>
 8008228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822c:	d008      	beq.n	8008240 <UART_SetConfig+0x260>
 800822e:	e00f      	b.n	8008250 <UART_SetConfig+0x270>
 8008230:	2300      	movs	r3, #0
 8008232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008236:	e052      	b.n	80082de <UART_SetConfig+0x2fe>
 8008238:	2302      	movs	r3, #2
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823e:	e04e      	b.n	80082de <UART_SetConfig+0x2fe>
 8008240:	2304      	movs	r3, #4
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008246:	e04a      	b.n	80082de <UART_SetConfig+0x2fe>
 8008248:	2308      	movs	r3, #8
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e046      	b.n	80082de <UART_SetConfig+0x2fe>
 8008250:	2310      	movs	r3, #16
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008256:	e042      	b.n	80082de <UART_SetConfig+0x2fe>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a17      	ldr	r2, [pc, #92]	; (80082bc <UART_SetConfig+0x2dc>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d13a      	bne.n	80082d8 <UART_SetConfig+0x2f8>
 8008262:	4b18      	ldr	r3, [pc, #96]	; (80082c4 <UART_SetConfig+0x2e4>)
 8008264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008268:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800826c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008270:	d01a      	beq.n	80082a8 <UART_SetConfig+0x2c8>
 8008272:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008276:	d81b      	bhi.n	80082b0 <UART_SetConfig+0x2d0>
 8008278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800827c:	d00c      	beq.n	8008298 <UART_SetConfig+0x2b8>
 800827e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008282:	d815      	bhi.n	80082b0 <UART_SetConfig+0x2d0>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <UART_SetConfig+0x2b0>
 8008288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800828c:	d008      	beq.n	80082a0 <UART_SetConfig+0x2c0>
 800828e:	e00f      	b.n	80082b0 <UART_SetConfig+0x2d0>
 8008290:	2300      	movs	r3, #0
 8008292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008296:	e022      	b.n	80082de <UART_SetConfig+0x2fe>
 8008298:	2302      	movs	r3, #2
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829e:	e01e      	b.n	80082de <UART_SetConfig+0x2fe>
 80082a0:	2304      	movs	r3, #4
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a6:	e01a      	b.n	80082de <UART_SetConfig+0x2fe>
 80082a8:	2308      	movs	r3, #8
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ae:	e016      	b.n	80082de <UART_SetConfig+0x2fe>
 80082b0:	2310      	movs	r3, #16
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082b6:	e012      	b.n	80082de <UART_SetConfig+0x2fe>
 80082b8:	cfff69f3 	.word	0xcfff69f3
 80082bc:	40008000 	.word	0x40008000
 80082c0:	40013800 	.word	0x40013800
 80082c4:	40021000 	.word	0x40021000
 80082c8:	40004400 	.word	0x40004400
 80082cc:	40004800 	.word	0x40004800
 80082d0:	40004c00 	.word	0x40004c00
 80082d4:	40005000 	.word	0x40005000
 80082d8:	2310      	movs	r3, #16
 80082da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4aae      	ldr	r2, [pc, #696]	; (800859c <UART_SetConfig+0x5bc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	f040 8097 	bne.w	8008418 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80082ee:	2b08      	cmp	r3, #8
 80082f0:	d823      	bhi.n	800833a <UART_SetConfig+0x35a>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <UART_SetConfig+0x318>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	0800831d 	.word	0x0800831d
 80082fc:	0800833b 	.word	0x0800833b
 8008300:	08008325 	.word	0x08008325
 8008304:	0800833b 	.word	0x0800833b
 8008308:	0800832b 	.word	0x0800832b
 800830c:	0800833b 	.word	0x0800833b
 8008310:	0800833b 	.word	0x0800833b
 8008314:	0800833b 	.word	0x0800833b
 8008318:	08008333 	.word	0x08008333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800831c:	f7fd fbaa 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8008320:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008322:	e010      	b.n	8008346 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008324:	4b9e      	ldr	r3, [pc, #632]	; (80085a0 <UART_SetConfig+0x5c0>)
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008328:	e00d      	b.n	8008346 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800832a:	f7fd fb0b 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 800832e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008330:	e009      	b.n	8008346 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008336:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008338:	e005      	b.n	8008346 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008344:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 8130 	beq.w	80085ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	4a94      	ldr	r2, [pc, #592]	; (80085a4 <UART_SetConfig+0x5c4>)
 8008354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008358:	461a      	mov	r2, r3
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008360:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	4613      	mov	r3, r2
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	4413      	add	r3, r2
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	429a      	cmp	r2, r3
 8008370:	d305      	bcc.n	800837e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	429a      	cmp	r2, r3
 800837c:	d903      	bls.n	8008386 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008384:	e113      	b.n	80085ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	2200      	movs	r2, #0
 800838a:	60bb      	str	r3, [r7, #8]
 800838c:	60fa      	str	r2, [r7, #12]
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	4a84      	ldr	r2, [pc, #528]	; (80085a4 <UART_SetConfig+0x5c4>)
 8008394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008398:	b29b      	uxth	r3, r3
 800839a:	2200      	movs	r2, #0
 800839c:	603b      	str	r3, [r7, #0]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083a8:	f7f7 ff7a 	bl	80002a0 <__aeabi_uldivmod>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4610      	mov	r0, r2
 80083b2:	4619      	mov	r1, r3
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	f04f 0300 	mov.w	r3, #0
 80083bc:	020b      	lsls	r3, r1, #8
 80083be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083c2:	0202      	lsls	r2, r0, #8
 80083c4:	6979      	ldr	r1, [r7, #20]
 80083c6:	6849      	ldr	r1, [r1, #4]
 80083c8:	0849      	lsrs	r1, r1, #1
 80083ca:	2000      	movs	r0, #0
 80083cc:	460c      	mov	r4, r1
 80083ce:	4605      	mov	r5, r0
 80083d0:	eb12 0804 	adds.w	r8, r2, r4
 80083d4:	eb43 0905 	adc.w	r9, r3, r5
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	469a      	mov	sl, r3
 80083e0:	4693      	mov	fp, r2
 80083e2:	4652      	mov	r2, sl
 80083e4:	465b      	mov	r3, fp
 80083e6:	4640      	mov	r0, r8
 80083e8:	4649      	mov	r1, r9
 80083ea:	f7f7 ff59 	bl	80002a0 <__aeabi_uldivmod>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4613      	mov	r3, r2
 80083f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083fc:	d308      	bcc.n	8008410 <UART_SetConfig+0x430>
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008404:	d204      	bcs.n	8008410 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6a3a      	ldr	r2, [r7, #32]
 800840c:	60da      	str	r2, [r3, #12]
 800840e:	e0ce      	b.n	80085ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008416:	e0ca      	b.n	80085ae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008420:	d166      	bne.n	80084f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008426:	2b08      	cmp	r3, #8
 8008428:	d827      	bhi.n	800847a <UART_SetConfig+0x49a>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x450>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008455 	.word	0x08008455
 8008434:	0800845d 	.word	0x0800845d
 8008438:	08008465 	.word	0x08008465
 800843c:	0800847b 	.word	0x0800847b
 8008440:	0800846b 	.word	0x0800846b
 8008444:	0800847b 	.word	0x0800847b
 8008448:	0800847b 	.word	0x0800847b
 800844c:	0800847b 	.word	0x0800847b
 8008450:	08008473 	.word	0x08008473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008454:	f7fd fb0e 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8008458:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800845a:	e014      	b.n	8008486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800845c:	f7fd fb20 	bl	8005aa0 <HAL_RCC_GetPCLK2Freq>
 8008460:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008462:	e010      	b.n	8008486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008464:	4b4e      	ldr	r3, [pc, #312]	; (80085a0 <UART_SetConfig+0x5c0>)
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008468:	e00d      	b.n	8008486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800846a:	f7fd fa6b 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 800846e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008470:	e009      	b.n	8008486 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008478:	e005      	b.n	8008486 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8090 	beq.w	80085ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	4a44      	ldr	r2, [pc, #272]	; (80085a4 <UART_SetConfig+0x5c4>)
 8008494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008498:	461a      	mov	r2, r3
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	fbb3 f3f2 	udiv	r3, r3, r2
 80084a0:	005a      	lsls	r2, r3, #1
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	441a      	add	r2, r3
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	2b0f      	cmp	r3, #15
 80084b8:	d916      	bls.n	80084e8 <UART_SetConfig+0x508>
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c0:	d212      	bcs.n	80084e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f023 030f 	bic.w	r3, r3, #15
 80084ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	085b      	lsrs	r3, r3, #1
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	8bfb      	ldrh	r3, [r7, #30]
 80084da:	4313      	orrs	r3, r2
 80084dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	8bfa      	ldrh	r2, [r7, #30]
 80084e4:	60da      	str	r2, [r3, #12]
 80084e6:	e062      	b.n	80085ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80084ee:	e05e      	b.n	80085ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d828      	bhi.n	800854a <UART_SetConfig+0x56a>
 80084f8:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <UART_SetConfig+0x520>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	08008525 	.word	0x08008525
 8008504:	0800852d 	.word	0x0800852d
 8008508:	08008535 	.word	0x08008535
 800850c:	0800854b 	.word	0x0800854b
 8008510:	0800853b 	.word	0x0800853b
 8008514:	0800854b 	.word	0x0800854b
 8008518:	0800854b 	.word	0x0800854b
 800851c:	0800854b 	.word	0x0800854b
 8008520:	08008543 	.word	0x08008543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008524:	f7fd faa6 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8008528:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800852a:	e014      	b.n	8008556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800852c:	f7fd fab8 	bl	8005aa0 <HAL_RCC_GetPCLK2Freq>
 8008530:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008532:	e010      	b.n	8008556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008534:	4b1a      	ldr	r3, [pc, #104]	; (80085a0 <UART_SetConfig+0x5c0>)
 8008536:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008538:	e00d      	b.n	8008556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800853a:	f7fd fa03 	bl	8005944 <HAL_RCC_GetSysClockFreq>
 800853e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008540:	e009      	b.n	8008556 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008548:	e005      	b.n	8008556 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008554:	bf00      	nop
    }

    if (pclk != 0U)
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	d028      	beq.n	80085ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	4a10      	ldr	r2, [pc, #64]	; (80085a4 <UART_SetConfig+0x5c4>)
 8008562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008566:	461a      	mov	r2, r3
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	fbb3 f2f2 	udiv	r2, r3, r2
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	441a      	add	r2, r3
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	fbb2 f3f3 	udiv	r3, r2, r3
 800857e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	2b0f      	cmp	r3, #15
 8008584:	d910      	bls.n	80085a8 <UART_SetConfig+0x5c8>
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858c:	d20c      	bcs.n	80085a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	b29a      	uxth	r2, r3
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60da      	str	r2, [r3, #12]
 8008598:	e009      	b.n	80085ae <UART_SetConfig+0x5ce>
 800859a:	bf00      	nop
 800859c:	40008000 	.word	0x40008000
 80085a0:	00f42400 	.word	0x00f42400
 80085a4:	0800967c 	.word	0x0800967c
      }
      else
      {
        ret = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2200      	movs	r2, #0
 80085c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2200      	movs	r2, #0
 80085c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80085ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3730      	adds	r7, #48	; 0x30
 80085d2:	46bd      	mov	sp, r7
 80085d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080085d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	430a      	orrs	r2, r1
 8008622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00a      	beq.n	8008646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00a      	beq.n	8008668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	430a      	orrs	r2, r1
 8008666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01a      	beq.n	80086ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086d6:	d10a      	bne.n	80086ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	605a      	str	r2, [r3, #4]
  }
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b098      	sub	sp, #96	; 0x60
 8008720:	af02      	add	r7, sp, #8
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800872c:	f7fa fcec 	bl	8003108 <HAL_GetTick>
 8008730:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0308 	and.w	r3, r3, #8
 800873c:	2b08      	cmp	r3, #8
 800873e:	d12f      	bne.n	80087a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008748:	2200      	movs	r2, #0
 800874a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f88e 	bl	8008870 <UART_WaitOnFlagUntilTimeout>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d022      	beq.n	80087a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800876e:	653b      	str	r3, [r7, #80]	; 0x50
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008778:	647b      	str	r3, [r7, #68]	; 0x44
 800877a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800877e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e6      	bne.n	800875a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e063      	b.n	8008868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0304 	and.w	r3, r3, #4
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d149      	bne.n	8008842 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087b6:	2200      	movs	r2, #0
 80087b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f857 	bl	8008870 <UART_WaitOnFlagUntilTimeout>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d03c      	beq.n	8008842 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	623b      	str	r3, [r7, #32]
   return(result);
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e6:	633b      	str	r3, [r7, #48]	; 0x30
 80087e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e6      	bne.n	80087c8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3308      	adds	r3, #8
 8008800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	60fb      	str	r3, [r7, #12]
   return(result);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f023 0301 	bic.w	r3, r3, #1
 8008810:	64bb      	str	r3, [r7, #72]	; 0x48
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800881a:	61fa      	str	r2, [r7, #28]
 800881c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881e:	69b9      	ldr	r1, [r7, #24]
 8008820:	69fa      	ldr	r2, [r7, #28]
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	617b      	str	r3, [r7, #20]
   return(result);
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e5      	bne.n	80087fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e012      	b.n	8008868 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2220      	movs	r2, #32
 800884e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3758      	adds	r7, #88	; 0x58
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	4613      	mov	r3, r2
 800887e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008880:	e049      	b.n	8008916 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d045      	beq.n	8008916 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800888a:	f7fa fc3d 	bl	8003108 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	429a      	cmp	r2, r3
 8008898:	d302      	bcc.n	80088a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e048      	b.n	8008936 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d031      	beq.n	8008916 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d110      	bne.n	80088e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2208      	movs	r2, #8
 80088c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f838 	bl	800893e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2208      	movs	r2, #8
 80088d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e029      	b.n	8008936 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69db      	ldr	r3, [r3, #28]
 80088e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f0:	d111      	bne.n	8008916 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f000 f81e 	bl	800893e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e00f      	b.n	8008936 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69da      	ldr	r2, [r3, #28]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4013      	ands	r3, r2
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	429a      	cmp	r2, r3
 8008924:	bf0c      	ite	eq
 8008926:	2301      	moveq	r3, #1
 8008928:	2300      	movne	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	461a      	mov	r2, r3
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	429a      	cmp	r2, r3
 8008932:	d0a6      	beq.n	8008882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800893e:	b480      	push	{r7}
 8008940:	b095      	sub	sp, #84	; 0x54
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894e:	e853 3f00 	ldrex	r3, [r3]
 8008952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800895a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008964:	643b      	str	r3, [r7, #64]	; 0x40
 8008966:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800896a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800896c:	e841 2300 	strex	r3, r2, [r1]
 8008970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e6      	bne.n	8008946 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3308      	adds	r3, #8
 800897e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	61fb      	str	r3, [r7, #28]
   return(result);
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800898e:	f023 0301 	bic.w	r3, r3, #1
 8008992:	64bb      	str	r3, [r7, #72]	; 0x48
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3308      	adds	r3, #8
 800899a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800899c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800899e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e3      	bne.n	8008978 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d118      	bne.n	80089ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f023 0310 	bic.w	r3, r3, #16
 80089cc:	647b      	str	r3, [r7, #68]	; 0x44
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	461a      	mov	r2, r3
 80089d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d6:	61bb      	str	r3, [r7, #24]
 80089d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6979      	ldr	r1, [r7, #20]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	613b      	str	r3, [r7, #16]
   return(result);
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e6      	bne.n	80089b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2220      	movs	r2, #32
 80089ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80089fe:	bf00      	nop
 8008a00:	3754      	adds	r7, #84	; 0x54
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b085      	sub	sp, #20
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e027      	b.n	8008a70 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2224      	movs	r2, #36	; 0x24
 8008a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0201 	bic.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e02d      	b.n	8008af0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2224      	movs	r2, #36	; 0x24
 8008aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0201 	bic.w	r2, r2, #1
 8008aba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f84f 	bl	8008b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e02d      	b.n	8008b6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2224      	movs	r2, #36	; 0x24
 8008b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f811 	bl	8008b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d108      	bne.n	8008b96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b94:	e031      	b.n	8008bfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b96:	2308      	movs	r3, #8
 8008b98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b9a:	2308      	movs	r3, #8
 8008b9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	0e5b      	lsrs	r3, r3, #25
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	0f5b      	lsrs	r3, r3, #29
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	7b3a      	ldrb	r2, [r7, #12]
 8008bc2:	4911      	ldr	r1, [pc, #68]	; (8008c08 <UARTEx_SetNbDataToProcess+0x94>)
 8008bc4:	5c8a      	ldrb	r2, [r1, r2]
 8008bc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bca:	7b3a      	ldrb	r2, [r7, #12]
 8008bcc:	490f      	ldr	r1, [pc, #60]	; (8008c0c <UARTEx_SetNbDataToProcess+0x98>)
 8008bce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	7b7a      	ldrb	r2, [r7, #13]
 8008be0:	4909      	ldr	r1, [pc, #36]	; (8008c08 <UARTEx_SetNbDataToProcess+0x94>)
 8008be2:	5c8a      	ldrb	r2, [r1, r2]
 8008be4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008be8:	7b7a      	ldrb	r2, [r7, #13]
 8008bea:	4908      	ldr	r1, [pc, #32]	; (8008c0c <UARTEx_SetNbDataToProcess+0x98>)
 8008bec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bfa:	bf00      	nop
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	08009694 	.word	0x08009694
 8008c0c:	0800969c 	.word	0x0800969c

08008c10 <siprintf>:
 8008c10:	b40e      	push	{r1, r2, r3}
 8008c12:	b500      	push	{lr}
 8008c14:	b09c      	sub	sp, #112	; 0x70
 8008c16:	ab1d      	add	r3, sp, #116	; 0x74
 8008c18:	9002      	str	r0, [sp, #8]
 8008c1a:	9006      	str	r0, [sp, #24]
 8008c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c20:	4809      	ldr	r0, [pc, #36]	; (8008c48 <siprintf+0x38>)
 8008c22:	9107      	str	r1, [sp, #28]
 8008c24:	9104      	str	r1, [sp, #16]
 8008c26:	4909      	ldr	r1, [pc, #36]	; (8008c4c <siprintf+0x3c>)
 8008c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c2c:	9105      	str	r1, [sp, #20]
 8008c2e:	6800      	ldr	r0, [r0, #0]
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	a902      	add	r1, sp, #8
 8008c34:	f000 f992 	bl	8008f5c <_svfiprintf_r>
 8008c38:	9b02      	ldr	r3, [sp, #8]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	b01c      	add	sp, #112	; 0x70
 8008c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c44:	b003      	add	sp, #12
 8008c46:	4770      	bx	lr
 8008c48:	20004b64 	.word	0x20004b64
 8008c4c:	ffff0208 	.word	0xffff0208

08008c50 <memset>:
 8008c50:	4402      	add	r2, r0
 8008c52:	4603      	mov	r3, r0
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d100      	bne.n	8008c5a <memset+0xa>
 8008c58:	4770      	bx	lr
 8008c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c5e:	e7f9      	b.n	8008c54 <memset+0x4>

08008c60 <__errno>:
 8008c60:	4b01      	ldr	r3, [pc, #4]	; (8008c68 <__errno+0x8>)
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20004b64 	.word	0x20004b64

08008c6c <__libc_init_array>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	4d0d      	ldr	r5, [pc, #52]	; (8008ca4 <__libc_init_array+0x38>)
 8008c70:	4c0d      	ldr	r4, [pc, #52]	; (8008ca8 <__libc_init_array+0x3c>)
 8008c72:	1b64      	subs	r4, r4, r5
 8008c74:	10a4      	asrs	r4, r4, #2
 8008c76:	2600      	movs	r6, #0
 8008c78:	42a6      	cmp	r6, r4
 8008c7a:	d109      	bne.n	8008c90 <__libc_init_array+0x24>
 8008c7c:	4d0b      	ldr	r5, [pc, #44]	; (8008cac <__libc_init_array+0x40>)
 8008c7e:	4c0c      	ldr	r4, [pc, #48]	; (8008cb0 <__libc_init_array+0x44>)
 8008c80:	f000 fc6a 	bl	8009558 <_init>
 8008c84:	1b64      	subs	r4, r4, r5
 8008c86:	10a4      	asrs	r4, r4, #2
 8008c88:	2600      	movs	r6, #0
 8008c8a:	42a6      	cmp	r6, r4
 8008c8c:	d105      	bne.n	8008c9a <__libc_init_array+0x2e>
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c94:	4798      	blx	r3
 8008c96:	3601      	adds	r6, #1
 8008c98:	e7ee      	b.n	8008c78 <__libc_init_array+0xc>
 8008c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9e:	4798      	blx	r3
 8008ca0:	3601      	adds	r6, #1
 8008ca2:	e7f2      	b.n	8008c8a <__libc_init_array+0x1e>
 8008ca4:	080096e0 	.word	0x080096e0
 8008ca8:	080096e0 	.word	0x080096e0
 8008cac:	080096e0 	.word	0x080096e0
 8008cb0:	080096e4 	.word	0x080096e4

08008cb4 <__retarget_lock_acquire_recursive>:
 8008cb4:	4770      	bx	lr

08008cb6 <__retarget_lock_release_recursive>:
 8008cb6:	4770      	bx	lr

08008cb8 <_free_r>:
 8008cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cba:	2900      	cmp	r1, #0
 8008cbc:	d044      	beq.n	8008d48 <_free_r+0x90>
 8008cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cc2:	9001      	str	r0, [sp, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8008cca:	bfb8      	it	lt
 8008ccc:	18e4      	addlt	r4, r4, r3
 8008cce:	f000 f8df 	bl	8008e90 <__malloc_lock>
 8008cd2:	4a1e      	ldr	r2, [pc, #120]	; (8008d4c <_free_r+0x94>)
 8008cd4:	9801      	ldr	r0, [sp, #4]
 8008cd6:	6813      	ldr	r3, [r2, #0]
 8008cd8:	b933      	cbnz	r3, 8008ce8 <_free_r+0x30>
 8008cda:	6063      	str	r3, [r4, #4]
 8008cdc:	6014      	str	r4, [r2, #0]
 8008cde:	b003      	add	sp, #12
 8008ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ce4:	f000 b8da 	b.w	8008e9c <__malloc_unlock>
 8008ce8:	42a3      	cmp	r3, r4
 8008cea:	d908      	bls.n	8008cfe <_free_r+0x46>
 8008cec:	6825      	ldr	r5, [r4, #0]
 8008cee:	1961      	adds	r1, r4, r5
 8008cf0:	428b      	cmp	r3, r1
 8008cf2:	bf01      	itttt	eq
 8008cf4:	6819      	ldreq	r1, [r3, #0]
 8008cf6:	685b      	ldreq	r3, [r3, #4]
 8008cf8:	1949      	addeq	r1, r1, r5
 8008cfa:	6021      	streq	r1, [r4, #0]
 8008cfc:	e7ed      	b.n	8008cda <_free_r+0x22>
 8008cfe:	461a      	mov	r2, r3
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	b10b      	cbz	r3, 8008d08 <_free_r+0x50>
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	d9fa      	bls.n	8008cfe <_free_r+0x46>
 8008d08:	6811      	ldr	r1, [r2, #0]
 8008d0a:	1855      	adds	r5, r2, r1
 8008d0c:	42a5      	cmp	r5, r4
 8008d0e:	d10b      	bne.n	8008d28 <_free_r+0x70>
 8008d10:	6824      	ldr	r4, [r4, #0]
 8008d12:	4421      	add	r1, r4
 8008d14:	1854      	adds	r4, r2, r1
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	6011      	str	r1, [r2, #0]
 8008d1a:	d1e0      	bne.n	8008cde <_free_r+0x26>
 8008d1c:	681c      	ldr	r4, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	6053      	str	r3, [r2, #4]
 8008d22:	440c      	add	r4, r1
 8008d24:	6014      	str	r4, [r2, #0]
 8008d26:	e7da      	b.n	8008cde <_free_r+0x26>
 8008d28:	d902      	bls.n	8008d30 <_free_r+0x78>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	6003      	str	r3, [r0, #0]
 8008d2e:	e7d6      	b.n	8008cde <_free_r+0x26>
 8008d30:	6825      	ldr	r5, [r4, #0]
 8008d32:	1961      	adds	r1, r4, r5
 8008d34:	428b      	cmp	r3, r1
 8008d36:	bf04      	itt	eq
 8008d38:	6819      	ldreq	r1, [r3, #0]
 8008d3a:	685b      	ldreq	r3, [r3, #4]
 8008d3c:	6063      	str	r3, [r4, #4]
 8008d3e:	bf04      	itt	eq
 8008d40:	1949      	addeq	r1, r1, r5
 8008d42:	6021      	streq	r1, [r4, #0]
 8008d44:	6054      	str	r4, [r2, #4]
 8008d46:	e7ca      	b.n	8008cde <_free_r+0x26>
 8008d48:	b003      	add	sp, #12
 8008d4a:	bd30      	pop	{r4, r5, pc}
 8008d4c:	2000b438 	.word	0x2000b438

08008d50 <sbrk_aligned>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	4e0e      	ldr	r6, [pc, #56]	; (8008d8c <sbrk_aligned+0x3c>)
 8008d54:	460c      	mov	r4, r1
 8008d56:	6831      	ldr	r1, [r6, #0]
 8008d58:	4605      	mov	r5, r0
 8008d5a:	b911      	cbnz	r1, 8008d62 <sbrk_aligned+0x12>
 8008d5c:	f000 fba6 	bl	80094ac <_sbrk_r>
 8008d60:	6030      	str	r0, [r6, #0]
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 fba1 	bl	80094ac <_sbrk_r>
 8008d6a:	1c43      	adds	r3, r0, #1
 8008d6c:	d00a      	beq.n	8008d84 <sbrk_aligned+0x34>
 8008d6e:	1cc4      	adds	r4, r0, #3
 8008d70:	f024 0403 	bic.w	r4, r4, #3
 8008d74:	42a0      	cmp	r0, r4
 8008d76:	d007      	beq.n	8008d88 <sbrk_aligned+0x38>
 8008d78:	1a21      	subs	r1, r4, r0
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 fb96 	bl	80094ac <_sbrk_r>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d101      	bne.n	8008d88 <sbrk_aligned+0x38>
 8008d84:	f04f 34ff 	mov.w	r4, #4294967295
 8008d88:	4620      	mov	r0, r4
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
 8008d8c:	2000b43c 	.word	0x2000b43c

08008d90 <_malloc_r>:
 8008d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d94:	1ccd      	adds	r5, r1, #3
 8008d96:	f025 0503 	bic.w	r5, r5, #3
 8008d9a:	3508      	adds	r5, #8
 8008d9c:	2d0c      	cmp	r5, #12
 8008d9e:	bf38      	it	cc
 8008da0:	250c      	movcc	r5, #12
 8008da2:	2d00      	cmp	r5, #0
 8008da4:	4607      	mov	r7, r0
 8008da6:	db01      	blt.n	8008dac <_malloc_r+0x1c>
 8008da8:	42a9      	cmp	r1, r5
 8008daa:	d905      	bls.n	8008db8 <_malloc_r+0x28>
 8008dac:	230c      	movs	r3, #12
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	2600      	movs	r6, #0
 8008db2:	4630      	mov	r0, r6
 8008db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e8c <_malloc_r+0xfc>
 8008dbc:	f000 f868 	bl	8008e90 <__malloc_lock>
 8008dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8008dc4:	461c      	mov	r4, r3
 8008dc6:	bb5c      	cbnz	r4, 8008e20 <_malloc_r+0x90>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	4638      	mov	r0, r7
 8008dcc:	f7ff ffc0 	bl	8008d50 <sbrk_aligned>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	d155      	bne.n	8008e82 <_malloc_r+0xf2>
 8008dd6:	f8d8 4000 	ldr.w	r4, [r8]
 8008dda:	4626      	mov	r6, r4
 8008ddc:	2e00      	cmp	r6, #0
 8008dde:	d145      	bne.n	8008e6c <_malloc_r+0xdc>
 8008de0:	2c00      	cmp	r4, #0
 8008de2:	d048      	beq.n	8008e76 <_malloc_r+0xe6>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	4631      	mov	r1, r6
 8008de8:	4638      	mov	r0, r7
 8008dea:	eb04 0903 	add.w	r9, r4, r3
 8008dee:	f000 fb5d 	bl	80094ac <_sbrk_r>
 8008df2:	4581      	cmp	r9, r0
 8008df4:	d13f      	bne.n	8008e76 <_malloc_r+0xe6>
 8008df6:	6821      	ldr	r1, [r4, #0]
 8008df8:	1a6d      	subs	r5, r5, r1
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f7ff ffa7 	bl	8008d50 <sbrk_aligned>
 8008e02:	3001      	adds	r0, #1
 8008e04:	d037      	beq.n	8008e76 <_malloc_r+0xe6>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	442b      	add	r3, r5
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d038      	beq.n	8008e86 <_malloc_r+0xf6>
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	42a2      	cmp	r2, r4
 8008e18:	d12b      	bne.n	8008e72 <_malloc_r+0xe2>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	e00f      	b.n	8008e40 <_malloc_r+0xb0>
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	1b52      	subs	r2, r2, r5
 8008e24:	d41f      	bmi.n	8008e66 <_malloc_r+0xd6>
 8008e26:	2a0b      	cmp	r2, #11
 8008e28:	d917      	bls.n	8008e5a <_malloc_r+0xca>
 8008e2a:	1961      	adds	r1, r4, r5
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	6025      	str	r5, [r4, #0]
 8008e30:	bf18      	it	ne
 8008e32:	6059      	strne	r1, [r3, #4]
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	bf08      	it	eq
 8008e38:	f8c8 1000 	streq.w	r1, [r8]
 8008e3c:	5162      	str	r2, [r4, r5]
 8008e3e:	604b      	str	r3, [r1, #4]
 8008e40:	4638      	mov	r0, r7
 8008e42:	f104 060b 	add.w	r6, r4, #11
 8008e46:	f000 f829 	bl	8008e9c <__malloc_unlock>
 8008e4a:	f026 0607 	bic.w	r6, r6, #7
 8008e4e:	1d23      	adds	r3, r4, #4
 8008e50:	1af2      	subs	r2, r6, r3
 8008e52:	d0ae      	beq.n	8008db2 <_malloc_r+0x22>
 8008e54:	1b9b      	subs	r3, r3, r6
 8008e56:	50a3      	str	r3, [r4, r2]
 8008e58:	e7ab      	b.n	8008db2 <_malloc_r+0x22>
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	6862      	ldr	r2, [r4, #4]
 8008e5e:	d1dd      	bne.n	8008e1c <_malloc_r+0x8c>
 8008e60:	f8c8 2000 	str.w	r2, [r8]
 8008e64:	e7ec      	b.n	8008e40 <_malloc_r+0xb0>
 8008e66:	4623      	mov	r3, r4
 8008e68:	6864      	ldr	r4, [r4, #4]
 8008e6a:	e7ac      	b.n	8008dc6 <_malloc_r+0x36>
 8008e6c:	4634      	mov	r4, r6
 8008e6e:	6876      	ldr	r6, [r6, #4]
 8008e70:	e7b4      	b.n	8008ddc <_malloc_r+0x4c>
 8008e72:	4613      	mov	r3, r2
 8008e74:	e7cc      	b.n	8008e10 <_malloc_r+0x80>
 8008e76:	230c      	movs	r3, #12
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f000 f80e 	bl	8008e9c <__malloc_unlock>
 8008e80:	e797      	b.n	8008db2 <_malloc_r+0x22>
 8008e82:	6025      	str	r5, [r4, #0]
 8008e84:	e7dc      	b.n	8008e40 <_malloc_r+0xb0>
 8008e86:	605b      	str	r3, [r3, #4]
 8008e88:	deff      	udf	#255	; 0xff
 8008e8a:	bf00      	nop
 8008e8c:	2000b438 	.word	0x2000b438

08008e90 <__malloc_lock>:
 8008e90:	4801      	ldr	r0, [pc, #4]	; (8008e98 <__malloc_lock+0x8>)
 8008e92:	f7ff bf0f 	b.w	8008cb4 <__retarget_lock_acquire_recursive>
 8008e96:	bf00      	nop
 8008e98:	2000b434 	.word	0x2000b434

08008e9c <__malloc_unlock>:
 8008e9c:	4801      	ldr	r0, [pc, #4]	; (8008ea4 <__malloc_unlock+0x8>)
 8008e9e:	f7ff bf0a 	b.w	8008cb6 <__retarget_lock_release_recursive>
 8008ea2:	bf00      	nop
 8008ea4:	2000b434 	.word	0x2000b434

08008ea8 <__ssputs_r>:
 8008ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	688e      	ldr	r6, [r1, #8]
 8008eae:	461f      	mov	r7, r3
 8008eb0:	42be      	cmp	r6, r7
 8008eb2:	680b      	ldr	r3, [r1, #0]
 8008eb4:	4682      	mov	sl, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	4690      	mov	r8, r2
 8008eba:	d82c      	bhi.n	8008f16 <__ssputs_r+0x6e>
 8008ebc:	898a      	ldrh	r2, [r1, #12]
 8008ebe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ec2:	d026      	beq.n	8008f12 <__ssputs_r+0x6a>
 8008ec4:	6965      	ldr	r5, [r4, #20]
 8008ec6:	6909      	ldr	r1, [r1, #16]
 8008ec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ecc:	eba3 0901 	sub.w	r9, r3, r1
 8008ed0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ed4:	1c7b      	adds	r3, r7, #1
 8008ed6:	444b      	add	r3, r9
 8008ed8:	106d      	asrs	r5, r5, #1
 8008eda:	429d      	cmp	r5, r3
 8008edc:	bf38      	it	cc
 8008ede:	461d      	movcc	r5, r3
 8008ee0:	0553      	lsls	r3, r2, #21
 8008ee2:	d527      	bpl.n	8008f34 <__ssputs_r+0x8c>
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	f7ff ff53 	bl	8008d90 <_malloc_r>
 8008eea:	4606      	mov	r6, r0
 8008eec:	b360      	cbz	r0, 8008f48 <__ssputs_r+0xa0>
 8008eee:	6921      	ldr	r1, [r4, #16]
 8008ef0:	464a      	mov	r2, r9
 8008ef2:	f000 faeb 	bl	80094cc <memcpy>
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	6126      	str	r6, [r4, #16]
 8008f04:	6165      	str	r5, [r4, #20]
 8008f06:	444e      	add	r6, r9
 8008f08:	eba5 0509 	sub.w	r5, r5, r9
 8008f0c:	6026      	str	r6, [r4, #0]
 8008f0e:	60a5      	str	r5, [r4, #8]
 8008f10:	463e      	mov	r6, r7
 8008f12:	42be      	cmp	r6, r7
 8008f14:	d900      	bls.n	8008f18 <__ssputs_r+0x70>
 8008f16:	463e      	mov	r6, r7
 8008f18:	6820      	ldr	r0, [r4, #0]
 8008f1a:	4632      	mov	r2, r6
 8008f1c:	4641      	mov	r1, r8
 8008f1e:	f000 faab 	bl	8009478 <memmove>
 8008f22:	68a3      	ldr	r3, [r4, #8]
 8008f24:	1b9b      	subs	r3, r3, r6
 8008f26:	60a3      	str	r3, [r4, #8]
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	4433      	add	r3, r6
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	2000      	movs	r0, #0
 8008f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f34:	462a      	mov	r2, r5
 8008f36:	f000 fad7 	bl	80094e8 <_realloc_r>
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d1e0      	bne.n	8008f02 <__ssputs_r+0x5a>
 8008f40:	6921      	ldr	r1, [r4, #16]
 8008f42:	4650      	mov	r0, sl
 8008f44:	f7ff feb8 	bl	8008cb8 <_free_r>
 8008f48:	230c      	movs	r3, #12
 8008f4a:	f8ca 3000 	str.w	r3, [sl]
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5a:	e7e9      	b.n	8008f30 <__ssputs_r+0x88>

08008f5c <_svfiprintf_r>:
 8008f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f60:	4698      	mov	r8, r3
 8008f62:	898b      	ldrh	r3, [r1, #12]
 8008f64:	061b      	lsls	r3, r3, #24
 8008f66:	b09d      	sub	sp, #116	; 0x74
 8008f68:	4607      	mov	r7, r0
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	d50e      	bpl.n	8008f8e <_svfiprintf_r+0x32>
 8008f70:	690b      	ldr	r3, [r1, #16]
 8008f72:	b963      	cbnz	r3, 8008f8e <_svfiprintf_r+0x32>
 8008f74:	2140      	movs	r1, #64	; 0x40
 8008f76:	f7ff ff0b 	bl	8008d90 <_malloc_r>
 8008f7a:	6028      	str	r0, [r5, #0]
 8008f7c:	6128      	str	r0, [r5, #16]
 8008f7e:	b920      	cbnz	r0, 8008f8a <_svfiprintf_r+0x2e>
 8008f80:	230c      	movs	r3, #12
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	f04f 30ff 	mov.w	r0, #4294967295
 8008f88:	e0d0      	b.n	800912c <_svfiprintf_r+0x1d0>
 8008f8a:	2340      	movs	r3, #64	; 0x40
 8008f8c:	616b      	str	r3, [r5, #20]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9309      	str	r3, [sp, #36]	; 0x24
 8008f92:	2320      	movs	r3, #32
 8008f94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f9c:	2330      	movs	r3, #48	; 0x30
 8008f9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009144 <_svfiprintf_r+0x1e8>
 8008fa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fa6:	f04f 0901 	mov.w	r9, #1
 8008faa:	4623      	mov	r3, r4
 8008fac:	469a      	mov	sl, r3
 8008fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb2:	b10a      	cbz	r2, 8008fb8 <_svfiprintf_r+0x5c>
 8008fb4:	2a25      	cmp	r2, #37	; 0x25
 8008fb6:	d1f9      	bne.n	8008fac <_svfiprintf_r+0x50>
 8008fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8008fbc:	d00b      	beq.n	8008fd6 <_svfiprintf_r+0x7a>
 8008fbe:	465b      	mov	r3, fp
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	f7ff ff6f 	bl	8008ea8 <__ssputs_r>
 8008fca:	3001      	adds	r0, #1
 8008fcc:	f000 80a9 	beq.w	8009122 <_svfiprintf_r+0x1c6>
 8008fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd2:	445a      	add	r2, fp
 8008fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 80a1 	beq.w	8009122 <_svfiprintf_r+0x1c6>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fea:	f10a 0a01 	add.w	sl, sl, #1
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	9307      	str	r3, [sp, #28]
 8008ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ff8:	4654      	mov	r4, sl
 8008ffa:	2205      	movs	r2, #5
 8008ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009000:	4850      	ldr	r0, [pc, #320]	; (8009144 <_svfiprintf_r+0x1e8>)
 8009002:	f7f7 f8fd 	bl	8000200 <memchr>
 8009006:	9a04      	ldr	r2, [sp, #16]
 8009008:	b9d8      	cbnz	r0, 8009042 <_svfiprintf_r+0xe6>
 800900a:	06d0      	lsls	r0, r2, #27
 800900c:	bf44      	itt	mi
 800900e:	2320      	movmi	r3, #32
 8009010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009014:	0711      	lsls	r1, r2, #28
 8009016:	bf44      	itt	mi
 8009018:	232b      	movmi	r3, #43	; 0x2b
 800901a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800901e:	f89a 3000 	ldrb.w	r3, [sl]
 8009022:	2b2a      	cmp	r3, #42	; 0x2a
 8009024:	d015      	beq.n	8009052 <_svfiprintf_r+0xf6>
 8009026:	9a07      	ldr	r2, [sp, #28]
 8009028:	4654      	mov	r4, sl
 800902a:	2000      	movs	r0, #0
 800902c:	f04f 0c0a 	mov.w	ip, #10
 8009030:	4621      	mov	r1, r4
 8009032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009036:	3b30      	subs	r3, #48	; 0x30
 8009038:	2b09      	cmp	r3, #9
 800903a:	d94d      	bls.n	80090d8 <_svfiprintf_r+0x17c>
 800903c:	b1b0      	cbz	r0, 800906c <_svfiprintf_r+0x110>
 800903e:	9207      	str	r2, [sp, #28]
 8009040:	e014      	b.n	800906c <_svfiprintf_r+0x110>
 8009042:	eba0 0308 	sub.w	r3, r0, r8
 8009046:	fa09 f303 	lsl.w	r3, r9, r3
 800904a:	4313      	orrs	r3, r2
 800904c:	9304      	str	r3, [sp, #16]
 800904e:	46a2      	mov	sl, r4
 8009050:	e7d2      	b.n	8008ff8 <_svfiprintf_r+0x9c>
 8009052:	9b03      	ldr	r3, [sp, #12]
 8009054:	1d19      	adds	r1, r3, #4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	9103      	str	r1, [sp, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	bfbb      	ittet	lt
 800905e:	425b      	neglt	r3, r3
 8009060:	f042 0202 	orrlt.w	r2, r2, #2
 8009064:	9307      	strge	r3, [sp, #28]
 8009066:	9307      	strlt	r3, [sp, #28]
 8009068:	bfb8      	it	lt
 800906a:	9204      	strlt	r2, [sp, #16]
 800906c:	7823      	ldrb	r3, [r4, #0]
 800906e:	2b2e      	cmp	r3, #46	; 0x2e
 8009070:	d10c      	bne.n	800908c <_svfiprintf_r+0x130>
 8009072:	7863      	ldrb	r3, [r4, #1]
 8009074:	2b2a      	cmp	r3, #42	; 0x2a
 8009076:	d134      	bne.n	80090e2 <_svfiprintf_r+0x186>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	1d1a      	adds	r2, r3, #4
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	9203      	str	r2, [sp, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	bfb8      	it	lt
 8009084:	f04f 33ff 	movlt.w	r3, #4294967295
 8009088:	3402      	adds	r4, #2
 800908a:	9305      	str	r3, [sp, #20]
 800908c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009154 <_svfiprintf_r+0x1f8>
 8009090:	7821      	ldrb	r1, [r4, #0]
 8009092:	2203      	movs	r2, #3
 8009094:	4650      	mov	r0, sl
 8009096:	f7f7 f8b3 	bl	8000200 <memchr>
 800909a:	b138      	cbz	r0, 80090ac <_svfiprintf_r+0x150>
 800909c:	9b04      	ldr	r3, [sp, #16]
 800909e:	eba0 000a 	sub.w	r0, r0, sl
 80090a2:	2240      	movs	r2, #64	; 0x40
 80090a4:	4082      	lsls	r2, r0
 80090a6:	4313      	orrs	r3, r2
 80090a8:	3401      	adds	r4, #1
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b0:	4825      	ldr	r0, [pc, #148]	; (8009148 <_svfiprintf_r+0x1ec>)
 80090b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090b6:	2206      	movs	r2, #6
 80090b8:	f7f7 f8a2 	bl	8000200 <memchr>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d038      	beq.n	8009132 <_svfiprintf_r+0x1d6>
 80090c0:	4b22      	ldr	r3, [pc, #136]	; (800914c <_svfiprintf_r+0x1f0>)
 80090c2:	bb1b      	cbnz	r3, 800910c <_svfiprintf_r+0x1b0>
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	3307      	adds	r3, #7
 80090c8:	f023 0307 	bic.w	r3, r3, #7
 80090cc:	3308      	adds	r3, #8
 80090ce:	9303      	str	r3, [sp, #12]
 80090d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d2:	4433      	add	r3, r6
 80090d4:	9309      	str	r3, [sp, #36]	; 0x24
 80090d6:	e768      	b.n	8008faa <_svfiprintf_r+0x4e>
 80090d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090dc:	460c      	mov	r4, r1
 80090de:	2001      	movs	r0, #1
 80090e0:	e7a6      	b.n	8009030 <_svfiprintf_r+0xd4>
 80090e2:	2300      	movs	r3, #0
 80090e4:	3401      	adds	r4, #1
 80090e6:	9305      	str	r3, [sp, #20]
 80090e8:	4619      	mov	r1, r3
 80090ea:	f04f 0c0a 	mov.w	ip, #10
 80090ee:	4620      	mov	r0, r4
 80090f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f4:	3a30      	subs	r2, #48	; 0x30
 80090f6:	2a09      	cmp	r2, #9
 80090f8:	d903      	bls.n	8009102 <_svfiprintf_r+0x1a6>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0c6      	beq.n	800908c <_svfiprintf_r+0x130>
 80090fe:	9105      	str	r1, [sp, #20]
 8009100:	e7c4      	b.n	800908c <_svfiprintf_r+0x130>
 8009102:	fb0c 2101 	mla	r1, ip, r1, r2
 8009106:	4604      	mov	r4, r0
 8009108:	2301      	movs	r3, #1
 800910a:	e7f0      	b.n	80090ee <_svfiprintf_r+0x192>
 800910c:	ab03      	add	r3, sp, #12
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	462a      	mov	r2, r5
 8009112:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <_svfiprintf_r+0x1f4>)
 8009114:	a904      	add	r1, sp, #16
 8009116:	4638      	mov	r0, r7
 8009118:	f3af 8000 	nop.w
 800911c:	1c42      	adds	r2, r0, #1
 800911e:	4606      	mov	r6, r0
 8009120:	d1d6      	bne.n	80090d0 <_svfiprintf_r+0x174>
 8009122:	89ab      	ldrh	r3, [r5, #12]
 8009124:	065b      	lsls	r3, r3, #25
 8009126:	f53f af2d 	bmi.w	8008f84 <_svfiprintf_r+0x28>
 800912a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800912c:	b01d      	add	sp, #116	; 0x74
 800912e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009132:	ab03      	add	r3, sp, #12
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	462a      	mov	r2, r5
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <_svfiprintf_r+0x1f4>)
 800913a:	a904      	add	r1, sp, #16
 800913c:	4638      	mov	r0, r7
 800913e:	f000 f879 	bl	8009234 <_printf_i>
 8009142:	e7eb      	b.n	800911c <_svfiprintf_r+0x1c0>
 8009144:	080096a4 	.word	0x080096a4
 8009148:	080096ae 	.word	0x080096ae
 800914c:	00000000 	.word	0x00000000
 8009150:	08008ea9 	.word	0x08008ea9
 8009154:	080096aa 	.word	0x080096aa

08009158 <_printf_common>:
 8009158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800915c:	4616      	mov	r6, r2
 800915e:	4699      	mov	r9, r3
 8009160:	688a      	ldr	r2, [r1, #8]
 8009162:	690b      	ldr	r3, [r1, #16]
 8009164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009168:	4293      	cmp	r3, r2
 800916a:	bfb8      	it	lt
 800916c:	4613      	movlt	r3, r2
 800916e:	6033      	str	r3, [r6, #0]
 8009170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009174:	4607      	mov	r7, r0
 8009176:	460c      	mov	r4, r1
 8009178:	b10a      	cbz	r2, 800917e <_printf_common+0x26>
 800917a:	3301      	adds	r3, #1
 800917c:	6033      	str	r3, [r6, #0]
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	0699      	lsls	r1, r3, #26
 8009182:	bf42      	ittt	mi
 8009184:	6833      	ldrmi	r3, [r6, #0]
 8009186:	3302      	addmi	r3, #2
 8009188:	6033      	strmi	r3, [r6, #0]
 800918a:	6825      	ldr	r5, [r4, #0]
 800918c:	f015 0506 	ands.w	r5, r5, #6
 8009190:	d106      	bne.n	80091a0 <_printf_common+0x48>
 8009192:	f104 0a19 	add.w	sl, r4, #25
 8009196:	68e3      	ldr	r3, [r4, #12]
 8009198:	6832      	ldr	r2, [r6, #0]
 800919a:	1a9b      	subs	r3, r3, r2
 800919c:	42ab      	cmp	r3, r5
 800919e:	dc26      	bgt.n	80091ee <_printf_common+0x96>
 80091a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091a4:	1e13      	subs	r3, r2, #0
 80091a6:	6822      	ldr	r2, [r4, #0]
 80091a8:	bf18      	it	ne
 80091aa:	2301      	movne	r3, #1
 80091ac:	0692      	lsls	r2, r2, #26
 80091ae:	d42b      	bmi.n	8009208 <_printf_common+0xb0>
 80091b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091b4:	4649      	mov	r1, r9
 80091b6:	4638      	mov	r0, r7
 80091b8:	47c0      	blx	r8
 80091ba:	3001      	adds	r0, #1
 80091bc:	d01e      	beq.n	80091fc <_printf_common+0xa4>
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	6922      	ldr	r2, [r4, #16]
 80091c2:	f003 0306 	and.w	r3, r3, #6
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	bf02      	ittt	eq
 80091ca:	68e5      	ldreq	r5, [r4, #12]
 80091cc:	6833      	ldreq	r3, [r6, #0]
 80091ce:	1aed      	subeq	r5, r5, r3
 80091d0:	68a3      	ldr	r3, [r4, #8]
 80091d2:	bf0c      	ite	eq
 80091d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091d8:	2500      	movne	r5, #0
 80091da:	4293      	cmp	r3, r2
 80091dc:	bfc4      	itt	gt
 80091de:	1a9b      	subgt	r3, r3, r2
 80091e0:	18ed      	addgt	r5, r5, r3
 80091e2:	2600      	movs	r6, #0
 80091e4:	341a      	adds	r4, #26
 80091e6:	42b5      	cmp	r5, r6
 80091e8:	d11a      	bne.n	8009220 <_printf_common+0xc8>
 80091ea:	2000      	movs	r0, #0
 80091ec:	e008      	b.n	8009200 <_printf_common+0xa8>
 80091ee:	2301      	movs	r3, #1
 80091f0:	4652      	mov	r2, sl
 80091f2:	4649      	mov	r1, r9
 80091f4:	4638      	mov	r0, r7
 80091f6:	47c0      	blx	r8
 80091f8:	3001      	adds	r0, #1
 80091fa:	d103      	bne.n	8009204 <_printf_common+0xac>
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009204:	3501      	adds	r5, #1
 8009206:	e7c6      	b.n	8009196 <_printf_common+0x3e>
 8009208:	18e1      	adds	r1, r4, r3
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	2030      	movs	r0, #48	; 0x30
 800920e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009212:	4422      	add	r2, r4
 8009214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800921c:	3302      	adds	r3, #2
 800921e:	e7c7      	b.n	80091b0 <_printf_common+0x58>
 8009220:	2301      	movs	r3, #1
 8009222:	4622      	mov	r2, r4
 8009224:	4649      	mov	r1, r9
 8009226:	4638      	mov	r0, r7
 8009228:	47c0      	blx	r8
 800922a:	3001      	adds	r0, #1
 800922c:	d0e6      	beq.n	80091fc <_printf_common+0xa4>
 800922e:	3601      	adds	r6, #1
 8009230:	e7d9      	b.n	80091e6 <_printf_common+0x8e>
	...

08009234 <_printf_i>:
 8009234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009238:	7e0f      	ldrb	r7, [r1, #24]
 800923a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800923c:	2f78      	cmp	r7, #120	; 0x78
 800923e:	4691      	mov	r9, r2
 8009240:	4680      	mov	r8, r0
 8009242:	460c      	mov	r4, r1
 8009244:	469a      	mov	sl, r3
 8009246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800924a:	d807      	bhi.n	800925c <_printf_i+0x28>
 800924c:	2f62      	cmp	r7, #98	; 0x62
 800924e:	d80a      	bhi.n	8009266 <_printf_i+0x32>
 8009250:	2f00      	cmp	r7, #0
 8009252:	f000 80d4 	beq.w	80093fe <_printf_i+0x1ca>
 8009256:	2f58      	cmp	r7, #88	; 0x58
 8009258:	f000 80c0 	beq.w	80093dc <_printf_i+0x1a8>
 800925c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009264:	e03a      	b.n	80092dc <_printf_i+0xa8>
 8009266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800926a:	2b15      	cmp	r3, #21
 800926c:	d8f6      	bhi.n	800925c <_printf_i+0x28>
 800926e:	a101      	add	r1, pc, #4	; (adr r1, 8009274 <_printf_i+0x40>)
 8009270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009274:	080092cd 	.word	0x080092cd
 8009278:	080092e1 	.word	0x080092e1
 800927c:	0800925d 	.word	0x0800925d
 8009280:	0800925d 	.word	0x0800925d
 8009284:	0800925d 	.word	0x0800925d
 8009288:	0800925d 	.word	0x0800925d
 800928c:	080092e1 	.word	0x080092e1
 8009290:	0800925d 	.word	0x0800925d
 8009294:	0800925d 	.word	0x0800925d
 8009298:	0800925d 	.word	0x0800925d
 800929c:	0800925d 	.word	0x0800925d
 80092a0:	080093e5 	.word	0x080093e5
 80092a4:	0800930d 	.word	0x0800930d
 80092a8:	0800939f 	.word	0x0800939f
 80092ac:	0800925d 	.word	0x0800925d
 80092b0:	0800925d 	.word	0x0800925d
 80092b4:	08009407 	.word	0x08009407
 80092b8:	0800925d 	.word	0x0800925d
 80092bc:	0800930d 	.word	0x0800930d
 80092c0:	0800925d 	.word	0x0800925d
 80092c4:	0800925d 	.word	0x0800925d
 80092c8:	080093a7 	.word	0x080093a7
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	1d1a      	adds	r2, r3, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	602a      	str	r2, [r5, #0]
 80092d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092dc:	2301      	movs	r3, #1
 80092de:	e09f      	b.n	8009420 <_printf_i+0x1ec>
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	682b      	ldr	r3, [r5, #0]
 80092e4:	0607      	lsls	r7, r0, #24
 80092e6:	f103 0104 	add.w	r1, r3, #4
 80092ea:	6029      	str	r1, [r5, #0]
 80092ec:	d501      	bpl.n	80092f2 <_printf_i+0xbe>
 80092ee:	681e      	ldr	r6, [r3, #0]
 80092f0:	e003      	b.n	80092fa <_printf_i+0xc6>
 80092f2:	0646      	lsls	r6, r0, #25
 80092f4:	d5fb      	bpl.n	80092ee <_printf_i+0xba>
 80092f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092fa:	2e00      	cmp	r6, #0
 80092fc:	da03      	bge.n	8009306 <_printf_i+0xd2>
 80092fe:	232d      	movs	r3, #45	; 0x2d
 8009300:	4276      	negs	r6, r6
 8009302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009306:	485a      	ldr	r0, [pc, #360]	; (8009470 <_printf_i+0x23c>)
 8009308:	230a      	movs	r3, #10
 800930a:	e012      	b.n	8009332 <_printf_i+0xfe>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	6820      	ldr	r0, [r4, #0]
 8009310:	1d19      	adds	r1, r3, #4
 8009312:	6029      	str	r1, [r5, #0]
 8009314:	0605      	lsls	r5, r0, #24
 8009316:	d501      	bpl.n	800931c <_printf_i+0xe8>
 8009318:	681e      	ldr	r6, [r3, #0]
 800931a:	e002      	b.n	8009322 <_printf_i+0xee>
 800931c:	0641      	lsls	r1, r0, #25
 800931e:	d5fb      	bpl.n	8009318 <_printf_i+0xe4>
 8009320:	881e      	ldrh	r6, [r3, #0]
 8009322:	4853      	ldr	r0, [pc, #332]	; (8009470 <_printf_i+0x23c>)
 8009324:	2f6f      	cmp	r7, #111	; 0x6f
 8009326:	bf0c      	ite	eq
 8009328:	2308      	moveq	r3, #8
 800932a:	230a      	movne	r3, #10
 800932c:	2100      	movs	r1, #0
 800932e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009332:	6865      	ldr	r5, [r4, #4]
 8009334:	60a5      	str	r5, [r4, #8]
 8009336:	2d00      	cmp	r5, #0
 8009338:	bfa2      	ittt	ge
 800933a:	6821      	ldrge	r1, [r4, #0]
 800933c:	f021 0104 	bicge.w	r1, r1, #4
 8009340:	6021      	strge	r1, [r4, #0]
 8009342:	b90e      	cbnz	r6, 8009348 <_printf_i+0x114>
 8009344:	2d00      	cmp	r5, #0
 8009346:	d04b      	beq.n	80093e0 <_printf_i+0x1ac>
 8009348:	4615      	mov	r5, r2
 800934a:	fbb6 f1f3 	udiv	r1, r6, r3
 800934e:	fb03 6711 	mls	r7, r3, r1, r6
 8009352:	5dc7      	ldrb	r7, [r0, r7]
 8009354:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009358:	4637      	mov	r7, r6
 800935a:	42bb      	cmp	r3, r7
 800935c:	460e      	mov	r6, r1
 800935e:	d9f4      	bls.n	800934a <_printf_i+0x116>
 8009360:	2b08      	cmp	r3, #8
 8009362:	d10b      	bne.n	800937c <_printf_i+0x148>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	07de      	lsls	r6, r3, #31
 8009368:	d508      	bpl.n	800937c <_printf_i+0x148>
 800936a:	6923      	ldr	r3, [r4, #16]
 800936c:	6861      	ldr	r1, [r4, #4]
 800936e:	4299      	cmp	r1, r3
 8009370:	bfde      	ittt	le
 8009372:	2330      	movle	r3, #48	; 0x30
 8009374:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009378:	f105 35ff 	addle.w	r5, r5, #4294967295
 800937c:	1b52      	subs	r2, r2, r5
 800937e:	6122      	str	r2, [r4, #16]
 8009380:	f8cd a000 	str.w	sl, [sp]
 8009384:	464b      	mov	r3, r9
 8009386:	aa03      	add	r2, sp, #12
 8009388:	4621      	mov	r1, r4
 800938a:	4640      	mov	r0, r8
 800938c:	f7ff fee4 	bl	8009158 <_printf_common>
 8009390:	3001      	adds	r0, #1
 8009392:	d14a      	bne.n	800942a <_printf_i+0x1f6>
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	b004      	add	sp, #16
 800939a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	f043 0320 	orr.w	r3, r3, #32
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	4833      	ldr	r0, [pc, #204]	; (8009474 <_printf_i+0x240>)
 80093a8:	2778      	movs	r7, #120	; 0x78
 80093aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	6829      	ldr	r1, [r5, #0]
 80093b2:	061f      	lsls	r7, r3, #24
 80093b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80093b8:	d402      	bmi.n	80093c0 <_printf_i+0x18c>
 80093ba:	065f      	lsls	r7, r3, #25
 80093bc:	bf48      	it	mi
 80093be:	b2b6      	uxthmi	r6, r6
 80093c0:	07df      	lsls	r7, r3, #31
 80093c2:	bf48      	it	mi
 80093c4:	f043 0320 	orrmi.w	r3, r3, #32
 80093c8:	6029      	str	r1, [r5, #0]
 80093ca:	bf48      	it	mi
 80093cc:	6023      	strmi	r3, [r4, #0]
 80093ce:	b91e      	cbnz	r6, 80093d8 <_printf_i+0x1a4>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	f023 0320 	bic.w	r3, r3, #32
 80093d6:	6023      	str	r3, [r4, #0]
 80093d8:	2310      	movs	r3, #16
 80093da:	e7a7      	b.n	800932c <_printf_i+0xf8>
 80093dc:	4824      	ldr	r0, [pc, #144]	; (8009470 <_printf_i+0x23c>)
 80093de:	e7e4      	b.n	80093aa <_printf_i+0x176>
 80093e0:	4615      	mov	r5, r2
 80093e2:	e7bd      	b.n	8009360 <_printf_i+0x12c>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	6826      	ldr	r6, [r4, #0]
 80093e8:	6961      	ldr	r1, [r4, #20]
 80093ea:	1d18      	adds	r0, r3, #4
 80093ec:	6028      	str	r0, [r5, #0]
 80093ee:	0635      	lsls	r5, r6, #24
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	d501      	bpl.n	80093f8 <_printf_i+0x1c4>
 80093f4:	6019      	str	r1, [r3, #0]
 80093f6:	e002      	b.n	80093fe <_printf_i+0x1ca>
 80093f8:	0670      	lsls	r0, r6, #25
 80093fa:	d5fb      	bpl.n	80093f4 <_printf_i+0x1c0>
 80093fc:	8019      	strh	r1, [r3, #0]
 80093fe:	2300      	movs	r3, #0
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	4615      	mov	r5, r2
 8009404:	e7bc      	b.n	8009380 <_printf_i+0x14c>
 8009406:	682b      	ldr	r3, [r5, #0]
 8009408:	1d1a      	adds	r2, r3, #4
 800940a:	602a      	str	r2, [r5, #0]
 800940c:	681d      	ldr	r5, [r3, #0]
 800940e:	6862      	ldr	r2, [r4, #4]
 8009410:	2100      	movs	r1, #0
 8009412:	4628      	mov	r0, r5
 8009414:	f7f6 fef4 	bl	8000200 <memchr>
 8009418:	b108      	cbz	r0, 800941e <_printf_i+0x1ea>
 800941a:	1b40      	subs	r0, r0, r5
 800941c:	6060      	str	r0, [r4, #4]
 800941e:	6863      	ldr	r3, [r4, #4]
 8009420:	6123      	str	r3, [r4, #16]
 8009422:	2300      	movs	r3, #0
 8009424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009428:	e7aa      	b.n	8009380 <_printf_i+0x14c>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	462a      	mov	r2, r5
 800942e:	4649      	mov	r1, r9
 8009430:	4640      	mov	r0, r8
 8009432:	47d0      	blx	sl
 8009434:	3001      	adds	r0, #1
 8009436:	d0ad      	beq.n	8009394 <_printf_i+0x160>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	079b      	lsls	r3, r3, #30
 800943c:	d413      	bmi.n	8009466 <_printf_i+0x232>
 800943e:	68e0      	ldr	r0, [r4, #12]
 8009440:	9b03      	ldr	r3, [sp, #12]
 8009442:	4298      	cmp	r0, r3
 8009444:	bfb8      	it	lt
 8009446:	4618      	movlt	r0, r3
 8009448:	e7a6      	b.n	8009398 <_printf_i+0x164>
 800944a:	2301      	movs	r3, #1
 800944c:	4632      	mov	r2, r6
 800944e:	4649      	mov	r1, r9
 8009450:	4640      	mov	r0, r8
 8009452:	47d0      	blx	sl
 8009454:	3001      	adds	r0, #1
 8009456:	d09d      	beq.n	8009394 <_printf_i+0x160>
 8009458:	3501      	adds	r5, #1
 800945a:	68e3      	ldr	r3, [r4, #12]
 800945c:	9903      	ldr	r1, [sp, #12]
 800945e:	1a5b      	subs	r3, r3, r1
 8009460:	42ab      	cmp	r3, r5
 8009462:	dcf2      	bgt.n	800944a <_printf_i+0x216>
 8009464:	e7eb      	b.n	800943e <_printf_i+0x20a>
 8009466:	2500      	movs	r5, #0
 8009468:	f104 0619 	add.w	r6, r4, #25
 800946c:	e7f5      	b.n	800945a <_printf_i+0x226>
 800946e:	bf00      	nop
 8009470:	080096b5 	.word	0x080096b5
 8009474:	080096c6 	.word	0x080096c6

08009478 <memmove>:
 8009478:	4288      	cmp	r0, r1
 800947a:	b510      	push	{r4, lr}
 800947c:	eb01 0402 	add.w	r4, r1, r2
 8009480:	d902      	bls.n	8009488 <memmove+0x10>
 8009482:	4284      	cmp	r4, r0
 8009484:	4623      	mov	r3, r4
 8009486:	d807      	bhi.n	8009498 <memmove+0x20>
 8009488:	1e43      	subs	r3, r0, #1
 800948a:	42a1      	cmp	r1, r4
 800948c:	d008      	beq.n	80094a0 <memmove+0x28>
 800948e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009496:	e7f8      	b.n	800948a <memmove+0x12>
 8009498:	4402      	add	r2, r0
 800949a:	4601      	mov	r1, r0
 800949c:	428a      	cmp	r2, r1
 800949e:	d100      	bne.n	80094a2 <memmove+0x2a>
 80094a0:	bd10      	pop	{r4, pc}
 80094a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094aa:	e7f7      	b.n	800949c <memmove+0x24>

080094ac <_sbrk_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d06      	ldr	r5, [pc, #24]	; (80094c8 <_sbrk_r+0x1c>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	f7f9 fd44 	bl	8002f44 <_sbrk>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_sbrk_r+0x1a>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_sbrk_r+0x1a>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	2000b430 	.word	0x2000b430

080094cc <memcpy>:
 80094cc:	440a      	add	r2, r1
 80094ce:	4291      	cmp	r1, r2
 80094d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80094d4:	d100      	bne.n	80094d8 <memcpy+0xc>
 80094d6:	4770      	bx	lr
 80094d8:	b510      	push	{r4, lr}
 80094da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094e2:	4291      	cmp	r1, r2
 80094e4:	d1f9      	bne.n	80094da <memcpy+0xe>
 80094e6:	bd10      	pop	{r4, pc}

080094e8 <_realloc_r>:
 80094e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ec:	4680      	mov	r8, r0
 80094ee:	4614      	mov	r4, r2
 80094f0:	460e      	mov	r6, r1
 80094f2:	b921      	cbnz	r1, 80094fe <_realloc_r+0x16>
 80094f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f8:	4611      	mov	r1, r2
 80094fa:	f7ff bc49 	b.w	8008d90 <_malloc_r>
 80094fe:	b92a      	cbnz	r2, 800950c <_realloc_r+0x24>
 8009500:	f7ff fbda 	bl	8008cb8 <_free_r>
 8009504:	4625      	mov	r5, r4
 8009506:	4628      	mov	r0, r5
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950c:	f000 f81b 	bl	8009546 <_malloc_usable_size_r>
 8009510:	4284      	cmp	r4, r0
 8009512:	4607      	mov	r7, r0
 8009514:	d802      	bhi.n	800951c <_realloc_r+0x34>
 8009516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800951a:	d812      	bhi.n	8009542 <_realloc_r+0x5a>
 800951c:	4621      	mov	r1, r4
 800951e:	4640      	mov	r0, r8
 8009520:	f7ff fc36 	bl	8008d90 <_malloc_r>
 8009524:	4605      	mov	r5, r0
 8009526:	2800      	cmp	r0, #0
 8009528:	d0ed      	beq.n	8009506 <_realloc_r+0x1e>
 800952a:	42bc      	cmp	r4, r7
 800952c:	4622      	mov	r2, r4
 800952e:	4631      	mov	r1, r6
 8009530:	bf28      	it	cs
 8009532:	463a      	movcs	r2, r7
 8009534:	f7ff ffca 	bl	80094cc <memcpy>
 8009538:	4631      	mov	r1, r6
 800953a:	4640      	mov	r0, r8
 800953c:	f7ff fbbc 	bl	8008cb8 <_free_r>
 8009540:	e7e1      	b.n	8009506 <_realloc_r+0x1e>
 8009542:	4635      	mov	r5, r6
 8009544:	e7df      	b.n	8009506 <_realloc_r+0x1e>

08009546 <_malloc_usable_size_r>:
 8009546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954a:	1f18      	subs	r0, r3, #4
 800954c:	2b00      	cmp	r3, #0
 800954e:	bfbc      	itt	lt
 8009550:	580b      	ldrlt	r3, [r1, r0]
 8009552:	18c0      	addlt	r0, r0, r3
 8009554:	4770      	bx	lr
	...

08009558 <_init>:
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955a:	bf00      	nop
 800955c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955e:	bc08      	pop	{r3}
 8009560:	469e      	mov	lr, r3
 8009562:	4770      	bx	lr

08009564 <_fini>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	bf00      	nop
 8009568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956a:	bc08      	pop	{r3}
 800956c:	469e      	mov	lr, r3
 800956e:	4770      	bx	lr
